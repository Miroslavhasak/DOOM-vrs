
DOOM-vrs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d18  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08002ea8  08002ea8  00003ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003270  08003270  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003270  08003270  00004270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003278  08003278  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003278  08003278  00004278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800327c  0800327c  0000427c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003280  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          000001a0  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001fc  200001fc  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005645  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001680  00000000  00000000  0000a6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f0  00000000  00000000  0000bd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000534  00000000  00000000  0000c448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025d6  00000000  00000000  0000c97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009253  00000000  00000000  0000ef52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fd41  00000000  00000000  000181a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  000b7ee6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fa4  00000000  00000000  000b7f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  000b9f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002e90 	.word	0x08002e90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08002e90 	.word	0x08002e90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 8000288:	4b05      	ldr	r3, [pc, #20]	@ (80002a0 <LL_SYSCFG_EnableFastModePlus+0x20>)
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	4904      	ldr	r1, [pc, #16]	@ (80002a0 <LL_SYSCFG_EnableFastModePlus+0x20>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4313      	orrs	r3, r2
 8000292:	600b      	str	r3, [r1, #0]
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	40010000 	.word	0x40010000

080002a4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	683a      	ldr	r2, [r7, #0]
 80002b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002c8:	4b08      	ldr	r3, [pc, #32]	@ (80002ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ca:	695a      	ldr	r2, [r3, #20]
 80002cc:	4907      	ldr	r1, [pc, #28]	@ (80002ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4313      	orrs	r3, r2
 80002d2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002d4:	4b05      	ldr	r3, [pc, #20]	@ (80002ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002d6:	695a      	ldr	r2, [r3, #20]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4013      	ands	r3, r2
 80002dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002de:	68fb      	ldr	r3, [r7, #12]
}
 80002e0:	bf00      	nop
 80002e2:	3714      	adds	r7, #20
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	40021000 	.word	0x40021000

080002f0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	463b      	mov	r3, r7
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
 80002fc:	605a      	str	r2, [r3, #4]
 80002fe:	609a      	str	r2, [r3, #8]
 8000300:	60da      	str	r2, [r3, #12]
 8000302:	611a      	str	r2, [r3, #16]
 8000304:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000306:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800030a:	f7ff ffd9 	bl	80002c0 <LL_AHB1_GRP1_EnableClock>
	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800030e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000312:	f7ff ffd5 	bl	80002c0 <LL_AHB1_GRP1_EnableClock>
	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000316:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800031a:	f7ff ffd1 	bl	80002c0 <LL_AHB1_GRP1_EnableClock>

	  /**/
	  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4);
 800031e:	2118      	movs	r1, #24
 8000320:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000324:	f7ff ffbe 	bl	80002a4 <LL_GPIO_ResetOutputPin>

	  /**/
	  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6);
 8000328:	2170      	movs	r1, #112	@ 0x70
 800032a:	4821      	ldr	r0, [pc, #132]	@ (80003b0 <MX_GPIO_Init+0xc0>)
 800032c:	f7ff ffba 	bl	80002a4 <LL_GPIO_ResetOutputPin>

	  /**/
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 8000330:	2318      	movs	r3, #24
 8000332:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000334:	2301      	movs	r3, #1
 8000336:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000338:	2300      	movs	r3, #0
 800033a:	60bb      	str	r3, [r7, #8]
	  //GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000344:	463b      	mov	r3, r7
 8000346:	4619      	mov	r1, r3
 8000348:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800034c:	f001 ffa3 	bl	8002296 <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_7;
 8000350:	238b      	movs	r3, #139	@ 0x8b
 8000352:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000354:	2300      	movs	r3, #0
 8000356:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000358:	2300      	movs	r3, #0
 800035a:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035c:	463b      	mov	r3, r7
 800035e:	4619      	mov	r1, r3
 8000360:	4813      	ldr	r0, [pc, #76]	@ (80003b0 <MX_GPIO_Init+0xc0>)
 8000362:	f001 ff98 	bl	8002296 <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 8000366:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800036a:	603b      	str	r3, [r7, #0]
	                          |LL_GPIO_PIN_12;
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800036c:	2300      	movs	r3, #0
 800036e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000374:	463b      	mov	r3, r7
 8000376:	4619      	mov	r1, r3
 8000378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800037c:	f001 ff8b 	bl	8002296 <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6;
 8000380:	2370      	movs	r3, #112	@ 0x70
 8000382:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000384:	2301      	movs	r3, #1
 8000386:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000388:	2300      	movs	r3, #0
 800038a:	60bb      	str	r3, [r7, #8]
	  //GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000390:	2300      	movs	r3, #0
 8000392:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000394:	463b      	mov	r3, r7
 8000396:	4619      	mov	r1, r3
 8000398:	4805      	ldr	r0, [pc, #20]	@ (80003b0 <MX_GPIO_Init+0xc0>)
 800039a:	f001 ff7c 	bl	8002296 <LL_GPIO_Init>

	  /**/
	  LL_SYSCFG_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 800039e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80003a2:	f7ff ff6d 	bl	8000280 <LL_SYSCFG_EnableFastModePlus>

}
 80003a6:	bf00      	nop
 80003a8:	3718      	adds	r7, #24
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	48000400 	.word	0x48000400

080003b4 <lcdReset>:

// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	res_reset();
 80003b8:	f001 fd92 	bl	8001ee0 <res_reset>
	LL_mDelay(100);
 80003bc:	2064      	movs	r0, #100	@ 0x64
 80003be:	f002 f891 	bl	80024e4 <LL_mDelay>

	res_set();
 80003c2:	f001 fd84 	bl	8001ece <res_set>
	LL_mDelay(100);
 80003c6:	2064      	movs	r0, #100	@ 0x64
 80003c8:	f002 f88c 	bl	80024e4 <LL_mDelay>
}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address) //urcuje obsah nasledujucich write data/parameter
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	4603      	mov	r3, r0
 80003d8:	71fb      	strb	r3, [r7, #7]
	cd_reset();
 80003da:	f001 fd67 	bl	8001eac <cd_reset>
	cs_reset();
 80003de:	f001 fd49 	bl	8001e74 <cs_reset>
	readWriteSPI1(address);
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	4618      	mov	r0, r3
 80003e6:	f001 fd11 	bl	8001e0c <readWriteSPI1>
	cs_set();
 80003ea:	f001 fd39 	bl	8001e60 <cs_set>
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <lcdWriteParameter>:

void lcdWriteParameter(int8_t parameter) //tymto sa zapisuju rozne veci
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]
	cd_set();
 8000400:	f001 fd4a 	bl	8001e98 <cd_set>
	cs_reset();
 8000404:	f001 fd36 	bl	8001e74 <cs_reset>
	readWriteSPI1(parameter);
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	4618      	mov	r0, r3
 800040c:	f001 fcfe 	bl	8001e0c <readWriteSPI1>
	cs_set();
 8000410:	f001 fd26 	bl	8001e60 <cs_set>
}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2)  //tymto sa zapisuje farba
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	460a      	mov	r2, r1
 8000426:	71fb      	strb	r3, [r7, #7]
 8000428:	4613      	mov	r3, r2
 800042a:	71bb      	strb	r3, [r7, #6]
	cd_set();
 800042c:	f001 fd34 	bl	8001e98 <cd_set>
	cs_reset();
 8000430:	f001 fd20 	bl	8001e74 <cs_reset>
	readWriteSPI1(dataByte1); //posielame samostatne dva bajty o farbe
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	4618      	mov	r0, r3
 8000438:	f001 fce8 	bl	8001e0c <readWriteSPI1>
	readWriteSPI1(dataByte2);
 800043c:	79bb      	ldrb	r3, [r7, #6]
 800043e:	4618      	mov	r0, r3
 8000440:	f001 fce4 	bl	8001e0c <readWriteSPI1>
	cs_set();
 8000444:	f001 fd0c 	bl	8001e60 <cs_set>
}
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <lcdInitialise>:

void lcdInitialise(uint8_t orientation)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD


	// Hardware reset the LCD
	lcdReset();
 800045a:	f7ff ffab 	bl	80003b4 <lcdReset>

    lcdWriteCommand(EXIT_SLEEP_MODE);
 800045e:	2011      	movs	r0, #17
 8000460:	f7ff ffb6 	bl	80003d0 <lcdWriteCommand>
    LL_mDelay(100); //Delay(10000); // Wait for the screen to wake up
 8000464:	2064      	movs	r0, #100	@ 0x64
 8000466:	f002 f83d 	bl	80024e4 <LL_mDelay>

    lcdWriteCommand(SET_PIXEL_FORMAT);
 800046a:	203a      	movs	r0, #58	@ 0x3a
 800046c:	f7ff ffb0 	bl	80003d0 <lcdWriteCommand>
    lcdWriteParameter(0x05); // 16 bits per pixel
 8000470:	2005      	movs	r0, #5
 8000472:	f7ff ffc0 	bl	80003f6 <lcdWriteParameter>

    lcdWriteCommand(SET_GAMMA_CURVE);
 8000476:	2026      	movs	r0, #38	@ 0x26
 8000478:	f7ff ffaa 	bl	80003d0 <lcdWriteCommand>
    lcdWriteParameter(0x04); // Select gamma curve 3
 800047c:	2004      	movs	r0, #4
 800047e:	f7ff ffba 	bl	80003f6 <lcdWriteParameter>

    lcdWriteCommand(GAM_R_SEL);
 8000482:	20f2      	movs	r0, #242	@ 0xf2
 8000484:	f7ff ffa4 	bl	80003d0 <lcdWriteCommand>
    lcdWriteParameter(0x01); // Gamma adjustment enabled
 8000488:	2001      	movs	r0, #1
 800048a:	f7ff ffb4 	bl	80003f6 <lcdWriteParameter>

    lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 800048e:	20e0      	movs	r0, #224	@ 0xe0
 8000490:	f7ff ff9e 	bl	80003d0 <lcdWriteCommand>
    lcdWriteParameter(0x3f); // 1st Parameter
 8000494:	203f      	movs	r0, #63	@ 0x3f
 8000496:	f7ff ffae 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x25); // 2nd Parameter
 800049a:	2025      	movs	r0, #37	@ 0x25
 800049c:	f7ff ffab 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x1c); // 3rd Parameter
 80004a0:	201c      	movs	r0, #28
 80004a2:	f7ff ffa8 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x1e); // 4th Parameter
 80004a6:	201e      	movs	r0, #30
 80004a8:	f7ff ffa5 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 5th Parameter
 80004ac:	2020      	movs	r0, #32
 80004ae:	f7ff ffa2 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x12); // 6th Parameter
 80004b2:	2012      	movs	r0, #18
 80004b4:	f7ff ff9f 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 7th Parameter
 80004b8:	202a      	movs	r0, #42	@ 0x2a
 80004ba:	f7ff ff9c 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x90); // 8th Parameter
 80004be:	f06f 006f 	mvn.w	r0, #111	@ 0x6f
 80004c2:	f7ff ff98 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x24); // 9th Parameter
 80004c6:	2024      	movs	r0, #36	@ 0x24
 80004c8:	f7ff ff95 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x11); // 10th Parameter
 80004cc:	2011      	movs	r0, #17
 80004ce:	f7ff ff92 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 11th Parameter
 80004d2:	2000      	movs	r0, #0
 80004d4:	f7ff ff8f 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 12th Parameter
 80004d8:	2000      	movs	r0, #0
 80004da:	f7ff ff8c 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 13th Parameter
 80004de:	2000      	movs	r0, #0
 80004e0:	f7ff ff89 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 14th Parameter
 80004e4:	2000      	movs	r0, #0
 80004e6:	f7ff ff86 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 15th Parameter
 80004ea:	2000      	movs	r0, #0
 80004ec:	f7ff ff83 	bl	80003f6 <lcdWriteParameter>

    lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 80004f0:	20e1      	movs	r0, #225	@ 0xe1
 80004f2:	f7ff ff6d 	bl	80003d0 <lcdWriteCommand>
    lcdWriteParameter(0x20); // 1st Parameter
 80004f6:	2020      	movs	r0, #32
 80004f8:	f7ff ff7d 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 2nd Parameter
 80004fc:	2020      	movs	r0, #32
 80004fe:	f7ff ff7a 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 3rd Parameter
 8000502:	2020      	movs	r0, #32
 8000504:	f7ff ff77 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 4th Parameter
 8000508:	2020      	movs	r0, #32
 800050a:	f7ff ff74 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x05); // 5th Parameter
 800050e:	2005      	movs	r0, #5
 8000510:	f7ff ff71 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 6th Parameter
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff ff6e 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x15); // 7th Parameter
 800051a:	2015      	movs	r0, #21
 800051c:	f7ff ff6b 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0xa7); // 8th Parameter
 8000520:	f06f 0058 	mvn.w	r0, #88	@ 0x58
 8000524:	f7ff ff67 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x3d); // 9th Parameter
 8000528:	203d      	movs	r0, #61	@ 0x3d
 800052a:	f7ff ff64 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x18); // 10th Parameter
 800052e:	2018      	movs	r0, #24
 8000530:	f7ff ff61 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x25); // 11th Parameter
 8000534:	2025      	movs	r0, #37	@ 0x25
 8000536:	f7ff ff5e 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 12th Parameter
 800053a:	202a      	movs	r0, #42	@ 0x2a
 800053c:	f7ff ff5b 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 13th Parameter
 8000540:	202b      	movs	r0, #43	@ 0x2b
 8000542:	f7ff ff58 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 14th Parameter
 8000546:	202b      	movs	r0, #43	@ 0x2b
 8000548:	f7ff ff55 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x3a); // 15th Parameter
 800054c:	203a      	movs	r0, #58	@ 0x3a
 800054e:	f7ff ff52 	bl	80003f6 <lcdWriteParameter>

    lcdWriteCommand(FRAME_RATE_CONTROL1);
 8000552:	20b1      	movs	r0, #177	@ 0xb1
 8000554:	f7ff ff3c 	bl	80003d0 <lcdWriteCommand>
    lcdWriteParameter(0x08); // DIVA = 8
 8000558:	2008      	movs	r0, #8
 800055a:	f7ff ff4c 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x08); // VPA = 8
 800055e:	2008      	movs	r0, #8
 8000560:	f7ff ff49 	bl	80003f6 <lcdWriteParameter>

    lcdWriteCommand(DISPLAY_INVERSION);
 8000564:	20b4      	movs	r0, #180	@ 0xb4
 8000566:	f7ff ff33 	bl	80003d0 <lcdWriteCommand>
    lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 800056a:	2007      	movs	r0, #7
 800056c:	f7ff ff43 	bl	80003f6 <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL1);
 8000570:	20c0      	movs	r0, #192	@ 0xc0
 8000572:	f7ff ff2d 	bl	80003d0 <lcdWriteCommand>
    lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 8000576:	200a      	movs	r0, #10
 8000578:	f7ff ff3d 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 800057c:	2002      	movs	r0, #2
 800057e:	f7ff ff3a 	bl	80003f6 <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL2);
 8000582:	20c1      	movs	r0, #193	@ 0xc1
 8000584:	f7ff ff24 	bl	80003d0 <lcdWriteCommand>
    lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 8000588:	2002      	movs	r0, #2
 800058a:	f7ff ff34 	bl	80003f6 <lcdWriteParameter>

    lcdWriteCommand(VCOM_CONTROL1);
 800058e:	20c5      	movs	r0, #197	@ 0xc5
 8000590:	f7ff ff1e 	bl	80003d0 <lcdWriteCommand>
    lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 8000594:	2050      	movs	r0, #80	@ 0x50
 8000596:	f7ff ff2e 	bl	80003f6 <lcdWriteParameter>
    lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 800059a:	205b      	movs	r0, #91	@ 0x5b
 800059c:	f7ff ff2b 	bl	80003f6 <lcdWriteParameter>

    lcdWriteCommand(VCOM_OFFSET_CONTROL);
 80005a0:	20c7      	movs	r0, #199	@ 0xc7
 80005a2:	f7ff ff15 	bl	80003d0 <lcdWriteCommand>
    lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 80005a6:	2040      	movs	r0, #64	@ 0x40
 80005a8:	f7ff ff25 	bl	80003f6 <lcdWriteParameter>

    // here we set orientation for every pixel (first we define addresses)
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 80005ac:	202a      	movs	r0, #42	@ 0x2a
 80005ae:	f7ff ff0f 	bl	80003d0 <lcdWriteCommand>
	lcdWriteParameter(0x00); // X high start byte
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff ff1f 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(0x00); // X low start byte
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff ff1c 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(0x01); // X high end byte
 80005be:	2001      	movs	r0, #1
 80005c0:	f7ff ff19 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(0x3F); // X low end byte - 319
 80005c4:	203f      	movs	r0, #63	@ 0x3f
 80005c6:	f7ff ff16 	bl	80003f6 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS);
 80005ca:	202b      	movs	r0, #43	@ 0x2b
 80005cc:	f7ff ff00 	bl	80003d0 <lcdWriteCommand>
	lcdWriteParameter(0x00); // Y high start byte
 80005d0:	2000      	movs	r0, #0
 80005d2:	f7ff ff10 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(0x00); // Y low start byte
 80005d6:	2000      	movs	r0, #0
 80005d8:	f7ff ff0d 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(0x00); // Y high end byte
 80005dc:	2000      	movs	r0, #0
 80005de:	f7ff ff0a 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(0xEF); // Y low end byte (239, 0x00EF in hex)
 80005e2:	f06f 0010 	mvn.w	r0, #16
 80005e6:	f7ff ff06 	bl	80003f6 <lcdWriteParameter>

	// Select display orientation
    lcdWriteCommand(SET_ADDRESS_MODE);
 80005ea:	2036      	movs	r0, #54	@ 0x36
 80005ec:	f7ff fef0 	bl	80003d0 <lcdWriteCommand>
	lcdWriteParameter(orientation);
 80005f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fefe 	bl	80003f6 <lcdWriteParameter>

	// Set the display to on
    lcdWriteCommand(SET_DISPLAY_ON);
 80005fa:	2029      	movs	r0, #41	@ 0x29
 80005fc:	f7ff fee8 	bl	80003d0 <lcdWriteCommand>
    lcdWriteCommand(WRITE_MEMORY_START);
 8000600:	202c      	movs	r0, #44	@ 0x2c
 8000602:	f7ff fee5 	bl	80003d0 <lcdWriteCommand>
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <lcdClearDisplay>:

// LCD graphics functions -----------------------------------------------------------------------------------

void lcdClearDisplay(uint16_t colour)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	80fb      	strh	r3, [r7, #6]
	uint32_t pixel;

	// Set the column address to 0-319
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 800061a:	202a      	movs	r0, #42	@ 0x2a
 800061c:	f7ff fed8 	bl	80003d0 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff fee8 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff fee5 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(0x01);
 800062c:	2001      	movs	r0, #1
 800062e:	f7ff fee2 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(0x3F);
 8000632:	203f      	movs	r0, #63	@ 0x3f
 8000634:	f7ff fedf 	bl	80003f6 <lcdWriteParameter>

	// Set the page address to 0-239
	lcdWriteCommand(SET_PAGE_ADDRESS);
 8000638:	202b      	movs	r0, #43	@ 0x2b
 800063a:	f7ff fec9 	bl	80003d0 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 800063e:	2000      	movs	r0, #0
 8000640:	f7ff fed9 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8000644:	2000      	movs	r0, #0
 8000646:	f7ff fed6 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff fed3 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(0xEF);
 8000650:	f06f 0010 	mvn.w	r0, #16
 8000654:	f7ff fecf 	bl	80003f6 <lcdWriteParameter>

	// Plot the pixels
	lcdWriteCommand(WRITE_MEMORY_START);
 8000658:	202c      	movs	r0, #44	@ 0x2c
 800065a:	f7ff feb9 	bl	80003d0 <lcdWriteCommand>
	for(pixel = 0; pixel < 76799; pixel++)
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	e00c      	b.n	800067e <lcdClearDisplay+0x6e>
	{
		lcdWriteData(colour >> 8, colour);
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	0a1b      	lsrs	r3, r3, #8
 8000668:	b29b      	uxth	r3, r3
 800066a:	b2db      	uxtb	r3, r3
 800066c:	88fa      	ldrh	r2, [r7, #6]
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff fed2 	bl	800041c <lcdWriteData>
	for(pixel = 0; pixel < 76799; pixel++)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	4a03      	ldr	r2, [pc, #12]	@ (8000690 <lcdClearDisplay+0x80>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d9ee      	bls.n	8000664 <lcdClearDisplay+0x54>
	}

}
 8000686:	bf00      	nop
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	00012bfe 	.word	0x00012bfe

08000694 <lcdFilledRectangle>:
	lcdDottedLine(x0, y0, x1, y0, colour, step);
}

// Draw a filled rectangle
void lcdFilledRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	4604      	mov	r4, r0
 800069c:	4608      	mov	r0, r1
 800069e:	4611      	mov	r1, r2
 80006a0:	461a      	mov	r2, r3
 80006a2:	4623      	mov	r3, r4
 80006a4:	80fb      	strh	r3, [r7, #6]
 80006a6:	4603      	mov	r3, r0
 80006a8:	80bb      	strh	r3, [r7, #4]
 80006aa:	460b      	mov	r3, r1
 80006ac:	807b      	strh	r3, [r7, #2]
 80006ae:	4613      	mov	r3, r2
 80006b0:	803b      	strh	r3, [r7, #0]
	uint32_t pixels;
	int16_t pom = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	817b      	strh	r3, [r7, #10]
	if (x0>x1){	//x1 must be greater than x0
 80006b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80006ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006be:	429a      	cmp	r2, r3
 80006c0:	dd05      	ble.n	80006ce <lcdFilledRectangle+0x3a>
		pom = x0;
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	817b      	strh	r3, [r7, #10]
		x0 = x1;
 80006c6:	887b      	ldrh	r3, [r7, #2]
 80006c8:	80fb      	strh	r3, [r7, #6]
		x1 = pom;
 80006ca:	897b      	ldrh	r3, [r7, #10]
 80006cc:	807b      	strh	r3, [r7, #2]
	}
	if (y0>y1){	//y1 must be greater than y0
 80006ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80006d2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	dd05      	ble.n	80006e6 <lcdFilledRectangle+0x52>
		pom = y0;
 80006da:	88bb      	ldrh	r3, [r7, #4]
 80006dc:	817b      	strh	r3, [r7, #10]
		y0 = y1;
 80006de:	883b      	ldrh	r3, [r7, #0]
 80006e0:	80bb      	strh	r3, [r7, #4]
		y1 = pom;
 80006e2:	897b      	ldrh	r3, [r7, #10]
 80006e4:	803b      	strh	r3, [r7, #0]
	}

	if((y1>0)&&(y0<255)){	//to prevent plotting nonsense
 80006e6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	dd6e      	ble.n	80007cc <lcdFilledRectangle+0x138>
 80006ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006f2:	2bfe      	cmp	r3, #254	@ 0xfe
 80006f4:	dc6a      	bgt.n	80007cc <lcdFilledRectangle+0x138>
		if(y0<0) {	//
 80006f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	da01      	bge.n	8000702 <lcdFilledRectangle+0x6e>
			y0 = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	80bb      	strh	r3, [r7, #4]
		}
		if(y1>255) {
 8000702:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000706:	2bff      	cmp	r3, #255	@ 0xff
 8000708:	dd01      	ble.n	800070e <lcdFilledRectangle+0x7a>
			y1 = 255;
 800070a:	23ff      	movs	r3, #255	@ 0xff
 800070c:	803b      	strh	r3, [r7, #0]
		}
		// To speed up plotting we define a x window with the width of the
		// rectangle and then just output the required number of bytes to
		// fill down to the end point
		lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 800070e:	202a      	movs	r0, #42	@ 0x2a
 8000710:	f7ff fe5e 	bl	80003d0 <lcdWriteCommand>
		lcdWriteParameter(x0 >> 8);
 8000714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000718:	121b      	asrs	r3, r3, #8
 800071a:	b21b      	sxth	r3, r3
 800071c:	b25b      	sxtb	r3, r3
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fe69 	bl	80003f6 <lcdWriteParameter>
		lcdWriteParameter(x0);
 8000724:	88fb      	ldrh	r3, [r7, #6]
 8000726:	b25b      	sxtb	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fe64 	bl	80003f6 <lcdWriteParameter>
		lcdWriteParameter(x1 >> 8);
 800072e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000732:	121b      	asrs	r3, r3, #8
 8000734:	b21b      	sxth	r3, r3
 8000736:	b25b      	sxtb	r3, r3
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fe5c 	bl	80003f6 <lcdWriteParameter>
		lcdWriteParameter(x1);
 800073e:	887b      	ldrh	r3, [r7, #2]
 8000740:	b25b      	sxtb	r3, r3
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fe57 	bl	80003f6 <lcdWriteParameter>

		lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8000748:	202b      	movs	r0, #43	@ 0x2b
 800074a:	f7ff fe41 	bl	80003d0 <lcdWriteCommand>
		lcdWriteParameter(y0 >> 8);
 800074e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000752:	121b      	asrs	r3, r3, #8
 8000754:	b21b      	sxth	r3, r3
 8000756:	b25b      	sxtb	r3, r3
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fe4c 	bl	80003f6 <lcdWriteParameter>
		lcdWriteParameter(y0);
 800075e:	88bb      	ldrh	r3, [r7, #4]
 8000760:	b25b      	sxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fe47 	bl	80003f6 <lcdWriteParameter>
		lcdWriteParameter(y1 >> 8);
 8000768:	f9b7 3000 	ldrsh.w	r3, [r7]
 800076c:	121b      	asrs	r3, r3, #8
 800076e:	b21b      	sxth	r3, r3
 8000770:	b25b      	sxtb	r3, r3
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fe3f 	bl	80003f6 <lcdWriteParameter>
		lcdWriteParameter(y1);
 8000778:	883b      	ldrh	r3, [r7, #0]
 800077a:	b25b      	sxtb	r3, r3
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fe3a 	bl	80003f6 <lcdWriteParameter>

		lcdWriteCommand(WRITE_MEMORY_START);
 8000782:	202c      	movs	r0, #44	@ 0x2c
 8000784:	f7ff fe24 	bl	80003d0 <lcdWriteCommand>
		for (pixels = 0; pixels < (((x1+1) - x0) * ((y1+1) - y0)); pixels++)
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	e00c      	b.n	80007a8 <lcdFilledRectangle+0x114>
				lcdWriteData(colour >> 8, colour);
 800078e:	8c3b      	ldrh	r3, [r7, #32]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	b29b      	uxth	r3, r3
 8000794:	b2db      	uxtb	r3, r3
 8000796:	8c3a      	ldrh	r2, [r7, #32]
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fe3d 	bl	800041c <lcdWriteData>
		for (pixels = 0; pixels < (((x1+1) - x0) * ((y1+1) - y0)); pixels++)
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	3301      	adds	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80007b8:	1c51      	adds	r1, r2, #1
 80007ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80007be:	1a8a      	subs	r2, r1, r2
 80007c0:	fb02 f303 	mul.w	r3, r2, r3
 80007c4:	461a      	mov	r2, r3
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d3e0      	bcc.n	800078e <lcdFilledRectangle+0xfa>
	}
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd90      	pop	{r4, r7, pc}

080007d4 <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, int16_t x, int16_t y, uint16_t fgColour, uint16_t bgColour)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4604      	mov	r4, r0
 80007dc:	4608      	mov	r0, r1
 80007de:	4611      	mov	r1, r2
 80007e0:	461a      	mov	r2, r3
 80007e2:	4623      	mov	r3, r4
 80007e4:	71fb      	strb	r3, [r7, #7]
 80007e6:	4603      	mov	r3, r0
 80007e8:	80bb      	strh	r3, [r7, #4]
 80007ea:	460b      	mov	r3, r1
 80007ec:	807b      	strh	r3, [r7, #2]
 80007ee:	4613      	mov	r3, r2
 80007f0:	803b      	strh	r3, [r7, #0]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 80007f2:	202a      	movs	r0, #42	@ 0x2a
 80007f4:	f7ff fdec 	bl	80003d0 <lcdWriteCommand>
	lcdWriteParameter(x >> 8);
 80007f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007fc:	121b      	asrs	r3, r3, #8
 80007fe:	b21b      	sxth	r3, r3
 8000800:	b25b      	sxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fdf7 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(x);
 8000808:	88bb      	ldrh	r3, [r7, #4]
 800080a:	b25b      	sxtb	r3, r3
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fdf2 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter((x+5) >> 8);
 8000812:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000816:	3305      	adds	r3, #5
 8000818:	121b      	asrs	r3, r3, #8
 800081a:	b25b      	sxtb	r3, r3
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff fdea 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(x+5);
 8000822:	88bb      	ldrh	r3, [r7, #4]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	3305      	adds	r3, #5
 8000828:	b2db      	uxtb	r3, r3
 800082a:	b25b      	sxtb	r3, r3
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fde2 	bl	80003f6 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8000832:	202b      	movs	r0, #43	@ 0x2b
 8000834:	f7ff fdcc 	bl	80003d0 <lcdWriteCommand>
	lcdWriteParameter(y >> 8);
 8000838:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800083c:	121b      	asrs	r3, r3, #8
 800083e:	b21b      	sxth	r3, r3
 8000840:	b25b      	sxtb	r3, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff fdd7 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(y);
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	b25b      	sxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fdd2 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8000852:	2000      	movs	r0, #0
 8000854:	f7ff fdcf 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(0xEF);
 8000858:	f06f 0010 	mvn.w	r0, #16
 800085c:	f7ff fdcb 	bl	80003f6 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8000860:	202c      	movs	r0, #44	@ 0x2c
 8000862:	f7ff fdb5 	bl	80003d0 <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++)
 8000866:	2300      	movs	r3, #0
 8000868:	73fb      	strb	r3, [r7, #15]
 800086a:	e036      	b.n	80008da <lcdPutCh+0x106>
	{
		for (column = 0; column < 6; column++)
 800086c:	2300      	movs	r3, #0
 800086e:	73bb      	strb	r3, [r7, #14]
 8000870:	e02d      	b.n	80008ce <lcdPutCh+0xfa>
		{
			// Calculate the mirrored column index
			uint8_t mirroredColumn = 5 - column;
 8000872:	7bbb      	ldrb	r3, [r7, #14]
 8000874:	f1c3 0305 	rsb	r3, r3, #5
 8000878:	737b      	strb	r3, [r7, #13]
			// Check the bit corresponding to the current row in the mirrored column
			if ((fontus[character][mirroredColumn]) & (1 << row))
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	7b79      	ldrb	r1, [r7, #13]
 800087e:	481b      	ldr	r0, [pc, #108]	@ (80008ec <lcdPutCh+0x118>)
 8000880:	4613      	mov	r3, r2
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	4413      	add	r3, r2
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	4403      	add	r3, r0
 800088a:	440b      	add	r3, r1
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	461a      	mov	r2, r3
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	fa42 f303 	asr.w	r3, r2, r3
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	2b00      	cmp	r3, #0
 800089c:	d00a      	beq.n	80008b4 <lcdPutCh+0xe0>
				lcdWriteData(fgColour >> 8, fgColour);
 800089e:	883b      	ldrh	r3, [r7, #0]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	883a      	ldrh	r2, [r7, #0]
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fdb5 	bl	800041c <lcdWriteData>
 80008b2:	e009      	b.n	80008c8 <lcdPutCh+0xf4>
			else
				lcdWriteData(bgColour >> 8, bgColour);
 80008b4:	8c3b      	ldrh	r3, [r7, #32]
 80008b6:	0a1b      	lsrs	r3, r3, #8
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	8c3a      	ldrh	r2, [r7, #32]
 80008be:	b2d2      	uxtb	r2, r2
 80008c0:	4611      	mov	r1, r2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fdaa 	bl	800041c <lcdWriteData>
		for (column = 0; column < 6; column++)
 80008c8:	7bbb      	ldrb	r3, [r7, #14]
 80008ca:	3301      	adds	r3, #1
 80008cc:	73bb      	strb	r3, [r7, #14]
 80008ce:	7bbb      	ldrb	r3, [r7, #14]
 80008d0:	2b05      	cmp	r3, #5
 80008d2:	d9ce      	bls.n	8000872 <lcdPutCh+0x9e>
	for (row = 0; row < 8; row++)
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	3301      	adds	r3, #1
 80008d8:	73fb      	strb	r3, [r7, #15]
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	2b07      	cmp	r3, #7
 80008de:	d9c5      	bls.n	800086c <lcdPutCh+0x98>
		}
	}
}
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	bf00      	nop
 80008ec:	08002f3c 	.word	0x08002f3c

080008f0 <lcdPutChSized>:

void lcdPutChSized(unsigned char character, int16_t x, int16_t y, uint16_t fgColour, uint16_t bgColour, uint8_t size)
{
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b087      	sub	sp, #28
 80008f4:	af02      	add	r7, sp, #8
 80008f6:	4604      	mov	r4, r0
 80008f8:	4608      	mov	r0, r1
 80008fa:	4611      	mov	r1, r2
 80008fc:	461a      	mov	r2, r3
 80008fe:	4623      	mov	r3, r4
 8000900:	71fb      	strb	r3, [r7, #7]
 8000902:	4603      	mov	r3, r0
 8000904:	80bb      	strh	r3, [r7, #4]
 8000906:	460b      	mov	r3, r1
 8000908:	807b      	strh	r3, [r7, #2]
 800090a:	4613      	mov	r3, r2
 800090c:	803b      	strh	r3, [r7, #0]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 800090e:	202a      	movs	r0, #42	@ 0x2a
 8000910:	f7ff fd5e 	bl	80003d0 <lcdWriteCommand>
	lcdWriteParameter(x >> 8);
 8000914:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000918:	121b      	asrs	r3, r3, #8
 800091a:	b21b      	sxth	r3, r3
 800091c:	b25b      	sxtb	r3, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fd69 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(x);
 8000924:	88bb      	ldrh	r3, [r7, #4]
 8000926:	b25b      	sxtb	r3, r3
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fd64 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter((x+5*size) >> 8);
 800092e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000932:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000936:	4613      	mov	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	440b      	add	r3, r1
 800093e:	121b      	asrs	r3, r3, #8
 8000940:	b25b      	sxtb	r3, r3
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fd57 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(x+5*size);
 8000948:	88bb      	ldrh	r3, [r7, #4]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	0089      	lsls	r1, r1, #2
 8000954:	440b      	add	r3, r1
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4413      	add	r3, r2
 800095a:	b2db      	uxtb	r3, r3
 800095c:	b25b      	sxtb	r3, r3
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fd49 	bl	80003f6 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8000964:	202b      	movs	r0, #43	@ 0x2b
 8000966:	f7ff fd33 	bl	80003d0 <lcdWriteCommand>
	lcdWriteParameter(y >> 8);
 800096a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800096e:	121b      	asrs	r3, r3, #8
 8000970:	b21b      	sxth	r3, r3
 8000972:	b25b      	sxtb	r3, r3
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fd3e 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(y);
 800097a:	887b      	ldrh	r3, [r7, #2]
 800097c:	b25b      	sxtb	r3, r3
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fd39 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8000984:	2000      	movs	r0, #0
 8000986:	f7ff fd36 	bl	80003f6 <lcdWriteParameter>
	lcdWriteParameter(0xEF);
 800098a:	f06f 0010 	mvn.w	r0, #16
 800098e:	f7ff fd32 	bl	80003f6 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8000992:	202c      	movs	r0, #44	@ 0x2c
 8000994:	f7ff fd1c 	bl	80003d0 <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8*size; row+=size)
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]
 800099c:	e067      	b.n	8000a6e <lcdPutChSized+0x17e>
	{
		for (column = 0; column < 6*size; column+=size)
 800099e:	2300      	movs	r3, #0
 80009a0:	73bb      	strb	r3, [r7, #14]
 80009a2:	e056      	b.n	8000a52 <lcdPutChSized+0x162>
		{
			uint8_t mirroredColumn = 5*size - column;
 80009a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80009a8:	461a      	mov	r2, r3
 80009aa:	0092      	lsls	r2, r2, #2
 80009ac:	4413      	add	r3, r2
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	7bbb      	ldrb	r3, [r7, #14]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	737b      	strb	r3, [r7, #13]
			if ((fontus[character][(uint8_t)(mirroredColumn/size)]) & (1 << (uint8_t)(row/size)))
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	7b79      	ldrb	r1, [r7, #13]
 80009ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80009be:	fbb1 f3f3 	udiv	r3, r1, r3
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	4618      	mov	r0, r3
 80009c6:	492f      	ldr	r1, [pc, #188]	@ (8000a84 <lcdPutChSized+0x194>)
 80009c8:	4613      	mov	r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	4413      	add	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	440b      	add	r3, r1
 80009d2:	4403      	add	r3, r0
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	4619      	mov	r1, r3
 80009d8:	7bfa      	ldrb	r2, [r7, #15]
 80009da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	fa41 f303 	asr.w	r3, r1, r3
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d02b      	beq.n	8000a48 <lcdPutChSized+0x158>
				lcdFilledRectangle(x+column, y+row, x+column+size-1, y+row+size-1, fgColour);
 80009f0:	7bbb      	ldrb	r3, [r7, #14]
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	88bb      	ldrh	r3, [r7, #4]
 80009f6:	4413      	add	r3, r2
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	b218      	sxth	r0, r3
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	4413      	add	r3, r2
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	b219      	sxth	r1, r3
 8000a08:	7bbb      	ldrb	r3, [r7, #14]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	88bb      	ldrh	r3, [r7, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	4413      	add	r3, r2
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b21c      	sxth	r4, r3
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	887b      	ldrh	r3, [r7, #2]
 8000a28:	4413      	add	r3, r2
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	4413      	add	r3, r2
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	3b01      	subs	r3, #1
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	b21a      	sxth	r2, r3
 8000a3c:	883b      	ldrh	r3, [r7, #0]
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	4613      	mov	r3, r2
 8000a42:	4622      	mov	r2, r4
 8000a44:	f7ff fe26 	bl	8000694 <lcdFilledRectangle>
		for (column = 0; column < 6*size; column+=size)
 8000a48:	7bba      	ldrb	r2, [r7, #14]
 8000a4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a4e:	4413      	add	r3, r2
 8000a50:	73bb      	strb	r3, [r7, #14]
 8000a52:	7bb9      	ldrb	r1, [r7, #14]
 8000a54:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000a58:	4613      	mov	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	4413      	add	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4299      	cmp	r1, r3
 8000a62:	db9f      	blt.n	80009a4 <lcdPutChSized+0xb4>
	for (row = 0; row < 8*size; row+=size)
 8000a64:	7bfa      	ldrb	r2, [r7, #15]
 8000a66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a6a:	4413      	add	r3, r2
 8000a6c:	73fb      	strb	r3, [r7, #15]
 8000a6e:	7bfa      	ldrb	r2, [r7, #15]
 8000a70:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	429a      	cmp	r2, r3
 8000a78:	db91      	blt.n	800099e <lcdPutChSized+0xae>
		}
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd90      	pop	{r4, r7, pc}
 8000a84:	08002f3c 	.word	0x08002f3c

08000a88 <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	460b      	mov	r3, r1
 8000a94:	71bb      	strb	r3, [r7, #6]
 8000a96:	4613      	mov	r3, r2
 8000a98:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 8000a9a:	797b      	ldrb	r3, [r7, #5]
 8000a9c:	02db      	lsls	r3, r3, #11
 8000a9e:	b21a      	sxth	r2, r3
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	019b      	lsls	r3, r3, #6
 8000aa4:	b21b      	sxth	r3, r3
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	b21a      	sxth	r2, r3
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	b21b      	sxth	r3, r3
 8000ab2:	b29b      	uxth	r3, r3
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <lcdPutS>:
// it easy to place text
uint8_t lcdTextY(uint8_t y) { return y*8; }

// Plot a string of characters to the LCD
void lcdPutS(const char *string, int16_t x, int16_t y, uint16_t fgColour, uint16_t bgColour)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b089      	sub	sp, #36	@ 0x24
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	4608      	mov	r0, r1
 8000aca:	4611      	mov	r1, r2
 8000acc:	461a      	mov	r2, r3
 8000ace:	4603      	mov	r3, r0
 8000ad0:	817b      	strh	r3, [r7, #10]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	813b      	strh	r3, [r7, #8]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	80fb      	strh	r3, [r7, #6]
	int16_t origin = x;
 8000ada:	897b      	ldrh	r3, [r7, #10]
 8000adc:	82bb      	strh	r3, [r7, #20]
	int16_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	82fb      	strh	r3, [r7, #22]
 8000ae2:	e026      	b.n	8000b32 <lcdPutS+0x72>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x < 10)
 8000ae4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ae8:	2b09      	cmp	r3, #9
 8000aea:	dc05      	bgt.n	8000af8 <lcdPutS+0x38>
		{
			x = origin;
 8000aec:	8abb      	ldrh	r3, [r7, #20]
 8000aee:	817b      	strh	r3, [r7, #10]
			y += 8;
 8000af0:	893b      	ldrh	r3, [r7, #8]
 8000af2:	3308      	adds	r3, #8
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	813b      	strh	r3, [r7, #8]
		}

		// If we move past the bottom of the screen just exit
		if (y > 230) break;
 8000af8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000afc:	2be6      	cmp	r3, #230	@ 0xe6
 8000afe:	dc21      	bgt.n	8000b44 <lcdPutS+0x84>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 8000b00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	7818      	ldrb	r0, [r3, #0]
 8000b0a:	88fc      	ldrh	r4, [r7, #6]
 8000b0c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000b10:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000b14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b16:	9300      	str	r3, [sp, #0]
 8000b18:	4623      	mov	r3, r4
 8000b1a:	f7ff fe5b 	bl	80007d4 <lcdPutCh>
		x -= 6;
 8000b1e:	897b      	ldrh	r3, [r7, #10]
 8000b20:	3b06      	subs	r3, #6
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	817b      	strh	r3, [r7, #10]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8000b26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	82fb      	strh	r3, [r7, #22]
 8000b32:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8000b36:	68f8      	ldr	r0, [r7, #12]
 8000b38:	f7ff fb4a 	bl	80001d0 <strlen>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	429c      	cmp	r4, r3
 8000b40:	d3d0      	bcc.n	8000ae4 <lcdPutS+0x24>
	}
}
 8000b42:	e000      	b.n	8000b46 <lcdPutS+0x86>
		if (y > 230) break;
 8000b44:	bf00      	nop
}
 8000b46:	bf00      	nop
 8000b48:	371c      	adds	r7, #28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd90      	pop	{r4, r7, pc}

08000b4e <lcdPutSSized>:

// Plot a string of characters to the LCD
void lcdPutSSized(const char *string, int16_t x, int16_t y, uint16_t fgColour, uint16_t bgColour, uint8_t size)
{
 8000b4e:	b590      	push	{r4, r7, lr}
 8000b50:	b089      	sub	sp, #36	@ 0x24
 8000b52:	af02      	add	r7, sp, #8
 8000b54:	60f8      	str	r0, [r7, #12]
 8000b56:	4608      	mov	r0, r1
 8000b58:	4611      	mov	r1, r2
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	817b      	strh	r3, [r7, #10]
 8000b60:	460b      	mov	r3, r1
 8000b62:	813b      	strh	r3, [r7, #8]
 8000b64:	4613      	mov	r3, r2
 8000b66:	80fb      	strh	r3, [r7, #6]
	x = x-size*6;
 8000b68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	897b      	ldrh	r3, [r7, #10]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	817b      	strh	r3, [r7, #10]
	int16_t origin = x;
 8000b80:	897b      	ldrh	r3, [r7, #10]
 8000b82:	82bb      	strh	r3, [r7, #20]
	int16_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	82fb      	strh	r3, [r7, #22]
 8000b88:	e056      	b.n	8000c38 <lcdPutSSized+0xea>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x < 1*size)
 8000b8a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b92:	429a      	cmp	r2, r3
 8000b94:	da0a      	bge.n	8000bac <lcdPutSSized+0x5e>
		{
			x = origin;
 8000b96:	8abb      	ldrh	r3, [r7, #20]
 8000b98:	817b      	strh	r3, [r7, #10]
			y += 8*size;
 8000b9a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	00db      	lsls	r3, r3, #3
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	893b      	ldrh	r3, [r7, #8]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	813b      	strh	r3, [r7, #8]
		}

		// If we move past the bottom of the screen just exit
		if (y > (239-6*size)) break;
 8000bac:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000bb0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	0092      	lsls	r2, r2, #2
 8000bb8:	1a9b      	subs	r3, r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	33ef      	adds	r3, #239	@ 0xef
 8000bbe:	4299      	cmp	r1, r3
 8000bc0:	dc43      	bgt.n	8000c4a <lcdPutSSized+0xfc>

		// Plot the current character
		lcdPutChSized(string[characterNumber], x, y, fgColour, bgColour, size);
 8000bc2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4413      	add	r3, r2
 8000bca:	7818      	ldrb	r0, [r3, #0]
 8000bcc:	88fc      	ldrh	r4, [r7, #6]
 8000bce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000bd2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000bd6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000bda:	9301      	str	r3, [sp, #4]
 8000bdc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	4623      	mov	r3, r4
 8000be2:	f7ff fe85 	bl	80008f0 <lcdPutChSized>
		if ((x-6*size)>0) x -= 6*size;
 8000be6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000bea:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000bee:	4613      	mov	r3, r2
 8000bf0:	0092      	lsls	r2, r2, #2
 8000bf2:	1a9b      	subs	r3, r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	440b      	add	r3, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	dd0c      	ble.n	8000c16 <lcdPutSSized+0xc8>
 8000bfc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	461a      	mov	r2, r3
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	897b      	ldrh	r3, [r7, #10]
 8000c0e:	4413      	add	r3, r2
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	817b      	strh	r3, [r7, #10]
 8000c14:	e00a      	b.n	8000c2c <lcdPutSSized+0xde>
		else
		{
			x = origin;
 8000c16:	8abb      	ldrh	r3, [r7, #20]
 8000c18:	817b      	strh	r3, [r7, #10]
			y += 8*size;
 8000c1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	893b      	ldrh	r3, [r7, #8]
 8000c26:	4413      	add	r3, r2
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	813b      	strh	r3, [r7, #8]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8000c2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	3301      	adds	r3, #1
 8000c34:	b29b      	uxth	r3, r3
 8000c36:	82fb      	strh	r3, [r7, #22]
 8000c38:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f7ff fac7 	bl	80001d0 <strlen>
 8000c42:	4603      	mov	r3, r0
 8000c44:	429c      	cmp	r4, r3
 8000c46:	d3a0      	bcc.n	8000b8a <lcdPutSSized+0x3c>
		}
	}
}
 8000c48:	e000      	b.n	8000c4c <lcdPutSSized+0xfe>
		if (y > (239-6*size)) break;
 8000c4a:	bf00      	nop
}
 8000c4c:	bf00      	nop
 8000c4e:	371c      	adds	r7, #28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd90      	pop	{r4, r7, pc}

08000c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c70:	4013      	ands	r3, r2
 8000c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c86:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <__NVIC_SetPriorityGrouping+0x44>)
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	60d3      	str	r3, [r2, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <LL_FLASH_SetLatency+0x24>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f023 0207 	bic.w	r2, r3, #7
 8000cac:	4904      	ldr	r1, [pc, #16]	@ (8000cc0 <LL_FLASH_SetLatency+0x24>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	600b      	str	r3, [r1, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	40022000 	.word	0x40022000

08000cc4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <LL_FLASH_GetLatency+0x18>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40022000 	.word	0x40022000

08000ce0 <LL_GPIO_IsInputPinSet>:
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	691a      	ldr	r2, [r3, #16]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	bf0c      	ite	eq
 8000cf8:	2301      	moveq	r3, #1
 8000cfa:	2300      	movne	r3, #0
 8000cfc:	b2db      	uxtb	r3, r3
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d16:	69da      	ldr	r2, [r3, #28]
 8000d18:	4907      	ldr	r1, [pc, #28]	@ (8000d38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d20:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d22:	69da      	ldr	r2, [r3, #28]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4013      	ands	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	40021000 	.word	0x40021000

08000d3c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d44:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d46:	699a      	ldr	r2, [r3, #24]
 8000d48:	4907      	ldr	r1, [pc, #28]	@ (8000d68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d52:	699a      	ldr	r2, [r3, #24]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4013      	ands	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	40021000 	.word	0x40021000

08000d6c <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d106      	bne.n	8000d88 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <LL_SYSTICK_SetClkSource+0x34>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a08      	ldr	r2, [pc, #32]	@ (8000da0 <LL_SYSTICK_SetClkSource+0x34>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8000d86:	e005      	b.n	8000d94 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8000d88:	4b05      	ldr	r3, [pc, #20]	@ (8000da0 <LL_SYSTICK_SetClkSource+0x34>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <LL_SYSTICK_SetClkSource+0x34>)
 8000d8e:	f023 0304 	bic.w	r3, r3, #4
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <LL_RCC_HSI_Enable+0x1c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <LL_RCC_HSI_Enable+0x1c>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <LL_RCC_HSI_IsReady+0x20>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	bf0c      	ite	eq
 8000dd4:	2301      	moveq	r3, #1
 8000dd6:	2300      	movne	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	40021000 	.word	0x40021000

08000de8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000df0:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	4904      	ldr	r1, [pc, #16]	@ (8000e10 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	600b      	str	r3, [r1, #0]
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000

08000e14 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000e1c:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <LL_RCC_SetSysClkSource+0x24>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f023 0203 	bic.w	r2, r3, #3
 8000e24:	4904      	ldr	r1, [pc, #16]	@ (8000e38 <LL_RCC_SetSysClkSource+0x24>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	604b      	str	r3, [r1, #4]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	40021000 	.word	0x40021000

08000e3c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000e40:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <LL_RCC_GetSysClkSource+0x18>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 030c 	and.w	r3, r3, #12
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000

08000e58 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000e60:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <LL_RCC_SetAHBPrescaler+0x24>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e68:	4904      	ldr	r1, [pc, #16]	@ (8000e7c <LL_RCC_SetAHBPrescaler+0x24>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	604b      	str	r3, [r1, #4]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	40021000 	.word	0x40021000

08000e80 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000e90:	4904      	ldr	r1, [pc, #16]	@ (8000ea4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	604b      	str	r3, [r1, #4]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <LL_RCC_SetAPB2Prescaler+0x24>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000eb8:	4904      	ldr	r1, [pc, #16]	@ (8000ecc <LL_RCC_SetAPB2Prescaler+0x24>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	604b      	str	r3, [r1, #4]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	40021000 	.word	0x40021000

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff ff30 	bl	8000d3c <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000edc:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8000ee0:	f7ff ff14 	bl	8000d0c <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f7ff feb5 	bl	8000c54 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f82d 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f7ff f9ff 	bl	80002f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ef2:	f000 ff29 	bl	8001d48 <MX_SPI1_Init>

  initCD_Pin();
 8000ef6:	f000 ffc7 	bl	8001e88 <initCD_Pin>
  initCS_Pin();
 8000efa:	f000 ffab 	bl	8001e54 <initCS_Pin>
  initRES_Pin();
 8000efe:	f000 ffdf 	bl	8001ec0 <initRES_Pin>

  LL_mDelay(1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f001 faee 	bl	80024e4 <LL_mDelay>

  uint8_t buttonD4_val = 1;		//NOT NEEDED NOW
 8000f08:	2301      	movs	r3, #1
 8000f0a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 2 */
  lcdInitialise(LCD_ORIENTATION3);
 8000f0c:	20c0      	movs	r0, #192	@ 0xc0
 8000f0e:	f7ff fa9f 	bl	8000450 <lcdInitialise>
  lcdClearDisplay(decodeRgbValue(0, 0, 0));
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2000      	movs	r0, #0
 8000f18:	f7ff fdb6 	bl	8000a88 <decodeRgbValue>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fb76 	bl	8000610 <lcdClearDisplay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//buttonD4_val = LL_GPIO_ReadInputPort(LL_GPIO_PIN_ALL);

	buttonD4_val = LL_GPIO_IsInputPinSet(GPIOB,GPIO_PIN_4);
 8000f24:	2110      	movs	r1, #16
 8000f26:	4807      	ldr	r0, [pc, #28]	@ (8000f44 <main+0x74>)
 8000f28:	f7ff feda 	bl	8000ce0 <LL_GPIO_IsInputPinSet>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	71fb      	strb	r3, [r7, #7]
	if(buttonD4_val == 0)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f6      	bne.n	8000f24 <main+0x54>
	{
	  menu();
 8000f36:	f000 fb47 	bl	80015c8 <menu>
	  LL_mDelay(300);
 8000f3a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000f3e:	f001 fad1 	bl	80024e4 <LL_mDelay>
	buttonD4_val = LL_GPIO_IsInputPinSet(GPIOB,GPIO_PIN_4);
 8000f42:	e7ef      	b.n	8000f24 <main+0x54>
 8000f44:	48000400 	.word	0x48000400

08000f48 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff fea5 	bl	8000c9c <LL_FLASH_SetLatency>

	  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000f52:	f7ff feb7 	bl	8000cc4 <LL_FLASH_GetLatency>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <SystemClock_Config+0x18>
	  {
	  Error_Handler();
 8000f5c:	f000 f82a 	bl	8000fb4 <Error_Handler>
	  }
	  LL_RCC_HSI_Enable();
 8000f60:	f7ff ff20 	bl	8000da4 <LL_RCC_HSI_Enable>

	   // Wait till HSI is ready
	  while(LL_RCC_HSI_IsReady() != 1)
 8000f64:	bf00      	nop
 8000f66:	f7ff ff2d 	bl	8000dc4 <LL_RCC_HSI_IsReady>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d1fa      	bne.n	8000f66 <SystemClock_Config+0x1e>
	  {

	  }
	  LL_RCC_HSI_SetCalibTrimming(16);
 8000f70:	2010      	movs	r0, #16
 8000f72:	f7ff ff39 	bl	8000de8 <LL_RCC_HSI_SetCalibTrimming>
	  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff ff6e 	bl	8000e58 <LL_RCC_SetAHBPrescaler>
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff ff7f 	bl	8000e80 <LL_RCC_SetAPB1Prescaler>
	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff ff90 	bl	8000ea8 <LL_RCC_SetAPB2Prescaler>
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff ff43 	bl	8000e14 <LL_RCC_SetSysClkSource>

	   // Wait till System clock is ready
	  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ff54 	bl	8000e3c <LL_RCC_GetSysClkSource>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1fa      	bne.n	8000f90 <SystemClock_Config+0x48>
	  {

	  }
	  LL_Init1msTick(8000000);
 8000f9a:	4805      	ldr	r0, [pc, #20]	@ (8000fb0 <SystemClock_Config+0x68>)
 8000f9c:	f001 fa94 	bl	80024c8 <LL_Init1msTick>
	  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8000fa0:	2004      	movs	r0, #4
 8000fa2:	f7ff fee3 	bl	8000d6c <LL_SYSTICK_SetClkSource>
	  LL_SetSystemCoreClock(8000000);
 8000fa6:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <SystemClock_Config+0x68>)
 8000fa8:	f001 fac2 	bl	8002530 <LL_SetSystemCoreClock>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	007a1200 	.word	0x007a1200

08000fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <drawMenu>:
int16_t armor = 0;
char ammoText[16];
char healthText[16];
char armorText[16];

void drawMenu() {
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af02      	add	r7, sp, #8
	lcdPutSSized("DOOM", 250, 0, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),8);
 8000fca:	221f      	movs	r2, #31
 8000fcc:	211f      	movs	r1, #31
 8000fce:	201f      	movs	r0, #31
 8000fd0:	f7ff fd5a 	bl	8000a88 <decodeRgbValue>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461c      	mov	r4, r3
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f7ff fd53 	bl	8000a88 <decodeRgbValue>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	9200      	str	r2, [sp, #0]
 8000fec:	4623      	mov	r3, r4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	21fa      	movs	r1, #250	@ 0xfa
 8000ff2:	4891      	ldr	r0, [pc, #580]	@ (8001238 <drawMenu+0x274>)
 8000ff4:	f7ff fdab 	bl	8000b4e <lcdPutSSized>
	lcdPutSSized("NEW GAME", 205, 64, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8000ff8:	221f      	movs	r2, #31
 8000ffa:	211f      	movs	r1, #31
 8000ffc:	201f      	movs	r0, #31
 8000ffe:	f7ff fd43 	bl	8000a88 <decodeRgbValue>
 8001002:	4603      	mov	r3, r0
 8001004:	461c      	mov	r4, r3
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	2000      	movs	r0, #0
 800100c:	f7ff fd3c 	bl	8000a88 <decodeRgbValue>
 8001010:	4603      	mov	r3, r0
 8001012:	461a      	mov	r2, r3
 8001014:	2302      	movs	r3, #2
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	9200      	str	r2, [sp, #0]
 800101a:	4623      	mov	r3, r4
 800101c:	2240      	movs	r2, #64	@ 0x40
 800101e:	21cd      	movs	r1, #205	@ 0xcd
 8001020:	4886      	ldr	r0, [pc, #536]	@ (800123c <drawMenu+0x278>)
 8001022:	f7ff fd94 	bl	8000b4e <lcdPutSSized>
	lcdPutSSized("OPTIONS", 205, 80, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8001026:	221f      	movs	r2, #31
 8001028:	211f      	movs	r1, #31
 800102a:	201f      	movs	r0, #31
 800102c:	f7ff fd2c 	bl	8000a88 <decodeRgbValue>
 8001030:	4603      	mov	r3, r0
 8001032:	461c      	mov	r4, r3
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	2000      	movs	r0, #0
 800103a:	f7ff fd25 	bl	8000a88 <decodeRgbValue>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	2302      	movs	r3, #2
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	9200      	str	r2, [sp, #0]
 8001048:	4623      	mov	r3, r4
 800104a:	2250      	movs	r2, #80	@ 0x50
 800104c:	21cd      	movs	r1, #205	@ 0xcd
 800104e:	487c      	ldr	r0, [pc, #496]	@ (8001240 <drawMenu+0x27c>)
 8001050:	f7ff fd7d 	bl	8000b4e <lcdPutSSized>
	lcdPutSSized("LOAD GAME", 205, 96, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8001054:	221f      	movs	r2, #31
 8001056:	211f      	movs	r1, #31
 8001058:	201f      	movs	r0, #31
 800105a:	f7ff fd15 	bl	8000a88 <decodeRgbValue>
 800105e:	4603      	mov	r3, r0
 8001060:	461c      	mov	r4, r3
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff fd0e 	bl	8000a88 <decodeRgbValue>
 800106c:	4603      	mov	r3, r0
 800106e:	461a      	mov	r2, r3
 8001070:	2302      	movs	r3, #2
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	9200      	str	r2, [sp, #0]
 8001076:	4623      	mov	r3, r4
 8001078:	2260      	movs	r2, #96	@ 0x60
 800107a:	21cd      	movs	r1, #205	@ 0xcd
 800107c:	4871      	ldr	r0, [pc, #452]	@ (8001244 <drawMenu+0x280>)
 800107e:	f7ff fd66 	bl	8000b4e <lcdPutSSized>
	lcdPutSSized("SAVE GAME", 205, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8001082:	221f      	movs	r2, #31
 8001084:	211f      	movs	r1, #31
 8001086:	201f      	movs	r0, #31
 8001088:	f7ff fcfe 	bl	8000a88 <decodeRgbValue>
 800108c:	4603      	mov	r3, r0
 800108e:	461c      	mov	r4, r3
 8001090:	2200      	movs	r2, #0
 8001092:	2100      	movs	r1, #0
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff fcf7 	bl	8000a88 <decodeRgbValue>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	2302      	movs	r3, #2
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	9200      	str	r2, [sp, #0]
 80010a4:	4623      	mov	r3, r4
 80010a6:	2270      	movs	r2, #112	@ 0x70
 80010a8:	21cd      	movs	r1, #205	@ 0xcd
 80010aa:	4867      	ldr	r0, [pc, #412]	@ (8001248 <drawMenu+0x284>)
 80010ac:	f7ff fd4f 	bl	8000b4e <lcdPutSSized>
	lcdPutSSized("READ THIS!", 205, 128, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80010b0:	221f      	movs	r2, #31
 80010b2:	211f      	movs	r1, #31
 80010b4:	201f      	movs	r0, #31
 80010b6:	f7ff fce7 	bl	8000a88 <decodeRgbValue>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461c      	mov	r4, r3
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff fce0 	bl	8000a88 <decodeRgbValue>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	2302      	movs	r3, #2
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	9200      	str	r2, [sp, #0]
 80010d2:	4623      	mov	r3, r4
 80010d4:	2280      	movs	r2, #128	@ 0x80
 80010d6:	21cd      	movs	r1, #205	@ 0xcd
 80010d8:	485c      	ldr	r0, [pc, #368]	@ (800124c <drawMenu+0x288>)
 80010da:	f7ff fd38 	bl	8000b4e <lcdPutSSized>
	lcdPutSSized("QUIT GAME", 205, 144, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80010de:	221f      	movs	r2, #31
 80010e0:	211f      	movs	r1, #31
 80010e2:	201f      	movs	r0, #31
 80010e4:	f7ff fcd0 	bl	8000a88 <decodeRgbValue>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461c      	mov	r4, r3
 80010ec:	2200      	movs	r2, #0
 80010ee:	2100      	movs	r1, #0
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff fcc9 	bl	8000a88 <decodeRgbValue>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	2302      	movs	r3, #2
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	9200      	str	r2, [sp, #0]
 8001100:	4623      	mov	r3, r4
 8001102:	2290      	movs	r2, #144	@ 0x90
 8001104:	21cd      	movs	r1, #205	@ 0xcd
 8001106:	4852      	ldr	r0, [pc, #328]	@ (8001250 <drawMenu+0x28c>)
 8001108:	f7ff fd21 	bl	8000b4e <lcdPutSSized>

	lcdPutS("AMMO", 305, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 800110c:	221f      	movs	r2, #31
 800110e:	211f      	movs	r1, #31
 8001110:	201f      	movs	r0, #31
 8001112:	f7ff fcb9 	bl	8000a88 <decodeRgbValue>
 8001116:	4603      	mov	r3, r0
 8001118:	461c      	mov	r4, r3
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff fcb2 	bl	8000a88 <decodeRgbValue>
 8001124:	4603      	mov	r3, r0
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4623      	mov	r3, r4
 800112a:	22e6      	movs	r2, #230	@ 0xe6
 800112c:	f240 1131 	movw	r1, #305	@ 0x131
 8001130:	4848      	ldr	r0, [pc, #288]	@ (8001254 <drawMenu+0x290>)
 8001132:	f7ff fcc5 	bl	8000ac0 <lcdPutS>
	sprintf(ammoText, "%d", ammo);
 8001136:	4b48      	ldr	r3, [pc, #288]	@ (8001258 <drawMenu+0x294>)
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	461a      	mov	r2, r3
 800113e:	4947      	ldr	r1, [pc, #284]	@ (800125c <drawMenu+0x298>)
 8001140:	4847      	ldr	r0, [pc, #284]	@ (8001260 <drawMenu+0x29c>)
 8001142:	f001 fab3 	bl	80026ac <siprintf>
	lcdPutS(ammoText, 295, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8001146:	221f      	movs	r2, #31
 8001148:	211f      	movs	r1, #31
 800114a:	201f      	movs	r0, #31
 800114c:	f7ff fc9c 	bl	8000a88 <decodeRgbValue>
 8001150:	4603      	mov	r3, r0
 8001152:	461c      	mov	r4, r3
 8001154:	2200      	movs	r2, #0
 8001156:	2100      	movs	r1, #0
 8001158:	2000      	movs	r0, #0
 800115a:	f7ff fc95 	bl	8000a88 <decodeRgbValue>
 800115e:	4603      	mov	r3, r0
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	4623      	mov	r3, r4
 8001164:	22de      	movs	r2, #222	@ 0xde
 8001166:	f240 1127 	movw	r1, #295	@ 0x127
 800116a:	483d      	ldr	r0, [pc, #244]	@ (8001260 <drawMenu+0x29c>)
 800116c:	f7ff fca8 	bl	8000ac0 <lcdPutS>

	lcdPutS("HEALTH", 160, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8001170:	221f      	movs	r2, #31
 8001172:	211f      	movs	r1, #31
 8001174:	201f      	movs	r0, #31
 8001176:	f7ff fc87 	bl	8000a88 <decodeRgbValue>
 800117a:	4603      	mov	r3, r0
 800117c:	461c      	mov	r4, r3
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2000      	movs	r0, #0
 8001184:	f7ff fc80 	bl	8000a88 <decodeRgbValue>
 8001188:	4603      	mov	r3, r0
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	4623      	mov	r3, r4
 800118e:	22e6      	movs	r2, #230	@ 0xe6
 8001190:	21a0      	movs	r1, #160	@ 0xa0
 8001192:	4834      	ldr	r0, [pc, #208]	@ (8001264 <drawMenu+0x2a0>)
 8001194:	f7ff fc94 	bl	8000ac0 <lcdPutS>
	sprintf(healthText, "%d%%", health);
 8001198:	4b33      	ldr	r3, [pc, #204]	@ (8001268 <drawMenu+0x2a4>)
 800119a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119e:	461a      	mov	r2, r3
 80011a0:	4932      	ldr	r1, [pc, #200]	@ (800126c <drawMenu+0x2a8>)
 80011a2:	4833      	ldr	r0, [pc, #204]	@ (8001270 <drawMenu+0x2ac>)
 80011a4:	f001 fa82 	bl	80026ac <siprintf>
	lcdPutS(healthText, 145, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 80011a8:	221f      	movs	r2, #31
 80011aa:	211f      	movs	r1, #31
 80011ac:	201f      	movs	r0, #31
 80011ae:	f7ff fc6b 	bl	8000a88 <decodeRgbValue>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461c      	mov	r4, r3
 80011b6:	2200      	movs	r2, #0
 80011b8:	2100      	movs	r1, #0
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff fc64 	bl	8000a88 <decodeRgbValue>
 80011c0:	4603      	mov	r3, r0
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	4623      	mov	r3, r4
 80011c6:	22de      	movs	r2, #222	@ 0xde
 80011c8:	2191      	movs	r1, #145	@ 0x91
 80011ca:	4829      	ldr	r0, [pc, #164]	@ (8001270 <drawMenu+0x2ac>)
 80011cc:	f7ff fc78 	bl	8000ac0 <lcdPutS>

	lcdPutS("ARMOR", 35, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 80011d0:	221f      	movs	r2, #31
 80011d2:	211f      	movs	r1, #31
 80011d4:	201f      	movs	r0, #31
 80011d6:	f7ff fc57 	bl	8000a88 <decodeRgbValue>
 80011da:	4603      	mov	r3, r0
 80011dc:	461c      	mov	r4, r3
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff fc50 	bl	8000a88 <decodeRgbValue>
 80011e8:	4603      	mov	r3, r0
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	4623      	mov	r3, r4
 80011ee:	22e6      	movs	r2, #230	@ 0xe6
 80011f0:	2123      	movs	r1, #35	@ 0x23
 80011f2:	4820      	ldr	r0, [pc, #128]	@ (8001274 <drawMenu+0x2b0>)
 80011f4:	f7ff fc64 	bl	8000ac0 <lcdPutS>
	sprintf(armorText, "%d%%", armor);
 80011f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <drawMenu+0x2b4>)
 80011fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fe:	461a      	mov	r2, r3
 8001200:	491a      	ldr	r1, [pc, #104]	@ (800126c <drawMenu+0x2a8>)
 8001202:	481e      	ldr	r0, [pc, #120]	@ (800127c <drawMenu+0x2b8>)
 8001204:	f001 fa52 	bl	80026ac <siprintf>
	lcdPutS(armorText, 20, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8001208:	221f      	movs	r2, #31
 800120a:	211f      	movs	r1, #31
 800120c:	201f      	movs	r0, #31
 800120e:	f7ff fc3b 	bl	8000a88 <decodeRgbValue>
 8001212:	4603      	mov	r3, r0
 8001214:	461c      	mov	r4, r3
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2000      	movs	r0, #0
 800121c:	f7ff fc34 	bl	8000a88 <decodeRgbValue>
 8001220:	4603      	mov	r3, r0
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	4623      	mov	r3, r4
 8001226:	22de      	movs	r2, #222	@ 0xde
 8001228:	2114      	movs	r1, #20
 800122a:	4814      	ldr	r0, [pc, #80]	@ (800127c <drawMenu+0x2b8>)
 800122c:	f7ff fc48 	bl	8000ac0 <lcdPutS>
}
 8001230:	bf00      	nop
 8001232:	3704      	adds	r7, #4
 8001234:	46bd      	mov	sp, r7
 8001236:	bd90      	pop	{r4, r7, pc}
 8001238:	08002ea8 	.word	0x08002ea8
 800123c:	08002eb0 	.word	0x08002eb0
 8001240:	08002ebc 	.word	0x08002ebc
 8001244:	08002ec4 	.word	0x08002ec4
 8001248:	08002ed0 	.word	0x08002ed0
 800124c:	08002edc 	.word	0x08002edc
 8001250:	08002ee8 	.word	0x08002ee8
 8001254:	08002ef4 	.word	0x08002ef4
 8001258:	20000000 	.word	0x20000000
 800125c:	08002efc 	.word	0x08002efc
 8001260:	2000007c 	.word	0x2000007c
 8001264:	08002f00 	.word	0x08002f00
 8001268:	20000002 	.word	0x20000002
 800126c:	08002f08 	.word	0x08002f08
 8001270:	2000008c 	.word	0x2000008c
 8001274:	08002f10 	.word	0x08002f10
 8001278:	20000078 	.word	0x20000078
 800127c:	2000009c 	.word	0x2000009c

08001280 <clearMenu>:

void clearMenu() {
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b083      	sub	sp, #12
 8001284:	af02      	add	r7, sp, #8
    lcdPutSSized("DOOM", 250, 0, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0), 8);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fbfc 	bl	8000a88 <decodeRgbValue>
 8001290:	4603      	mov	r3, r0
 8001292:	461c      	mov	r4, r3
 8001294:	2200      	movs	r2, #0
 8001296:	2100      	movs	r1, #0
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fbf5 	bl	8000a88 <decodeRgbValue>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	2308      	movs	r3, #8
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	9200      	str	r2, [sp, #0]
 80012a8:	4623      	mov	r3, r4
 80012aa:	2200      	movs	r2, #0
 80012ac:	21fa      	movs	r1, #250	@ 0xfa
 80012ae:	4885      	ldr	r0, [pc, #532]	@ (80014c4 <clearMenu+0x244>)
 80012b0:	f7ff fc4d 	bl	8000b4e <lcdPutSSized>
    lcdPutSSized("NEW GAME", 205, 64, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0), 2);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2100      	movs	r1, #0
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff fbe5 	bl	8000a88 <decodeRgbValue>
 80012be:	4603      	mov	r3, r0
 80012c0:	461c      	mov	r4, r3
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff fbde 	bl	8000a88 <decodeRgbValue>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	2302      	movs	r3, #2
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	9200      	str	r2, [sp, #0]
 80012d6:	4623      	mov	r3, r4
 80012d8:	2240      	movs	r2, #64	@ 0x40
 80012da:	21cd      	movs	r1, #205	@ 0xcd
 80012dc:	487a      	ldr	r0, [pc, #488]	@ (80014c8 <clearMenu+0x248>)
 80012de:	f7ff fc36 	bl	8000b4e <lcdPutSSized>
    lcdPutSSized("OPTIONS", 205, 80, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0), 2);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff fbce 	bl	8000a88 <decodeRgbValue>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461c      	mov	r4, r3
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff fbc7 	bl	8000a88 <decodeRgbValue>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	2302      	movs	r3, #2
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	9200      	str	r2, [sp, #0]
 8001304:	4623      	mov	r3, r4
 8001306:	2250      	movs	r2, #80	@ 0x50
 8001308:	21cd      	movs	r1, #205	@ 0xcd
 800130a:	4870      	ldr	r0, [pc, #448]	@ (80014cc <clearMenu+0x24c>)
 800130c:	f7ff fc1f 	bl	8000b4e <lcdPutSSized>
    lcdPutSSized("LOAD GAME", 205, 96, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0), 2);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff fbb7 	bl	8000a88 <decodeRgbValue>
 800131a:	4603      	mov	r3, r0
 800131c:	461c      	mov	r4, r3
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	2000      	movs	r0, #0
 8001324:	f7ff fbb0 	bl	8000a88 <decodeRgbValue>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	2302      	movs	r3, #2
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	9200      	str	r2, [sp, #0]
 8001332:	4623      	mov	r3, r4
 8001334:	2260      	movs	r2, #96	@ 0x60
 8001336:	21cd      	movs	r1, #205	@ 0xcd
 8001338:	4865      	ldr	r0, [pc, #404]	@ (80014d0 <clearMenu+0x250>)
 800133a:	f7ff fc08 	bl	8000b4e <lcdPutSSized>
    lcdPutSSized("SAVE GAME", 205, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0), 2);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff fba0 	bl	8000a88 <decodeRgbValue>
 8001348:	4603      	mov	r3, r0
 800134a:	461c      	mov	r4, r3
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff fb99 	bl	8000a88 <decodeRgbValue>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	2302      	movs	r3, #2
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	9200      	str	r2, [sp, #0]
 8001360:	4623      	mov	r3, r4
 8001362:	2270      	movs	r2, #112	@ 0x70
 8001364:	21cd      	movs	r1, #205	@ 0xcd
 8001366:	485b      	ldr	r0, [pc, #364]	@ (80014d4 <clearMenu+0x254>)
 8001368:	f7ff fbf1 	bl	8000b4e <lcdPutSSized>
    lcdPutSSized("READ THIS!", 205, 128, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0), 2);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fb89 	bl	8000a88 <decodeRgbValue>
 8001376:	4603      	mov	r3, r0
 8001378:	461c      	mov	r4, r3
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff fb82 	bl	8000a88 <decodeRgbValue>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	2302      	movs	r3, #2
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	9200      	str	r2, [sp, #0]
 800138e:	4623      	mov	r3, r4
 8001390:	2280      	movs	r2, #128	@ 0x80
 8001392:	21cd      	movs	r1, #205	@ 0xcd
 8001394:	4850      	ldr	r0, [pc, #320]	@ (80014d8 <clearMenu+0x258>)
 8001396:	f7ff fbda 	bl	8000b4e <lcdPutSSized>
    lcdPutSSized("QUIT GAME", 205, 144, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0), 2);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fb72 	bl	8000a88 <decodeRgbValue>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461c      	mov	r4, r3
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff fb6b 	bl	8000a88 <decodeRgbValue>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	2302      	movs	r3, #2
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	9200      	str	r2, [sp, #0]
 80013bc:	4623      	mov	r3, r4
 80013be:	2290      	movs	r2, #144	@ 0x90
 80013c0:	21cd      	movs	r1, #205	@ 0xcd
 80013c2:	4846      	ldr	r0, [pc, #280]	@ (80014dc <clearMenu+0x25c>)
 80013c4:	f7ff fbc3 	bl	8000b4e <lcdPutSSized>

    lcdPutS("AMMO", 305, 230, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 80013c8:	2200      	movs	r2, #0
 80013ca:	2100      	movs	r1, #0
 80013cc:	2000      	movs	r0, #0
 80013ce:	f7ff fb5b 	bl	8000a88 <decodeRgbValue>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461c      	mov	r4, r3
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff fb54 	bl	8000a88 <decodeRgbValue>
 80013e0:	4603      	mov	r3, r0
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	4623      	mov	r3, r4
 80013e6:	22e6      	movs	r2, #230	@ 0xe6
 80013e8:	f240 1131 	movw	r1, #305	@ 0x131
 80013ec:	483c      	ldr	r0, [pc, #240]	@ (80014e0 <clearMenu+0x260>)
 80013ee:	f7ff fb67 	bl	8000ac0 <lcdPutS>
    lcdPutS("", 295, 222, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff fb46 	bl	8000a88 <decodeRgbValue>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461c      	mov	r4, r3
 8001400:	2200      	movs	r2, #0
 8001402:	2100      	movs	r1, #0
 8001404:	2000      	movs	r0, #0
 8001406:	f7ff fb3f 	bl	8000a88 <decodeRgbValue>
 800140a:	4603      	mov	r3, r0
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	4623      	mov	r3, r4
 8001410:	22de      	movs	r2, #222	@ 0xde
 8001412:	f240 1127 	movw	r1, #295	@ 0x127
 8001416:	4833      	ldr	r0, [pc, #204]	@ (80014e4 <clearMenu+0x264>)
 8001418:	f7ff fb52 	bl	8000ac0 <lcdPutS>

    lcdPutS("HEALTH", 160, 230, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 800141c:	2200      	movs	r2, #0
 800141e:	2100      	movs	r1, #0
 8001420:	2000      	movs	r0, #0
 8001422:	f7ff fb31 	bl	8000a88 <decodeRgbValue>
 8001426:	4603      	mov	r3, r0
 8001428:	461c      	mov	r4, r3
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	2000      	movs	r0, #0
 8001430:	f7ff fb2a 	bl	8000a88 <decodeRgbValue>
 8001434:	4603      	mov	r3, r0
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	4623      	mov	r3, r4
 800143a:	22e6      	movs	r2, #230	@ 0xe6
 800143c:	21a0      	movs	r1, #160	@ 0xa0
 800143e:	482a      	ldr	r0, [pc, #168]	@ (80014e8 <clearMenu+0x268>)
 8001440:	f7ff fb3e 	bl	8000ac0 <lcdPutS>
    lcdPutS("", 145, 222, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2000      	movs	r0, #0
 800144a:	f7ff fb1d 	bl	8000a88 <decodeRgbValue>
 800144e:	4603      	mov	r3, r0
 8001450:	461c      	mov	r4, r3
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	2000      	movs	r0, #0
 8001458:	f7ff fb16 	bl	8000a88 <decodeRgbValue>
 800145c:	4603      	mov	r3, r0
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	4623      	mov	r3, r4
 8001462:	22de      	movs	r2, #222	@ 0xde
 8001464:	2191      	movs	r1, #145	@ 0x91
 8001466:	481f      	ldr	r0, [pc, #124]	@ (80014e4 <clearMenu+0x264>)
 8001468:	f7ff fb2a 	bl	8000ac0 <lcdPutS>

    lcdPutS("ARMOR", 35, 230, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	2000      	movs	r0, #0
 8001472:	f7ff fb09 	bl	8000a88 <decodeRgbValue>
 8001476:	4603      	mov	r3, r0
 8001478:	461c      	mov	r4, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff fb02 	bl	8000a88 <decodeRgbValue>
 8001484:	4603      	mov	r3, r0
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4623      	mov	r3, r4
 800148a:	22e6      	movs	r2, #230	@ 0xe6
 800148c:	2123      	movs	r1, #35	@ 0x23
 800148e:	4817      	ldr	r0, [pc, #92]	@ (80014ec <clearMenu+0x26c>)
 8001490:	f7ff fb16 	bl	8000ac0 <lcdPutS>
    lcdPutS("", 20, 222, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	2000      	movs	r0, #0
 800149a:	f7ff faf5 	bl	8000a88 <decodeRgbValue>
 800149e:	4603      	mov	r3, r0
 80014a0:	461c      	mov	r4, r3
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff faee 	bl	8000a88 <decodeRgbValue>
 80014ac:	4603      	mov	r3, r0
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4623      	mov	r3, r4
 80014b2:	22de      	movs	r2, #222	@ 0xde
 80014b4:	2114      	movs	r1, #20
 80014b6:	480b      	ldr	r0, [pc, #44]	@ (80014e4 <clearMenu+0x264>)
 80014b8:	f7ff fb02 	bl	8000ac0 <lcdPutS>
}
 80014bc:	bf00      	nop
 80014be:	3704      	adds	r7, #4
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd90      	pop	{r4, r7, pc}
 80014c4:	08002ea8 	.word	0x08002ea8
 80014c8:	08002eb0 	.word	0x08002eb0
 80014cc:	08002ebc 	.word	0x08002ebc
 80014d0:	08002ec4 	.word	0x08002ec4
 80014d4:	08002ed0 	.word	0x08002ed0
 80014d8:	08002edc 	.word	0x08002edc
 80014dc:	08002ee8 	.word	0x08002ee8
 80014e0:	08002ef4 	.word	0x08002ef4
 80014e4:	08002f18 	.word	0x08002f18
 80014e8:	08002f00 	.word	0x08002f00
 80014ec:	08002f10 	.word	0x08002f10

080014f0 <drawDifficulty>:
	lcdPutS("ARMOR", 35, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
	sprintf(armorText, "%d%%", armor);
	lcdPutS(armorText, 20, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
}

void drawDifficulty() {
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af02      	add	r7, sp, #8
	lcdPutSSized("options", 240, 0, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),4);
 80014f6:	221f      	movs	r2, #31
 80014f8:	211f      	movs	r1, #31
 80014fa:	201f      	movs	r0, #31
 80014fc:	f7ff fac4 	bl	8000a88 <decodeRgbValue>
 8001500:	4603      	mov	r3, r0
 8001502:	461c      	mov	r4, r3
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	2000      	movs	r0, #0
 800150a:	f7ff fabd 	bl	8000a88 <decodeRgbValue>
 800150e:	4603      	mov	r3, r0
 8001510:	461a      	mov	r2, r3
 8001512:	2304      	movs	r3, #4
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	9200      	str	r2, [sp, #0]
 8001518:	4623      	mov	r3, r4
 800151a:	2200      	movs	r2, #0
 800151c:	21f0      	movs	r1, #240	@ 0xf0
 800151e:	4826      	ldr	r0, [pc, #152]	@ (80015b8 <drawDifficulty+0xc8>)
 8001520:	f7ff fb15 	bl	8000b4e <lcdPutSSized>
	lcdPutSSized("EASY", 210, 80, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),3);
 8001524:	221f      	movs	r2, #31
 8001526:	211f      	movs	r1, #31
 8001528:	201f      	movs	r0, #31
 800152a:	f7ff faad 	bl	8000a88 <decodeRgbValue>
 800152e:	4603      	mov	r3, r0
 8001530:	461c      	mov	r4, r3
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff faa6 	bl	8000a88 <decodeRgbValue>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	2303      	movs	r3, #3
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	9200      	str	r2, [sp, #0]
 8001546:	4623      	mov	r3, r4
 8001548:	2250      	movs	r2, #80	@ 0x50
 800154a:	21d2      	movs	r1, #210	@ 0xd2
 800154c:	481b      	ldr	r0, [pc, #108]	@ (80015bc <drawDifficulty+0xcc>)
 800154e:	f7ff fafe 	bl	8000b4e <lcdPutSSized>
	lcdPutSSized("MEDIUM", 210, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),3);
 8001552:	221f      	movs	r2, #31
 8001554:	211f      	movs	r1, #31
 8001556:	201f      	movs	r0, #31
 8001558:	f7ff fa96 	bl	8000a88 <decodeRgbValue>
 800155c:	4603      	mov	r3, r0
 800155e:	461c      	mov	r4, r3
 8001560:	2200      	movs	r2, #0
 8001562:	2100      	movs	r1, #0
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff fa8f 	bl	8000a88 <decodeRgbValue>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	2303      	movs	r3, #3
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	9200      	str	r2, [sp, #0]
 8001574:	4623      	mov	r3, r4
 8001576:	2270      	movs	r2, #112	@ 0x70
 8001578:	21d2      	movs	r1, #210	@ 0xd2
 800157a:	4811      	ldr	r0, [pc, #68]	@ (80015c0 <drawDifficulty+0xd0>)
 800157c:	f7ff fae7 	bl	8000b4e <lcdPutSSized>
	lcdPutSSized("HARD", 210, 144, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),3);
 8001580:	221f      	movs	r2, #31
 8001582:	211f      	movs	r1, #31
 8001584:	201f      	movs	r0, #31
 8001586:	f7ff fa7f 	bl	8000a88 <decodeRgbValue>
 800158a:	4603      	mov	r3, r0
 800158c:	461c      	mov	r4, r3
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2000      	movs	r0, #0
 8001594:	f7ff fa78 	bl	8000a88 <decodeRgbValue>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	2303      	movs	r3, #3
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	9200      	str	r2, [sp, #0]
 80015a2:	4623      	mov	r3, r4
 80015a4:	2290      	movs	r2, #144	@ 0x90
 80015a6:	21d2      	movs	r1, #210	@ 0xd2
 80015a8:	4806      	ldr	r0, [pc, #24]	@ (80015c4 <drawDifficulty+0xd4>)
 80015aa:	f7ff fad0 	bl	8000b4e <lcdPutSSized>
}
 80015ae:	bf00      	nop
 80015b0:	3704      	adds	r7, #4
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd90      	pop	{r4, r7, pc}
 80015b6:	bf00      	nop
 80015b8:	08002f1c 	.word	0x08002f1c
 80015bc:	08002f24 	.word	0x08002f24
 80015c0:	08002f2c 	.word	0x08002f2c
 80015c4:	08002f34 	.word	0x08002f34

080015c8 <menu>:
	lcdPutSSized("EASY", 210, 80, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),3);
	lcdPutSSized("MEDIUM", 210, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),3);
	lcdPutSSized("HARD", 210, 144, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),3);
}

void menu(){
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af02      	add	r7, sp, #8
	//int16_t difficulity = 2;		//v options sa bude dat menit

	//difficulty();
	//clearMenu();
	drawMenu();
 80015ce:	f7ff fcf9 	bl	8000fc4 <drawMenu>
	LL_mDelay(3000);
 80015d2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80015d6:	f000 ff85 	bl	80024e4 <LL_mDelay>
	char healthText[16];
	char armorText[16];
*/
	//lowerMenu();

		int select = 1;
 80015da:	2301      	movs	r3, #1
 80015dc:	607b      	str	r3, [r7, #4]

		while(select != 6)	//main menu cycle
 80015de:	e2cb      	b.n	8001b78 <menu+0x5b0>
		{

			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) == GPIO_PIN_RESET)	//choose lower option
 80015e0:	2102      	movs	r1, #2
 80015e2:	480f      	ldr	r0, [pc, #60]	@ (8001620 <menu+0x58>)
 80015e4:	f000 fd3a 	bl	800205c <HAL_GPIO_ReadPin>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10b      	bne.n	8001606 <menu+0x3e>
			{
				if(select == 0)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <menu+0x32>
					select = 5;
 80015f4:	2305      	movs	r3, #5
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	e005      	b.n	8001606 <menu+0x3e>
				else if(select != 0)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d002      	beq.n	8001606 <menu+0x3e>
					select--;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	607b      	str	r3, [r7, #4]
			}

			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0) == GPIO_PIN_RESET)	//choose option above
 8001606:	2101      	movs	r1, #1
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <menu+0x58>)
 800160a:	f000 fd27 	bl	800205c <HAL_GPIO_ReadPin>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d10d      	bne.n	8001630 <menu+0x68>
			{
				if(select == 5)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b05      	cmp	r3, #5
 8001618:	d104      	bne.n	8001624 <menu+0x5c>
					select = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	e007      	b.n	8001630 <menu+0x68>
 8001620:	48000400 	.word	0x48000400
				else if(select != 5)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b05      	cmp	r3, #5
 8001628:	d002      	beq.n	8001630 <menu+0x68>
					select++;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3301      	adds	r3, #1
 800162e:	607b      	str	r3, [r7, #4]
			}

			if(select == 0)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d12d      	bne.n	8001692 <menu+0xca>
			{
				lcdPutSSized("NEW GAME", 205, 64, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	2000      	movs	r0, #0
 800163c:	f7ff fa24 	bl	8000a88 <decodeRgbValue>
 8001640:	4603      	mov	r3, r0
 8001642:	461c      	mov	r4, r3
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff fa1d 	bl	8000a88 <decodeRgbValue>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	2302      	movs	r3, #2
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	9200      	str	r2, [sp, #0]
 8001658:	4623      	mov	r3, r4
 800165a:	2240      	movs	r2, #64	@ 0x40
 800165c:	21cd      	movs	r1, #205	@ 0xcd
 800165e:	48d7      	ldr	r0, [pc, #860]	@ (80019bc <menu+0x3f4>)
 8001660:	f7ff fa75 	bl	8000b4e <lcdPutSSized>
				lcdPutSSized("NEW GAME", 205, 64, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8001664:	221f      	movs	r2, #31
 8001666:	211f      	movs	r1, #31
 8001668:	201f      	movs	r0, #31
 800166a:	f7ff fa0d 	bl	8000a88 <decodeRgbValue>
 800166e:	4603      	mov	r3, r0
 8001670:	461c      	mov	r4, r3
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2000      	movs	r0, #0
 8001678:	f7ff fa06 	bl	8000a88 <decodeRgbValue>
 800167c:	4603      	mov	r3, r0
 800167e:	461a      	mov	r2, r3
 8001680:	2302      	movs	r3, #2
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	9200      	str	r2, [sp, #0]
 8001686:	4623      	mov	r3, r4
 8001688:	2240      	movs	r2, #64	@ 0x40
 800168a:	21cd      	movs	r1, #205	@ 0xcd
 800168c:	48cb      	ldr	r0, [pc, #812]	@ (80019bc <menu+0x3f4>)
 800168e:	f7ff fa5e 	bl	8000b4e <lcdPutSSized>
			}
			if(select == 1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b01      	cmp	r3, #1
 8001696:	f040 80c0 	bne.w	800181a <menu+0x252>
			{
				lcdPutSSized("OPTIONS", 205, 80, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2000      	movs	r0, #0
 80016a0:	f7ff f9f2 	bl	8000a88 <decodeRgbValue>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461c      	mov	r4, r3
 80016a8:	2200      	movs	r2, #0
 80016aa:	2100      	movs	r1, #0
 80016ac:	2000      	movs	r0, #0
 80016ae:	f7ff f9eb 	bl	8000a88 <decodeRgbValue>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461a      	mov	r2, r3
 80016b6:	2302      	movs	r3, #2
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	9200      	str	r2, [sp, #0]
 80016bc:	4623      	mov	r3, r4
 80016be:	2250      	movs	r2, #80	@ 0x50
 80016c0:	21cd      	movs	r1, #205	@ 0xcd
 80016c2:	48bf      	ldr	r0, [pc, #764]	@ (80019c0 <menu+0x3f8>)
 80016c4:	f7ff fa43 	bl	8000b4e <lcdPutSSized>
				lcdPutSSized("OPTIONS", 205, 80, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80016c8:	221f      	movs	r2, #31
 80016ca:	211f      	movs	r1, #31
 80016cc:	201f      	movs	r0, #31
 80016ce:	f7ff f9db 	bl	8000a88 <decodeRgbValue>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461c      	mov	r4, r3
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff f9d4 	bl	8000a88 <decodeRgbValue>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	2302      	movs	r3, #2
 80016e6:	9301      	str	r3, [sp, #4]
 80016e8:	9200      	str	r2, [sp, #0]
 80016ea:	4623      	mov	r3, r4
 80016ec:	2250      	movs	r2, #80	@ 0x50
 80016ee:	21cd      	movs	r1, #205	@ 0xcd
 80016f0:	48b3      	ldr	r0, [pc, #716]	@ (80019c0 <menu+0x3f8>)
 80016f2:	f7ff fa2c 	bl	8000b4e <lcdPutSSized>

				lcdPutS("AMMO", 305, 230, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2000      	movs	r0, #0
 80016fc:	f7ff f9c4 	bl	8000a88 <decodeRgbValue>
 8001700:	4603      	mov	r3, r0
 8001702:	461c      	mov	r4, r3
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff f9bd 	bl	8000a88 <decodeRgbValue>
 800170e:	4603      	mov	r3, r0
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	4623      	mov	r3, r4
 8001714:	22e6      	movs	r2, #230	@ 0xe6
 8001716:	f240 1131 	movw	r1, #305	@ 0x131
 800171a:	48aa      	ldr	r0, [pc, #680]	@ (80019c4 <menu+0x3fc>)
 800171c:	f7ff f9d0 	bl	8000ac0 <lcdPutS>
				sprintf(ammoText, "%d", ammo);
 8001720:	4ba9      	ldr	r3, [pc, #676]	@ (80019c8 <menu+0x400>)
 8001722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001726:	461a      	mov	r2, r3
 8001728:	49a8      	ldr	r1, [pc, #672]	@ (80019cc <menu+0x404>)
 800172a:	48a9      	ldr	r0, [pc, #676]	@ (80019d0 <menu+0x408>)
 800172c:	f000 ffbe 	bl	80026ac <siprintf>
				lcdPutS(ammoText, 295, 222, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff f9a7 	bl	8000a88 <decodeRgbValue>
 800173a:	4603      	mov	r3, r0
 800173c:	461c      	mov	r4, r3
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2000      	movs	r0, #0
 8001744:	f7ff f9a0 	bl	8000a88 <decodeRgbValue>
 8001748:	4603      	mov	r3, r0
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	4623      	mov	r3, r4
 800174e:	22de      	movs	r2, #222	@ 0xde
 8001750:	f240 1127 	movw	r1, #295	@ 0x127
 8001754:	489e      	ldr	r0, [pc, #632]	@ (80019d0 <menu+0x408>)
 8001756:	f7ff f9b3 	bl	8000ac0 <lcdPutS>

				lcdPutS("HEALTH", 160, 230, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	2000      	movs	r0, #0
 8001760:	f7ff f992 	bl	8000a88 <decodeRgbValue>
 8001764:	4603      	mov	r3, r0
 8001766:	461c      	mov	r4, r3
 8001768:	2200      	movs	r2, #0
 800176a:	2100      	movs	r1, #0
 800176c:	2000      	movs	r0, #0
 800176e:	f7ff f98b 	bl	8000a88 <decodeRgbValue>
 8001772:	4603      	mov	r3, r0
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	4623      	mov	r3, r4
 8001778:	22e6      	movs	r2, #230	@ 0xe6
 800177a:	21a0      	movs	r1, #160	@ 0xa0
 800177c:	4895      	ldr	r0, [pc, #596]	@ (80019d4 <menu+0x40c>)
 800177e:	f7ff f99f 	bl	8000ac0 <lcdPutS>
				sprintf(healthText, "%d%%", health);
 8001782:	4b95      	ldr	r3, [pc, #596]	@ (80019d8 <menu+0x410>)
 8001784:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001788:	461a      	mov	r2, r3
 800178a:	4994      	ldr	r1, [pc, #592]	@ (80019dc <menu+0x414>)
 800178c:	4894      	ldr	r0, [pc, #592]	@ (80019e0 <menu+0x418>)
 800178e:	f000 ff8d 	bl	80026ac <siprintf>
				lcdPutS(healthText, 145, 222, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	2000      	movs	r0, #0
 8001798:	f7ff f976 	bl	8000a88 <decodeRgbValue>
 800179c:	4603      	mov	r3, r0
 800179e:	461c      	mov	r4, r3
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff f96f 	bl	8000a88 <decodeRgbValue>
 80017aa:	4603      	mov	r3, r0
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	4623      	mov	r3, r4
 80017b0:	22de      	movs	r2, #222	@ 0xde
 80017b2:	2191      	movs	r1, #145	@ 0x91
 80017b4:	488a      	ldr	r0, [pc, #552]	@ (80019e0 <menu+0x418>)
 80017b6:	f7ff f983 	bl	8000ac0 <lcdPutS>

				lcdPutS("ARMOR", 35, 230, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 80017ba:	2200      	movs	r2, #0
 80017bc:	2100      	movs	r1, #0
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff f962 	bl	8000a88 <decodeRgbValue>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461c      	mov	r4, r3
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	2000      	movs	r0, #0
 80017ce:	f7ff f95b 	bl	8000a88 <decodeRgbValue>
 80017d2:	4603      	mov	r3, r0
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	4623      	mov	r3, r4
 80017d8:	22e6      	movs	r2, #230	@ 0xe6
 80017da:	2123      	movs	r1, #35	@ 0x23
 80017dc:	4881      	ldr	r0, [pc, #516]	@ (80019e4 <menu+0x41c>)
 80017de:	f7ff f96f 	bl	8000ac0 <lcdPutS>
				sprintf(armorText, "%d%%", armor);
 80017e2:	4b81      	ldr	r3, [pc, #516]	@ (80019e8 <menu+0x420>)
 80017e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e8:	461a      	mov	r2, r3
 80017ea:	497c      	ldr	r1, [pc, #496]	@ (80019dc <menu+0x414>)
 80017ec:	487f      	ldr	r0, [pc, #508]	@ (80019ec <menu+0x424>)
 80017ee:	f000 ff5d 	bl	80026ac <siprintf>
				lcdPutS(armorText, 20, 222, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2000      	movs	r0, #0
 80017f8:	f7ff f946 	bl	8000a88 <decodeRgbValue>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461c      	mov	r4, r3
 8001800:	2200      	movs	r2, #0
 8001802:	2100      	movs	r1, #0
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff f93f 	bl	8000a88 <decodeRgbValue>
 800180a:	4603      	mov	r3, r0
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	4623      	mov	r3, r4
 8001810:	22de      	movs	r2, #222	@ 0xde
 8001812:	2114      	movs	r1, #20
 8001814:	4875      	ldr	r0, [pc, #468]	@ (80019ec <menu+0x424>)
 8001816:	f7ff f953 	bl	8000ac0 <lcdPutS>
			}
			if(select == 2)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d12d      	bne.n	800187c <menu+0x2b4>
			{
				lcdPutSSized("LOAD GAME", 205, 96, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff f92f 	bl	8000a88 <decodeRgbValue>
 800182a:	4603      	mov	r3, r0
 800182c:	461c      	mov	r4, r3
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2000      	movs	r0, #0
 8001834:	f7ff f928 	bl	8000a88 <decodeRgbValue>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	2302      	movs	r3, #2
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	9200      	str	r2, [sp, #0]
 8001842:	4623      	mov	r3, r4
 8001844:	2260      	movs	r2, #96	@ 0x60
 8001846:	21cd      	movs	r1, #205	@ 0xcd
 8001848:	4869      	ldr	r0, [pc, #420]	@ (80019f0 <menu+0x428>)
 800184a:	f7ff f980 	bl	8000b4e <lcdPutSSized>
				lcdPutSSized("LOAD GAME", 205, 96, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 800184e:	221f      	movs	r2, #31
 8001850:	211f      	movs	r1, #31
 8001852:	201f      	movs	r0, #31
 8001854:	f7ff f918 	bl	8000a88 <decodeRgbValue>
 8001858:	4603      	mov	r3, r0
 800185a:	461c      	mov	r4, r3
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff f911 	bl	8000a88 <decodeRgbValue>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	2302      	movs	r3, #2
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	9200      	str	r2, [sp, #0]
 8001870:	4623      	mov	r3, r4
 8001872:	2260      	movs	r2, #96	@ 0x60
 8001874:	21cd      	movs	r1, #205	@ 0xcd
 8001876:	485e      	ldr	r0, [pc, #376]	@ (80019f0 <menu+0x428>)
 8001878:	f7ff f969 	bl	8000b4e <lcdPutSSized>
			}
			if(select == 3)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d12d      	bne.n	80018de <menu+0x316>
			{
				lcdPutSSized("SAVE GAME", 205, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff f8fe 	bl	8000a88 <decodeRgbValue>
 800188c:	4603      	mov	r3, r0
 800188e:	461c      	mov	r4, r3
 8001890:	2200      	movs	r2, #0
 8001892:	2100      	movs	r1, #0
 8001894:	2000      	movs	r0, #0
 8001896:	f7ff f8f7 	bl	8000a88 <decodeRgbValue>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	2302      	movs	r3, #2
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	9200      	str	r2, [sp, #0]
 80018a4:	4623      	mov	r3, r4
 80018a6:	2270      	movs	r2, #112	@ 0x70
 80018a8:	21cd      	movs	r1, #205	@ 0xcd
 80018aa:	4852      	ldr	r0, [pc, #328]	@ (80019f4 <menu+0x42c>)
 80018ac:	f7ff f94f 	bl	8000b4e <lcdPutSSized>
				lcdPutSSized("SAVE GAME", 205, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80018b0:	221f      	movs	r2, #31
 80018b2:	211f      	movs	r1, #31
 80018b4:	201f      	movs	r0, #31
 80018b6:	f7ff f8e7 	bl	8000a88 <decodeRgbValue>
 80018ba:	4603      	mov	r3, r0
 80018bc:	461c      	mov	r4, r3
 80018be:	2200      	movs	r2, #0
 80018c0:	2100      	movs	r1, #0
 80018c2:	2000      	movs	r0, #0
 80018c4:	f7ff f8e0 	bl	8000a88 <decodeRgbValue>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	2302      	movs	r3, #2
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	9200      	str	r2, [sp, #0]
 80018d2:	4623      	mov	r3, r4
 80018d4:	2270      	movs	r2, #112	@ 0x70
 80018d6:	21cd      	movs	r1, #205	@ 0xcd
 80018d8:	4846      	ldr	r0, [pc, #280]	@ (80019f4 <menu+0x42c>)
 80018da:	f7ff f938 	bl	8000b4e <lcdPutSSized>
			}
			if(select == 4)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d12d      	bne.n	8001940 <menu+0x378>
			{
				lcdPutSSized("READ THIS!", 205, 128, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	2000      	movs	r0, #0
 80018ea:	f7ff f8cd 	bl	8000a88 <decodeRgbValue>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461c      	mov	r4, r3
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	2000      	movs	r0, #0
 80018f8:	f7ff f8c6 	bl	8000a88 <decodeRgbValue>
 80018fc:	4603      	mov	r3, r0
 80018fe:	461a      	mov	r2, r3
 8001900:	2302      	movs	r3, #2
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	9200      	str	r2, [sp, #0]
 8001906:	4623      	mov	r3, r4
 8001908:	2280      	movs	r2, #128	@ 0x80
 800190a:	21cd      	movs	r1, #205	@ 0xcd
 800190c:	483a      	ldr	r0, [pc, #232]	@ (80019f8 <menu+0x430>)
 800190e:	f7ff f91e 	bl	8000b4e <lcdPutSSized>
				lcdPutSSized("READ THIS!", 205, 128, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8001912:	221f      	movs	r2, #31
 8001914:	211f      	movs	r1, #31
 8001916:	201f      	movs	r0, #31
 8001918:	f7ff f8b6 	bl	8000a88 <decodeRgbValue>
 800191c:	4603      	mov	r3, r0
 800191e:	461c      	mov	r4, r3
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	2000      	movs	r0, #0
 8001926:	f7ff f8af 	bl	8000a88 <decodeRgbValue>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	2302      	movs	r3, #2
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	9200      	str	r2, [sp, #0]
 8001934:	4623      	mov	r3, r4
 8001936:	2280      	movs	r2, #128	@ 0x80
 8001938:	21cd      	movs	r1, #205	@ 0xcd
 800193a:	482f      	ldr	r0, [pc, #188]	@ (80019f8 <menu+0x430>)
 800193c:	f7ff f907 	bl	8000b4e <lcdPutSSized>
			}
			if(select == 5)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b05      	cmp	r3, #5
 8001944:	d12d      	bne.n	80019a2 <menu+0x3da>
			{
				lcdPutSSized("QUIT GAME", 205, 144, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2000      	movs	r0, #0
 800194c:	f7ff f89c 	bl	8000a88 <decodeRgbValue>
 8001950:	4603      	mov	r3, r0
 8001952:	461c      	mov	r4, r3
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff f895 	bl	8000a88 <decodeRgbValue>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	2302      	movs	r3, #2
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	9200      	str	r2, [sp, #0]
 8001968:	4623      	mov	r3, r4
 800196a:	2290      	movs	r2, #144	@ 0x90
 800196c:	21cd      	movs	r1, #205	@ 0xcd
 800196e:	4823      	ldr	r0, [pc, #140]	@ (80019fc <menu+0x434>)
 8001970:	f7ff f8ed 	bl	8000b4e <lcdPutSSized>
				lcdPutSSized("QUIT GAME", 205, 144, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8001974:	221f      	movs	r2, #31
 8001976:	211f      	movs	r1, #31
 8001978:	201f      	movs	r0, #31
 800197a:	f7ff f885 	bl	8000a88 <decodeRgbValue>
 800197e:	4603      	mov	r3, r0
 8001980:	461c      	mov	r4, r3
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	2000      	movs	r0, #0
 8001988:	f7ff f87e 	bl	8000a88 <decodeRgbValue>
 800198c:	4603      	mov	r3, r0
 800198e:	461a      	mov	r2, r3
 8001990:	2302      	movs	r3, #2
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	9200      	str	r2, [sp, #0]
 8001996:	4623      	mov	r3, r4
 8001998:	2290      	movs	r2, #144	@ 0x90
 800199a:	21cd      	movs	r1, #205	@ 0xcd
 800199c:	4817      	ldr	r0, [pc, #92]	@ (80019fc <menu+0x434>)
 800199e:	f7ff f8d6 	bl	8000b4e <lcdPutSSized>
			}

			//confirm your option
			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) == GPIO_PIN_RESET && select == 0)
 80019a2:	2102      	movs	r1, #2
 80019a4:	4816      	ldr	r0, [pc, #88]	@ (8001a00 <menu+0x438>)
 80019a6:	f000 fb59 	bl	800205c <HAL_GPIO_ReadPin>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d129      	bne.n	8001a04 <menu+0x43c>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d126      	bne.n	8001a04 <menu+0x43c>
				select = 6;
 80019b6:	2306      	movs	r3, #6
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	e023      	b.n	8001a04 <menu+0x43c>
 80019bc:	08002eb0 	.word	0x08002eb0
 80019c0:	08002ebc 	.word	0x08002ebc
 80019c4:	08002ef4 	.word	0x08002ef4
 80019c8:	20000000 	.word	0x20000000
 80019cc:	08002efc 	.word	0x08002efc
 80019d0:	2000007c 	.word	0x2000007c
 80019d4:	08002f00 	.word	0x08002f00
 80019d8:	20000002 	.word	0x20000002
 80019dc:	08002f08 	.word	0x08002f08
 80019e0:	2000008c 	.word	0x2000008c
 80019e4:	08002f10 	.word	0x08002f10
 80019e8:	20000078 	.word	0x20000078
 80019ec:	2000009c 	.word	0x2000009c
 80019f0:	08002ec4 	.word	0x08002ec4
 80019f4:	08002ed0 	.word	0x08002ed0
 80019f8:	08002edc 	.word	0x08002edc
 80019fc:	08002ee8 	.word	0x08002ee8
 8001a00:	48000400 	.word	0x48000400
			// V options sa bude prepinat obtiaznost a ked zacnes hru, tak sa hodnota obtiaznosti
			// priradi hre. Obtiaznost => easy, medium, hard (0 - 1 - 2)

			// takto nejako si predstavujem options, skus to rozvinut
			//confirm your option
			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == GPIO_PIN_RESET && select == 1){
 8001a04:	2108      	movs	r1, #8
 8001a06:	4861      	ldr	r0, [pc, #388]	@ (8001b8c <menu+0x5c4>)
 8001a08:	f000 fb28 	bl	800205c <HAL_GPIO_ReadPin>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f040 80b0 	bne.w	8001b74 <menu+0x5ac>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	f040 80ac 	bne.w	8001b74 <menu+0x5ac>
				clearMenu();
 8001a1c:	f7ff fc30 	bl	8001280 <clearMenu>
				//lcdPutSSized("options", 240, 0, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),4);
				drawDifficulty();
 8001a20:	f7ff fd66 	bl	80014f0 <drawDifficulty>
				while(select != 0){
 8001a24:	e0a2      	b.n	8001b6c <menu+0x5a4>
					if(select == 0) // tu namiesto select by asi davalo zmysel dat premennu difficulity ci to j eteraz len tak alebo ako ?
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d131      	bne.n	8001a90 <menu+0x4c8>
					{
						lcdPutSSized("EASY", 210, 80, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff f829 	bl	8000a88 <decodeRgbValue>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461c      	mov	r4, r3
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff f822 	bl	8000a88 <decodeRgbValue>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	2302      	movs	r3, #2
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	9200      	str	r2, [sp, #0]
 8001a4e:	4623      	mov	r3, r4
 8001a50:	2250      	movs	r2, #80	@ 0x50
 8001a52:	21d2      	movs	r1, #210	@ 0xd2
 8001a54:	484e      	ldr	r0, [pc, #312]	@ (8001b90 <menu+0x5c8>)
 8001a56:	f7ff f87a 	bl	8000b4e <lcdPutSSized>
						LL_mDelay(1000);
 8001a5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a5e:	f000 fd41 	bl	80024e4 <LL_mDelay>
						lcdPutSSized("EASY", 210, 80, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8001a62:	221f      	movs	r2, #31
 8001a64:	211f      	movs	r1, #31
 8001a66:	201f      	movs	r0, #31
 8001a68:	f7ff f80e 	bl	8000a88 <decodeRgbValue>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	461c      	mov	r4, r3
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7ff f807 	bl	8000a88 <decodeRgbValue>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	2302      	movs	r3, #2
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	9200      	str	r2, [sp, #0]
 8001a84:	4623      	mov	r3, r4
 8001a86:	2250      	movs	r2, #80	@ 0x50
 8001a88:	21d2      	movs	r1, #210	@ 0xd2
 8001a8a:	4841      	ldr	r0, [pc, #260]	@ (8001b90 <menu+0x5c8>)
 8001a8c:	f7ff f85f 	bl	8000b4e <lcdPutSSized>
					}

					if(select == 1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d131      	bne.n	8001afa <menu+0x532>
					{
						lcdPutSSized("MEDIUM", 210, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2100      	movs	r1, #0
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7fe fff4 	bl	8000a88 <decodeRgbValue>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461c      	mov	r4, r3
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7fe ffed 	bl	8000a88 <decodeRgbValue>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	9301      	str	r3, [sp, #4]
 8001ab6:	9200      	str	r2, [sp, #0]
 8001ab8:	4623      	mov	r3, r4
 8001aba:	2270      	movs	r2, #112	@ 0x70
 8001abc:	21d2      	movs	r1, #210	@ 0xd2
 8001abe:	4835      	ldr	r0, [pc, #212]	@ (8001b94 <menu+0x5cc>)
 8001ac0:	f7ff f845 	bl	8000b4e <lcdPutSSized>
						LL_mDelay(500);
 8001ac4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ac8:	f000 fd0c 	bl	80024e4 <LL_mDelay>
						lcdPutSSized("MEDIUM", 210, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8001acc:	221f      	movs	r2, #31
 8001ace:	211f      	movs	r1, #31
 8001ad0:	201f      	movs	r0, #31
 8001ad2:	f7fe ffd9 	bl	8000a88 <decodeRgbValue>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	461c      	mov	r4, r3
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	2000      	movs	r0, #0
 8001ae0:	f7fe ffd2 	bl	8000a88 <decodeRgbValue>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2302      	movs	r3, #2
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	9200      	str	r2, [sp, #0]
 8001aee:	4623      	mov	r3, r4
 8001af0:	2270      	movs	r2, #112	@ 0x70
 8001af2:	21d2      	movs	r1, #210	@ 0xd2
 8001af4:	4827      	ldr	r0, [pc, #156]	@ (8001b94 <menu+0x5cc>)
 8001af6:	f7ff f82a 	bl	8000b4e <lcdPutSSized>
					}

					if(select == 2)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d131      	bne.n	8001b64 <menu+0x59c>
					{
						lcdPutSSized("HARD", 210, 144, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2100      	movs	r1, #0
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7fe ffbf 	bl	8000a88 <decodeRgbValue>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461c      	mov	r4, r3
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	2000      	movs	r0, #0
 8001b14:	f7fe ffb8 	bl	8000a88 <decodeRgbValue>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	9200      	str	r2, [sp, #0]
 8001b22:	4623      	mov	r3, r4
 8001b24:	2290      	movs	r2, #144	@ 0x90
 8001b26:	21d2      	movs	r1, #210	@ 0xd2
 8001b28:	481b      	ldr	r0, [pc, #108]	@ (8001b98 <menu+0x5d0>)
 8001b2a:	f7ff f810 	bl	8000b4e <lcdPutSSized>
						LL_mDelay(750);
 8001b2e:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001b32:	f000 fcd7 	bl	80024e4 <LL_mDelay>
						lcdPutSSized("HARD", 210, 144, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8001b36:	221f      	movs	r2, #31
 8001b38:	211f      	movs	r1, #31
 8001b3a:	201f      	movs	r0, #31
 8001b3c:	f7fe ffa4 	bl	8000a88 <decodeRgbValue>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461c      	mov	r4, r3
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7fe ff9d 	bl	8000a88 <decodeRgbValue>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	2302      	movs	r3, #2
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	9200      	str	r2, [sp, #0]
 8001b58:	4623      	mov	r3, r4
 8001b5a:	2290      	movs	r2, #144	@ 0x90
 8001b5c:	21d2      	movs	r1, #210	@ 0xd2
 8001b5e:	480e      	ldr	r0, [pc, #56]	@ (8001b98 <menu+0x5d0>)
 8001b60:	f7fe fff5 	bl	8000b4e <lcdPutSSized>
					}
					if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == GPIO_PIN_RESET && select == 1){
 8001b64:	2108      	movs	r1, #8
 8001b66:	4809      	ldr	r0, [pc, #36]	@ (8001b8c <menu+0x5c4>)
 8001b68:	f000 fa78 	bl	800205c <HAL_GPIO_ReadPin>
				while(select != 0){
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f47f af59 	bne.w	8001a26 <menu+0x45e>
						//lowerMenu;
					}
				}
			}

	clearMenu();
 8001b74:	f7ff fb84 	bl	8001280 <clearMenu>
		while(select != 6)	//main menu cycle
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	f47f ad30 	bne.w	80015e0 <menu+0x18>
	//startNewGame(difficulity);
		}
	}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd90      	pop	{r4, r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	48000400 	.word	0x48000400
 8001b90:	08002f24 	.word	0x08002f24
 8001b94:	08002f2c 	.word	0x08002f2c
 8001b98:	08002f34 	.word	0x08002f34

08001b9c <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	601a      	str	r2, [r3, #0]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f023 0210 	bic.w	r2, r3, #16
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	605a      	str	r2, [r3, #4]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f043 0208 	orr.w	r2, r3, #8
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	605a      	str	r2, [r3, #4]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f023 0208 	bic.w	r2, r3, #8
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	605a      	str	r2, [r3, #4]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d101      	bne.n	8001c60 <LL_SPI_IsActiveFlag_TXE+0x18>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	330c      	adds	r3, #12
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	b2db      	uxtb	r3, r3
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b085      	sub	sp, #20
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	460b      	mov	r3, r1
 8001c94:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	330c      	adds	r3, #12
 8001c9a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	78fa      	ldrb	r2, [r7, #3]
 8001ca0:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <LL_GPIO_SetOutputPin>:
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	619a      	str	r2, [r3, #24]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <LL_GPIO_ResetOutputPin>:
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <LL_AHB1_GRP1_EnableClock>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001cf0:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001cf2:	695a      	ldr	r2, [r3, #20]
 8001cf4:	4907      	ldr	r1, [pc, #28]	@ (8001d14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001cfc:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001cfe:	695a      	ldr	r2, [r3, #20]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4013      	ands	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	40021000 	.word	0x40021000

08001d18 <LL_APB2_GRP1_EnableClock>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	4907      	ldr	r1, [pc, #28]	@ (8001d44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001d2e:	699a      	ldr	r2, [r3, #24]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4013      	ands	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40021000 	.word	0x40021000

08001d48 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b090      	sub	sp, #64	@ 0x40
 8001d4c:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001d4e:	f107 0318 	add.w	r3, r7, #24
 8001d52:	2228      	movs	r2, #40	@ 0x28
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 fcc8 	bl	80026ec <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]
 8001d6a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001d6c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001d70:	f7ff ffd2 	bl	8001d18 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001d74:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001d78:	f7ff ffb6 	bl	8001ce8 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001d7c:	23e0      	movs	r3, #224	@ 0xe0
 8001d7e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d80:	2302      	movs	r3, #2
 8001d82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001d90:	2305      	movs	r3, #5
 8001d92:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	463b      	mov	r3, r7
 8001d96:	4619      	mov	r1, r3
 8001d98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d9c:	f000 fa7b 	bl	8002296 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001da4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001da8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001daa:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001dae:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001db8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  // rychlost prenosu ovplyvnuje
  SPI_InitStruct.BaudRate =  LL_SPI_BAUDRATEPRESCALER_DIV2; //najrychlejsie
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	633b      	str	r3, [r7, #48]	@ 0x30
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32; //250kBps povodne
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64; //125kBps
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128; //pomalsie
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV256; //najpomalsie
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001dca:	2307      	movs	r3, #7
 8001dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  SPI1->CR2 |= 1 << 12;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	@ (8001e08 <MX_SPI1_Init+0xc0>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4a0d      	ldr	r2, [pc, #52]	@ (8001e08 <MX_SPI1_Init+0xc0>)
 8001dd4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dd8:	6053      	str	r3, [r2, #4]

  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001dda:	f107 0318 	add.w	r3, r7, #24
 8001dde:	4619      	mov	r1, r3
 8001de0:	4809      	ldr	r0, [pc, #36]	@ (8001e08 <MX_SPI1_Init+0xc0>)
 8001de2:	f000 fafe 	bl	80023e2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001de6:	2100      	movs	r1, #0
 8001de8:	4807      	ldr	r0, [pc, #28]	@ (8001e08 <MX_SPI1_Init+0xc0>)
 8001dea:	f7ff fee7 	bl	8001bbc <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8001dee:	4806      	ldr	r0, [pc, #24]	@ (8001e08 <MX_SPI1_Init+0xc0>)
 8001df0:	f7ff ff07 	bl	8001c02 <LL_SPI_DisableNSSPulseMgt>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8001df4:	4804      	ldr	r0, [pc, #16]	@ (8001e08 <MX_SPI1_Init+0xc0>)
 8001df6:	f7ff fef4 	bl	8001be2 <LL_SPI_EnableNSSPulseMgt>
  LL_SPI_Enable(SPI1);
 8001dfa:	4803      	ldr	r0, [pc, #12]	@ (8001e08 <MX_SPI1_Init+0xc0>)
 8001dfc:	f7ff fece 	bl	8001b9c <LL_SPI_Enable>

}
 8001e00:	bf00      	nop
 8001e02:	3740      	adds	r7, #64	@ 0x40
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40013000 	.word	0x40013000

08001e0c <readWriteSPI1>:


unsigned char readWriteSPI1(unsigned char txData)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
	unsigned char  rxData;

	LL_SPI_TransmitData8(SPI1, (uint8_t)txData);
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480d      	ldr	r0, [pc, #52]	@ (8001e50 <readWriteSPI1+0x44>)
 8001e1c:	f7ff ff35 	bl	8001c8a <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_TXE(SPI1) != SET);
 8001e20:	bf00      	nop
 8001e22:	480b      	ldr	r0, [pc, #44]	@ (8001e50 <readWriteSPI1+0x44>)
 8001e24:	f7ff ff10 	bl	8001c48 <LL_SPI_IsActiveFlag_TXE>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d1f9      	bne.n	8001e22 <readWriteSPI1+0x16>

	// wait until RXNE = 1
	while(LL_SPI_IsActiveFlag_RXNE(SPI1) != SET);
 8001e2e:	bf00      	nop
 8001e30:	4807      	ldr	r0, [pc, #28]	@ (8001e50 <readWriteSPI1+0x44>)
 8001e32:	f7ff fef6 	bl	8001c22 <LL_SPI_IsActiveFlag_RXNE>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d1f9      	bne.n	8001e30 <readWriteSPI1+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = LL_SPI_ReceiveData8(SPI1);
 8001e3c:	4804      	ldr	r0, [pc, #16]	@ (8001e50 <readWriteSPI1+0x44>)
 8001e3e:	f7ff ff16 	bl	8001c6e <LL_SPI_ReceiveData8>
 8001e42:	4603      	mov	r3, r0
 8001e44:	73fb      	strb	r3, [r7, #15]

	return rxData;
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40013000 	.word	0x40013000

08001e54 <initCS_Pin>:

void initCS_Pin(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
	cs_set();
 8001e58:	f000 f802 	bl	8001e60 <cs_set>
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <cs_set>:

void cs_set(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001e64:	2120      	movs	r1, #32
 8001e66:	4802      	ldr	r0, [pc, #8]	@ (8001e70 <cs_set+0x10>)
 8001e68:	f7ff ff21 	bl	8001cae <LL_GPIO_SetOutputPin>
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	48000400 	.word	0x48000400

08001e74 <cs_reset>:

void cs_reset(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001e78:	2120      	movs	r1, #32
 8001e7a:	4802      	ldr	r0, [pc, #8]	@ (8001e84 <cs_reset+0x10>)
 8001e7c:	f7ff ff25 	bl	8001cca <LL_GPIO_ResetOutputPin>
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	48000400 	.word	0x48000400

08001e88 <initCD_Pin>:

void initCD_Pin(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <cd_set>:

void cd_set(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001e9c:	2140      	movs	r1, #64	@ 0x40
 8001e9e:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <cd_set+0x10>)
 8001ea0:	f7ff ff05 	bl	8001cae <LL_GPIO_SetOutputPin>
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	48000400 	.word	0x48000400

08001eac <cd_reset>:

void cd_reset(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8001eb0:	2140      	movs	r1, #64	@ 0x40
 8001eb2:	4802      	ldr	r0, [pc, #8]	@ (8001ebc <cd_reset+0x10>)
 8001eb4:	f7ff ff09 	bl	8001cca <LL_GPIO_ResetOutputPin>
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	48000400 	.word	0x48000400

08001ec0 <initRES_Pin>:

void initRES_Pin(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	*/
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <res_set>:

void res_set(void)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001ed2:	2108      	movs	r1, #8
 8001ed4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ed8:	f7ff fee9 	bl	8001cae <LL_GPIO_SetOutputPin>
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <res_reset>:

void res_reset(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8001ee4:	2108      	movs	r1, #8
 8001ee6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eea:	f7ff feee 	bl	8001cca <LL_GPIO_ResetOutputPin>
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ef6:	bf00      	nop
 8001ef8:	e7fd      	b.n	8001ef6 <NMI_Handler+0x4>

08001efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efe:	bf00      	nop
 8001f00:	e7fd      	b.n	8001efe <HardFault_Handler+0x4>

08001f02 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f06:	bf00      	nop
 8001f08:	e7fd      	b.n	8001f06 <MemManage_Handler+0x4>

08001f0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0e:	bf00      	nop
 8001f10:	e7fd      	b.n	8001f0e <BusFault_Handler+0x4>

08001f12 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f16:	bf00      	nop
 8001f18:	e7fd      	b.n	8001f16 <UsageFault_Handler+0x4>

08001f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f48:	f000 f874 	bl	8002034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f58:	4a14      	ldr	r2, [pc, #80]	@ (8001fac <_sbrk+0x5c>)
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <_sbrk+0x60>)
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f64:	4b13      	ldr	r3, [pc, #76]	@ (8001fb4 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d102      	bne.n	8001f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <_sbrk+0x64>)
 8001f6e:	4a12      	ldr	r2, [pc, #72]	@ (8001fb8 <_sbrk+0x68>)
 8001f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d207      	bcs.n	8001f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f80:	f000 fbcc 	bl	800271c <__errno>
 8001f84:	4603      	mov	r3, r0
 8001f86:	220c      	movs	r2, #12
 8001f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	e009      	b.n	8001fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f90:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <_sbrk+0x64>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f96:	4b07      	ldr	r3, [pc, #28]	@ (8001fb4 <_sbrk+0x64>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	4a05      	ldr	r2, [pc, #20]	@ (8001fb4 <_sbrk+0x64>)
 8001fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	20003000 	.word	0x20003000
 8001fb0:	00000400 	.word	0x00000400
 8001fb4:	200000ac 	.word	0x200000ac
 8001fb8:	20000200 	.word	0x20000200

08001fbc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <SystemInit+0x20>)
 8001fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc6:	4a05      	ldr	r2, [pc, #20]	@ (8001fdc <SystemInit+0x20>)
 8001fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <Reset_Handler>:
 8001fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002018 <LoopForever+0x2>
 8001fe4:	f7ff ffea 	bl	8001fbc <SystemInit>
 8001fe8:	480c      	ldr	r0, [pc, #48]	@ (800201c <LoopForever+0x6>)
 8001fea:	490d      	ldr	r1, [pc, #52]	@ (8002020 <LoopForever+0xa>)
 8001fec:	4a0d      	ldr	r2, [pc, #52]	@ (8002024 <LoopForever+0xe>)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e002      	b.n	8001ff8 <LoopCopyDataInit>

08001ff2 <CopyDataInit>:
 8001ff2:	58d4      	ldr	r4, [r2, r3]
 8001ff4:	50c4      	str	r4, [r0, r3]
 8001ff6:	3304      	adds	r3, #4

08001ff8 <LoopCopyDataInit>:
 8001ff8:	18c4      	adds	r4, r0, r3
 8001ffa:	428c      	cmp	r4, r1
 8001ffc:	d3f9      	bcc.n	8001ff2 <CopyDataInit>
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8002028 <LoopForever+0x12>)
 8002000:	4c0a      	ldr	r4, [pc, #40]	@ (800202c <LoopForever+0x16>)
 8002002:	2300      	movs	r3, #0
 8002004:	e001      	b.n	800200a <LoopFillZerobss>

08002006 <FillZerobss>:
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	3204      	adds	r2, #4

0800200a <LoopFillZerobss>:
 800200a:	42a2      	cmp	r2, r4
 800200c:	d3fb      	bcc.n	8002006 <FillZerobss>
 800200e:	f000 fb8b 	bl	8002728 <__libc_init_array>
 8002012:	f7fe ff5d 	bl	8000ed0 <main>

08002016 <LoopForever>:
 8002016:	e7fe      	b.n	8002016 <LoopForever>
 8002018:	20003000 	.word	0x20003000
 800201c:	20000000 	.word	0x20000000
 8002020:	2000005c 	.word	0x2000005c
 8002024:	08003280 	.word	0x08003280
 8002028:	2000005c 	.word	0x2000005c
 800202c:	200001fc 	.word	0x200001fc

08002030 <ADC1_2_IRQHandler>:
 8002030:	e7fe      	b.n	8002030 <ADC1_2_IRQHandler>
	...

08002034 <HAL_IncTick>:
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_IncTick+0x20>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <HAL_IncTick+0x24>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4413      	add	r3, r2
 8002044:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <HAL_IncTick+0x24>)
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000008 	.word	0x20000008
 8002058:	200000b0 	.word	0x200000b0

0800205c <HAL_GPIO_ReadPin>:
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	887b      	ldrh	r3, [r7, #2]
 800206e:	4013      	ands	r3, r2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <HAL_GPIO_ReadPin+0x1e>
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	e001      	b.n	800207e <HAL_GPIO_ReadPin+0x22>
 800207a:	2300      	movs	r3, #0
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_GPIO_SetPinMode>:
 800208c:	b480      	push	{r7}
 800208e:	b089      	sub	sp, #36	@ 0x24
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2103      	movs	r1, #3
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	401a      	ands	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	431a      	orrs	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	bf00      	nop
 80020e0:	3724      	adds	r7, #36	@ 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_GPIO_SetPinOutputType>:
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	401a      	ands	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	431a      	orrs	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <LL_GPIO_SetPinSpeed>:
 800211a:	b480      	push	{r7}
 800211c:	b089      	sub	sp, #36	@ 0x24
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	fa93 f3a3 	rbit	r3, r3
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	2103      	movs	r1, #3
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	401a      	ands	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa93 f3a3 	rbit	r3, r3
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	fab3 f383 	clz	r3, r3
 800215c:	b2db      	uxtb	r3, r3
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	431a      	orrs	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	bf00      	nop
 800216e:	3724      	adds	r7, #36	@ 0x24
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_GPIO_SetPinPull>:
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	@ 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	68da      	ldr	r2, [r3, #12]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2103      	movs	r1, #3
 80021a0:	fa01 f303 	lsl.w	r3, r1, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	401a      	ands	r2, r3
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	fa93 f3a3 	rbit	r3, r3
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	431a      	orrs	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	bf00      	nop
 80021cc:	3724      	adds	r7, #36	@ 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <LL_GPIO_SetAFPin_0_7>:
 80021d6:	b480      	push	{r7}
 80021d8:	b089      	sub	sp, #36	@ 0x24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a1a      	ldr	r2, [r3, #32]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	210f      	movs	r1, #15
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	401a      	ands	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	431a      	orrs	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	621a      	str	r2, [r3, #32]
 8002228:	bf00      	nop
 800222a:	3724      	adds	r7, #36	@ 0x24
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_GPIO_SetAFPin_8_15>:
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	@ 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	210f      	movs	r1, #15
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43db      	mvns	r3, r3
 8002264:	401a      	ands	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	61bb      	str	r3, [r7, #24]
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	fab3 f383 	clz	r3, r3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	431a      	orrs	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	625a      	str	r2, [r3, #36]	@ 0x24
 800228a:	bf00      	nop
 800228c:	3724      	adds	r7, #36	@ 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <LL_GPIO_Init>:
 8002296:	b580      	push	{r7, lr}
 8002298:	b088      	sub	sp, #32
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
 800229e:	6039      	str	r1, [r7, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	617b      	str	r3, [r7, #20]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	fab3 f383 	clz	r3, r3
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	e051      	b.n	800235e <LL_GPIO_Init+0xc8>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	2101      	movs	r1, #1
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d043      	beq.n	8002358 <LL_GPIO_Init+0xc2>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d003      	beq.n	80022e0 <LL_GPIO_Init+0x4a>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d10e      	bne.n	80022fe <LL_GPIO_Init+0x68>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	461a      	mov	r2, r3
 80022e6:	69b9      	ldr	r1, [r7, #24]
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ff16 	bl	800211a <LL_GPIO_SetPinSpeed>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6819      	ldr	r1, [r3, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	461a      	mov	r2, r3
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff fef6 	bl	80020ea <LL_GPIO_SetPinOutputType>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	461a      	mov	r2, r3
 8002304:	69b9      	ldr	r1, [r7, #24]
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff ff36 	bl	8002178 <LL_GPIO_SetPinPull>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d11a      	bne.n	800234a <LL_GPIO_Init+0xb4>
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b07      	cmp	r3, #7
 800232a:	d807      	bhi.n	800233c <LL_GPIO_Init+0xa6>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	461a      	mov	r2, r3
 8002332:	69b9      	ldr	r1, [r7, #24]
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ff4e 	bl	80021d6 <LL_GPIO_SetAFPin_0_7>
 800233a:	e006      	b.n	800234a <LL_GPIO_Init+0xb4>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	461a      	mov	r2, r3
 8002342:	69b9      	ldr	r1, [r7, #24]
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff ff75 	bl	8002234 <LL_GPIO_SetAFPin_8_15>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	461a      	mov	r2, r3
 8002350:	69b9      	ldr	r1, [r7, #24]
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff fe9a 	bl	800208c <LL_GPIO_SetPinMode>
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	3301      	adds	r3, #1
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1a6      	bne.n	80022ba <LL_GPIO_Init+0x24>
 800236c:	2300      	movs	r3, #0
 800236e:	4618      	mov	r0, r3
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <LL_SPI_IsEnabled>:
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002386:	2b40      	cmp	r3, #64	@ 0x40
 8002388:	d101      	bne.n	800238e <LL_SPI_IsEnabled+0x18>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <LL_SPI_IsEnabled+0x1a>
 800238e:	2300      	movs	r3, #0
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_SPI_SetRxFIFOThreshold>:
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_SPI_SetCRCPolynomial>:
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	611a      	str	r2, [r3, #16]
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <LL_SPI_Init>:
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ffc0 	bl	8002376 <LL_SPI_IsEnabled>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d145      	bne.n	8002488 <LL_SPI_Init+0xa6>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002404:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	6811      	ldr	r1, [r2, #0]
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	6852      	ldr	r2, [r2, #4]
 8002410:	4311      	orrs	r1, r2
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	68d2      	ldr	r2, [r2, #12]
 8002416:	4311      	orrs	r1, r2
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	6912      	ldr	r2, [r2, #16]
 800241c:	4311      	orrs	r1, r2
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	6952      	ldr	r2, [r2, #20]
 8002422:	4311      	orrs	r1, r2
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	6992      	ldr	r2, [r2, #24]
 8002428:	4311      	orrs	r1, r2
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	69d2      	ldr	r2, [r2, #28]
 800242e:	4311      	orrs	r1, r2
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	6a12      	ldr	r2, [r2, #32]
 8002434:	430a      	orrs	r2, r1
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002444:	f023 0304 	bic.w	r3, r3, #4
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	6891      	ldr	r1, [r2, #8]
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	6952      	ldr	r2, [r2, #20]
 8002450:	0c12      	lsrs	r2, r2, #16
 8002452:	430a      	orrs	r2, r1
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002462:	d204      	bcs.n	800246e <LL_SPI_Init+0x8c>
 8002464:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ff97 	bl	800239c <LL_SPI_SetRxFIFOThreshold>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002476:	d105      	bne.n	8002484 <LL_SPI_Init+0xa2>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	4619      	mov	r1, r3
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ff9f 	bl	80023c2 <LL_SPI_SetCRCPolynomial>
 8002484:	2300      	movs	r3, #0
 8002486:	73fb      	strb	r3, [r7, #15]
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <LL_InitTick>:
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	4a07      	ldr	r2, [pc, #28]	@ (80024c4 <LL_InitTick+0x30>)
 80024a8:	3b01      	subs	r3, #1
 80024aa:	6053      	str	r3, [r2, #4]
 80024ac:	4b05      	ldr	r3, [pc, #20]	@ (80024c4 <LL_InitTick+0x30>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
 80024b2:	4b04      	ldr	r3, [pc, #16]	@ (80024c4 <LL_InitTick+0x30>)
 80024b4:	2205      	movs	r2, #5
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000e010 	.word	0xe000e010

080024c8 <LL_Init1msTick>:
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ffdd 	bl	8002494 <LL_InitTick>
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <LL_mDelay>:
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <LL_mDelay+0x48>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fa:	d00c      	beq.n	8002516 <LL_mDelay+0x32>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3301      	adds	r3, #1
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	e008      	b.n	8002516 <LL_mDelay+0x32>
 8002504:	4b09      	ldr	r3, [pc, #36]	@ (800252c <LL_mDelay+0x48>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <LL_mDelay+0x32>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f3      	bne.n	8002504 <LL_mDelay+0x20>
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000e010 	.word	0xe000e010

08002530 <LL_SetSystemCoreClock>:
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	4a04      	ldr	r2, [pc, #16]	@ (800254c <LL_SetSystemCoreClock+0x1c>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000004 	.word	0x20000004

08002550 <sbrk_aligned>:
 8002550:	b570      	push	{r4, r5, r6, lr}
 8002552:	4e0f      	ldr	r6, [pc, #60]	@ (8002590 <sbrk_aligned+0x40>)
 8002554:	460c      	mov	r4, r1
 8002556:	6831      	ldr	r1, [r6, #0]
 8002558:	4605      	mov	r5, r0
 800255a:	b911      	cbnz	r1, 8002562 <sbrk_aligned+0x12>
 800255c:	f000 f8ce 	bl	80026fc <_sbrk_r>
 8002560:	6030      	str	r0, [r6, #0]
 8002562:	4621      	mov	r1, r4
 8002564:	4628      	mov	r0, r5
 8002566:	f000 f8c9 	bl	80026fc <_sbrk_r>
 800256a:	1c43      	adds	r3, r0, #1
 800256c:	d103      	bne.n	8002576 <sbrk_aligned+0x26>
 800256e:	f04f 34ff 	mov.w	r4, #4294967295
 8002572:	4620      	mov	r0, r4
 8002574:	bd70      	pop	{r4, r5, r6, pc}
 8002576:	1cc4      	adds	r4, r0, #3
 8002578:	f024 0403 	bic.w	r4, r4, #3
 800257c:	42a0      	cmp	r0, r4
 800257e:	d0f8      	beq.n	8002572 <sbrk_aligned+0x22>
 8002580:	1a21      	subs	r1, r4, r0
 8002582:	4628      	mov	r0, r5
 8002584:	f000 f8ba 	bl	80026fc <_sbrk_r>
 8002588:	3001      	adds	r0, #1
 800258a:	d1f2      	bne.n	8002572 <sbrk_aligned+0x22>
 800258c:	e7ef      	b.n	800256e <sbrk_aligned+0x1e>
 800258e:	bf00      	nop
 8002590:	200000b4 	.word	0x200000b4

08002594 <_malloc_r>:
 8002594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002598:	1ccd      	adds	r5, r1, #3
 800259a:	f025 0503 	bic.w	r5, r5, #3
 800259e:	3508      	adds	r5, #8
 80025a0:	2d0c      	cmp	r5, #12
 80025a2:	bf38      	it	cc
 80025a4:	250c      	movcc	r5, #12
 80025a6:	2d00      	cmp	r5, #0
 80025a8:	4606      	mov	r6, r0
 80025aa:	db01      	blt.n	80025b0 <_malloc_r+0x1c>
 80025ac:	42a9      	cmp	r1, r5
 80025ae:	d904      	bls.n	80025ba <_malloc_r+0x26>
 80025b0:	230c      	movs	r3, #12
 80025b2:	6033      	str	r3, [r6, #0]
 80025b4:	2000      	movs	r0, #0
 80025b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002690 <_malloc_r+0xfc>
 80025be:	f000 f869 	bl	8002694 <__malloc_lock>
 80025c2:	f8d8 3000 	ldr.w	r3, [r8]
 80025c6:	461c      	mov	r4, r3
 80025c8:	bb44      	cbnz	r4, 800261c <_malloc_r+0x88>
 80025ca:	4629      	mov	r1, r5
 80025cc:	4630      	mov	r0, r6
 80025ce:	f7ff ffbf 	bl	8002550 <sbrk_aligned>
 80025d2:	1c43      	adds	r3, r0, #1
 80025d4:	4604      	mov	r4, r0
 80025d6:	d158      	bne.n	800268a <_malloc_r+0xf6>
 80025d8:	f8d8 4000 	ldr.w	r4, [r8]
 80025dc:	4627      	mov	r7, r4
 80025de:	2f00      	cmp	r7, #0
 80025e0:	d143      	bne.n	800266a <_malloc_r+0xd6>
 80025e2:	2c00      	cmp	r4, #0
 80025e4:	d04b      	beq.n	800267e <_malloc_r+0xea>
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	4639      	mov	r1, r7
 80025ea:	4630      	mov	r0, r6
 80025ec:	eb04 0903 	add.w	r9, r4, r3
 80025f0:	f000 f884 	bl	80026fc <_sbrk_r>
 80025f4:	4581      	cmp	r9, r0
 80025f6:	d142      	bne.n	800267e <_malloc_r+0xea>
 80025f8:	6821      	ldr	r1, [r4, #0]
 80025fa:	1a6d      	subs	r5, r5, r1
 80025fc:	4629      	mov	r1, r5
 80025fe:	4630      	mov	r0, r6
 8002600:	f7ff ffa6 	bl	8002550 <sbrk_aligned>
 8002604:	3001      	adds	r0, #1
 8002606:	d03a      	beq.n	800267e <_malloc_r+0xea>
 8002608:	6823      	ldr	r3, [r4, #0]
 800260a:	442b      	add	r3, r5
 800260c:	6023      	str	r3, [r4, #0]
 800260e:	f8d8 3000 	ldr.w	r3, [r8]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	bb62      	cbnz	r2, 8002670 <_malloc_r+0xdc>
 8002616:	f8c8 7000 	str.w	r7, [r8]
 800261a:	e00f      	b.n	800263c <_malloc_r+0xa8>
 800261c:	6822      	ldr	r2, [r4, #0]
 800261e:	1b52      	subs	r2, r2, r5
 8002620:	d420      	bmi.n	8002664 <_malloc_r+0xd0>
 8002622:	2a0b      	cmp	r2, #11
 8002624:	d917      	bls.n	8002656 <_malloc_r+0xc2>
 8002626:	1961      	adds	r1, r4, r5
 8002628:	42a3      	cmp	r3, r4
 800262a:	6025      	str	r5, [r4, #0]
 800262c:	bf18      	it	ne
 800262e:	6059      	strne	r1, [r3, #4]
 8002630:	6863      	ldr	r3, [r4, #4]
 8002632:	bf08      	it	eq
 8002634:	f8c8 1000 	streq.w	r1, [r8]
 8002638:	5162      	str	r2, [r4, r5]
 800263a:	604b      	str	r3, [r1, #4]
 800263c:	4630      	mov	r0, r6
 800263e:	f000 f82f 	bl	80026a0 <__malloc_unlock>
 8002642:	f104 000b 	add.w	r0, r4, #11
 8002646:	1d23      	adds	r3, r4, #4
 8002648:	f020 0007 	bic.w	r0, r0, #7
 800264c:	1ac2      	subs	r2, r0, r3
 800264e:	bf1c      	itt	ne
 8002650:	1a1b      	subne	r3, r3, r0
 8002652:	50a3      	strne	r3, [r4, r2]
 8002654:	e7af      	b.n	80025b6 <_malloc_r+0x22>
 8002656:	6862      	ldr	r2, [r4, #4]
 8002658:	42a3      	cmp	r3, r4
 800265a:	bf0c      	ite	eq
 800265c:	f8c8 2000 	streq.w	r2, [r8]
 8002660:	605a      	strne	r2, [r3, #4]
 8002662:	e7eb      	b.n	800263c <_malloc_r+0xa8>
 8002664:	4623      	mov	r3, r4
 8002666:	6864      	ldr	r4, [r4, #4]
 8002668:	e7ae      	b.n	80025c8 <_malloc_r+0x34>
 800266a:	463c      	mov	r4, r7
 800266c:	687f      	ldr	r7, [r7, #4]
 800266e:	e7b6      	b.n	80025de <_malloc_r+0x4a>
 8002670:	461a      	mov	r2, r3
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	42a3      	cmp	r3, r4
 8002676:	d1fb      	bne.n	8002670 <_malloc_r+0xdc>
 8002678:	2300      	movs	r3, #0
 800267a:	6053      	str	r3, [r2, #4]
 800267c:	e7de      	b.n	800263c <_malloc_r+0xa8>
 800267e:	230c      	movs	r3, #12
 8002680:	6033      	str	r3, [r6, #0]
 8002682:	4630      	mov	r0, r6
 8002684:	f000 f80c 	bl	80026a0 <__malloc_unlock>
 8002688:	e794      	b.n	80025b4 <_malloc_r+0x20>
 800268a:	6005      	str	r5, [r0, #0]
 800268c:	e7d6      	b.n	800263c <_malloc_r+0xa8>
 800268e:	bf00      	nop
 8002690:	200000b8 	.word	0x200000b8

08002694 <__malloc_lock>:
 8002694:	4801      	ldr	r0, [pc, #4]	@ (800269c <__malloc_lock+0x8>)
 8002696:	f000 b86b 	b.w	8002770 <__retarget_lock_acquire_recursive>
 800269a:	bf00      	nop
 800269c:	200001f8 	.word	0x200001f8

080026a0 <__malloc_unlock>:
 80026a0:	4801      	ldr	r0, [pc, #4]	@ (80026a8 <__malloc_unlock+0x8>)
 80026a2:	f000 b866 	b.w	8002772 <__retarget_lock_release_recursive>
 80026a6:	bf00      	nop
 80026a8:	200001f8 	.word	0x200001f8

080026ac <siprintf>:
 80026ac:	b40e      	push	{r1, r2, r3}
 80026ae:	b500      	push	{lr}
 80026b0:	b09c      	sub	sp, #112	@ 0x70
 80026b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80026b4:	9002      	str	r0, [sp, #8]
 80026b6:	9006      	str	r0, [sp, #24]
 80026b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80026bc:	4809      	ldr	r0, [pc, #36]	@ (80026e4 <siprintf+0x38>)
 80026be:	9107      	str	r1, [sp, #28]
 80026c0:	9104      	str	r1, [sp, #16]
 80026c2:	4909      	ldr	r1, [pc, #36]	@ (80026e8 <siprintf+0x3c>)
 80026c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80026c8:	9105      	str	r1, [sp, #20]
 80026ca:	6800      	ldr	r0, [r0, #0]
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	a902      	add	r1, sp, #8
 80026d0:	f000 f8f6 	bl	80028c0 <_svfiprintf_r>
 80026d4:	9b02      	ldr	r3, [sp, #8]
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	b01c      	add	sp, #112	@ 0x70
 80026dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80026e0:	b003      	add	sp, #12
 80026e2:	4770      	bx	lr
 80026e4:	2000000c 	.word	0x2000000c
 80026e8:	ffff0208 	.word	0xffff0208

080026ec <memset>:
 80026ec:	4402      	add	r2, r0
 80026ee:	4603      	mov	r3, r0
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d100      	bne.n	80026f6 <memset+0xa>
 80026f4:	4770      	bx	lr
 80026f6:	f803 1b01 	strb.w	r1, [r3], #1
 80026fa:	e7f9      	b.n	80026f0 <memset+0x4>

080026fc <_sbrk_r>:
 80026fc:	b538      	push	{r3, r4, r5, lr}
 80026fe:	4d06      	ldr	r5, [pc, #24]	@ (8002718 <_sbrk_r+0x1c>)
 8002700:	2300      	movs	r3, #0
 8002702:	4604      	mov	r4, r0
 8002704:	4608      	mov	r0, r1
 8002706:	602b      	str	r3, [r5, #0]
 8002708:	f7ff fc22 	bl	8001f50 <_sbrk>
 800270c:	1c43      	adds	r3, r0, #1
 800270e:	d102      	bne.n	8002716 <_sbrk_r+0x1a>
 8002710:	682b      	ldr	r3, [r5, #0]
 8002712:	b103      	cbz	r3, 8002716 <_sbrk_r+0x1a>
 8002714:	6023      	str	r3, [r4, #0]
 8002716:	bd38      	pop	{r3, r4, r5, pc}
 8002718:	200001f4 	.word	0x200001f4

0800271c <__errno>:
 800271c:	4b01      	ldr	r3, [pc, #4]	@ (8002724 <__errno+0x8>)
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	2000000c 	.word	0x2000000c

08002728 <__libc_init_array>:
 8002728:	b570      	push	{r4, r5, r6, lr}
 800272a:	4d0d      	ldr	r5, [pc, #52]	@ (8002760 <__libc_init_array+0x38>)
 800272c:	4c0d      	ldr	r4, [pc, #52]	@ (8002764 <__libc_init_array+0x3c>)
 800272e:	1b64      	subs	r4, r4, r5
 8002730:	10a4      	asrs	r4, r4, #2
 8002732:	2600      	movs	r6, #0
 8002734:	42a6      	cmp	r6, r4
 8002736:	d109      	bne.n	800274c <__libc_init_array+0x24>
 8002738:	4d0b      	ldr	r5, [pc, #44]	@ (8002768 <__libc_init_array+0x40>)
 800273a:	4c0c      	ldr	r4, [pc, #48]	@ (800276c <__libc_init_array+0x44>)
 800273c:	f000 fba8 	bl	8002e90 <_init>
 8002740:	1b64      	subs	r4, r4, r5
 8002742:	10a4      	asrs	r4, r4, #2
 8002744:	2600      	movs	r6, #0
 8002746:	42a6      	cmp	r6, r4
 8002748:	d105      	bne.n	8002756 <__libc_init_array+0x2e>
 800274a:	bd70      	pop	{r4, r5, r6, pc}
 800274c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002750:	4798      	blx	r3
 8002752:	3601      	adds	r6, #1
 8002754:	e7ee      	b.n	8002734 <__libc_init_array+0xc>
 8002756:	f855 3b04 	ldr.w	r3, [r5], #4
 800275a:	4798      	blx	r3
 800275c:	3601      	adds	r6, #1
 800275e:	e7f2      	b.n	8002746 <__libc_init_array+0x1e>
 8002760:	08003278 	.word	0x08003278
 8002764:	08003278 	.word	0x08003278
 8002768:	08003278 	.word	0x08003278
 800276c:	0800327c 	.word	0x0800327c

08002770 <__retarget_lock_acquire_recursive>:
 8002770:	4770      	bx	lr

08002772 <__retarget_lock_release_recursive>:
 8002772:	4770      	bx	lr

08002774 <_free_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	4605      	mov	r5, r0
 8002778:	2900      	cmp	r1, #0
 800277a:	d041      	beq.n	8002800 <_free_r+0x8c>
 800277c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002780:	1f0c      	subs	r4, r1, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	bfb8      	it	lt
 8002786:	18e4      	addlt	r4, r4, r3
 8002788:	f7ff ff84 	bl	8002694 <__malloc_lock>
 800278c:	4a1d      	ldr	r2, [pc, #116]	@ (8002804 <_free_r+0x90>)
 800278e:	6813      	ldr	r3, [r2, #0]
 8002790:	b933      	cbnz	r3, 80027a0 <_free_r+0x2c>
 8002792:	6063      	str	r3, [r4, #4]
 8002794:	6014      	str	r4, [r2, #0]
 8002796:	4628      	mov	r0, r5
 8002798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800279c:	f7ff bf80 	b.w	80026a0 <__malloc_unlock>
 80027a0:	42a3      	cmp	r3, r4
 80027a2:	d908      	bls.n	80027b6 <_free_r+0x42>
 80027a4:	6820      	ldr	r0, [r4, #0]
 80027a6:	1821      	adds	r1, r4, r0
 80027a8:	428b      	cmp	r3, r1
 80027aa:	bf01      	itttt	eq
 80027ac:	6819      	ldreq	r1, [r3, #0]
 80027ae:	685b      	ldreq	r3, [r3, #4]
 80027b0:	1809      	addeq	r1, r1, r0
 80027b2:	6021      	streq	r1, [r4, #0]
 80027b4:	e7ed      	b.n	8002792 <_free_r+0x1e>
 80027b6:	461a      	mov	r2, r3
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	b10b      	cbz	r3, 80027c0 <_free_r+0x4c>
 80027bc:	42a3      	cmp	r3, r4
 80027be:	d9fa      	bls.n	80027b6 <_free_r+0x42>
 80027c0:	6811      	ldr	r1, [r2, #0]
 80027c2:	1850      	adds	r0, r2, r1
 80027c4:	42a0      	cmp	r0, r4
 80027c6:	d10b      	bne.n	80027e0 <_free_r+0x6c>
 80027c8:	6820      	ldr	r0, [r4, #0]
 80027ca:	4401      	add	r1, r0
 80027cc:	1850      	adds	r0, r2, r1
 80027ce:	4283      	cmp	r3, r0
 80027d0:	6011      	str	r1, [r2, #0]
 80027d2:	d1e0      	bne.n	8002796 <_free_r+0x22>
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	6053      	str	r3, [r2, #4]
 80027da:	4408      	add	r0, r1
 80027dc:	6010      	str	r0, [r2, #0]
 80027de:	e7da      	b.n	8002796 <_free_r+0x22>
 80027e0:	d902      	bls.n	80027e8 <_free_r+0x74>
 80027e2:	230c      	movs	r3, #12
 80027e4:	602b      	str	r3, [r5, #0]
 80027e6:	e7d6      	b.n	8002796 <_free_r+0x22>
 80027e8:	6820      	ldr	r0, [r4, #0]
 80027ea:	1821      	adds	r1, r4, r0
 80027ec:	428b      	cmp	r3, r1
 80027ee:	bf04      	itt	eq
 80027f0:	6819      	ldreq	r1, [r3, #0]
 80027f2:	685b      	ldreq	r3, [r3, #4]
 80027f4:	6063      	str	r3, [r4, #4]
 80027f6:	bf04      	itt	eq
 80027f8:	1809      	addeq	r1, r1, r0
 80027fa:	6021      	streq	r1, [r4, #0]
 80027fc:	6054      	str	r4, [r2, #4]
 80027fe:	e7ca      	b.n	8002796 <_free_r+0x22>
 8002800:	bd38      	pop	{r3, r4, r5, pc}
 8002802:	bf00      	nop
 8002804:	200000b8 	.word	0x200000b8

08002808 <__ssputs_r>:
 8002808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800280c:	688e      	ldr	r6, [r1, #8]
 800280e:	461f      	mov	r7, r3
 8002810:	42be      	cmp	r6, r7
 8002812:	680b      	ldr	r3, [r1, #0]
 8002814:	4682      	mov	sl, r0
 8002816:	460c      	mov	r4, r1
 8002818:	4690      	mov	r8, r2
 800281a:	d82d      	bhi.n	8002878 <__ssputs_r+0x70>
 800281c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002820:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002824:	d026      	beq.n	8002874 <__ssputs_r+0x6c>
 8002826:	6965      	ldr	r5, [r4, #20]
 8002828:	6909      	ldr	r1, [r1, #16]
 800282a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800282e:	eba3 0901 	sub.w	r9, r3, r1
 8002832:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002836:	1c7b      	adds	r3, r7, #1
 8002838:	444b      	add	r3, r9
 800283a:	106d      	asrs	r5, r5, #1
 800283c:	429d      	cmp	r5, r3
 800283e:	bf38      	it	cc
 8002840:	461d      	movcc	r5, r3
 8002842:	0553      	lsls	r3, r2, #21
 8002844:	d527      	bpl.n	8002896 <__ssputs_r+0x8e>
 8002846:	4629      	mov	r1, r5
 8002848:	f7ff fea4 	bl	8002594 <_malloc_r>
 800284c:	4606      	mov	r6, r0
 800284e:	b360      	cbz	r0, 80028aa <__ssputs_r+0xa2>
 8002850:	6921      	ldr	r1, [r4, #16]
 8002852:	464a      	mov	r2, r9
 8002854:	f000 fad8 	bl	8002e08 <memcpy>
 8002858:	89a3      	ldrh	r3, [r4, #12]
 800285a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800285e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002862:	81a3      	strh	r3, [r4, #12]
 8002864:	6126      	str	r6, [r4, #16]
 8002866:	6165      	str	r5, [r4, #20]
 8002868:	444e      	add	r6, r9
 800286a:	eba5 0509 	sub.w	r5, r5, r9
 800286e:	6026      	str	r6, [r4, #0]
 8002870:	60a5      	str	r5, [r4, #8]
 8002872:	463e      	mov	r6, r7
 8002874:	42be      	cmp	r6, r7
 8002876:	d900      	bls.n	800287a <__ssputs_r+0x72>
 8002878:	463e      	mov	r6, r7
 800287a:	6820      	ldr	r0, [r4, #0]
 800287c:	4632      	mov	r2, r6
 800287e:	4641      	mov	r1, r8
 8002880:	f000 faa8 	bl	8002dd4 <memmove>
 8002884:	68a3      	ldr	r3, [r4, #8]
 8002886:	1b9b      	subs	r3, r3, r6
 8002888:	60a3      	str	r3, [r4, #8]
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	4433      	add	r3, r6
 800288e:	6023      	str	r3, [r4, #0]
 8002890:	2000      	movs	r0, #0
 8002892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002896:	462a      	mov	r2, r5
 8002898:	f000 fac4 	bl	8002e24 <_realloc_r>
 800289c:	4606      	mov	r6, r0
 800289e:	2800      	cmp	r0, #0
 80028a0:	d1e0      	bne.n	8002864 <__ssputs_r+0x5c>
 80028a2:	6921      	ldr	r1, [r4, #16]
 80028a4:	4650      	mov	r0, sl
 80028a6:	f7ff ff65 	bl	8002774 <_free_r>
 80028aa:	230c      	movs	r3, #12
 80028ac:	f8ca 3000 	str.w	r3, [sl]
 80028b0:	89a3      	ldrh	r3, [r4, #12]
 80028b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028b6:	81a3      	strh	r3, [r4, #12]
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295
 80028bc:	e7e9      	b.n	8002892 <__ssputs_r+0x8a>
	...

080028c0 <_svfiprintf_r>:
 80028c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028c4:	4698      	mov	r8, r3
 80028c6:	898b      	ldrh	r3, [r1, #12]
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	b09d      	sub	sp, #116	@ 0x74
 80028cc:	4607      	mov	r7, r0
 80028ce:	460d      	mov	r5, r1
 80028d0:	4614      	mov	r4, r2
 80028d2:	d510      	bpl.n	80028f6 <_svfiprintf_r+0x36>
 80028d4:	690b      	ldr	r3, [r1, #16]
 80028d6:	b973      	cbnz	r3, 80028f6 <_svfiprintf_r+0x36>
 80028d8:	2140      	movs	r1, #64	@ 0x40
 80028da:	f7ff fe5b 	bl	8002594 <_malloc_r>
 80028de:	6028      	str	r0, [r5, #0]
 80028e0:	6128      	str	r0, [r5, #16]
 80028e2:	b930      	cbnz	r0, 80028f2 <_svfiprintf_r+0x32>
 80028e4:	230c      	movs	r3, #12
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ec:	b01d      	add	sp, #116	@ 0x74
 80028ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028f2:	2340      	movs	r3, #64	@ 0x40
 80028f4:	616b      	str	r3, [r5, #20]
 80028f6:	2300      	movs	r3, #0
 80028f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80028fa:	2320      	movs	r3, #32
 80028fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002900:	f8cd 800c 	str.w	r8, [sp, #12]
 8002904:	2330      	movs	r3, #48	@ 0x30
 8002906:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002aa4 <_svfiprintf_r+0x1e4>
 800290a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800290e:	f04f 0901 	mov.w	r9, #1
 8002912:	4623      	mov	r3, r4
 8002914:	469a      	mov	sl, r3
 8002916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800291a:	b10a      	cbz	r2, 8002920 <_svfiprintf_r+0x60>
 800291c:	2a25      	cmp	r2, #37	@ 0x25
 800291e:	d1f9      	bne.n	8002914 <_svfiprintf_r+0x54>
 8002920:	ebba 0b04 	subs.w	fp, sl, r4
 8002924:	d00b      	beq.n	800293e <_svfiprintf_r+0x7e>
 8002926:	465b      	mov	r3, fp
 8002928:	4622      	mov	r2, r4
 800292a:	4629      	mov	r1, r5
 800292c:	4638      	mov	r0, r7
 800292e:	f7ff ff6b 	bl	8002808 <__ssputs_r>
 8002932:	3001      	adds	r0, #1
 8002934:	f000 80a7 	beq.w	8002a86 <_svfiprintf_r+0x1c6>
 8002938:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800293a:	445a      	add	r2, fp
 800293c:	9209      	str	r2, [sp, #36]	@ 0x24
 800293e:	f89a 3000 	ldrb.w	r3, [sl]
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 809f 	beq.w	8002a86 <_svfiprintf_r+0x1c6>
 8002948:	2300      	movs	r3, #0
 800294a:	f04f 32ff 	mov.w	r2, #4294967295
 800294e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002952:	f10a 0a01 	add.w	sl, sl, #1
 8002956:	9304      	str	r3, [sp, #16]
 8002958:	9307      	str	r3, [sp, #28]
 800295a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800295e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002960:	4654      	mov	r4, sl
 8002962:	2205      	movs	r2, #5
 8002964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002968:	484e      	ldr	r0, [pc, #312]	@ (8002aa4 <_svfiprintf_r+0x1e4>)
 800296a:	f7fd fc39 	bl	80001e0 <memchr>
 800296e:	9a04      	ldr	r2, [sp, #16]
 8002970:	b9d8      	cbnz	r0, 80029aa <_svfiprintf_r+0xea>
 8002972:	06d0      	lsls	r0, r2, #27
 8002974:	bf44      	itt	mi
 8002976:	2320      	movmi	r3, #32
 8002978:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800297c:	0711      	lsls	r1, r2, #28
 800297e:	bf44      	itt	mi
 8002980:	232b      	movmi	r3, #43	@ 0x2b
 8002982:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002986:	f89a 3000 	ldrb.w	r3, [sl]
 800298a:	2b2a      	cmp	r3, #42	@ 0x2a
 800298c:	d015      	beq.n	80029ba <_svfiprintf_r+0xfa>
 800298e:	9a07      	ldr	r2, [sp, #28]
 8002990:	4654      	mov	r4, sl
 8002992:	2000      	movs	r0, #0
 8002994:	f04f 0c0a 	mov.w	ip, #10
 8002998:	4621      	mov	r1, r4
 800299a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800299e:	3b30      	subs	r3, #48	@ 0x30
 80029a0:	2b09      	cmp	r3, #9
 80029a2:	d94b      	bls.n	8002a3c <_svfiprintf_r+0x17c>
 80029a4:	b1b0      	cbz	r0, 80029d4 <_svfiprintf_r+0x114>
 80029a6:	9207      	str	r2, [sp, #28]
 80029a8:	e014      	b.n	80029d4 <_svfiprintf_r+0x114>
 80029aa:	eba0 0308 	sub.w	r3, r0, r8
 80029ae:	fa09 f303 	lsl.w	r3, r9, r3
 80029b2:	4313      	orrs	r3, r2
 80029b4:	9304      	str	r3, [sp, #16]
 80029b6:	46a2      	mov	sl, r4
 80029b8:	e7d2      	b.n	8002960 <_svfiprintf_r+0xa0>
 80029ba:	9b03      	ldr	r3, [sp, #12]
 80029bc:	1d19      	adds	r1, r3, #4
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	9103      	str	r1, [sp, #12]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	bfbb      	ittet	lt
 80029c6:	425b      	neglt	r3, r3
 80029c8:	f042 0202 	orrlt.w	r2, r2, #2
 80029cc:	9307      	strge	r3, [sp, #28]
 80029ce:	9307      	strlt	r3, [sp, #28]
 80029d0:	bfb8      	it	lt
 80029d2:	9204      	strlt	r2, [sp, #16]
 80029d4:	7823      	ldrb	r3, [r4, #0]
 80029d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80029d8:	d10a      	bne.n	80029f0 <_svfiprintf_r+0x130>
 80029da:	7863      	ldrb	r3, [r4, #1]
 80029dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80029de:	d132      	bne.n	8002a46 <_svfiprintf_r+0x186>
 80029e0:	9b03      	ldr	r3, [sp, #12]
 80029e2:	1d1a      	adds	r2, r3, #4
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	9203      	str	r2, [sp, #12]
 80029e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80029ec:	3402      	adds	r4, #2
 80029ee:	9305      	str	r3, [sp, #20]
 80029f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002ab4 <_svfiprintf_r+0x1f4>
 80029f4:	7821      	ldrb	r1, [r4, #0]
 80029f6:	2203      	movs	r2, #3
 80029f8:	4650      	mov	r0, sl
 80029fa:	f7fd fbf1 	bl	80001e0 <memchr>
 80029fe:	b138      	cbz	r0, 8002a10 <_svfiprintf_r+0x150>
 8002a00:	9b04      	ldr	r3, [sp, #16]
 8002a02:	eba0 000a 	sub.w	r0, r0, sl
 8002a06:	2240      	movs	r2, #64	@ 0x40
 8002a08:	4082      	lsls	r2, r0
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	3401      	adds	r4, #1
 8002a0e:	9304      	str	r3, [sp, #16]
 8002a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a14:	4824      	ldr	r0, [pc, #144]	@ (8002aa8 <_svfiprintf_r+0x1e8>)
 8002a16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002a1a:	2206      	movs	r2, #6
 8002a1c:	f7fd fbe0 	bl	80001e0 <memchr>
 8002a20:	2800      	cmp	r0, #0
 8002a22:	d036      	beq.n	8002a92 <_svfiprintf_r+0x1d2>
 8002a24:	4b21      	ldr	r3, [pc, #132]	@ (8002aac <_svfiprintf_r+0x1ec>)
 8002a26:	bb1b      	cbnz	r3, 8002a70 <_svfiprintf_r+0x1b0>
 8002a28:	9b03      	ldr	r3, [sp, #12]
 8002a2a:	3307      	adds	r3, #7
 8002a2c:	f023 0307 	bic.w	r3, r3, #7
 8002a30:	3308      	adds	r3, #8
 8002a32:	9303      	str	r3, [sp, #12]
 8002a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a36:	4433      	add	r3, r6
 8002a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a3a:	e76a      	b.n	8002912 <_svfiprintf_r+0x52>
 8002a3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a40:	460c      	mov	r4, r1
 8002a42:	2001      	movs	r0, #1
 8002a44:	e7a8      	b.n	8002998 <_svfiprintf_r+0xd8>
 8002a46:	2300      	movs	r3, #0
 8002a48:	3401      	adds	r4, #1
 8002a4a:	9305      	str	r3, [sp, #20]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f04f 0c0a 	mov.w	ip, #10
 8002a52:	4620      	mov	r0, r4
 8002a54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a58:	3a30      	subs	r2, #48	@ 0x30
 8002a5a:	2a09      	cmp	r2, #9
 8002a5c:	d903      	bls.n	8002a66 <_svfiprintf_r+0x1a6>
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0c6      	beq.n	80029f0 <_svfiprintf_r+0x130>
 8002a62:	9105      	str	r1, [sp, #20]
 8002a64:	e7c4      	b.n	80029f0 <_svfiprintf_r+0x130>
 8002a66:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a6a:	4604      	mov	r4, r0
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e7f0      	b.n	8002a52 <_svfiprintf_r+0x192>
 8002a70:	ab03      	add	r3, sp, #12
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	462a      	mov	r2, r5
 8002a76:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab0 <_svfiprintf_r+0x1f0>)
 8002a78:	a904      	add	r1, sp, #16
 8002a7a:	4638      	mov	r0, r7
 8002a7c:	f3af 8000 	nop.w
 8002a80:	1c42      	adds	r2, r0, #1
 8002a82:	4606      	mov	r6, r0
 8002a84:	d1d6      	bne.n	8002a34 <_svfiprintf_r+0x174>
 8002a86:	89ab      	ldrh	r3, [r5, #12]
 8002a88:	065b      	lsls	r3, r3, #25
 8002a8a:	f53f af2d 	bmi.w	80028e8 <_svfiprintf_r+0x28>
 8002a8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002a90:	e72c      	b.n	80028ec <_svfiprintf_r+0x2c>
 8002a92:	ab03      	add	r3, sp, #12
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	462a      	mov	r2, r5
 8002a98:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <_svfiprintf_r+0x1f0>)
 8002a9a:	a904      	add	r1, sp, #16
 8002a9c:	4638      	mov	r0, r7
 8002a9e:	f000 f879 	bl	8002b94 <_printf_i>
 8002aa2:	e7ed      	b.n	8002a80 <_svfiprintf_r+0x1c0>
 8002aa4:	0800323c 	.word	0x0800323c
 8002aa8:	08003246 	.word	0x08003246
 8002aac:	00000000 	.word	0x00000000
 8002ab0:	08002809 	.word	0x08002809
 8002ab4:	08003242 	.word	0x08003242

08002ab8 <_printf_common>:
 8002ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002abc:	4616      	mov	r6, r2
 8002abe:	4698      	mov	r8, r3
 8002ac0:	688a      	ldr	r2, [r1, #8]
 8002ac2:	690b      	ldr	r3, [r1, #16]
 8002ac4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	bfb8      	it	lt
 8002acc:	4613      	movlt	r3, r2
 8002ace:	6033      	str	r3, [r6, #0]
 8002ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002ad4:	4607      	mov	r7, r0
 8002ad6:	460c      	mov	r4, r1
 8002ad8:	b10a      	cbz	r2, 8002ade <_printf_common+0x26>
 8002ada:	3301      	adds	r3, #1
 8002adc:	6033      	str	r3, [r6, #0]
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	0699      	lsls	r1, r3, #26
 8002ae2:	bf42      	ittt	mi
 8002ae4:	6833      	ldrmi	r3, [r6, #0]
 8002ae6:	3302      	addmi	r3, #2
 8002ae8:	6033      	strmi	r3, [r6, #0]
 8002aea:	6825      	ldr	r5, [r4, #0]
 8002aec:	f015 0506 	ands.w	r5, r5, #6
 8002af0:	d106      	bne.n	8002b00 <_printf_common+0x48>
 8002af2:	f104 0a19 	add.w	sl, r4, #25
 8002af6:	68e3      	ldr	r3, [r4, #12]
 8002af8:	6832      	ldr	r2, [r6, #0]
 8002afa:	1a9b      	subs	r3, r3, r2
 8002afc:	42ab      	cmp	r3, r5
 8002afe:	dc26      	bgt.n	8002b4e <_printf_common+0x96>
 8002b00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002b04:	6822      	ldr	r2, [r4, #0]
 8002b06:	3b00      	subs	r3, #0
 8002b08:	bf18      	it	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	0692      	lsls	r2, r2, #26
 8002b0e:	d42b      	bmi.n	8002b68 <_printf_common+0xb0>
 8002b10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002b14:	4641      	mov	r1, r8
 8002b16:	4638      	mov	r0, r7
 8002b18:	47c8      	blx	r9
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	d01e      	beq.n	8002b5c <_printf_common+0xa4>
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	6922      	ldr	r2, [r4, #16]
 8002b22:	f003 0306 	and.w	r3, r3, #6
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	bf02      	ittt	eq
 8002b2a:	68e5      	ldreq	r5, [r4, #12]
 8002b2c:	6833      	ldreq	r3, [r6, #0]
 8002b2e:	1aed      	subeq	r5, r5, r3
 8002b30:	68a3      	ldr	r3, [r4, #8]
 8002b32:	bf0c      	ite	eq
 8002b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b38:	2500      	movne	r5, #0
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	bfc4      	itt	gt
 8002b3e:	1a9b      	subgt	r3, r3, r2
 8002b40:	18ed      	addgt	r5, r5, r3
 8002b42:	2600      	movs	r6, #0
 8002b44:	341a      	adds	r4, #26
 8002b46:	42b5      	cmp	r5, r6
 8002b48:	d11a      	bne.n	8002b80 <_printf_common+0xc8>
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	e008      	b.n	8002b60 <_printf_common+0xa8>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	4652      	mov	r2, sl
 8002b52:	4641      	mov	r1, r8
 8002b54:	4638      	mov	r0, r7
 8002b56:	47c8      	blx	r9
 8002b58:	3001      	adds	r0, #1
 8002b5a:	d103      	bne.n	8002b64 <_printf_common+0xac>
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b64:	3501      	adds	r5, #1
 8002b66:	e7c6      	b.n	8002af6 <_printf_common+0x3e>
 8002b68:	18e1      	adds	r1, r4, r3
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	2030      	movs	r0, #48	@ 0x30
 8002b6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002b72:	4422      	add	r2, r4
 8002b74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002b78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	e7c7      	b.n	8002b10 <_printf_common+0x58>
 8002b80:	2301      	movs	r3, #1
 8002b82:	4622      	mov	r2, r4
 8002b84:	4641      	mov	r1, r8
 8002b86:	4638      	mov	r0, r7
 8002b88:	47c8      	blx	r9
 8002b8a:	3001      	adds	r0, #1
 8002b8c:	d0e6      	beq.n	8002b5c <_printf_common+0xa4>
 8002b8e:	3601      	adds	r6, #1
 8002b90:	e7d9      	b.n	8002b46 <_printf_common+0x8e>
	...

08002b94 <_printf_i>:
 8002b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b98:	7e0f      	ldrb	r7, [r1, #24]
 8002b9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002b9c:	2f78      	cmp	r7, #120	@ 0x78
 8002b9e:	4691      	mov	r9, r2
 8002ba0:	4680      	mov	r8, r0
 8002ba2:	460c      	mov	r4, r1
 8002ba4:	469a      	mov	sl, r3
 8002ba6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002baa:	d807      	bhi.n	8002bbc <_printf_i+0x28>
 8002bac:	2f62      	cmp	r7, #98	@ 0x62
 8002bae:	d80a      	bhi.n	8002bc6 <_printf_i+0x32>
 8002bb0:	2f00      	cmp	r7, #0
 8002bb2:	f000 80d2 	beq.w	8002d5a <_printf_i+0x1c6>
 8002bb6:	2f58      	cmp	r7, #88	@ 0x58
 8002bb8:	f000 80b9 	beq.w	8002d2e <_printf_i+0x19a>
 8002bbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002bc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002bc4:	e03a      	b.n	8002c3c <_printf_i+0xa8>
 8002bc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002bca:	2b15      	cmp	r3, #21
 8002bcc:	d8f6      	bhi.n	8002bbc <_printf_i+0x28>
 8002bce:	a101      	add	r1, pc, #4	@ (adr r1, 8002bd4 <_printf_i+0x40>)
 8002bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002bd4:	08002c2d 	.word	0x08002c2d
 8002bd8:	08002c41 	.word	0x08002c41
 8002bdc:	08002bbd 	.word	0x08002bbd
 8002be0:	08002bbd 	.word	0x08002bbd
 8002be4:	08002bbd 	.word	0x08002bbd
 8002be8:	08002bbd 	.word	0x08002bbd
 8002bec:	08002c41 	.word	0x08002c41
 8002bf0:	08002bbd 	.word	0x08002bbd
 8002bf4:	08002bbd 	.word	0x08002bbd
 8002bf8:	08002bbd 	.word	0x08002bbd
 8002bfc:	08002bbd 	.word	0x08002bbd
 8002c00:	08002d41 	.word	0x08002d41
 8002c04:	08002c6b 	.word	0x08002c6b
 8002c08:	08002cfb 	.word	0x08002cfb
 8002c0c:	08002bbd 	.word	0x08002bbd
 8002c10:	08002bbd 	.word	0x08002bbd
 8002c14:	08002d63 	.word	0x08002d63
 8002c18:	08002bbd 	.word	0x08002bbd
 8002c1c:	08002c6b 	.word	0x08002c6b
 8002c20:	08002bbd 	.word	0x08002bbd
 8002c24:	08002bbd 	.word	0x08002bbd
 8002c28:	08002d03 	.word	0x08002d03
 8002c2c:	6833      	ldr	r3, [r6, #0]
 8002c2e:	1d1a      	adds	r2, r3, #4
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6032      	str	r2, [r6, #0]
 8002c34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e09d      	b.n	8002d7c <_printf_i+0x1e8>
 8002c40:	6833      	ldr	r3, [r6, #0]
 8002c42:	6820      	ldr	r0, [r4, #0]
 8002c44:	1d19      	adds	r1, r3, #4
 8002c46:	6031      	str	r1, [r6, #0]
 8002c48:	0606      	lsls	r6, r0, #24
 8002c4a:	d501      	bpl.n	8002c50 <_printf_i+0xbc>
 8002c4c:	681d      	ldr	r5, [r3, #0]
 8002c4e:	e003      	b.n	8002c58 <_printf_i+0xc4>
 8002c50:	0645      	lsls	r5, r0, #25
 8002c52:	d5fb      	bpl.n	8002c4c <_printf_i+0xb8>
 8002c54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002c58:	2d00      	cmp	r5, #0
 8002c5a:	da03      	bge.n	8002c64 <_printf_i+0xd0>
 8002c5c:	232d      	movs	r3, #45	@ 0x2d
 8002c5e:	426d      	negs	r5, r5
 8002c60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c64:	4859      	ldr	r0, [pc, #356]	@ (8002dcc <_printf_i+0x238>)
 8002c66:	230a      	movs	r3, #10
 8002c68:	e011      	b.n	8002c8e <_printf_i+0xfa>
 8002c6a:	6821      	ldr	r1, [r4, #0]
 8002c6c:	6833      	ldr	r3, [r6, #0]
 8002c6e:	0608      	lsls	r0, r1, #24
 8002c70:	f853 5b04 	ldr.w	r5, [r3], #4
 8002c74:	d402      	bmi.n	8002c7c <_printf_i+0xe8>
 8002c76:	0649      	lsls	r1, r1, #25
 8002c78:	bf48      	it	mi
 8002c7a:	b2ad      	uxthmi	r5, r5
 8002c7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002c7e:	4853      	ldr	r0, [pc, #332]	@ (8002dcc <_printf_i+0x238>)
 8002c80:	6033      	str	r3, [r6, #0]
 8002c82:	bf14      	ite	ne
 8002c84:	230a      	movne	r3, #10
 8002c86:	2308      	moveq	r3, #8
 8002c88:	2100      	movs	r1, #0
 8002c8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002c8e:	6866      	ldr	r6, [r4, #4]
 8002c90:	60a6      	str	r6, [r4, #8]
 8002c92:	2e00      	cmp	r6, #0
 8002c94:	bfa2      	ittt	ge
 8002c96:	6821      	ldrge	r1, [r4, #0]
 8002c98:	f021 0104 	bicge.w	r1, r1, #4
 8002c9c:	6021      	strge	r1, [r4, #0]
 8002c9e:	b90d      	cbnz	r5, 8002ca4 <_printf_i+0x110>
 8002ca0:	2e00      	cmp	r6, #0
 8002ca2:	d04b      	beq.n	8002d3c <_printf_i+0x1a8>
 8002ca4:	4616      	mov	r6, r2
 8002ca6:	fbb5 f1f3 	udiv	r1, r5, r3
 8002caa:	fb03 5711 	mls	r7, r3, r1, r5
 8002cae:	5dc7      	ldrb	r7, [r0, r7]
 8002cb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002cb4:	462f      	mov	r7, r5
 8002cb6:	42bb      	cmp	r3, r7
 8002cb8:	460d      	mov	r5, r1
 8002cba:	d9f4      	bls.n	8002ca6 <_printf_i+0x112>
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d10b      	bne.n	8002cd8 <_printf_i+0x144>
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	07df      	lsls	r7, r3, #31
 8002cc4:	d508      	bpl.n	8002cd8 <_printf_i+0x144>
 8002cc6:	6923      	ldr	r3, [r4, #16]
 8002cc8:	6861      	ldr	r1, [r4, #4]
 8002cca:	4299      	cmp	r1, r3
 8002ccc:	bfde      	ittt	le
 8002cce:	2330      	movle	r3, #48	@ 0x30
 8002cd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002cd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002cd8:	1b92      	subs	r2, r2, r6
 8002cda:	6122      	str	r2, [r4, #16]
 8002cdc:	f8cd a000 	str.w	sl, [sp]
 8002ce0:	464b      	mov	r3, r9
 8002ce2:	aa03      	add	r2, sp, #12
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	4640      	mov	r0, r8
 8002ce8:	f7ff fee6 	bl	8002ab8 <_printf_common>
 8002cec:	3001      	adds	r0, #1
 8002cee:	d14a      	bne.n	8002d86 <_printf_i+0x1f2>
 8002cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf4:	b004      	add	sp, #16
 8002cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	f043 0320 	orr.w	r3, r3, #32
 8002d00:	6023      	str	r3, [r4, #0]
 8002d02:	4833      	ldr	r0, [pc, #204]	@ (8002dd0 <_printf_i+0x23c>)
 8002d04:	2778      	movs	r7, #120	@ 0x78
 8002d06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	6831      	ldr	r1, [r6, #0]
 8002d0e:	061f      	lsls	r7, r3, #24
 8002d10:	f851 5b04 	ldr.w	r5, [r1], #4
 8002d14:	d402      	bmi.n	8002d1c <_printf_i+0x188>
 8002d16:	065f      	lsls	r7, r3, #25
 8002d18:	bf48      	it	mi
 8002d1a:	b2ad      	uxthmi	r5, r5
 8002d1c:	6031      	str	r1, [r6, #0]
 8002d1e:	07d9      	lsls	r1, r3, #31
 8002d20:	bf44      	itt	mi
 8002d22:	f043 0320 	orrmi.w	r3, r3, #32
 8002d26:	6023      	strmi	r3, [r4, #0]
 8002d28:	b11d      	cbz	r5, 8002d32 <_printf_i+0x19e>
 8002d2a:	2310      	movs	r3, #16
 8002d2c:	e7ac      	b.n	8002c88 <_printf_i+0xf4>
 8002d2e:	4827      	ldr	r0, [pc, #156]	@ (8002dcc <_printf_i+0x238>)
 8002d30:	e7e9      	b.n	8002d06 <_printf_i+0x172>
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	f023 0320 	bic.w	r3, r3, #32
 8002d38:	6023      	str	r3, [r4, #0]
 8002d3a:	e7f6      	b.n	8002d2a <_printf_i+0x196>
 8002d3c:	4616      	mov	r6, r2
 8002d3e:	e7bd      	b.n	8002cbc <_printf_i+0x128>
 8002d40:	6833      	ldr	r3, [r6, #0]
 8002d42:	6825      	ldr	r5, [r4, #0]
 8002d44:	6961      	ldr	r1, [r4, #20]
 8002d46:	1d18      	adds	r0, r3, #4
 8002d48:	6030      	str	r0, [r6, #0]
 8002d4a:	062e      	lsls	r6, r5, #24
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	d501      	bpl.n	8002d54 <_printf_i+0x1c0>
 8002d50:	6019      	str	r1, [r3, #0]
 8002d52:	e002      	b.n	8002d5a <_printf_i+0x1c6>
 8002d54:	0668      	lsls	r0, r5, #25
 8002d56:	d5fb      	bpl.n	8002d50 <_printf_i+0x1bc>
 8002d58:	8019      	strh	r1, [r3, #0]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	6123      	str	r3, [r4, #16]
 8002d5e:	4616      	mov	r6, r2
 8002d60:	e7bc      	b.n	8002cdc <_printf_i+0x148>
 8002d62:	6833      	ldr	r3, [r6, #0]
 8002d64:	1d1a      	adds	r2, r3, #4
 8002d66:	6032      	str	r2, [r6, #0]
 8002d68:	681e      	ldr	r6, [r3, #0]
 8002d6a:	6862      	ldr	r2, [r4, #4]
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4630      	mov	r0, r6
 8002d70:	f7fd fa36 	bl	80001e0 <memchr>
 8002d74:	b108      	cbz	r0, 8002d7a <_printf_i+0x1e6>
 8002d76:	1b80      	subs	r0, r0, r6
 8002d78:	6060      	str	r0, [r4, #4]
 8002d7a:	6863      	ldr	r3, [r4, #4]
 8002d7c:	6123      	str	r3, [r4, #16]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d84:	e7aa      	b.n	8002cdc <_printf_i+0x148>
 8002d86:	6923      	ldr	r3, [r4, #16]
 8002d88:	4632      	mov	r2, r6
 8002d8a:	4649      	mov	r1, r9
 8002d8c:	4640      	mov	r0, r8
 8002d8e:	47d0      	blx	sl
 8002d90:	3001      	adds	r0, #1
 8002d92:	d0ad      	beq.n	8002cf0 <_printf_i+0x15c>
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	079b      	lsls	r3, r3, #30
 8002d98:	d413      	bmi.n	8002dc2 <_printf_i+0x22e>
 8002d9a:	68e0      	ldr	r0, [r4, #12]
 8002d9c:	9b03      	ldr	r3, [sp, #12]
 8002d9e:	4298      	cmp	r0, r3
 8002da0:	bfb8      	it	lt
 8002da2:	4618      	movlt	r0, r3
 8002da4:	e7a6      	b.n	8002cf4 <_printf_i+0x160>
 8002da6:	2301      	movs	r3, #1
 8002da8:	4632      	mov	r2, r6
 8002daa:	4649      	mov	r1, r9
 8002dac:	4640      	mov	r0, r8
 8002dae:	47d0      	blx	sl
 8002db0:	3001      	adds	r0, #1
 8002db2:	d09d      	beq.n	8002cf0 <_printf_i+0x15c>
 8002db4:	3501      	adds	r5, #1
 8002db6:	68e3      	ldr	r3, [r4, #12]
 8002db8:	9903      	ldr	r1, [sp, #12]
 8002dba:	1a5b      	subs	r3, r3, r1
 8002dbc:	42ab      	cmp	r3, r5
 8002dbe:	dcf2      	bgt.n	8002da6 <_printf_i+0x212>
 8002dc0:	e7eb      	b.n	8002d9a <_printf_i+0x206>
 8002dc2:	2500      	movs	r5, #0
 8002dc4:	f104 0619 	add.w	r6, r4, #25
 8002dc8:	e7f5      	b.n	8002db6 <_printf_i+0x222>
 8002dca:	bf00      	nop
 8002dcc:	0800324d 	.word	0x0800324d
 8002dd0:	0800325e 	.word	0x0800325e

08002dd4 <memmove>:
 8002dd4:	4288      	cmp	r0, r1
 8002dd6:	b510      	push	{r4, lr}
 8002dd8:	eb01 0402 	add.w	r4, r1, r2
 8002ddc:	d902      	bls.n	8002de4 <memmove+0x10>
 8002dde:	4284      	cmp	r4, r0
 8002de0:	4623      	mov	r3, r4
 8002de2:	d807      	bhi.n	8002df4 <memmove+0x20>
 8002de4:	1e43      	subs	r3, r0, #1
 8002de6:	42a1      	cmp	r1, r4
 8002de8:	d008      	beq.n	8002dfc <memmove+0x28>
 8002dea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002df2:	e7f8      	b.n	8002de6 <memmove+0x12>
 8002df4:	4402      	add	r2, r0
 8002df6:	4601      	mov	r1, r0
 8002df8:	428a      	cmp	r2, r1
 8002dfa:	d100      	bne.n	8002dfe <memmove+0x2a>
 8002dfc:	bd10      	pop	{r4, pc}
 8002dfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e06:	e7f7      	b.n	8002df8 <memmove+0x24>

08002e08 <memcpy>:
 8002e08:	440a      	add	r2, r1
 8002e0a:	4291      	cmp	r1, r2
 8002e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e10:	d100      	bne.n	8002e14 <memcpy+0xc>
 8002e12:	4770      	bx	lr
 8002e14:	b510      	push	{r4, lr}
 8002e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e1e:	4291      	cmp	r1, r2
 8002e20:	d1f9      	bne.n	8002e16 <memcpy+0xe>
 8002e22:	bd10      	pop	{r4, pc}

08002e24 <_realloc_r>:
 8002e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e28:	4680      	mov	r8, r0
 8002e2a:	4615      	mov	r5, r2
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	b921      	cbnz	r1, 8002e3a <_realloc_r+0x16>
 8002e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e34:	4611      	mov	r1, r2
 8002e36:	f7ff bbad 	b.w	8002594 <_malloc_r>
 8002e3a:	b92a      	cbnz	r2, 8002e48 <_realloc_r+0x24>
 8002e3c:	f7ff fc9a 	bl	8002774 <_free_r>
 8002e40:	2400      	movs	r4, #0
 8002e42:	4620      	mov	r0, r4
 8002e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e48:	f000 f81a 	bl	8002e80 <_malloc_usable_size_r>
 8002e4c:	4285      	cmp	r5, r0
 8002e4e:	4606      	mov	r6, r0
 8002e50:	d802      	bhi.n	8002e58 <_realloc_r+0x34>
 8002e52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002e56:	d8f4      	bhi.n	8002e42 <_realloc_r+0x1e>
 8002e58:	4629      	mov	r1, r5
 8002e5a:	4640      	mov	r0, r8
 8002e5c:	f7ff fb9a 	bl	8002594 <_malloc_r>
 8002e60:	4607      	mov	r7, r0
 8002e62:	2800      	cmp	r0, #0
 8002e64:	d0ec      	beq.n	8002e40 <_realloc_r+0x1c>
 8002e66:	42b5      	cmp	r5, r6
 8002e68:	462a      	mov	r2, r5
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	bf28      	it	cs
 8002e6e:	4632      	movcs	r2, r6
 8002e70:	f7ff ffca 	bl	8002e08 <memcpy>
 8002e74:	4621      	mov	r1, r4
 8002e76:	4640      	mov	r0, r8
 8002e78:	f7ff fc7c 	bl	8002774 <_free_r>
 8002e7c:	463c      	mov	r4, r7
 8002e7e:	e7e0      	b.n	8002e42 <_realloc_r+0x1e>

08002e80 <_malloc_usable_size_r>:
 8002e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e84:	1f18      	subs	r0, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bfbc      	itt	lt
 8002e8a:	580b      	ldrlt	r3, [r1, r0]
 8002e8c:	18c0      	addlt	r0, r0, r3
 8002e8e:	4770      	bx	lr

08002e90 <_init>:
 8002e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e92:	bf00      	nop
 8002e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e96:	bc08      	pop	{r3}
 8002e98:	469e      	mov	lr, r3
 8002e9a:	4770      	bx	lr

08002e9c <_fini>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	bf00      	nop
 8002ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea2:	bc08      	pop	{r3}
 8002ea4:	469e      	mov	lr, r3
 8002ea6:	4770      	bx	lr
