
DOOM-vrs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004320  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  080044b0  080044b0  000054b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b8  080048b8  00006058  2**0
                  CONTENTS
  4 .ARM          00000008  080048b8  080048b8  000058b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048c0  080048c0  00006058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c0  080048c0  000058c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048c4  080048c4  000058c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  080048c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006058  2**0
                  CONTENTS
 10 .bss          0000016c  20000058  20000058  00006058  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001c4  200001c4  00006058  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006058  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004501  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012de  00000000  00000000  0000a589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000618  00000000  00000000  0000b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000474  00000000  00000000  0000be80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3fa  00000000  00000000  0000c2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007612  00000000  00000000  000276ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f968  00000000  00000000  0002ed00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ce668  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c28  00000000  00000000  000ce6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000d02d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000058 	.word	0x20000058
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004498 	.word	0x08004498

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	08004498 	.word	0x08004498

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000288:	4b08      	ldr	r3, [pc, #32]	@ (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800028a:	695a      	ldr	r2, [r3, #20]
 800028c:	4907      	ldr	r1, [pc, #28]	@ (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4313      	orrs	r3, r2
 8000292:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000294:	4b05      	ldr	r3, [pc, #20]	@ (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000296:	695a      	ldr	r2, [r3, #20]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4013      	ands	r3, r2
 800029c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800029e:	68fb      	ldr	r3, [r7, #12]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	40021000 	.word	0x40021000

080002b0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	683a      	ldr	r2, [r7, #0]
 80002be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	463b      	mov	r3, r7
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
 80002e0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80002e2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80002e6:	f7ff ffcb 	bl	8000280 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80002ea:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80002ee:	f7ff ffc7 	bl	8000280 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4);
 80002f2:	2118      	movs	r1, #24
 80002f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f8:	f7ff ffda 	bl	80002b0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7);
 80002fc:	21f0      	movs	r1, #240	@ 0xf0
 80002fe:	4813      	ldr	r0, [pc, #76]	@ (800034c <MX_GPIO_Init+0x80>)
 8000300:	f7ff ffd6 	bl	80002b0 <LL_GPIO_ResetOutputPin>

  /**/

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 8000304:	2318      	movs	r3, #24
 8000306:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000308:	2301      	movs	r3, #1
 800030a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800030c:	2303      	movs	r3, #3
 800030e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000314:	2300      	movs	r3, #0
 8000316:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000318:	463b      	mov	r3, r7
 800031a:	4619      	mov	r1, r3
 800031c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000320:	f003 fabd 	bl	800389e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000324:	23f0      	movs	r3, #240	@ 0xf0
 8000326:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000328:	2301      	movs	r3, #1
 800032a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800032c:	2303      	movs	r3, #3
 800032e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000334:	2300      	movs	r3, #0
 8000336:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000338:	463b      	mov	r3, r7
 800033a:	4619      	mov	r1, r3
 800033c:	4803      	ldr	r0, [pc, #12]	@ (800034c <MX_GPIO_Init+0x80>)
 800033e:	f003 faae 	bl	800389e <LL_GPIO_Init>

}
 8000342:	bf00      	nop
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	48000400 	.word	0x48000400

08000350 <lcdReset>:

// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	res_reset();
 8000354:	f003 f8e0 	bl	8003518 <res_reset>
	LL_mDelay(100);
 8000358:	2064      	movs	r0, #100	@ 0x64
 800035a:	f003 fbc7 	bl	8003aec <LL_mDelay>

	res_set();
 800035e:	f003 f8d2 	bl	8003506 <res_set>
	LL_mDelay(100);
 8000362:	2064      	movs	r0, #100	@ 0x64
 8000364:	f003 fbc2 	bl	8003aec <LL_mDelay>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}

0800036c <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address) //urcuje obsah nasledujucich write data/parameter
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
	cd_reset();
 8000376:	f003 f8b5 	bl	80034e4 <cd_reset>
	cs_reset();
 800037a:	f003 f897 	bl	80034ac <cs_reset>
	readWriteSPI1(address);
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	4618      	mov	r0, r3
 8000382:	f003 f85f 	bl	8003444 <readWriteSPI1>
	cs_set();
 8000386:	f003 f887 	bl	8003498 <cs_set>
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <lcdWriteParameter>:

void lcdWriteParameter(int16_t parameter) //tymto sa zapisuju rozne veci
{
 8000392:	b580      	push	{r7, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	af00      	add	r7, sp, #0
 8000398:	4603      	mov	r3, r0
 800039a:	80fb      	strh	r3, [r7, #6]
	cd_set();
 800039c:	f003 f898 	bl	80034d0 <cd_set>
	cs_reset();
 80003a0:	f003 f884 	bl	80034ac <cs_reset>
	readWriteSPI1(parameter); //original
 80003a4:	88fb      	ldrh	r3, [r7, #6]
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	4618      	mov	r0, r3
 80003aa:	f003 f84b 	bl	8003444 <readWriteSPI1>
	}
	else {
		 //If parameter is 8 bits or less, send it directly
		readWriteSPI1((uint8_t)(parameter & 0xFF));
	}*/
	cs_set();
 80003ae:	f003 f873 	bl	8003498 <cs_set>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2)  //tymto sa zapisuje farba
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
 80003c0:	4603      	mov	r3, r0
 80003c2:	460a      	mov	r2, r1
 80003c4:	71fb      	strb	r3, [r7, #7]
 80003c6:	4613      	mov	r3, r2
 80003c8:	71bb      	strb	r3, [r7, #6]
	cd_set();
 80003ca:	f003 f881 	bl	80034d0 <cd_set>
	cs_reset();
 80003ce:	f003 f86d 	bl	80034ac <cs_reset>
	readWriteSPI1(dataByte1); //posielame samostatne dva bajty o farbe
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	4618      	mov	r0, r3
 80003d6:	f003 f835 	bl	8003444 <readWriteSPI1>
	readWriteSPI1(dataByte2);
 80003da:	79bb      	ldrb	r3, [r7, #6]
 80003dc:	4618      	mov	r0, r3
 80003de:	f003 f831 	bl	8003444 <readWriteSPI1>
	cs_set();
 80003e2:	f003 f859 	bl	8003498 <cs_set>
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <lcdInitialise>:

void lcdInitialise(uint8_t orientation)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	4603      	mov	r3, r0
 80003f6:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD


	// Hardware reset the LCD
	lcdReset();
 80003f8:	f7ff ffaa 	bl	8000350 <lcdReset>

    lcdWriteCommand(EXIT_SLEEP_MODE);
 80003fc:	2011      	movs	r0, #17
 80003fe:	f7ff ffb5 	bl	800036c <lcdWriteCommand>
    LL_mDelay(100); //Delay(10000); // Wait for the screen to wake up
 8000402:	2064      	movs	r0, #100	@ 0x64
 8000404:	f003 fb72 	bl	8003aec <LL_mDelay>

    lcdWriteCommand(SET_PIXEL_FORMAT);
 8000408:	203a      	movs	r0, #58	@ 0x3a
 800040a:	f7ff ffaf 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x05); // 16 bits per pixel
 800040e:	2005      	movs	r0, #5
 8000410:	f7ff ffbf 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(SET_GAMMA_CURVE);
 8000414:	2026      	movs	r0, #38	@ 0x26
 8000416:	f7ff ffa9 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x04); // Select gamma curve 3
 800041a:	2004      	movs	r0, #4
 800041c:	f7ff ffb9 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(GAM_R_SEL);
 8000420:	20f2      	movs	r0, #242	@ 0xf2
 8000422:	f7ff ffa3 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x01); // Gamma adjustment enabled
 8000426:	2001      	movs	r0, #1
 8000428:	f7ff ffb3 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 800042c:	20e0      	movs	r0, #224	@ 0xe0
 800042e:	f7ff ff9d 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x3f); // 1st Parameter
 8000432:	203f      	movs	r0, #63	@ 0x3f
 8000434:	f7ff ffad 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x25); // 2nd Parameter
 8000438:	2025      	movs	r0, #37	@ 0x25
 800043a:	f7ff ffaa 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x1c); // 3rd Parameter
 800043e:	201c      	movs	r0, #28
 8000440:	f7ff ffa7 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x1e); // 4th Parameter
 8000444:	201e      	movs	r0, #30
 8000446:	f7ff ffa4 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 5th Parameter
 800044a:	2020      	movs	r0, #32
 800044c:	f7ff ffa1 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x12); // 6th Parameter
 8000450:	2012      	movs	r0, #18
 8000452:	f7ff ff9e 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 7th Parameter
 8000456:	202a      	movs	r0, #42	@ 0x2a
 8000458:	f7ff ff9b 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x90); // 8th Parameter
 800045c:	2090      	movs	r0, #144	@ 0x90
 800045e:	f7ff ff98 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x24); // 9th Parameter
 8000462:	2024      	movs	r0, #36	@ 0x24
 8000464:	f7ff ff95 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x11); // 10th Parameter
 8000468:	2011      	movs	r0, #17
 800046a:	f7ff ff92 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 11th Parameter
 800046e:	2000      	movs	r0, #0
 8000470:	f7ff ff8f 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 12th Parameter
 8000474:	2000      	movs	r0, #0
 8000476:	f7ff ff8c 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 13th Parameter
 800047a:	2000      	movs	r0, #0
 800047c:	f7ff ff89 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 14th Parameter
 8000480:	2000      	movs	r0, #0
 8000482:	f7ff ff86 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 15th Parameter
 8000486:	2000      	movs	r0, #0
 8000488:	f7ff ff83 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 800048c:	20e1      	movs	r0, #225	@ 0xe1
 800048e:	f7ff ff6d 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x20); // 1st Parameter
 8000492:	2020      	movs	r0, #32
 8000494:	f7ff ff7d 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 2nd Parameter
 8000498:	2020      	movs	r0, #32
 800049a:	f7ff ff7a 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 3rd Parameter
 800049e:	2020      	movs	r0, #32
 80004a0:	f7ff ff77 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 4th Parameter
 80004a4:	2020      	movs	r0, #32
 80004a6:	f7ff ff74 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x05); // 5th Parameter
 80004aa:	2005      	movs	r0, #5
 80004ac:	f7ff ff71 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 6th Parameter
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ff6e 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x15); // 7th Parameter
 80004b6:	2015      	movs	r0, #21
 80004b8:	f7ff ff6b 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0xa7); // 8th Parameter
 80004bc:	20a7      	movs	r0, #167	@ 0xa7
 80004be:	f7ff ff68 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x3d); // 9th Parameter
 80004c2:	203d      	movs	r0, #61	@ 0x3d
 80004c4:	f7ff ff65 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x18); // 10th Parameter
 80004c8:	2018      	movs	r0, #24
 80004ca:	f7ff ff62 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x25); // 11th Parameter
 80004ce:	2025      	movs	r0, #37	@ 0x25
 80004d0:	f7ff ff5f 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 12th Parameter
 80004d4:	202a      	movs	r0, #42	@ 0x2a
 80004d6:	f7ff ff5c 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 13th Parameter
 80004da:	202b      	movs	r0, #43	@ 0x2b
 80004dc:	f7ff ff59 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 14th Parameter
 80004e0:	202b      	movs	r0, #43	@ 0x2b
 80004e2:	f7ff ff56 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x3a); // 15th Parameter
 80004e6:	203a      	movs	r0, #58	@ 0x3a
 80004e8:	f7ff ff53 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(FRAME_RATE_CONTROL1);
 80004ec:	20b1      	movs	r0, #177	@ 0xb1
 80004ee:	f7ff ff3d 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x08); // DIVA = 8
 80004f2:	2008      	movs	r0, #8
 80004f4:	f7ff ff4d 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x08); // VPA = 8
 80004f8:	2008      	movs	r0, #8
 80004fa:	f7ff ff4a 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(DISPLAY_INVERSION);
 80004fe:	20b4      	movs	r0, #180	@ 0xb4
 8000500:	f7ff ff34 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8000504:	2007      	movs	r0, #7
 8000506:	f7ff ff44 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL1);
 800050a:	20c0      	movs	r0, #192	@ 0xc0
 800050c:	f7ff ff2e 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 8000510:	200a      	movs	r0, #10
 8000512:	f7ff ff3e 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 8000516:	2002      	movs	r0, #2
 8000518:	f7ff ff3b 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL2);
 800051c:	20c1      	movs	r0, #193	@ 0xc1
 800051e:	f7ff ff25 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 8000522:	2002      	movs	r0, #2
 8000524:	f7ff ff35 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(VCOM_CONTROL1);
 8000528:	20c5      	movs	r0, #197	@ 0xc5
 800052a:	f7ff ff1f 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 800052e:	2050      	movs	r0, #80	@ 0x50
 8000530:	f7ff ff2f 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 8000534:	205b      	movs	r0, #91	@ 0x5b
 8000536:	f7ff ff2c 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(VCOM_OFFSET_CONTROL);
 800053a:	20c7      	movs	r0, #199	@ 0xc7
 800053c:	f7ff ff16 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 8000540:	2040      	movs	r0, #64	@ 0x40
 8000542:	f7ff ff26 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(SET_COLUMN_ADDRESS);
 8000546:	202a      	movs	r0, #42	@ 0x2a
 8000548:	f7ff ff10 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x00); // XSH
 800054c:	2000      	movs	r0, #0
 800054e:	f7ff ff20 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00); // XSL
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ff1d 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x01); // End Column High Byte
 8000558:	2001      	movs	r0, #1
 800055a:	f7ff ff1a 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x3F); // End Column Low Byte 319
 800055e:	203f      	movs	r0, #63	@ 0x3f
 8000560:	f7ff ff17 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(SET_PAGE_ADDRESS);
 8000564:	202b      	movs	r0, #43	@ 0x2b
 8000566:	f7ff ff01 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x00);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff ff11 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff ff0e 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00); // End Page High Byte
 8000576:	2000      	movs	r0, #0
 8000578:	f7ff ff0b 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0xEF); // End Page Low Byte (239, 0x00EF in hex)
 800057c:	20ef      	movs	r0, #239	@ 0xef
 800057e:	f7ff ff08 	bl	8000392 <lcdWriteParameter>

	// Select display orientation
    lcdWriteCommand(SET_ADDRESS_MODE);
 8000582:	2036      	movs	r0, #54	@ 0x36
 8000584:	f7ff fef2 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(orientation);
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	b21b      	sxth	r3, r3
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ff00 	bl	8000392 <lcdWriteParameter>

	// Set the display to on
    lcdWriteCommand(SET_DISPLAY_ON);
 8000592:	2029      	movs	r0, #41	@ 0x29
 8000594:	f7ff feea 	bl	800036c <lcdWriteCommand>
    lcdWriteCommand(WRITE_MEMORY_START);
 8000598:	202c      	movs	r0, #44	@ 0x2c
 800059a:	f7ff fee7 	bl	800036c <lcdWriteCommand>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <lcdPlot>:
	}
}

// changing a single pixel on display
void lcdPlot(int16_t x, int16_t y, uint16_t colour)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	4603      	mov	r3, r0
 80005ae:	80fb      	strh	r3, [r7, #6]
 80005b0:	460b      	mov	r3, r1
 80005b2:	80bb      	strh	r3, [r7, #4]
 80005b4:	4613      	mov	r3, r2
 80005b6:	807b      	strh	r3, [r7, #2]
	// Horizontal Address Start Position
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 80005b8:	202a      	movs	r0, #42	@ 0x2a
 80005ba:	f7ff fed7 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80005be:	2000      	movs	r0, #0
 80005c0:	f7ff fee7 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(x);
 80005c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fee2 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f7ff fedf 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x013F);//319
 80005d4:	f240 103f 	movw	r0, #319	@ 0x13f
 80005d8:	f7ff fedb 	bl	8000392 <lcdWriteParameter>

	// Vertical Address end Position
	lcdWriteCommand(SET_PAGE_ADDRESS);
 80005dc:	202b      	movs	r0, #43	@ 0x2b
 80005de:	f7ff fec5 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff fed5 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(y);
 80005e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fed0 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f7ff fecd 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0xEF);//239
 80005f8:	20ef      	movs	r0, #239	@ 0xef
 80005fa:	f7ff feca 	bl	8000392 <lcdWriteParameter>

	// Plot the point
	lcdWriteCommand(WRITE_MEMORY_START);
 80005fe:	202c      	movs	r0, #44	@ 0x2c
 8000600:	f7ff feb4 	bl	800036c <lcdWriteCommand>
	if((x>=0)&&(x<256)&&(y>=0)&&(y<240)) //check if pixel is inside the bounds
 8000604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000608:	2b00      	cmp	r3, #0
 800060a:	db15      	blt.n	8000638 <lcdPlot+0x92>
 800060c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000610:	2bff      	cmp	r3, #255	@ 0xff
 8000612:	dc11      	bgt.n	8000638 <lcdPlot+0x92>
 8000614:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000618:	2b00      	cmp	r3, #0
 800061a:	db0d      	blt.n	8000638 <lcdPlot+0x92>
 800061c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000620:	2bef      	cmp	r3, #239	@ 0xef
 8000622:	dc09      	bgt.n	8000638 <lcdPlot+0x92>
		lcdWriteData(colour >> 8, colour);
 8000624:	887b      	ldrh	r3, [r7, #2]
 8000626:	0a1b      	lsrs	r3, r3, #8
 8000628:	b29b      	uxth	r3, r3
 800062a:	b2db      	uxtb	r3, r3
 800062c:	887a      	ldrh	r2, [r7, #2]
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	4611      	mov	r1, r2
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fec1 	bl	80003ba <lcdWriteData>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <lcdLine>:

void lcdLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b08b      	sub	sp, #44	@ 0x2c
 8000644:	af02      	add	r7, sp, #8
 8000646:	4604      	mov	r4, r0
 8000648:	4608      	mov	r0, r1
 800064a:	4611      	mov	r1, r2
 800064c:	461a      	mov	r2, r3
 800064e:	4623      	mov	r3, r4
 8000650:	80fb      	strh	r3, [r7, #6]
 8000652:	4603      	mov	r3, r0
 8000654:	80bb      	strh	r3, [r7, #4]
 8000656:	460b      	mov	r3, r1
 8000658:	807b      	strh	r3, [r7, #2]
 800065a:	4613      	mov	r3, r2
 800065c:	803b      	strh	r3, [r7, #0]
	if(x0 == x1){ //vodorovna ciara optimalizovane
 800065e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000662:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000666:	429a      	cmp	r2, r3
 8000668:	d10d      	bne.n	8000686 <lcdLine+0x46>
		lcdFilledRectangle(x0, y0, x1, y1, colour);
 800066a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800066e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000672:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000676:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800067a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	4623      	mov	r3, r4
 8000680:	f000 fa4f 	bl	8000b22 <lcdFilledRectangle>
		return;
 8000684:	e0e4      	b.n	8000850 <lcdLine+0x210>
	}
	else if(y0 == y1){ //zvisla ciara optimalizovane
 8000686:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800068a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800068e:	429a      	cmp	r2, r3
 8000690:	d10d      	bne.n	80006ae <lcdLine+0x6e>
		lcdFilledRectangle(x0, y0, x1, y1, colour);
 8000692:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000696:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800069a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800069e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80006a2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	4623      	mov	r3, r4
 80006a8:	f000 fa3b 	bl	8000b22 <lcdFilledRectangle>
		return;
 80006ac:	e0d0      	b.n	8000850 <lcdLine+0x210>
	}

	int16_t dy = y1 - y0;
 80006ae:	883a      	ldrh	r2, [r7, #0]
 80006b0:	88bb      	ldrh	r3, [r7, #4]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	83fb      	strh	r3, [r7, #30]
	int16_t dx = x1 - x0;
 80006b8:	887a      	ldrh	r2, [r7, #2]
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	b29b      	uxth	r3, r3
 80006c0:	83bb      	strh	r3, [r7, #28]
	int16_t stepx, stepy;

	if (dy < 0) //derivacie musia byt kladne
 80006c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	da07      	bge.n	80006da <lcdLine+0x9a>
	{
		dy = -dy; stepy = -1;
 80006ca:	8bfb      	ldrh	r3, [r7, #30]
 80006cc:	425b      	negs	r3, r3
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	83fb      	strh	r3, [r7, #30]
 80006d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006d6:	833b      	strh	r3, [r7, #24]
 80006d8:	e001      	b.n	80006de <lcdLine+0x9e>
	}
	else stepy = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	833b      	strh	r3, [r7, #24]

	if (dx < 0) //derivacie musia byt kladne
 80006de:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	da07      	bge.n	80006f6 <lcdLine+0xb6>
	{
		dx = -dx; stepx = -1;
 80006e6:	8bbb      	ldrh	r3, [r7, #28]
 80006e8:	425b      	negs	r3, r3
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	83bb      	strh	r3, [r7, #28]
 80006ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006f2:	837b      	strh	r3, [r7, #26]
 80006f4:	e001      	b.n	80006fa <lcdLine+0xba>
	}
	else stepx = 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	837b      	strh	r3, [r7, #26]

	dy <<= 1;	//dy*2
 80006fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	83fb      	strh	r3, [r7, #30]
	dx <<= 1;	//dx*2
 8000702:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	83bb      	strh	r3, [r7, #28]

	lcdPlot(x0, y0, colour);	//zaciatocny pixel
 800070a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800070c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff46 	bl	80005a6 <lcdPlot>
	uint16_t partialLineStartCoord = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	82fb      	strh	r3, [r7, #22]

	if (dx > dy) {  //menej nez 45 stupnov
 800071e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000722:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000726:	429a      	cmp	r2, r3
 8000728:	dd49      	ble.n	80007be <lcdLine+0x17e>
		partialLineStartCoord = x0-1;
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	3b01      	subs	r3, #1
 800072e:	82fb      	strh	r3, [r7, #22]
		int fraction = dy - (dx >> 1);	//dy-(dx/2)
 8000730:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000734:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000738:	1052      	asrs	r2, r2, #1
 800073a:	b212      	sxth	r2, r2
 800073c:	1a9b      	subs	r3, r3, r2
 800073e:	613b      	str	r3, [r7, #16]
		while (x0 != x1)
 8000740:	e027      	b.n	8000792 <lcdLine+0x152>
		{

			if (fraction >= 0) //when we move up 1 pixel on Y axis
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	2b00      	cmp	r3, #0
 8000746:	db1a      	blt.n	800077e <lcdLine+0x13e>
			{
				lcdFilledRectangle(partialLineStartCoord+1, y0, x0, y0, colour);
 8000748:	8afb      	ldrh	r3, [r7, #22]
 800074a:	3301      	adds	r3, #1
 800074c:	b29b      	uxth	r3, r3
 800074e:	b218      	sxth	r0, r3
 8000750:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000754:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000758:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800075c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	4623      	mov	r3, r4
 8000762:	f000 f9de 	bl	8000b22 <lcdFilledRectangle>
				partialLineStartCoord = x0;
 8000766:	88fb      	ldrh	r3, [r7, #6]
 8000768:	82fb      	strh	r3, [r7, #22]
				y0 += stepy;
 800076a:	88ba      	ldrh	r2, [r7, #4]
 800076c:	8b3b      	ldrh	r3, [r7, #24]
 800076e:	4413      	add	r3, r2
 8000770:	b29b      	uxth	r3, r3
 8000772:	80bb      	strh	r3, [r7, #4]
				fraction -= dx;
 8000774:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000778:	693a      	ldr	r2, [r7, #16]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	613b      	str	r3, [r7, #16]
			}

			x0 += stepx;
 800077e:	88fa      	ldrh	r2, [r7, #6]
 8000780:	8b7b      	ldrh	r3, [r7, #26]
 8000782:	4413      	add	r3, r2
 8000784:	b29b      	uxth	r3, r3
 8000786:	80fb      	strh	r3, [r7, #6]
			fraction += dy;
 8000788:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	4413      	add	r3, r2
 8000790:	613b      	str	r3, [r7, #16]
		while (x0 != x1)
 8000792:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000796:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800079a:	429a      	cmp	r2, r3
 800079c:	d1d1      	bne.n	8000742 <lcdLine+0x102>
		}
		lcdFilledRectangle(partialLineStartCoord+1, y0, x0, y0, colour);
 800079e:	8afb      	ldrh	r3, [r7, #22]
 80007a0:	3301      	adds	r3, #1
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	b218      	sxth	r0, r3
 80007a6:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80007aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007b2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	4623      	mov	r3, r4
 80007b8:	f000 f9b3 	bl	8000b22 <lcdFilledRectangle>
 80007bc:	e048      	b.n	8000850 <lcdLine+0x210>
	}
	else			//viac nez 45 stupnov
	{
		partialLineStartCoord = y0-1;
 80007be:	88bb      	ldrh	r3, [r7, #4]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	82fb      	strh	r3, [r7, #22]
		int fraction = dx - (dy >> 1);
 80007c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80007c8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80007cc:	1052      	asrs	r2, r2, #1
 80007ce:	b212      	sxth	r2, r2
 80007d0:	1a9b      	subs	r3, r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]
		while (y0 != y1)
 80007d4:	e027      	b.n	8000826 <lcdLine+0x1e6>
		{
			if (fraction >= 0)	//when we move up 1 pixel on X axis
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	db1a      	blt.n	8000812 <lcdLine+0x1d2>
			{
				lcdFilledRectangle(x0, partialLineStartCoord+1, x0, y0, colour);
 80007dc:	8afb      	ldrh	r3, [r7, #22]
 80007de:	3301      	adds	r3, #1
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	b219      	sxth	r1, r3
 80007e4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80007e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007ec:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007f0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	4623      	mov	r3, r4
 80007f6:	f000 f994 	bl	8000b22 <lcdFilledRectangle>
				partialLineStartCoord = y0;
 80007fa:	88bb      	ldrh	r3, [r7, #4]
 80007fc:	82fb      	strh	r3, [r7, #22]
				x0 += stepx;
 80007fe:	88fa      	ldrh	r2, [r7, #6]
 8000800:	8b7b      	ldrh	r3, [r7, #26]
 8000802:	4413      	add	r3, r2
 8000804:	b29b      	uxth	r3, r3
 8000806:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 8000808:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	60fb      	str	r3, [r7, #12]
			}

			y0 += stepy;
 8000812:	88ba      	ldrh	r2, [r7, #4]
 8000814:	8b3b      	ldrh	r3, [r7, #24]
 8000816:	4413      	add	r3, r2
 8000818:	b29b      	uxth	r3, r3
 800081a:	80bb      	strh	r3, [r7, #4]
			fraction += dx;
 800081c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
		while (y0 != y1)
 8000826:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800082a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800082e:	429a      	cmp	r2, r3
 8000830:	d1d1      	bne.n	80007d6 <lcdLine+0x196>
		}
		lcdFilledRectangle(x0, partialLineStartCoord+1, x0, y0, colour);
 8000832:	8afb      	ldrh	r3, [r7, #22]
 8000834:	3301      	adds	r3, #1
 8000836:	b29b      	uxth	r3, r3
 8000838:	b219      	sxth	r1, r3
 800083a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800083e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000842:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000846:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	4623      	mov	r3, r4
 800084c:	f000 f969 	bl	8000b22 <lcdFilledRectangle>
	}
}
 8000850:	3724      	adds	r7, #36	@ 0x24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd90      	pop	{r4, r7, pc}

08000856 <lcdDottedLine>:

void lcdDottedLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour, uint16_t step)
{
 8000856:	b590      	push	{r4, r7, lr}
 8000858:	b089      	sub	sp, #36	@ 0x24
 800085a:	af00      	add	r7, sp, #0
 800085c:	4604      	mov	r4, r0
 800085e:	4608      	mov	r0, r1
 8000860:	4611      	mov	r1, r2
 8000862:	461a      	mov	r2, r3
 8000864:	4623      	mov	r3, r4
 8000866:	80fb      	strh	r3, [r7, #6]
 8000868:	4603      	mov	r3, r0
 800086a:	80bb      	strh	r3, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	807b      	strh	r3, [r7, #2]
 8000870:	4613      	mov	r3, r2
 8000872:	803b      	strh	r3, [r7, #0]
	int16_t dy = y1 - y0;
 8000874:	883a      	ldrh	r2, [r7, #0]
 8000876:	88bb      	ldrh	r3, [r7, #4]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	b29b      	uxth	r3, r3
 800087c:	83fb      	strh	r3, [r7, #30]
	int16_t dx = x1 - x0;
 800087e:	887a      	ldrh	r2, [r7, #2]
 8000880:	88fb      	ldrh	r3, [r7, #6]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	b29b      	uxth	r3, r3
 8000886:	83bb      	strh	r3, [r7, #28]
	int16_t stepx, stepy;
	int16_t delta = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	82fb      	strh	r3, [r7, #22]
	int16_t astep = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	817b      	strh	r3, [r7, #10]

	if (dy < 0)
 8000890:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000894:	2b00      	cmp	r3, #0
 8000896:	da08      	bge.n	80008aa <lcdDottedLine+0x54>
	{
		dy = -dy; stepy = -step;
 8000898:	8bfb      	ldrh	r3, [r7, #30]
 800089a:	425b      	negs	r3, r3
 800089c:	b29b      	uxth	r3, r3
 800089e:	83fb      	strh	r3, [r7, #30]
 80008a0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80008a2:	425b      	negs	r3, r3
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	833b      	strh	r3, [r7, #24]
 80008a8:	e001      	b.n	80008ae <lcdDottedLine+0x58>
	}
	else stepy = step;
 80008aa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80008ac:	833b      	strh	r3, [r7, #24]

 	if (dx < 0)
 80008ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	da08      	bge.n	80008c8 <lcdDottedLine+0x72>
	{
		dx = -dx; stepx = -step;
 80008b6:	8bbb      	ldrh	r3, [r7, #28]
 80008b8:	425b      	negs	r3, r3
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	83bb      	strh	r3, [r7, #28]
 80008be:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80008c0:	425b      	negs	r3, r3
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	837b      	strh	r3, [r7, #26]
 80008c6:	e001      	b.n	80008cc <lcdDottedLine+0x76>
	}
	else stepx = step;
 80008c8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80008ca:	837b      	strh	r3, [r7, #26]

	dy <<= 1;
 80008cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	83fb      	strh	r3, [r7, #30]
	dx <<= 1;
 80008d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	83bb      	strh	r3, [r7, #28]

	if (dx > dy) {
 80008dc:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80008e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dd41      	ble.n	800096c <lcdDottedLine+0x116>
		int fraction = dy - (dx >> 1);
 80008e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008ec:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80008f0:	1052      	asrs	r2, r2, #1
 80008f2:	b212      	sxth	r2, r2
 80008f4:	1a9b      	subs	r3, r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
		delta = abs(x0 - x1);
 80008f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	bfb8      	it	lt
 8000906:	425b      	neglt	r3, r3
 8000908:	82fb      	strh	r3, [r7, #22]
		astep = abs(stepx);
 800090a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800090e:	2b00      	cmp	r3, #0
 8000910:	bfb8      	it	lt
 8000912:	425b      	neglt	r3, r3
 8000914:	b29b      	uxth	r3, r3
 8000916:	817b      	strh	r3, [r7, #10]
		while (delta > 0)
 8000918:	e023      	b.n	8000962 <lcdDottedLine+0x10c>
		{
			if (fraction >= 0)
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db09      	blt.n	8000934 <lcdDottedLine+0xde>
			{
				y0 += stepy;
 8000920:	88ba      	ldrh	r2, [r7, #4]
 8000922:	8b3b      	ldrh	r3, [r7, #24]
 8000924:	4413      	add	r3, r2
 8000926:	b29b      	uxth	r3, r3
 8000928:	80bb      	strh	r3, [r7, #4]
				fraction -= dx;
 800092a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	613b      	str	r3, [r7, #16]
			}

			lcdPlot(x0, y0, colour);
 8000934:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000936:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800093a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fe31 	bl	80005a6 <lcdPlot>
   			x0 += stepx;
 8000944:	88fa      	ldrh	r2, [r7, #6]
 8000946:	8b7b      	ldrh	r3, [r7, #26]
 8000948:	4413      	add	r3, r2
 800094a:	b29b      	uxth	r3, r3
 800094c:	80fb      	strh	r3, [r7, #6]
   			delta = delta - astep;
 800094e:	8afa      	ldrh	r2, [r7, #22]
 8000950:	897b      	ldrh	r3, [r7, #10]
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	b29b      	uxth	r3, r3
 8000956:	82fb      	strh	r3, [r7, #22]
   			fraction += dy;
 8000958:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4413      	add	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
		while (delta > 0)
 8000962:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000966:	2b00      	cmp	r3, #0
 8000968:	dcd7      	bgt.n	800091a <lcdDottedLine+0xc4>
			delta = delta - astep;
			fraction += dx;

		}
	}
}
 800096a:	e040      	b.n	80009ee <lcdDottedLine+0x198>
		int fraction = dx - (dy >> 1);
 800096c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000970:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000974:	1052      	asrs	r2, r2, #1
 8000976:	b212      	sxth	r2, r2
 8000978:	1a9b      	subs	r3, r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
		delta = abs(y0 - y1);
 800097c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000980:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	bfb8      	it	lt
 800098a:	425b      	neglt	r3, r3
 800098c:	82fb      	strh	r3, [r7, #22]
		astep = abs(stepy);
 800098e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000992:	2b00      	cmp	r3, #0
 8000994:	bfb8      	it	lt
 8000996:	425b      	neglt	r3, r3
 8000998:	b29b      	uxth	r3, r3
 800099a:	817b      	strh	r3, [r7, #10]
		while (delta > 0)
 800099c:	e023      	b.n	80009e6 <lcdDottedLine+0x190>
			if (fraction >= 0)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db09      	blt.n	80009b8 <lcdDottedLine+0x162>
				x0 += stepx;
 80009a4:	88fa      	ldrh	r2, [r7, #6]
 80009a6:	8b7b      	ldrh	r3, [r7, #26]
 80009a8:	4413      	add	r3, r2
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 80009ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	60fb      	str	r3, [r7, #12]
			lcdPlot(x0, y0, colour);
 80009b8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80009ba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80009be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fdef 	bl	80005a6 <lcdPlot>
			y0 += stepy;
 80009c8:	88ba      	ldrh	r2, [r7, #4]
 80009ca:	8b3b      	ldrh	r3, [r7, #24]
 80009cc:	4413      	add	r3, r2
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	80bb      	strh	r3, [r7, #4]
			delta = delta - astep;
 80009d2:	8afa      	ldrh	r2, [r7, #22]
 80009d4:	897b      	ldrh	r3, [r7, #10]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	b29b      	uxth	r3, r3
 80009da:	82fb      	strh	r3, [r7, #22]
			fraction += dx;
 80009dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]
		while (delta > 0)
 80009e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	dcd7      	bgt.n	800099e <lcdDottedLine+0x148>
}
 80009ee:	bf00      	nop
 80009f0:	3724      	adds	r7, #36	@ 0x24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd90      	pop	{r4, r7, pc}

080009f6 <lcdRectangle>:

// Draw a rectangle between x0, y0 and x1, y1
void lcdRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 80009f6:	b590      	push	{r4, r7, lr}
 80009f8:	b085      	sub	sp, #20
 80009fa:	af02      	add	r7, sp, #8
 80009fc:	4604      	mov	r4, r0
 80009fe:	4608      	mov	r0, r1
 8000a00:	4611      	mov	r1, r2
 8000a02:	461a      	mov	r2, r3
 8000a04:	4623      	mov	r3, r4
 8000a06:	80fb      	strh	r3, [r7, #6]
 8000a08:	4603      	mov	r3, r0
 8000a0a:	80bb      	strh	r3, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	807b      	strh	r3, [r7, #2]
 8000a10:	4613      	mov	r3, r2
 8000a12:	803b      	strh	r3, [r7, #0]
	lcdLine(x0, y0, x0, y1, colour);
 8000a14:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000a18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a1c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a20:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a24:	8b3b      	ldrh	r3, [r7, #24]
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	4623      	mov	r3, r4
 8000a2a:	f7ff fe09 	bl	8000640 <lcdLine>
	lcdLine(x0, y1, x1, y1, colour);
 8000a2e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000a32:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000a36:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000a3a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a3e:	8b3b      	ldrh	r3, [r7, #24]
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	4623      	mov	r3, r4
 8000a44:	f7ff fdfc 	bl	8000640 <lcdLine>
	lcdLine(x1, y0, x1, y1, colour);
 8000a48:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000a4c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000a50:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a54:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000a58:	8b3b      	ldrh	r3, [r7, #24]
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	4623      	mov	r3, r4
 8000a5e:	f7ff fdef 	bl	8000640 <lcdLine>
	lcdLine(x0, y0, x1, y0, colour);
 8000a62:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000a66:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000a6a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a6e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a72:	8b3b      	ldrh	r3, [r7, #24]
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	4623      	mov	r3, r4
 8000a78:	f7ff fde2 	bl	8000640 <lcdLine>
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd90      	pop	{r4, r7, pc}

08000a84 <lcdDottedRectangle>:

// Draw a dotted rectangle between x0, y0 and x1, y1
void lcdDottedRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour, uint16_t step)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	4611      	mov	r1, r2
 8000a90:	461a      	mov	r2, r3
 8000a92:	4623      	mov	r3, r4
 8000a94:	80fb      	strh	r3, [r7, #6]
 8000a96:	4603      	mov	r3, r0
 8000a98:	80bb      	strh	r3, [r7, #4]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	807b      	strh	r3, [r7, #2]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	803b      	strh	r3, [r7, #0]
	lcdDottedLine(x0, y0, x0, y1, colour, step);
 8000aa2:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000aa6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000aaa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000aae:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000ab2:	8bbb      	ldrh	r3, [r7, #28]
 8000ab4:	9301      	str	r3, [sp, #4]
 8000ab6:	8b3b      	ldrh	r3, [r7, #24]
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	4623      	mov	r3, r4
 8000abc:	f7ff fecb 	bl	8000856 <lcdDottedLine>
	lcdDottedLine(x0, y1, x1, y1, colour, step);
 8000ac0:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000ac4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000ac8:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000acc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000ad0:	8bbb      	ldrh	r3, [r7, #28]
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	8b3b      	ldrh	r3, [r7, #24]
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	4623      	mov	r3, r4
 8000ada:	f7ff febc 	bl	8000856 <lcdDottedLine>
	lcdDottedLine(x1, y0, x1, y1, colour, step);
 8000ade:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000ae2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000ae6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000aea:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000aee:	8bbb      	ldrh	r3, [r7, #28]
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	8b3b      	ldrh	r3, [r7, #24]
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	4623      	mov	r3, r4
 8000af8:	f7ff fead 	bl	8000856 <lcdDottedLine>
	lcdDottedLine(x0, y0, x1, y0, colour, step);
 8000afc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000b00:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b04:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b08:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b0c:	8bbb      	ldrh	r3, [r7, #28]
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	8b3b      	ldrh	r3, [r7, #24]
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	4623      	mov	r3, r4
 8000b16:	f7ff fe9e 	bl	8000856 <lcdDottedLine>
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd90      	pop	{r4, r7, pc}

08000b22 <lcdFilledRectangle>:

// Draw a filled rectangle
void lcdFilledRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8000b22:	b590      	push	{r4, r7, lr}
 8000b24:	b085      	sub	sp, #20
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4604      	mov	r4, r0
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4623      	mov	r3, r4
 8000b32:	80fb      	strh	r3, [r7, #6]
 8000b34:	4603      	mov	r3, r0
 8000b36:	80bb      	strh	r3, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	803b      	strh	r3, [r7, #0]
	uint16_t pixels;
	int16_t pom = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	81bb      	strh	r3, [r7, #12]
	if (x0>x1){	//x1 must be greater than x0
 8000b44:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dd05      	ble.n	8000b5c <lcdFilledRectangle+0x3a>
		pom = x0;
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	81bb      	strh	r3, [r7, #12]
		x0 = x1;
 8000b54:	887b      	ldrh	r3, [r7, #2]
 8000b56:	80fb      	strh	r3, [r7, #6]
		x1 = pom;
 8000b58:	89bb      	ldrh	r3, [r7, #12]
 8000b5a:	807b      	strh	r3, [r7, #2]
	}
	if (y0>y1){	//y1 must be greater than y0
 8000b5c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b60:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dd05      	ble.n	8000b74 <lcdFilledRectangle+0x52>
		pom = y0;
 8000b68:	88bb      	ldrh	r3, [r7, #4]
 8000b6a:	81bb      	strh	r3, [r7, #12]
		y0 = y1;
 8000b6c:	883b      	ldrh	r3, [r7, #0]
 8000b6e:	80bb      	strh	r3, [r7, #4]
		y1 = pom;
 8000b70:	89bb      	ldrh	r3, [r7, #12]
 8000b72:	803b      	strh	r3, [r7, #0]
	}

	// To speed up plotting we define a x window with the width of the
	// rectangle and then just output the required number of bytes to
	// fill down to the end point
	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8000b74:	202a      	movs	r0, #42	@ 0x2a
 8000b76:	f7ff fbf9 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff fc09 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(x0);
 8000b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fc04 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff fc01 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(x1);
 8000b90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fbfc 	bl	8000392 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8000b9a:	202b      	movs	r0, #43	@ 0x2b
 8000b9c:	f7ff fbe6 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff fbf6 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(y0);
 8000ba6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fbf1 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff fbee 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(y1);
 8000bb6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fbe9 	bl	8000392 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8000bc0:	202c      	movs	r0, #44	@ 0x2c
 8000bc2:	f7ff fbd3 	bl	800036c <lcdWriteCommand>
	for (pixels = 0; pixels < (((x1+1) - x0) * ((y1+1) - y0)); pixels++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	81fb      	strh	r3, [r7, #14]
 8000bca:	e00c      	b.n	8000be6 <lcdFilledRectangle+0xc4>
			lcdWriteData(colour >> 8, colour);
 8000bcc:	8c3b      	ldrh	r3, [r7, #32]
 8000bce:	0a1b      	lsrs	r3, r3, #8
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	8c3a      	ldrh	r2, [r7, #32]
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fbed 	bl	80003ba <lcdWriteData>
	for (pixels = 0; pixels < (((x1+1) - x0) * ((y1+1) - y0)); pixels++)
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	3301      	adds	r3, #1
 8000be4:	81fb      	strh	r3, [r7, #14]
 8000be6:	89fa      	ldrh	r2, [r7, #14]
 8000be8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bec:	1c59      	adds	r1, r3, #1
 8000bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bf2:	1acb      	subs	r3, r1, r3
 8000bf4:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000bf8:	1c48      	adds	r0, r1, #1
 8000bfa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000bfe:	1a41      	subs	r1, r0, r1
 8000c00:	fb01 f303 	mul.w	r3, r1, r3
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbe1      	blt.n	8000bcc <lcdFilledRectangle+0xaa>
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd90      	pop	{r4, r7, pc}

08000c12 <lcdFilledDottedRectangle>:

void lcdFilledDottedRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour, uint16_t step)
{
 8000c12:	b590      	push	{r4, r7, lr}
 8000c14:	b085      	sub	sp, #20
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4604      	mov	r4, r0
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4623      	mov	r3, r4
 8000c22:	80fb      	strh	r3, [r7, #6]
 8000c24:	4603      	mov	r3, r0
 8000c26:	80bb      	strh	r3, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	803b      	strh	r3, [r7, #0]
	for (int16_t y = y0; y < y1; y += step) { // Skip every n rows
 8000c30:	88bb      	ldrh	r3, [r7, #4]
 8000c32:	81fb      	strh	r3, [r7, #14]
 8000c34:	e01a      	b.n	8000c6c <lcdFilledDottedRectangle+0x5a>
		for (int16_t x = x0; x < x1; x += step) { // Skip every n columns
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	81bb      	strh	r3, [r7, #12]
 8000c3a:	e00c      	b.n	8000c56 <lcdFilledDottedRectangle+0x44>
			lcdPlot(x, y, colour);
 8000c3c:	8c3a      	ldrh	r2, [r7, #32]
 8000c3e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000c42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fcad 	bl	80005a6 <lcdPlot>
		for (int16_t x = x0; x < x1; x += step) { // Skip every n columns
 8000c4c:	89ba      	ldrh	r2, [r7, #12]
 8000c4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c50:	4413      	add	r3, r2
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	81bb      	strh	r3, [r7, #12]
 8000c56:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dbec      	blt.n	8000c3c <lcdFilledDottedRectangle+0x2a>
	for (int16_t y = y0; y < y1; y += step) { // Skip every n rows
 8000c62:	89fa      	ldrh	r2, [r7, #14]
 8000c64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c66:	4413      	add	r3, r2
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	81fb      	strh	r3, [r7, #14]
 8000c6c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c70:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	dbde      	blt.n	8000c36 <lcdFilledDottedRectangle+0x24>
		}
	}
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd90      	pop	{r4, r7, pc}

08000c82 <lcdPolygon>:

void lcdPolygon(int16_t *points, int16_t sides, uint16_t colour)
{
 8000c82:	b590      	push	{r4, r7, lr}
 8000c84:	b089      	sub	sp, #36	@ 0x24
 8000c86:	af02      	add	r7, sp, #8
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	807b      	strh	r3, [r7, #2]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	803b      	strh	r3, [r7, #0]
	for(int16_t i = 0; i<sides; i++){
 8000c92:	2300      	movs	r3, #0
 8000c94:	82fb      	strh	r3, [r7, #22]
 8000c96:	e040      	b.n	8000d1a <lcdPolygon+0x98>
		int16_t x0 = points[(2*i)];
 8000c98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	82bb      	strh	r3, [r7, #20]
		int16_t y0 = points[(2*i + 1)];
 8000ca6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	3302      	adds	r3, #2
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	827b      	strh	r3, [r7, #18]
		int16_t x1 = points[(2*((i+1)%sides))];
 8000cb6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000cc0:	fb93 f1f2 	sdiv	r1, r3, r2
 8000cc4:	fb01 f202 	mul.w	r2, r1, r2
 8000cc8:	1a9b      	subs	r3, r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	823b      	strh	r3, [r7, #16]
		int16_t y1 = points[(2*((i+1)%sides) + 1)];
 8000cd4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000cde:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ce2:	fb01 f202 	mul.w	r2, r1, r2
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	3302      	adds	r3, #2
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	4413      	add	r3, r2
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	81fb      	strh	r3, [r7, #14]
		lcdLine(x0, y0, x1, y1, colour);
 8000cf4:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8000cf8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000cfc:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8000d00:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8000d04:	883b      	ldrh	r3, [r7, #0]
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	4623      	mov	r3, r4
 8000d0a:	f7ff fc99 	bl	8000640 <lcdLine>
	for(int16_t i = 0; i<sides; i++){
 8000d0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	3301      	adds	r3, #1
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	82fb      	strh	r3, [r7, #22]
 8000d1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000d1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	dbb8      	blt.n	8000c98 <lcdPolygon+0x16>
	}
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	371c      	adds	r7, #28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd90      	pop	{r4, r7, pc}

08000d30 <lcdDottedPolygon>:

void lcdDottedPolygon(int16_t *points, int16_t sides, uint16_t colour, uint16_t step)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b08b      	sub	sp, #44	@ 0x2c
 8000d34:	af02      	add	r7, sp, #8
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	4608      	mov	r0, r1
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4603      	mov	r3, r0
 8000d40:	817b      	strh	r3, [r7, #10]
 8000d42:	460b      	mov	r3, r1
 8000d44:	813b      	strh	r3, [r7, #8]
 8000d46:	4613      	mov	r3, r2
 8000d48:	80fb      	strh	r3, [r7, #6]
	for(int16_t i = 0; i<sides; i++){
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	83fb      	strh	r3, [r7, #30]
 8000d4e:	e042      	b.n	8000dd6 <lcdDottedPolygon+0xa6>
		int16_t x0 = points[(2*i)];
 8000d50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	4413      	add	r3, r2
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	83bb      	strh	r3, [r7, #28]
		int16_t y0 = points[(2*i + 1)];
 8000d5e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	3302      	adds	r3, #2
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	4413      	add	r3, r2
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	837b      	strh	r3, [r7, #26]
		int16_t x1 = points[(2*((i+1)%sides))];
 8000d6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d72:	3301      	adds	r3, #1
 8000d74:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000d78:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d7c:	fb01 f202 	mul.w	r2, r1, r2
 8000d80:	1a9b      	subs	r3, r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	833b      	strh	r3, [r7, #24]
		int16_t y1 = points[(2*((i+1)%sides) + 1)];
 8000d8c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d90:	3301      	adds	r3, #1
 8000d92:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000d96:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d9a:	fb01 f202 	mul.w	r2, r1, r2
 8000d9e:	1a9b      	subs	r3, r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	3302      	adds	r3, #2
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	82fb      	strh	r3, [r7, #22]
		lcdDottedLine(x0, y0, x1, y1, colour, step);
 8000dac:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8000db0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000db4:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8000db8:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	893b      	ldrh	r3, [r7, #8]
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	4623      	mov	r3, r4
 8000dc6:	f7ff fd46 	bl	8000856 <lcdDottedLine>
	for(int16_t i = 0; i<sides; i++){
 8000dca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	83fb      	strh	r3, [r7, #30]
 8000dd6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000dda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	dbb6      	blt.n	8000d50 <lcdDottedPolygon+0x20>
	}
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	3724      	adds	r7, #36	@ 0x24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd90      	pop	{r4, r7, pc}

08000dec <lcdFilledTriangle>:

void lcdFilledTriangle(int16_t *points, uint16_t colour)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b08d      	sub	sp, #52	@ 0x34
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	807b      	strh	r3, [r7, #2]
	// zoradim body od vzostupne podla osi X
	for(int16_t i = 2; i>=0; i--){
 8000df8:	2302      	movs	r3, #2
 8000dfa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000dfc:	e067      	b.n	8000ece <lcdFilledTriangle+0xe2>
		int16_t max = -30000;
 8000dfe:	f648 23d0 	movw	r3, #35536	@ 0x8ad0
 8000e02:	84bb      	strh	r3, [r7, #36]	@ 0x24
		int16_t maxInd = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	847b      	strh	r3, [r7, #34]	@ 0x22
		for(int16_t k = 0; k<=i; k++){
 8000e08:	2300      	movs	r3, #0
 8000e0a:	843b      	strh	r3, [r7, #32]
 8000e0c:	e019      	b.n	8000e42 <lcdFilledTriangle+0x56>
			if (points[k*2]>=max){
 8000e0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	4413      	add	r3, r2
 8000e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8000e20:	429a      	cmp	r2, r3
 8000e22:	dc08      	bgt.n	8000e36 <lcdFilledTriangle+0x4a>
				max = points[k*2];
 8000e24:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	84bb      	strh	r3, [r7, #36]	@ 0x24
				maxInd = k;
 8000e32:	8c3b      	ldrh	r3, [r7, #32]
 8000e34:	847b      	strh	r3, [r7, #34]	@ 0x22
		for(int16_t k = 0; k<=i; k++){
 8000e36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	843b      	strh	r3, [r7, #32]
 8000e42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000e46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	dddf      	ble.n	8000e0e <lcdFilledTriangle+0x22>
			}
		}
		int16_t pomX = points[maxInd*2]; //ulozim si maximum
 8000e4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	4413      	add	r3, r2
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	83bb      	strh	r3, [r7, #28]
		int16_t pomY = points[maxInd*2+1];
 8000e5c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	3302      	adds	r3, #2
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	4413      	add	r3, r2
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	837b      	strh	r3, [r7, #26]
		points[maxInd*2] = points[i*2]; //na jeho poziciu premiestnim data z konca
 8000e6c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	441a      	add	r2, r3
 8000e76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	440b      	add	r3, r1
 8000e80:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e84:	801a      	strh	r2, [r3, #0]
		points[maxInd*2+1] = points[i*2+1];
 8000e86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	441a      	add	r2, r3
 8000e92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	3302      	adds	r3, #2
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	440b      	add	r3, r1
 8000e9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ea2:	801a      	strh	r2, [r3, #0]
		points[i*2] = pomX; //na jeho koniec dat dam maximum
 8000ea4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	8bba      	ldrh	r2, [r7, #28]
 8000eb0:	801a      	strh	r2, [r3, #0]
		points[i*2+1] = pomY;
 8000eb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	3302      	adds	r3, #2
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	8b7a      	ldrh	r2, [r7, #26]
 8000ec0:	801a      	strh	r2, [r3, #0]
	for(int16_t i = 2; i>=0; i--){
 8000ec2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000ece:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	da93      	bge.n	8000dfe <lcdFilledTriangle+0x12>
	}

	float_t der[3];

	//treba osetrit delenie nulou pri vypocte strmosti priamky
	if((points[2] - points[0]) != 0){ //medzi bodmi 1 a 2
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d01e      	beq.n	8000f26 <lcdFilledTriangle+0x13a>
		der[0] = (float_t)(points[3] - points[1]) / (float_t)(points[2] - points[0]);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3306      	adds	r3, #6
 8000eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3304      	adds	r3, #4
 8000f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	ee07 3a90 	vmov	s15, r3
 8000f1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f22:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	if((points[4] - points[2]) != 0){ //medzi bodmi 2 a 3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3308      	adds	r3, #8
 8000f2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3304      	adds	r3, #4
 8000f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d01f      	beq.n	8000f7a <lcdFilledTriangle+0x18e>
		der[1] = (float_t)(points[5] - points[3]) / (float_t)(points[4] - points[2]);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	330a      	adds	r3, #10
 8000f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f42:	461a      	mov	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3306      	adds	r3, #6
 8000f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3308      	adds	r3, #8
 8000f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3304      	adds	r3, #4
 8000f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f76:	edc7 7a04 	vstr	s15, [r7, #16]
	}
	if((points[4] - points[0]) != 0){ //medzi bodmi 1 a 3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3308      	adds	r3, #8
 8000f7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d01e      	beq.n	8000fca <lcdFilledTriangle+0x1de>
		der[2] = (float_t)(points[5] - points[1]) / (float_t)(points[4] - points[0]);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	330a      	adds	r3, #10
 8000f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3302      	adds	r3, #2
 8000f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3308      	adds	r3, #8
 8000fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc6:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	for (int16_t x = points[0]; x <= points[4]; x++) {	// vykreslit trojuholnik
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	83fb      	strh	r3, [r7, #30]
 8000fd0:	e095      	b.n	80010fe <lcdFilledTriangle+0x312>
		if (x < points[2]) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fda:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	da43      	bge.n	800106a <lcdFilledTriangle+0x27e>
			lcdLine(x, (int16_t)(der[0] * (x-points[0]) + points[1]), x, (int16_t)(der[2] * (x-points[0]) + points[1]), colour);
 8000fe2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fe6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ff0:	1a9b      	subs	r3, r3, r2
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3302      	adds	r3, #2
 8001002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800100e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001012:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001016:	ee17 3a90 	vmov	r3, s15
 800101a:	b219      	sxth	r1, r3
 800101c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001020:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	f9b2 2000 	ldrsh.w	r2, [r2]
 800102a:	1a9b      	subs	r3, r3, r2
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3302      	adds	r3, #2
 800103c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001050:	ee17 3a90 	vmov	r3, s15
 8001054:	b21c      	sxth	r4, r3
 8001056:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800105a:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	4623      	mov	r3, r4
 8001064:	f7ff faec 	bl	8000640 <lcdLine>
 8001068:	e043      	b.n	80010f2 <lcdFilledTriangle+0x306>
		} else {
			lcdLine(x, (int16_t)(der[1] * (x-points[2]) + points[3]), x, (int16_t)(der[2] * (x-points[0]) + points[1]), colour);
 800106a:	ed97 7a04 	vldr	s14, [r7, #16]
 800106e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	3204      	adds	r2, #4
 8001076:	f9b2 2000 	ldrsh.w	r2, [r2]
 800107a:	1a9b      	subs	r3, r3, r2
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001084:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3306      	adds	r3, #6
 800108c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a0:	ee17 3a90 	vmov	r3, s15
 80010a4:	b219      	sxth	r1, r3
 80010a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80010aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3302      	adds	r3, #2
 80010c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010da:	ee17 3a90 	vmov	r3, s15
 80010de:	b21c      	sxth	r4, r3
 80010e0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80010e4:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 80010e8:	887b      	ldrh	r3, [r7, #2]
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	4623      	mov	r3, r4
 80010ee:	f7ff faa7 	bl	8000640 <lcdLine>
	for (int16_t x = points[0]; x <= points[4]; x++) {	// vykreslit trojuholnik
 80010f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3301      	adds	r3, #1
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	83fb      	strh	r3, [r7, #30]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3308      	adds	r3, #8
 8001102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001106:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800110a:	429a      	cmp	r2, r3
 800110c:	f77f af61 	ble.w	8000fd2 <lcdFilledTriangle+0x1e6>
		}
	}

}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	372c      	adds	r7, #44	@ 0x2c
 8001116:	46bd      	mov	sp, r7
 8001118:	bd90      	pop	{r4, r7, pc}

0800111a <lcdFilledDottedTriangle>:

void lcdFilledDottedTriangle(int16_t *points, uint16_t colour, uint16_t step)
{
 800111a:	b590      	push	{r4, r7, lr}
 800111c:	b08d      	sub	sp, #52	@ 0x34
 800111e:	af02      	add	r7, sp, #8
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	460b      	mov	r3, r1
 8001124:	807b      	strh	r3, [r7, #2]
 8001126:	4613      	mov	r3, r2
 8001128:	803b      	strh	r3, [r7, #0]
	// zoradim body od vzostupne podla osi X
	for(int16_t i = 2; i>=0; i--){
 800112a:	2302      	movs	r3, #2
 800112c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800112e:	e067      	b.n	8001200 <lcdFilledDottedTriangle+0xe6>
		int16_t max = -30000;
 8001130:	f648 23d0 	movw	r3, #35536	@ 0x8ad0
 8001134:	84bb      	strh	r3, [r7, #36]	@ 0x24
		int16_t maxInd = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	847b      	strh	r3, [r7, #34]	@ 0x22
		for(int16_t k = 0; k<=i; k++){
 800113a:	2300      	movs	r3, #0
 800113c:	843b      	strh	r3, [r7, #32]
 800113e:	e019      	b.n	8001174 <lcdFilledDottedTriangle+0x5a>
			if (points[k*2]>=max){
 8001140:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001152:	429a      	cmp	r2, r3
 8001154:	dc08      	bgt.n	8001168 <lcdFilledDottedTriangle+0x4e>
				max = points[k*2];
 8001156:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	84bb      	strh	r3, [r7, #36]	@ 0x24
				maxInd = k;
 8001164:	8c3b      	ldrh	r3, [r7, #32]
 8001166:	847b      	strh	r3, [r7, #34]	@ 0x22
		for(int16_t k = 0; k<=i; k++){
 8001168:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800116c:	b29b      	uxth	r3, r3
 800116e:	3301      	adds	r3, #1
 8001170:	b29b      	uxth	r3, r3
 8001172:	843b      	strh	r3, [r7, #32]
 8001174:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001178:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800117c:	429a      	cmp	r2, r3
 800117e:	dddf      	ble.n	8001140 <lcdFilledDottedTriangle+0x26>
			}
		}
		int16_t pomX = points[maxInd*2]; //ulozim si maximum
 8001180:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	83bb      	strh	r3, [r7, #28]
		int16_t pomY = points[maxInd*2+1];
 800118e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	837b      	strh	r3, [r7, #26]
		points[maxInd*2] = points[i*2]; //na jeho poziciu premiestnim data z konca
 800119e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	441a      	add	r2, r3
 80011a8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	440b      	add	r3, r1
 80011b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011b6:	801a      	strh	r2, [r3, #0]
		points[maxInd*2+1] = points[i*2+1];
 80011b8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	441a      	add	r2, r3
 80011c4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	440b      	add	r3, r1
 80011d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011d4:	801a      	strh	r2, [r3, #0]
		points[i*2] = pomX; //na jeho koniec dat dam maximum
 80011d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	4413      	add	r3, r2
 80011e0:	8bba      	ldrh	r2, [r7, #28]
 80011e2:	801a      	strh	r2, [r3, #0]
		points[i*2+1] = pomY;
 80011e4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	8b7a      	ldrh	r2, [r7, #26]
 80011f2:	801a      	strh	r2, [r3, #0]
	for(int16_t i = 2; i>=0; i--){
 80011f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	3b01      	subs	r3, #1
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001200:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001204:	2b00      	cmp	r3, #0
 8001206:	da93      	bge.n	8001130 <lcdFilledDottedTriangle+0x16>
	}

	float_t der[3];

	//treba osetrit delenie nulou pri vypocte strmosti priamky
	if((points[2] - points[0]) != 0){ //medzi bodmi 1 a 2
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3304      	adds	r3, #4
 800120c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	429a      	cmp	r2, r3
 8001218:	d01e      	beq.n	8001258 <lcdFilledDottedTriangle+0x13e>
		der[0] = (float_t)(points[3] - points[1]) / (float_t)(points[2] - points[0]);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3306      	adds	r3, #6
 800121e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001222:	461a      	mov	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3302      	adds	r3, #2
 8001228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	ee07 3a90 	vmov	s15, r3
 8001232:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3304      	adds	r3, #4
 800123a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123e:	461a      	mov	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001254:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	if((points[4] - points[2]) != 0){ //medzi bodmi 2 a 3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3308      	adds	r3, #8
 800125c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3304      	adds	r3, #4
 8001264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001268:	429a      	cmp	r2, r3
 800126a:	d01f      	beq.n	80012ac <lcdFilledDottedTriangle+0x192>
		der[1] = (float_t)(points[5] - points[3]) / (float_t)(points[4] - points[2]);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	330a      	adds	r3, #10
 8001270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001274:	461a      	mov	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3306      	adds	r3, #6
 800127a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3308      	adds	r3, #8
 800128c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001290:	461a      	mov	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3304      	adds	r3, #4
 8001296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	ee07 3a90 	vmov	s15, r3
 80012a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a8:	edc7 7a04 	vstr	s15, [r7, #16]
	}
	if((points[4] - points[0]) != 0){ //medzi bodmi 1 a 3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3308      	adds	r3, #8
 80012b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d01e      	beq.n	80012fc <lcdFilledDottedTriangle+0x1e2>
		der[2] = (float_t)(points[5] - points[1]) / (float_t)(points[4] - points[0]);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	330a      	adds	r3, #10
 80012c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c6:	461a      	mov	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3302      	adds	r3, #2
 80012cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3308      	adds	r3, #8
 80012de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e2:	461a      	mov	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f8:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	for (int16_t x = points[0]; x <= points[4]; x+=step) {	// vykreslit trojuholnik
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	83fb      	strh	r3, [r7, #30]
 8001302:	e098      	b.n	8001436 <lcdFilledDottedTriangle+0x31c>
		if (x < points[2]) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3304      	adds	r3, #4
 8001308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001310:	429a      	cmp	r2, r3
 8001312:	da45      	bge.n	80013a0 <lcdFilledDottedTriangle+0x286>
			lcdDottedLine(x, (int16_t)(der[0] * (x-points[0]) + points[1]), x, (int16_t)(der[2] * (x-points[0]) + points[1]), colour, step);
 8001314:	ed97 7a03 	vldr	s14, [r7, #12]
 8001318:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3302      	adds	r3, #2
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001348:	ee17 3a90 	vmov	r3, s15
 800134c:	b219      	sxth	r1, r3
 800134e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001352:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	f9b2 2000 	ldrsh.w	r2, [r2]
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001366:	ee27 7a27 	vmul.f32	s14, s14, s15
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3302      	adds	r3, #2
 800136e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800137a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001382:	ee17 3a90 	vmov	r3, s15
 8001386:	b21c      	sxth	r4, r3
 8001388:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800138c:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 8001390:	883b      	ldrh	r3, [r7, #0]
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	4623      	mov	r3, r4
 800139a:	f7ff fa5c 	bl	8000856 <lcdDottedLine>
 800139e:	e045      	b.n	800142c <lcdFilledDottedTriangle+0x312>
		} else {
			lcdDottedLine(x, (int16_t)(der[1] * (x-points[2]) + points[3]), x, (int16_t)(der[2] * (x-points[0]) + points[1]), colour, step);
 80013a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80013a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	3204      	adds	r2, #4
 80013ac:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3306      	adds	r3, #6
 80013c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d6:	ee17 3a90 	vmov	r3, s15
 80013da:	b219      	sxth	r1, r3
 80013dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80013e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013ea:	1a9b      	subs	r3, r3, r2
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3302      	adds	r3, #2
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001410:	ee17 3a90 	vmov	r3, s15
 8001414:	b21c      	sxth	r4, r3
 8001416:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800141a:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 800141e:	883b      	ldrh	r3, [r7, #0]
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	4623      	mov	r3, r4
 8001428:	f7ff fa15 	bl	8000856 <lcdDottedLine>
	for (int16_t x = points[0]; x <= points[4]; x+=step) {	// vykreslit trojuholnik
 800142c:	8bfa      	ldrh	r2, [r7, #30]
 800142e:	883b      	ldrh	r3, [r7, #0]
 8001430:	4413      	add	r3, r2
 8001432:	b29b      	uxth	r3, r3
 8001434:	83fb      	strh	r3, [r7, #30]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3308      	adds	r3, #8
 800143a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001442:	429a      	cmp	r2, r3
 8001444:	f77f af5e 	ble.w	8001304 <lcdFilledDottedTriangle+0x1ea>
		}
	}

}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	372c      	adds	r7, #44	@ 0x2c
 800144e:	46bd      	mov	sp, r7
 8001450:	bd90      	pop	{r4, r7, pc}

08001452 <lcdFilledPolygon>:

// nesmie mat stred mimo svojej plochy
void lcdFilledPolygon(int16_t *points, int16_t sides, uint16_t colour){
 8001452:	b580      	push	{r7, lr}
 8001454:	b088      	sub	sp, #32
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	807b      	strh	r3, [r7, #2]
 800145e:	4613      	mov	r3, r2
 8001460:	803b      	strh	r3, [r7, #0]
	float_t avgX = 0;
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
	float_t avgY = 0;
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
	for(int8_t i=0; i<sides; i++){
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
 8001472:	e028      	b.n	80014c6 <lcdFilledPolygon+0x74>
		avgX += (float_t)(points[i*2]);
 8001474:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148a:	ed97 7a07 	vldr	s14, [r7, #28]
 800148e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001492:	edc7 7a07 	vstr	s15, [r7, #28]
		avgY += (float_t)(points[i*2+1]);
 8001496:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80014b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b6:	edc7 7a06 	vstr	s15, [r7, #24]
	for(int8_t i=0; i<sides; i++){
 80014ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	3301      	adds	r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	75fb      	strb	r3, [r7, #23]
 80014c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dccf      	bgt.n	8001474 <lcdFilledPolygon+0x22>
	}
	avgX = (float_t)(avgX)/(float_t)(sides);
 80014d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014d8:	ee07 3a90 	vmov	s15, r3
 80014dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80014e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014e8:	edc7 7a07 	vstr	s15, [r7, #28]
	avgY = (float_t)(avgY)/(float_t)(sides);
 80014ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f8:	edd7 6a06 	vldr	s13, [r7, #24]
 80014fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001500:	edc7 7a06 	vstr	s15, [r7, #24]

	for(int8_t i=0; i<sides; i++){
 8001504:	2300      	movs	r3, #0
 8001506:	75bb      	strb	r3, [r7, #22]
 8001508:	e04e      	b.n	80015a8 <lcdFilledPolygon+0x156>
		int16_t pointsT[] = {points[i*2], points[i*2+1], points[(2*((i+1)%sides))], points[(2*((i+1)%sides) + 1)], (int16_t)(avgX), (int16_t)(avgY)};
 800150a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001518:	813b      	strh	r3, [r7, #8]
 800151a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	3302      	adds	r3, #2
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152a:	817b      	strh	r3, [r7, #10]
 800152c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001530:	3301      	adds	r3, #1
 8001532:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001536:	fb93 f1f2 	sdiv	r1, r3, r2
 800153a:	fb01 f202 	mul.w	r2, r1, r2
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154a:	81bb      	strh	r3, [r7, #12]
 800154c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001550:	3301      	adds	r3, #1
 8001552:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001556:	fb93 f1f2 	sdiv	r1, r3, r2
 800155a:	fb01 f202 	mul.w	r2, r1, r2
 800155e:	1a9b      	subs	r3, r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	4413      	add	r3, r2
 8001568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156c:	81fb      	strh	r3, [r7, #14]
 800156e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001572:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001576:	ee17 3a90 	vmov	r3, s15
 800157a:	b21b      	sxth	r3, r3
 800157c:	823b      	strh	r3, [r7, #16]
 800157e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001582:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001586:	ee17 3a90 	vmov	r3, s15
 800158a:	b21b      	sxth	r3, r3
 800158c:	827b      	strh	r3, [r7, #18]
		lcdFilledTriangle( pointsT, colour );
 800158e:	883a      	ldrh	r2, [r7, #0]
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fc28 	bl	8000dec <lcdFilledTriangle>
	for(int8_t i=0; i<sides; i++){
 800159c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	75bb      	strb	r3, [r7, #22]
 80015a8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	dca9      	bgt.n	800150a <lcdFilledPolygon+0xb8>
	}
}
 80015b6:	bf00      	nop
 80015b8:	bf00      	nop
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <lcdFilledDottedPolygon>:

void lcdFilledDottedPolygon(int16_t *points, int16_t sides, uint16_t colour, uint16_t step){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	@ 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4603      	mov	r3, r0
 80015d0:	817b      	strh	r3, [r7, #10]
 80015d2:	460b      	mov	r3, r1
 80015d4:	813b      	strh	r3, [r7, #8]
 80015d6:	4613      	mov	r3, r2
 80015d8:	80fb      	strh	r3, [r7, #6]
	float_t avgX = 0;
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
	float_t avgY = 0;
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
	for(int8_t i=0; i<sides; i++){
 80015e6:	2300      	movs	r3, #0
 80015e8:	77fb      	strb	r3, [r7, #31]
 80015ea:	e028      	b.n	800163e <lcdFilledDottedPolygon+0x7e>
		avgX += (float_t)(points[i*2]);
 80015ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001602:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		avgY += (float_t)(points[i*2+1]);
 800160e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4413      	add	r3, r2
 800161a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001626:	ed97 7a08 	vldr	s14, [r7, #32]
 800162a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162e:	edc7 7a08 	vstr	s15, [r7, #32]
	for(int8_t i=0; i<sides; i++){
 8001632:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	3301      	adds	r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	77fb      	strb	r3, [r7, #31]
 800163e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001642:	b21b      	sxth	r3, r3
 8001644:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001648:	429a      	cmp	r2, r3
 800164a:	dccf      	bgt.n	80015ec <lcdFilledDottedPolygon+0x2c>
	}
	avgX = (float_t)(avgX)/(float_t)(sides);
 800164c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001658:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800165c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001660:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	avgY = (float_t)(avgY)/(float_t)(sides);
 8001664:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001670:	edd7 6a08 	vldr	s13, [r7, #32]
 8001674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001678:	edc7 7a08 	vstr	s15, [r7, #32]

	for(int8_t i=0; i<sides; i++){
 800167c:	2300      	movs	r3, #0
 800167e:	77bb      	strb	r3, [r7, #30]
 8001680:	e04e      	b.n	8001720 <lcdFilledDottedPolygon+0x160>
		int16_t pointsT[] = {points[i*2], points[i*2+1], points[(2*((i+1)%sides))], points[(2*((i+1)%sides) + 1)], (int16_t)(avgX), (int16_t)(avgY)};
 8001682:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001690:	823b      	strh	r3, [r7, #16]
 8001692:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	3302      	adds	r3, #2
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a2:	827b      	strh	r3, [r7, #18]
 80016a4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80016a8:	3301      	adds	r3, #1
 80016aa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80016ae:	fb93 f1f2 	sdiv	r1, r3, r2
 80016b2:	fb01 f202 	mul.w	r2, r1, r2
 80016b6:	1a9b      	subs	r3, r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c2:	82bb      	strh	r3, [r7, #20]
 80016c4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80016c8:	3301      	adds	r3, #1
 80016ca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80016ce:	fb93 f1f2 	sdiv	r1, r3, r2
 80016d2:	fb01 f202 	mul.w	r2, r1, r2
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	3302      	adds	r3, #2
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	82fb      	strh	r3, [r7, #22]
 80016e6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80016ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ee:	ee17 3a90 	vmov	r3, s15
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	833b      	strh	r3, [r7, #24]
 80016f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80016fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016fe:	ee17 3a90 	vmov	r3, s15
 8001702:	b21b      	sxth	r3, r3
 8001704:	837b      	strh	r3, [r7, #26]
		lcdFilledDottedTriangle( pointsT, colour, step );
 8001706:	88fa      	ldrh	r2, [r7, #6]
 8001708:	8939      	ldrh	r1, [r7, #8]
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fd03 	bl	800111a <lcdFilledDottedTriangle>
	for(int8_t i=0; i<sides; i++){
 8001714:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	3301      	adds	r3, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	77bb      	strb	r3, [r7, #30]
 8001720:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001724:	b21b      	sxth	r3, r3
 8001726:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800172a:	429a      	cmp	r2, r3
 800172c:	dca9      	bgt.n	8001682 <lcdFilledDottedPolygon+0xc2>
	}
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	@ 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <lcdCircle>:

void lcdCircle(int16_t xCentre, int16_t yCentre, int16_t radius, uint16_t colour)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	4604      	mov	r4, r0
 8001740:	4608      	mov	r0, r1
 8001742:	4611      	mov	r1, r2
 8001744:	461a      	mov	r2, r3
 8001746:	4623      	mov	r3, r4
 8001748:	80fb      	strh	r3, [r7, #6]
 800174a:	4603      	mov	r3, r0
 800174c:	80bb      	strh	r3, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	807b      	strh	r3, [r7, #2]
 8001752:	4613      	mov	r3, r2
 8001754:	803b      	strh	r3, [r7, #0]
	int16_t x = 0, y = radius;
 8001756:	2300      	movs	r3, #0
 8001758:	81fb      	strh	r3, [r7, #14]
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	81bb      	strh	r3, [r7, #12]
	int16_t d = 3 - (2 * radius);
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	b29b      	uxth	r3, r3
 8001764:	f1c3 0303 	rsb	r3, r3, #3
 8001768:	b29b      	uxth	r3, r3
 800176a:	817b      	strh	r3, [r7, #10]

    while(x <= y)
 800176c:	e095      	b.n	800189a <lcdCircle+0x162>
	{
		lcdPlot(xCentre + x, yCentre + y, colour);
 800176e:	88fa      	ldrh	r2, [r7, #6]
 8001770:	89fb      	ldrh	r3, [r7, #14]
 8001772:	4413      	add	r3, r2
 8001774:	b29b      	uxth	r3, r3
 8001776:	b218      	sxth	r0, r3
 8001778:	88ba      	ldrh	r2, [r7, #4]
 800177a:	89bb      	ldrh	r3, [r7, #12]
 800177c:	4413      	add	r3, r2
 800177e:	b29b      	uxth	r3, r3
 8001780:	b21b      	sxth	r3, r3
 8001782:	883a      	ldrh	r2, [r7, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	f7fe ff0e 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre + y, yCentre + x, colour);
 800178a:	88fa      	ldrh	r2, [r7, #6]
 800178c:	89bb      	ldrh	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	b218      	sxth	r0, r3
 8001794:	88ba      	ldrh	r2, [r7, #4]
 8001796:	89fb      	ldrh	r3, [r7, #14]
 8001798:	4413      	add	r3, r2
 800179a:	b29b      	uxth	r3, r3
 800179c:	b21b      	sxth	r3, r3
 800179e:	883a      	ldrh	r2, [r7, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f7fe ff00 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre - x, yCentre + y, colour);
 80017a6:	88fa      	ldrh	r2, [r7, #6]
 80017a8:	89fb      	ldrh	r3, [r7, #14]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	b218      	sxth	r0, r3
 80017b0:	88ba      	ldrh	r2, [r7, #4]
 80017b2:	89bb      	ldrh	r3, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	883a      	ldrh	r2, [r7, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	f7fe fef2 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre + y, yCentre - x, colour);
 80017c2:	88fa      	ldrh	r2, [r7, #6]
 80017c4:	89bb      	ldrh	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	b218      	sxth	r0, r3
 80017cc:	88ba      	ldrh	r2, [r7, #4]
 80017ce:	89fb      	ldrh	r3, [r7, #14]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	883a      	ldrh	r2, [r7, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	f7fe fee4 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre - x, yCentre - y, colour);
 80017de:	88fa      	ldrh	r2, [r7, #6]
 80017e0:	89fb      	ldrh	r3, [r7, #14]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	b218      	sxth	r0, r3
 80017e8:	88ba      	ldrh	r2, [r7, #4]
 80017ea:	89bb      	ldrh	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	883a      	ldrh	r2, [r7, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7fe fed6 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre - y, yCentre - x, colour);
 80017fa:	88fa      	ldrh	r2, [r7, #6]
 80017fc:	89bb      	ldrh	r3, [r7, #12]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	b29b      	uxth	r3, r3
 8001802:	b218      	sxth	r0, r3
 8001804:	88ba      	ldrh	r2, [r7, #4]
 8001806:	89fb      	ldrh	r3, [r7, #14]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	b29b      	uxth	r3, r3
 800180c:	b21b      	sxth	r3, r3
 800180e:	883a      	ldrh	r2, [r7, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	f7fe fec8 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre + x, yCentre - y, colour);
 8001816:	88fa      	ldrh	r2, [r7, #6]
 8001818:	89fb      	ldrh	r3, [r7, #14]
 800181a:	4413      	add	r3, r2
 800181c:	b29b      	uxth	r3, r3
 800181e:	b218      	sxth	r0, r3
 8001820:	88ba      	ldrh	r2, [r7, #4]
 8001822:	89bb      	ldrh	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	b29b      	uxth	r3, r3
 8001828:	b21b      	sxth	r3, r3
 800182a:	883a      	ldrh	r2, [r7, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f7fe feba 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre - y, yCentre + x, colour);
 8001832:	88fa      	ldrh	r2, [r7, #6]
 8001834:	89bb      	ldrh	r3, [r7, #12]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	b29b      	uxth	r3, r3
 800183a:	b218      	sxth	r0, r3
 800183c:	88ba      	ldrh	r2, [r7, #4]
 800183e:	89fb      	ldrh	r3, [r7, #14]
 8001840:	4413      	add	r3, r2
 8001842:	b29b      	uxth	r3, r3
 8001844:	b21b      	sxth	r3, r3
 8001846:	883a      	ldrh	r2, [r7, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f7fe feac 	bl	80005a6 <lcdPlot>

		if (d < 0) d += (4 * x) + 6;
 800184e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001852:	2b00      	cmp	r3, #0
 8001854:	da09      	bge.n	800186a <lcdCircle+0x132>
 8001856:	89fb      	ldrh	r3, [r7, #14]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	b29a      	uxth	r2, r3
 800185c:	897b      	ldrh	r3, [r7, #10]
 800185e:	4413      	add	r3, r2
 8001860:	b29b      	uxth	r3, r3
 8001862:	3306      	adds	r3, #6
 8001864:	b29b      	uxth	r3, r3
 8001866:	817b      	strh	r3, [r7, #10]
 8001868:	e011      	b.n	800188e <lcdCircle+0x156>
		else
		{
			d += (4 * (x - y)) + 10;
 800186a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800186e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	b29b      	uxth	r3, r3
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	b29a      	uxth	r2, r3
 800187a:	897b      	ldrh	r3, [r7, #10]
 800187c:	4413      	add	r3, r2
 800187e:	b29b      	uxth	r3, r3
 8001880:	330a      	adds	r3, #10
 8001882:	b29b      	uxth	r3, r3
 8001884:	817b      	strh	r3, [r7, #10]
			y -= 1;
 8001886:	89bb      	ldrh	r3, [r7, #12]
 8001888:	3b01      	subs	r3, #1
 800188a:	b29b      	uxth	r3, r3
 800188c:	81bb      	strh	r3, [r7, #12]
		}

		x++;
 800188e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001892:	b29b      	uxth	r3, r3
 8001894:	3301      	adds	r3, #1
 8001896:	b29b      	uxth	r3, r3
 8001898:	81fb      	strh	r3, [r7, #14]
    while(x <= y)
 800189a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800189e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	f77f af63 	ble.w	800176e <lcdCircle+0x36>
	}
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd90      	pop	{r4, r7, pc}

080018b2 <lcdDottedCircle>:

void lcdDottedCircle(int16_t xCentre, int16_t yCentre, int16_t radius, uint16_t colour, uint16_t step)
{
 80018b2:	b590      	push	{r4, r7, lr}
 80018b4:	b085      	sub	sp, #20
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4604      	mov	r4, r0
 80018ba:	4608      	mov	r0, r1
 80018bc:	4611      	mov	r1, r2
 80018be:	461a      	mov	r2, r3
 80018c0:	4623      	mov	r3, r4
 80018c2:	80fb      	strh	r3, [r7, #6]
 80018c4:	4603      	mov	r3, r0
 80018c6:	80bb      	strh	r3, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
 80018cc:	4613      	mov	r3, r2
 80018ce:	803b      	strh	r3, [r7, #0]
	int16_t x = 0, y = radius;
 80018d0:	2300      	movs	r3, #0
 80018d2:	81fb      	strh	r3, [r7, #14]
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	81bb      	strh	r3, [r7, #12]
	int16_t d = 3 - (2 * radius);
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	b29b      	uxth	r3, r3
 80018de:	f1c3 0303 	rsb	r3, r3, #3
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	817b      	strh	r3, [r7, #10]

    while(x <= y)
 80018e6:	e095      	b.n	8001a14 <lcdDottedCircle+0x162>
	{
		lcdPlot(xCentre + x, yCentre + y, colour);
 80018e8:	88fa      	ldrh	r2, [r7, #6]
 80018ea:	89fb      	ldrh	r3, [r7, #14]
 80018ec:	4413      	add	r3, r2
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	b218      	sxth	r0, r3
 80018f2:	88ba      	ldrh	r2, [r7, #4]
 80018f4:	89bb      	ldrh	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	883a      	ldrh	r2, [r7, #0]
 80018fe:	4619      	mov	r1, r3
 8001900:	f7fe fe51 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre + y, yCentre + x, colour);
 8001904:	88fa      	ldrh	r2, [r7, #6]
 8001906:	89bb      	ldrh	r3, [r7, #12]
 8001908:	4413      	add	r3, r2
 800190a:	b29b      	uxth	r3, r3
 800190c:	b218      	sxth	r0, r3
 800190e:	88ba      	ldrh	r2, [r7, #4]
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	4413      	add	r3, r2
 8001914:	b29b      	uxth	r3, r3
 8001916:	b21b      	sxth	r3, r3
 8001918:	883a      	ldrh	r2, [r7, #0]
 800191a:	4619      	mov	r1, r3
 800191c:	f7fe fe43 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre - x, yCentre + y, colour);
 8001920:	88fa      	ldrh	r2, [r7, #6]
 8001922:	89fb      	ldrh	r3, [r7, #14]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	b29b      	uxth	r3, r3
 8001928:	b218      	sxth	r0, r3
 800192a:	88ba      	ldrh	r2, [r7, #4]
 800192c:	89bb      	ldrh	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	b29b      	uxth	r3, r3
 8001932:	b21b      	sxth	r3, r3
 8001934:	883a      	ldrh	r2, [r7, #0]
 8001936:	4619      	mov	r1, r3
 8001938:	f7fe fe35 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre + y, yCentre - x, colour);
 800193c:	88fa      	ldrh	r2, [r7, #6]
 800193e:	89bb      	ldrh	r3, [r7, #12]
 8001940:	4413      	add	r3, r2
 8001942:	b29b      	uxth	r3, r3
 8001944:	b218      	sxth	r0, r3
 8001946:	88ba      	ldrh	r2, [r7, #4]
 8001948:	89fb      	ldrh	r3, [r7, #14]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b29b      	uxth	r3, r3
 800194e:	b21b      	sxth	r3, r3
 8001950:	883a      	ldrh	r2, [r7, #0]
 8001952:	4619      	mov	r1, r3
 8001954:	f7fe fe27 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre - x, yCentre - y, colour);
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	89fb      	ldrh	r3, [r7, #14]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	b29b      	uxth	r3, r3
 8001960:	b218      	sxth	r0, r3
 8001962:	88ba      	ldrh	r2, [r7, #4]
 8001964:	89bb      	ldrh	r3, [r7, #12]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	b29b      	uxth	r3, r3
 800196a:	b21b      	sxth	r3, r3
 800196c:	883a      	ldrh	r2, [r7, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	f7fe fe19 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre - y, yCentre - x, colour);
 8001974:	88fa      	ldrh	r2, [r7, #6]
 8001976:	89bb      	ldrh	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	b29b      	uxth	r3, r3
 800197c:	b218      	sxth	r0, r3
 800197e:	88ba      	ldrh	r2, [r7, #4]
 8001980:	89fb      	ldrh	r3, [r7, #14]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	b29b      	uxth	r3, r3
 8001986:	b21b      	sxth	r3, r3
 8001988:	883a      	ldrh	r2, [r7, #0]
 800198a:	4619      	mov	r1, r3
 800198c:	f7fe fe0b 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre + x, yCentre - y, colour);
 8001990:	88fa      	ldrh	r2, [r7, #6]
 8001992:	89fb      	ldrh	r3, [r7, #14]
 8001994:	4413      	add	r3, r2
 8001996:	b29b      	uxth	r3, r3
 8001998:	b218      	sxth	r0, r3
 800199a:	88ba      	ldrh	r2, [r7, #4]
 800199c:	89bb      	ldrh	r3, [r7, #12]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	883a      	ldrh	r2, [r7, #0]
 80019a6:	4619      	mov	r1, r3
 80019a8:	f7fe fdfd 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre - y, yCentre + x, colour);
 80019ac:	88fa      	ldrh	r2, [r7, #6]
 80019ae:	89bb      	ldrh	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	b218      	sxth	r0, r3
 80019b6:	88ba      	ldrh	r2, [r7, #4]
 80019b8:	89fb      	ldrh	r3, [r7, #14]
 80019ba:	4413      	add	r3, r2
 80019bc:	b29b      	uxth	r3, r3
 80019be:	b21b      	sxth	r3, r3
 80019c0:	883a      	ldrh	r2, [r7, #0]
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7fe fdef 	bl	80005a6 <lcdPlot>

		if (d < 0) d += (4 * x) + 6;
 80019c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	da09      	bge.n	80019e4 <lcdDottedCircle+0x132>
 80019d0:	89fb      	ldrh	r3, [r7, #14]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	897b      	ldrh	r3, [r7, #10]
 80019d8:	4413      	add	r3, r2
 80019da:	b29b      	uxth	r3, r3
 80019dc:	3306      	adds	r3, #6
 80019de:	b29b      	uxth	r3, r3
 80019e0:	817b      	strh	r3, [r7, #10]
 80019e2:	e012      	b.n	8001a0a <lcdDottedCircle+0x158>
		else
		{
			d += (4 * (x - y)) + 10;
 80019e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	897b      	ldrh	r3, [r7, #10]
 80019f6:	4413      	add	r3, r2
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	330a      	adds	r3, #10
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	817b      	strh	r3, [r7, #10]
			y -= step;
 8001a00:	89ba      	ldrh	r2, [r7, #12]
 8001a02:	8c3b      	ldrh	r3, [r7, #32]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	81bb      	strh	r3, [r7, #12]
		}

		x+= step;
 8001a0a:	89fa      	ldrh	r2, [r7, #14]
 8001a0c:	8c3b      	ldrh	r3, [r7, #32]
 8001a0e:	4413      	add	r3, r2
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	81fb      	strh	r3, [r7, #14]
    while(x <= y)
 8001a14:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f77f af63 	ble.w	80018e8 <lcdDottedCircle+0x36>
	}
}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd90      	pop	{r4, r7, pc}

08001a2c <lcdFilledCircle>:

void lcdFilledCircle(int16_t xCentre, int16_t yCentre, int16_t radius, uint16_t colour)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	4604      	mov	r4, r0
 8001a34:	4608      	mov	r0, r1
 8001a36:	4611      	mov	r1, r2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	80fb      	strh	r3, [r7, #6]
 8001a3e:	4603      	mov	r3, r0
 8001a40:	80bb      	strh	r3, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	807b      	strh	r3, [r7, #2]
 8001a46:	4613      	mov	r3, r2
 8001a48:	803b      	strh	r3, [r7, #0]
	int16_t x = 0, y = radius;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	81fb      	strh	r3, [r7, #14]
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	81bb      	strh	r3, [r7, #12]
	int16_t d = 3 - (2 * radius);
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	f1c3 0303 	rsb	r3, r3, #3
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	817b      	strh	r3, [r7, #10]

	while(x <= y)
 8001a60:	e08b      	b.n	8001b7a <lcdFilledCircle+0x14e>
	{
		lcdLine(xCentre + x, yCentre + y, xCentre + x, yCentre -y, colour);
 8001a62:	88fa      	ldrh	r2, [r7, #6]
 8001a64:	89fb      	ldrh	r3, [r7, #14]
 8001a66:	4413      	add	r3, r2
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	b218      	sxth	r0, r3
 8001a6c:	88ba      	ldrh	r2, [r7, #4]
 8001a6e:	89bb      	ldrh	r3, [r7, #12]
 8001a70:	4413      	add	r3, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	b219      	sxth	r1, r3
 8001a76:	88fa      	ldrh	r2, [r7, #6]
 8001a78:	89fb      	ldrh	r3, [r7, #14]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	b21c      	sxth	r4, r3
 8001a80:	88ba      	ldrh	r2, [r7, #4]
 8001a82:	89bb      	ldrh	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	883b      	ldrh	r3, [r7, #0]
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	4622      	mov	r2, r4
 8001a92:	f7fe fdd5 	bl	8000640 <lcdLine>
		lcdLine(xCentre -x, yCentre + y, xCentre - x, yCentre -y, colour);
 8001a96:	88fa      	ldrh	r2, [r7, #6]
 8001a98:	89fb      	ldrh	r3, [r7, #14]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	b218      	sxth	r0, r3
 8001aa0:	88ba      	ldrh	r2, [r7, #4]
 8001aa2:	89bb      	ldrh	r3, [r7, #12]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	b219      	sxth	r1, r3
 8001aaa:	88fa      	ldrh	r2, [r7, #6]
 8001aac:	89fb      	ldrh	r3, [r7, #14]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	b21c      	sxth	r4, r3
 8001ab4:	88ba      	ldrh	r2, [r7, #4]
 8001ab6:	89bb      	ldrh	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	883b      	ldrh	r3, [r7, #0]
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	4622      	mov	r2, r4
 8001ac6:	f7fe fdbb 	bl	8000640 <lcdLine>
		lcdLine(xCentre + y, yCentre + x, xCentre + y, yCentre -x, colour);
 8001aca:	88fa      	ldrh	r2, [r7, #6]
 8001acc:	89bb      	ldrh	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	b218      	sxth	r0, r3
 8001ad4:	88ba      	ldrh	r2, [r7, #4]
 8001ad6:	89fb      	ldrh	r3, [r7, #14]
 8001ad8:	4413      	add	r3, r2
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	b219      	sxth	r1, r3
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	89bb      	ldrh	r3, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	b21c      	sxth	r4, r3
 8001ae8:	88ba      	ldrh	r2, [r7, #4]
 8001aea:	89fb      	ldrh	r3, [r7, #14]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	883b      	ldrh	r3, [r7, #0]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	4613      	mov	r3, r2
 8001af8:	4622      	mov	r2, r4
 8001afa:	f7fe fda1 	bl	8000640 <lcdLine>
		lcdLine(xCentre -y, yCentre + x, xCentre -y, yCentre -x, colour);
 8001afe:	88fa      	ldrh	r2, [r7, #6]
 8001b00:	89bb      	ldrh	r3, [r7, #12]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	b218      	sxth	r0, r3
 8001b08:	88ba      	ldrh	r2, [r7, #4]
 8001b0a:	89fb      	ldrh	r3, [r7, #14]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	b219      	sxth	r1, r3
 8001b12:	88fa      	ldrh	r2, [r7, #6]
 8001b14:	89bb      	ldrh	r3, [r7, #12]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	b21c      	sxth	r4, r3
 8001b1c:	88ba      	ldrh	r2, [r7, #4]
 8001b1e:	89fb      	ldrh	r3, [r7, #14]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	883b      	ldrh	r3, [r7, #0]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	f7fe fd87 	bl	8000640 <lcdLine>

		if (d < 0) d += (4 * x) + 6;
 8001b32:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	da09      	bge.n	8001b4e <lcdFilledCircle+0x122>
 8001b3a:	89fb      	ldrh	r3, [r7, #14]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	897b      	ldrh	r3, [r7, #10]
 8001b42:	4413      	add	r3, r2
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3306      	adds	r3, #6
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	817b      	strh	r3, [r7, #10]
 8001b4c:	e011      	b.n	8001b72 <lcdFilledCircle+0x146>
		else
		{
			d += (4 * (x - y)) + 10;
 8001b4e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b52:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	897b      	ldrh	r3, [r7, #10]
 8001b60:	4413      	add	r3, r2
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	330a      	adds	r3, #10
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	817b      	strh	r3, [r7, #10]
			y -= 1;
 8001b6a:	89bb      	ldrh	r3, [r7, #12]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	81bb      	strh	r3, [r7, #12]
		}

		x+= 1;
 8001b72:	89fb      	ldrh	r3, [r7, #14]
 8001b74:	3301      	adds	r3, #1
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	81fb      	strh	r3, [r7, #14]
	while(x <= y)
 8001b7a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	f77f af6d 	ble.w	8001a62 <lcdFilledCircle+0x36>
	}
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd90      	pop	{r4, r7, pc}

08001b92 <lcdFilledDottedCircle>:

void lcdFilledDottedCircle(int16_t xCentre, int16_t yCentre, int16_t radius, uint16_t colour, uint16_t step)
{
 8001b92:	b590      	push	{r4, r7, lr}
 8001b94:	b087      	sub	sp, #28
 8001b96:	af02      	add	r7, sp, #8
 8001b98:	4604      	mov	r4, r0
 8001b9a:	4608      	mov	r0, r1
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4623      	mov	r3, r4
 8001ba2:	80fb      	strh	r3, [r7, #6]
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	80bb      	strh	r3, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	803b      	strh	r3, [r7, #0]
	int16_t x = 0, y = radius;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	81fb      	strh	r3, [r7, #14]
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	81bb      	strh	r3, [r7, #12]
	int16_t d = 3 - (2 * radius);
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	f1c3 0303 	rsb	r3, r3, #3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	817b      	strh	r3, [r7, #10]

	while(x <= y)
 8001bc6:	e095      	b.n	8001cf4 <lcdFilledDottedCircle+0x162>
	{
		lcdDottedLine(xCentre + x, yCentre + y, xCentre + x, yCentre -y, colour, step);
 8001bc8:	88fa      	ldrh	r2, [r7, #6]
 8001bca:	89fb      	ldrh	r3, [r7, #14]
 8001bcc:	4413      	add	r3, r2
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	b218      	sxth	r0, r3
 8001bd2:	88ba      	ldrh	r2, [r7, #4]
 8001bd4:	89bb      	ldrh	r3, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	b219      	sxth	r1, r3
 8001bdc:	88fa      	ldrh	r2, [r7, #6]
 8001bde:	89fb      	ldrh	r3, [r7, #14]
 8001be0:	4413      	add	r3, r2
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	b21c      	sxth	r4, r3
 8001be6:	88ba      	ldrh	r2, [r7, #4]
 8001be8:	89bb      	ldrh	r3, [r7, #12]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b21a      	sxth	r2, r3
 8001bf0:	8c3b      	ldrh	r3, [r7, #32]
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	883b      	ldrh	r3, [r7, #0]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	4622      	mov	r2, r4
 8001bfc:	f7fe fe2b 	bl	8000856 <lcdDottedLine>
		lcdDottedLine(xCentre -x, yCentre + y, xCentre - x, yCentre -y, colour, step);
 8001c00:	88fa      	ldrh	r2, [r7, #6]
 8001c02:	89fb      	ldrh	r3, [r7, #14]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	b218      	sxth	r0, r3
 8001c0a:	88ba      	ldrh	r2, [r7, #4]
 8001c0c:	89bb      	ldrh	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	b219      	sxth	r1, r3
 8001c14:	88fa      	ldrh	r2, [r7, #6]
 8001c16:	89fb      	ldrh	r3, [r7, #14]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	b21c      	sxth	r4, r3
 8001c1e:	88ba      	ldrh	r2, [r7, #4]
 8001c20:	89bb      	ldrh	r3, [r7, #12]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	b21a      	sxth	r2, r3
 8001c28:	8c3b      	ldrh	r3, [r7, #32]
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	883b      	ldrh	r3, [r7, #0]
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	4622      	mov	r2, r4
 8001c34:	f7fe fe0f 	bl	8000856 <lcdDottedLine>
		lcdDottedLine(xCentre + y, yCentre + x, xCentre + y, yCentre -x, colour, step);
 8001c38:	88fa      	ldrh	r2, [r7, #6]
 8001c3a:	89bb      	ldrh	r3, [r7, #12]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	b218      	sxth	r0, r3
 8001c42:	88ba      	ldrh	r2, [r7, #4]
 8001c44:	89fb      	ldrh	r3, [r7, #14]
 8001c46:	4413      	add	r3, r2
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b219      	sxth	r1, r3
 8001c4c:	88fa      	ldrh	r2, [r7, #6]
 8001c4e:	89bb      	ldrh	r3, [r7, #12]
 8001c50:	4413      	add	r3, r2
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	b21c      	sxth	r4, r3
 8001c56:	88ba      	ldrh	r2, [r7, #4]
 8001c58:	89fb      	ldrh	r3, [r7, #14]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	8c3b      	ldrh	r3, [r7, #32]
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	883b      	ldrh	r3, [r7, #0]
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	4622      	mov	r2, r4
 8001c6c:	f7fe fdf3 	bl	8000856 <lcdDottedLine>
		lcdDottedLine(xCentre -y, yCentre + x, xCentre -y, yCentre -x, colour, step);
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	89bb      	ldrh	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	b218      	sxth	r0, r3
 8001c7a:	88ba      	ldrh	r2, [r7, #4]
 8001c7c:	89fb      	ldrh	r3, [r7, #14]
 8001c7e:	4413      	add	r3, r2
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b219      	sxth	r1, r3
 8001c84:	88fa      	ldrh	r2, [r7, #6]
 8001c86:	89bb      	ldrh	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b21c      	sxth	r4, r3
 8001c8e:	88ba      	ldrh	r2, [r7, #4]
 8001c90:	89fb      	ldrh	r3, [r7, #14]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b21a      	sxth	r2, r3
 8001c98:	8c3b      	ldrh	r3, [r7, #32]
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	883b      	ldrh	r3, [r7, #0]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	f7fe fdd7 	bl	8000856 <lcdDottedLine>

		if (d < 0) d += (4 * x) + 6;
 8001ca8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	da09      	bge.n	8001cc4 <lcdFilledDottedCircle+0x132>
 8001cb0:	89fb      	ldrh	r3, [r7, #14]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	897b      	ldrh	r3, [r7, #10]
 8001cb8:	4413      	add	r3, r2
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3306      	adds	r3, #6
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	817b      	strh	r3, [r7, #10]
 8001cc2:	e012      	b.n	8001cea <lcdFilledDottedCircle+0x158>
		else
		{
			d += (4 * (x - y)) + 10;
 8001cc4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001cc8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	897b      	ldrh	r3, [r7, #10]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	330a      	adds	r3, #10
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	817b      	strh	r3, [r7, #10]
			y -= step;
 8001ce0:	89ba      	ldrh	r2, [r7, #12]
 8001ce2:	8c3b      	ldrh	r3, [r7, #32]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	81bb      	strh	r3, [r7, #12]
		}

		x+= step;
 8001cea:	89fa      	ldrh	r2, [r7, #14]
 8001cec:	8c3b      	ldrh	r3, [r7, #32]
 8001cee:	4413      	add	r3, r2
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	81fb      	strh	r3, [r7, #14]
	while(x <= y)
 8001cf4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001cf8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	f77f af63 	ble.w	8001bc8 <lcdFilledDottedCircle+0x36>
	}
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd90      	pop	{r4, r7, pc}

08001d0c <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4604      	mov	r4, r0
 8001d14:	4608      	mov	r0, r1
 8001d16:	4611      	mov	r1, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4623      	mov	r3, r4
 8001d1c:	71fb      	strb	r3, [r7, #7]
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71bb      	strb	r3, [r7, #6]
 8001d22:	460b      	mov	r3, r1
 8001d24:	717b      	strb	r3, [r7, #5]
 8001d26:	4613      	mov	r3, r2
 8001d28:	807b      	strh	r3, [r7, #2]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8001d2a:	202a      	movs	r0, #42	@ 0x2a
 8001d2c:	f7fe fb1e 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7fe fb2e 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(x);
 8001d36:	79bb      	ldrb	r3, [r7, #6]
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fb29 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001d40:	2000      	movs	r0, #0
 8001d42:	f7fe fb26 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(x+5);
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	3305      	adds	r3, #5
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fb1e 	bl	8000392 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8001d56:	202b      	movs	r0, #43	@ 0x2b
 8001d58:	f7fe fb08 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7fe fb18 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(y);
 8001d62:	797b      	ldrb	r3, [r7, #5]
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fb13 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7fe fb10 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8001d72:	207f      	movs	r0, #127	@ 0x7f
 8001d74:	f7fe fb0d 	bl	8000392 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8001d78:	202c      	movs	r0, #44	@ 0x2c
 8001d7a:	f7fe faf7 	bl	800036c <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
 8001d82:	e036      	b.n	8001df2 <lcdPutCh+0xe6>
	{
		for (column = 0; column < 6; column++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	73bb      	strb	r3, [r7, #14]
 8001d88:	e02d      	b.n	8001de6 <lcdPutCh+0xda>
		{
			// Calculate the mirrored column index
			uint8_t mirroredColumn = 5 - column;
 8001d8a:	7bbb      	ldrb	r3, [r7, #14]
 8001d8c:	f1c3 0305 	rsb	r3, r3, #5
 8001d90:	737b      	strb	r3, [r7, #13]
			// Check the bit corresponding to the current row in the mirrored column
			if ((fontus[character][mirroredColumn]) & (1 << row))
 8001d92:	79fa      	ldrb	r2, [r7, #7]
 8001d94:	7b79      	ldrb	r1, [r7, #13]
 8001d96:	481b      	ldr	r0, [pc, #108]	@ (8001e04 <lcdPutCh+0xf8>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4403      	add	r3, r0
 8001da2:	440b      	add	r3, r1
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	fa42 f303 	asr.w	r3, r2, r3
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <lcdPutCh+0xc0>
				lcdWriteData(fgColour >> 8, fgColour);
 8001db6:	887b      	ldrh	r3, [r7, #2]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe faf8 	bl	80003ba <lcdWriteData>
 8001dca:	e009      	b.n	8001de0 <lcdPutCh+0xd4>
			else
				lcdWriteData(bgColour >> 8, bgColour);
 8001dcc:	8c3b      	ldrh	r3, [r7, #32]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	8c3a      	ldrh	r2, [r7, #32]
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe faed 	bl	80003ba <lcdWriteData>
		for (column = 0; column < 6; column++)
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	3301      	adds	r3, #1
 8001de4:	73bb      	strb	r3, [r7, #14]
 8001de6:	7bbb      	ldrb	r3, [r7, #14]
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d9ce      	bls.n	8001d8a <lcdPutCh+0x7e>
	for (row = 0; row < 8; row++)
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	3301      	adds	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	2b07      	cmp	r3, #7
 8001df6:	d9c5      	bls.n	8001d84 <lcdPutCh+0x78>
		}
	}
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd90      	pop	{r4, r7, pc}
 8001e02:	bf00      	nop
 8001e04:	08004584 	.word	0x08004584

08001e08 <lcdPutChSized>:

void lcdPutChSized(unsigned char character, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour, uint8_t size)
{
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	4604      	mov	r4, r0
 8001e10:	4608      	mov	r0, r1
 8001e12:	4611      	mov	r1, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	4623      	mov	r3, r4
 8001e18:	71fb      	strb	r3, [r7, #7]
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71bb      	strb	r3, [r7, #6]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	717b      	strb	r3, [r7, #5]
 8001e22:	4613      	mov	r3, r2
 8001e24:	807b      	strh	r3, [r7, #2]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8001e26:	202a      	movs	r0, #42	@ 0x2a
 8001e28:	f7fe faa0 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7fe fab0 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(x);
 8001e32:	79bb      	ldrb	r3, [r7, #6]
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe faab 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7fe faa8 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(x+5*size);
 8001e42:	79bb      	ldrb	r3, [r7, #6]
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	0089      	lsls	r1, r1, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fa99 	bl	8000392 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8001e60:	202b      	movs	r0, #43	@ 0x2b
 8001e62:	f7fe fa83 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7fe fa93 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(y);
 8001e6c:	797b      	ldrb	r3, [r7, #5]
 8001e6e:	b21b      	sxth	r3, r3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fa8e 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001e76:	2000      	movs	r0, #0
 8001e78:	f7fe fa8b 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8001e7c:	207f      	movs	r0, #127	@ 0x7f
 8001e7e:	f7fe fa88 	bl	8000392 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8001e82:	202c      	movs	r0, #44	@ 0x2c
 8001e84:	f7fe fa72 	bl	800036c <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8*size; row+=size)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	e06b      	b.n	8001f66 <lcdPutChSized+0x15e>
	{
		for (column = 0; column < 6*size; column+=size)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73bb      	strb	r3, [r7, #14]
 8001e92:	e05a      	b.n	8001f4a <lcdPutChSized+0x142>
		{
			uint8_t mirroredColumn = 5*size - column;
 8001e94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e98:	461a      	mov	r2, r3
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	737b      	strb	r3, [r7, #13]
			if ((fontus[character][(uint8_t)(mirroredColumn/size)]) & (1 << (uint8_t)(row/size)))
 8001ea6:	79fa      	ldrb	r2, [r7, #7]
 8001ea8:	7b79      	ldrb	r1, [r7, #13]
 8001eaa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001eae:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	4931      	ldr	r1, [pc, #196]	@ (8001f7c <lcdPutChSized+0x174>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	440b      	add	r3, r1
 8001ec2:	4403      	add	r3, r0
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	fa41 f303 	asr.w	r3, r1, r3
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d02f      	beq.n	8001f40 <lcdPutChSized+0x138>
				lcdFilledRectangle(x+column, y+row, x+column+size-1, y+row+size-1, fgColour);
 8001ee0:	79bb      	ldrb	r3, [r7, #6]
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	7bbb      	ldrb	r3, [r7, #14]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	b218      	sxth	r0, r3
 8001eee:	797b      	ldrb	r3, [r7, #5]
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	b219      	sxth	r1, r3
 8001efc:	79bb      	ldrb	r3, [r7, #6]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	7bbb      	ldrb	r3, [r7, #14]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	b21c      	sxth	r4, r3
 8001f18:	797b      	ldrb	r3, [r7, #5]
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	887b      	ldrh	r3, [r7, #2]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	4622      	mov	r2, r4
 8001f3c:	f7fe fdf1 	bl	8000b22 <lcdFilledRectangle>
		for (column = 0; column < 6*size; column+=size)
 8001f40:	7bba      	ldrb	r2, [r7, #14]
 8001f42:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f46:	4413      	add	r3, r2
 8001f48:	73bb      	strb	r3, [r7, #14]
 8001f4a:	7bb9      	ldrb	r1, [r7, #14]
 8001f4c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4299      	cmp	r1, r3
 8001f5a:	db9b      	blt.n	8001e94 <lcdPutChSized+0x8c>
	for (row = 0; row < 8*size; row+=size)
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f62:	4413      	add	r3, r2
 8001f64:	73fb      	strb	r3, [r7, #15]
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	db8d      	blt.n	8001e8e <lcdPutChSized+0x86>
		}
	}
}
 8001f72:	bf00      	nop
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd90      	pop	{r4, r7, pc}
 8001f7c:	08004584 	.word	0x08004584

08001f80 <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	71bb      	strb	r3, [r7, #6]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 8001f92:	797b      	ldrb	r3, [r7, #5]
 8001f94:	02db      	lsls	r3, r3, #11
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	79bb      	ldrb	r3, [r7, #6]
 8001f9a:	019b      	lsls	r3, r3, #6
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	b21a      	sxth	r2, r3
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	b29b      	uxth	r3, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <lcdPutS>:
// it easy to place text
uint8_t lcdTextY(uint8_t y) { return y*8; }

// Plot a string of characters to the LCD
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	4608      	mov	r0, r1
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	70fb      	strb	r3, [r7, #3]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	70bb      	strb	r3, [r7, #2]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	803b      	strh	r3, [r7, #0]
	uint8_t origin = x;
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	73bb      	strb	r3, [r7, #14]
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	73fb      	strb	r3, [r7, #15]
 8001fda:	e01c      	b.n	8002016 <lcdPutS+0x5e>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x < 10)
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	2b09      	cmp	r3, #9
 8001fe0:	d804      	bhi.n	8001fec <lcdPutS+0x34>
		{
			x = origin;
 8001fe2:	7bbb      	ldrb	r3, [r7, #14]
 8001fe4:	70fb      	strb	r3, [r7, #3]
			y += 8;
 8001fe6:	78bb      	ldrb	r3, [r7, #2]
 8001fe8:	3308      	adds	r3, #8
 8001fea:	70bb      	strb	r3, [r7, #2]
		}

		// If we move past the bottom of the screen just exit
		if (y > 230) break;
 8001fec:	78bb      	ldrb	r3, [r7, #2]
 8001fee:	2be6      	cmp	r3, #230	@ 0xe6
 8001ff0:	d819      	bhi.n	8002026 <lcdPutS+0x6e>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	7818      	ldrb	r0, [r3, #0]
 8001ffa:	883c      	ldrh	r4, [r7, #0]
 8001ffc:	78ba      	ldrb	r2, [r7, #2]
 8001ffe:	78f9      	ldrb	r1, [r7, #3]
 8002000:	8c3b      	ldrh	r3, [r7, #32]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	4623      	mov	r3, r4
 8002006:	f7ff fe81 	bl	8001d0c <lcdPutCh>
		x -= 6;
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	3b06      	subs	r3, #6
 800200e:	70fb      	strb	r3, [r7, #3]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	3301      	adds	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
 8002016:	7bfc      	ldrb	r4, [r7, #15]
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7fe f8d9 	bl	80001d0 <strlen>
 800201e:	4603      	mov	r3, r0
 8002020:	429c      	cmp	r4, r3
 8002022:	d3db      	bcc.n	8001fdc <lcdPutS+0x24>
	}
}
 8002024:	e000      	b.n	8002028 <lcdPutS+0x70>
		if (y > 230) break;
 8002026:	bf00      	nop
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bd90      	pop	{r4, r7, pc}

08002030 <lcdPutSSized>:

// Plot a string of characters to the LCD
void lcdPutSSized(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour, uint8_t size)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b087      	sub	sp, #28
 8002034:	af02      	add	r7, sp, #8
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	4608      	mov	r0, r1
 800203a:	4611      	mov	r1, r2
 800203c:	461a      	mov	r2, r3
 800203e:	4603      	mov	r3, r0
 8002040:	70fb      	strb	r3, [r7, #3]
 8002042:	460b      	mov	r3, r1
 8002044:	70bb      	strb	r3, [r7, #2]
 8002046:	4613      	mov	r3, r2
 8002048:	803b      	strh	r3, [r7, #0]
	x = x-size*6;
 800204a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800204e:	461a      	mov	r2, r3
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	b2da      	uxtb	r2, r3
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	4413      	add	r3, r2
 800205c:	70fb      	strb	r3, [r7, #3]
	uint8_t origin = x;
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	73bb      	strb	r3, [r7, #14]
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	e047      	b.n	80020f8 <lcdPutSSized+0xc8>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x < 1*size)
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800206e:	429a      	cmp	r2, r3
 8002070:	d208      	bcs.n	8002084 <lcdPutSSized+0x54>
		{
			x = origin;
 8002072:	7bbb      	ldrb	r3, [r7, #14]
 8002074:	70fb      	strb	r3, [r7, #3]
			y += 8*size;
 8002076:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	b2da      	uxtb	r2, r3
 800207e:	78bb      	ldrb	r3, [r7, #2]
 8002080:	4413      	add	r3, r2
 8002082:	70bb      	strb	r3, [r7, #2]
		}

		// If we move past the bottom of the screen just exit
		if (y > (239-6*size)) break;
 8002084:	78b9      	ldrb	r1, [r7, #2]
 8002086:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800208a:	4613      	mov	r3, r2
 800208c:	0092      	lsls	r2, r2, #2
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	33ef      	adds	r3, #239	@ 0xef
 8002094:	4299      	cmp	r1, r3
 8002096:	dc37      	bgt.n	8002108 <lcdPutSSized+0xd8>

		// Plot the current character
		lcdPutChSized(string[characterNumber], x, y, fgColour, bgColour, size);
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	7818      	ldrb	r0, [r3, #0]
 80020a0:	883c      	ldrh	r4, [r7, #0]
 80020a2:	78ba      	ldrb	r2, [r7, #2]
 80020a4:	78f9      	ldrb	r1, [r7, #3]
 80020a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020aa:	9301      	str	r3, [sp, #4]
 80020ac:	8c3b      	ldrh	r3, [r7, #32]
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	4623      	mov	r3, r4
 80020b2:	f7ff fea9 	bl	8001e08 <lcdPutChSized>
		if ((x-6*size)>0) x -= 6*size;
 80020b6:	78f9      	ldrb	r1, [r7, #3]
 80020b8:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80020bc:	4613      	mov	r3, r2
 80020be:	0092      	lsls	r2, r2, #2
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	440b      	add	r3, r1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	dd0a      	ble.n	80020e0 <lcdPutSSized+0xb0>
 80020ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020ce:	461a      	mov	r2, r3
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	4413      	add	r3, r2
 80020dc:	70fb      	strb	r3, [r7, #3]
 80020de:	e008      	b.n	80020f2 <lcdPutSSized+0xc2>
		else
		{
			x = origin;
 80020e0:	7bbb      	ldrb	r3, [r7, #14]
 80020e2:	70fb      	strb	r3, [r7, #3]
			y += 8*size;
 80020e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	78bb      	ldrb	r3, [r7, #2]
 80020ee:	4413      	add	r3, r2
 80020f0:	70bb      	strb	r3, [r7, #2]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	3301      	adds	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	7bfc      	ldrb	r4, [r7, #15]
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe f868 	bl	80001d0 <strlen>
 8002100:	4603      	mov	r3, r0
 8002102:	429c      	cmp	r4, r3
 8002104:	d3b0      	bcc.n	8002068 <lcdPutSSized+0x38>
		}
	}
}
 8002106:	e000      	b.n	800210a <lcdPutSSized+0xda>
		if (y > (239-6*size)) break;
 8002108:	bf00      	nop
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}
	...

08002114 <demoPlot>:

void demoPlot(){
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	b09e      	sub	sp, #120	@ 0x78
 8002118:	af02      	add	r7, sp, #8
	int16_t Triangle[] = {20, 170, 230, 150, 140, 40};
 800211a:	4ae2      	ldr	r2, [pc, #904]	@ (80024a4 <demoPlot+0x390>)
 800211c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002120:	ca07      	ldmia	r2, {r0, r1, r2}
 8002122:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t Square[] = {30, 30, 170, 30, 170, 170, 30, 170};
 8002126:	4be0      	ldr	r3, [pc, #896]	@ (80024a8 <demoPlot+0x394>)
 8002128:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800212c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800212e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int16_t Pentagon[] = {50, 20, 150, 20, 180, 120, 100, 180, 10, 120};
 8002132:	4bde      	ldr	r3, [pc, #888]	@ (80024ac <demoPlot+0x398>)
 8002134:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8002138:	461d      	mov	r5, r3
 800213a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800213c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213e:	682b      	ldr	r3, [r5, #0]
 8002140:	6023      	str	r3, [r4, #0]
    // lcdPutS("DOOM", 280, 10, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));


	//-----------------------------------------------------------------------------------------------------test printing text (normal, sized, with numbers)-----------------------------------------------------------------------------------------------------

	lcdPutSSized("DOOM", 215, 0, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),8);
 8002142:	221f      	movs	r2, #31
 8002144:	211f      	movs	r1, #31
 8002146:	201f      	movs	r0, #31
 8002148:	f7ff ff1a 	bl	8001f80 <decodeRgbValue>
 800214c:	4603      	mov	r3, r0
 800214e:	461c      	mov	r4, r3
 8002150:	2200      	movs	r2, #0
 8002152:	2100      	movs	r1, #0
 8002154:	2000      	movs	r0, #0
 8002156:	f7ff ff13 	bl	8001f80 <decodeRgbValue>
 800215a:	4603      	mov	r3, r0
 800215c:	461a      	mov	r2, r3
 800215e:	2308      	movs	r3, #8
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	9200      	str	r2, [sp, #0]
 8002164:	4623      	mov	r3, r4
 8002166:	2200      	movs	r2, #0
 8002168:	21d7      	movs	r1, #215	@ 0xd7
 800216a:	48d1      	ldr	r0, [pc, #836]	@ (80024b0 <demoPlot+0x39c>)
 800216c:	f7ff ff60 	bl	8002030 <lcdPutSSized>
	lcdPutSSized("NEW GAME", 180, 64, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8002170:	221f      	movs	r2, #31
 8002172:	211f      	movs	r1, #31
 8002174:	201f      	movs	r0, #31
 8002176:	f7ff ff03 	bl	8001f80 <decodeRgbValue>
 800217a:	4603      	mov	r3, r0
 800217c:	461c      	mov	r4, r3
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	2000      	movs	r0, #0
 8002184:	f7ff fefc 	bl	8001f80 <decodeRgbValue>
 8002188:	4603      	mov	r3, r0
 800218a:	461a      	mov	r2, r3
 800218c:	2302      	movs	r3, #2
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	9200      	str	r2, [sp, #0]
 8002192:	4623      	mov	r3, r4
 8002194:	2240      	movs	r2, #64	@ 0x40
 8002196:	21b4      	movs	r1, #180	@ 0xb4
 8002198:	48c6      	ldr	r0, [pc, #792]	@ (80024b4 <demoPlot+0x3a0>)
 800219a:	f7ff ff49 	bl	8002030 <lcdPutSSized>
	lcdPutSSized("OPTIONS", 180, 80, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 800219e:	221f      	movs	r2, #31
 80021a0:	211f      	movs	r1, #31
 80021a2:	201f      	movs	r0, #31
 80021a4:	f7ff feec 	bl	8001f80 <decodeRgbValue>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461c      	mov	r4, r3
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7ff fee5 	bl	8001f80 <decodeRgbValue>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461a      	mov	r2, r3
 80021ba:	2302      	movs	r3, #2
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	9200      	str	r2, [sp, #0]
 80021c0:	4623      	mov	r3, r4
 80021c2:	2250      	movs	r2, #80	@ 0x50
 80021c4:	21b4      	movs	r1, #180	@ 0xb4
 80021c6:	48bc      	ldr	r0, [pc, #752]	@ (80024b8 <demoPlot+0x3a4>)
 80021c8:	f7ff ff32 	bl	8002030 <lcdPutSSized>
	lcdPutSSized("LOAD GAME", 180, 96, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80021cc:	221f      	movs	r2, #31
 80021ce:	211f      	movs	r1, #31
 80021d0:	201f      	movs	r0, #31
 80021d2:	f7ff fed5 	bl	8001f80 <decodeRgbValue>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461c      	mov	r4, r3
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	2000      	movs	r0, #0
 80021e0:	f7ff fece 	bl	8001f80 <decodeRgbValue>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	2302      	movs	r3, #2
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	9200      	str	r2, [sp, #0]
 80021ee:	4623      	mov	r3, r4
 80021f0:	2260      	movs	r2, #96	@ 0x60
 80021f2:	21b4      	movs	r1, #180	@ 0xb4
 80021f4:	48b1      	ldr	r0, [pc, #708]	@ (80024bc <demoPlot+0x3a8>)
 80021f6:	f7ff ff1b 	bl	8002030 <lcdPutSSized>
	lcdPutSSized("SAVE GAME", 180, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80021fa:	221f      	movs	r2, #31
 80021fc:	211f      	movs	r1, #31
 80021fe:	201f      	movs	r0, #31
 8002200:	f7ff febe 	bl	8001f80 <decodeRgbValue>
 8002204:	4603      	mov	r3, r0
 8002206:	461c      	mov	r4, r3
 8002208:	2200      	movs	r2, #0
 800220a:	2100      	movs	r1, #0
 800220c:	2000      	movs	r0, #0
 800220e:	f7ff feb7 	bl	8001f80 <decodeRgbValue>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	2302      	movs	r3, #2
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	9200      	str	r2, [sp, #0]
 800221c:	4623      	mov	r3, r4
 800221e:	2270      	movs	r2, #112	@ 0x70
 8002220:	21b4      	movs	r1, #180	@ 0xb4
 8002222:	48a7      	ldr	r0, [pc, #668]	@ (80024c0 <demoPlot+0x3ac>)
 8002224:	f7ff ff04 	bl	8002030 <lcdPutSSized>
	lcdPutSSized("READ THIS!", 180, 128, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8002228:	221f      	movs	r2, #31
 800222a:	211f      	movs	r1, #31
 800222c:	201f      	movs	r0, #31
 800222e:	f7ff fea7 	bl	8001f80 <decodeRgbValue>
 8002232:	4603      	mov	r3, r0
 8002234:	461c      	mov	r4, r3
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	2000      	movs	r0, #0
 800223c:	f7ff fea0 	bl	8001f80 <decodeRgbValue>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	2302      	movs	r3, #2
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	9200      	str	r2, [sp, #0]
 800224a:	4623      	mov	r3, r4
 800224c:	2280      	movs	r2, #128	@ 0x80
 800224e:	21b4      	movs	r1, #180	@ 0xb4
 8002250:	489c      	ldr	r0, [pc, #624]	@ (80024c4 <demoPlot+0x3b0>)
 8002252:	f7ff feed 	bl	8002030 <lcdPutSSized>
	lcdPutSSized("QUIT GAME", 180, 144, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8002256:	221f      	movs	r2, #31
 8002258:	211f      	movs	r1, #31
 800225a:	201f      	movs	r0, #31
 800225c:	f7ff fe90 	bl	8001f80 <decodeRgbValue>
 8002260:	4603      	mov	r3, r0
 8002262:	461c      	mov	r4, r3
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	2000      	movs	r0, #0
 800226a:	f7ff fe89 	bl	8001f80 <decodeRgbValue>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	2302      	movs	r3, #2
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	9200      	str	r2, [sp, #0]
 8002278:	4623      	mov	r3, r4
 800227a:	2290      	movs	r2, #144	@ 0x90
 800227c:	21b4      	movs	r1, #180	@ 0xb4
 800227e:	4892      	ldr	r0, [pc, #584]	@ (80024c8 <demoPlot+0x3b4>)
 8002280:	f7ff fed6 	bl	8002030 <lcdPutSSized>

	//-----------------------------------------------------------------------------------------------------HUD-----------------------------------------------------------------------------------------------------

	int16_t ammo = 24;
 8002284:	2318      	movs	r3, #24
 8002286:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	int16_t health = 78;
 800228a:	234e      	movs	r3, #78	@ 0x4e
 800228c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	int16_t armor = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
	char ammoText[16];
	char healthText[16];
	char armorText[16];


	lcdPutS("AMMO", 250, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8002296:	221f      	movs	r2, #31
 8002298:	211f      	movs	r1, #31
 800229a:	201f      	movs	r0, #31
 800229c:	f7ff fe70 	bl	8001f80 <decodeRgbValue>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461c      	mov	r4, r3
 80022a4:	2200      	movs	r2, #0
 80022a6:	2100      	movs	r1, #0
 80022a8:	2000      	movs	r0, #0
 80022aa:	f7ff fe69 	bl	8001f80 <decodeRgbValue>
 80022ae:	4603      	mov	r3, r0
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	4623      	mov	r3, r4
 80022b4:	22e6      	movs	r2, #230	@ 0xe6
 80022b6:	21fa      	movs	r1, #250	@ 0xfa
 80022b8:	4884      	ldr	r0, [pc, #528]	@ (80024cc <demoPlot+0x3b8>)
 80022ba:	f7ff fe7d 	bl	8001fb8 <lcdPutS>
	sprintf(ammoText, "%d", ammo);
 80022be:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	@ 0x66
 80022c2:	f107 0320 	add.w	r3, r7, #32
 80022c6:	4982      	ldr	r1, [pc, #520]	@ (80024d0 <demoPlot+0x3bc>)
 80022c8:	4618      	mov	r0, r3
 80022ca:	f001 fc45 	bl	8003b58 <siprintf>
	lcdPutS(ammoText, 240, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 80022ce:	221f      	movs	r2, #31
 80022d0:	211f      	movs	r1, #31
 80022d2:	201f      	movs	r0, #31
 80022d4:	f7ff fe54 	bl	8001f80 <decodeRgbValue>
 80022d8:	4603      	mov	r3, r0
 80022da:	461c      	mov	r4, r3
 80022dc:	2200      	movs	r2, #0
 80022de:	2100      	movs	r1, #0
 80022e0:	2000      	movs	r0, #0
 80022e2:	f7ff fe4d 	bl	8001f80 <decodeRgbValue>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f107 0020 	add.w	r0, r7, #32
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	4623      	mov	r3, r4
 80022f0:	22de      	movs	r2, #222	@ 0xde
 80022f2:	21f0      	movs	r1, #240	@ 0xf0
 80022f4:	f7ff fe60 	bl	8001fb8 <lcdPutS>

	lcdPutS("HEALTH", 145, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 80022f8:	221f      	movs	r2, #31
 80022fa:	211f      	movs	r1, #31
 80022fc:	201f      	movs	r0, #31
 80022fe:	f7ff fe3f 	bl	8001f80 <decodeRgbValue>
 8002302:	4603      	mov	r3, r0
 8002304:	461c      	mov	r4, r3
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	2000      	movs	r0, #0
 800230c:	f7ff fe38 	bl	8001f80 <decodeRgbValue>
 8002310:	4603      	mov	r3, r0
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	4623      	mov	r3, r4
 8002316:	22e6      	movs	r2, #230	@ 0xe6
 8002318:	2191      	movs	r1, #145	@ 0x91
 800231a:	486e      	ldr	r0, [pc, #440]	@ (80024d4 <demoPlot+0x3c0>)
 800231c:	f7ff fe4c 	bl	8001fb8 <lcdPutS>
	sprintf(healthText, "%d%%", health);
 8002320:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 8002324:	f107 0310 	add.w	r3, r7, #16
 8002328:	496b      	ldr	r1, [pc, #428]	@ (80024d8 <demoPlot+0x3c4>)
 800232a:	4618      	mov	r0, r3
 800232c:	f001 fc14 	bl	8003b58 <siprintf>
	lcdPutS(healthText, 125, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8002330:	221f      	movs	r2, #31
 8002332:	211f      	movs	r1, #31
 8002334:	201f      	movs	r0, #31
 8002336:	f7ff fe23 	bl	8001f80 <decodeRgbValue>
 800233a:	4603      	mov	r3, r0
 800233c:	461c      	mov	r4, r3
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	2000      	movs	r0, #0
 8002344:	f7ff fe1c 	bl	8001f80 <decodeRgbValue>
 8002348:	4603      	mov	r3, r0
 800234a:	f107 0010 	add.w	r0, r7, #16
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	4623      	mov	r3, r4
 8002352:	22de      	movs	r2, #222	@ 0xde
 8002354:	217d      	movs	r1, #125	@ 0x7d
 8002356:	f7ff fe2f 	bl	8001fb8 <lcdPutS>

	lcdPutS("ARMOR", 35, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 800235a:	221f      	movs	r2, #31
 800235c:	211f      	movs	r1, #31
 800235e:	201f      	movs	r0, #31
 8002360:	f7ff fe0e 	bl	8001f80 <decodeRgbValue>
 8002364:	4603      	mov	r3, r0
 8002366:	461c      	mov	r4, r3
 8002368:	2200      	movs	r2, #0
 800236a:	2100      	movs	r1, #0
 800236c:	2000      	movs	r0, #0
 800236e:	f7ff fe07 	bl	8001f80 <decodeRgbValue>
 8002372:	4603      	mov	r3, r0
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	4623      	mov	r3, r4
 8002378:	22e6      	movs	r2, #230	@ 0xe6
 800237a:	2123      	movs	r1, #35	@ 0x23
 800237c:	4857      	ldr	r0, [pc, #348]	@ (80024dc <demoPlot+0x3c8>)
 800237e:	f7ff fe1b 	bl	8001fb8 <lcdPutS>
	sprintf(armorText, "%d%%", armor);
 8002382:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	@ 0x62
 8002386:	463b      	mov	r3, r7
 8002388:	4953      	ldr	r1, [pc, #332]	@ (80024d8 <demoPlot+0x3c4>)
 800238a:	4618      	mov	r0, r3
 800238c:	f001 fbe4 	bl	8003b58 <siprintf>
	lcdPutS(armorText, 20, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8002390:	221f      	movs	r2, #31
 8002392:	211f      	movs	r1, #31
 8002394:	201f      	movs	r0, #31
 8002396:	f7ff fdf3 	bl	8001f80 <decodeRgbValue>
 800239a:	4603      	mov	r3, r0
 800239c:	461c      	mov	r4, r3
 800239e:	2200      	movs	r2, #0
 80023a0:	2100      	movs	r1, #0
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7ff fdec 	bl	8001f80 <decodeRgbValue>
 80023a8:	4603      	mov	r3, r0
 80023aa:	4638      	mov	r0, r7
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	4623      	mov	r3, r4
 80023b0:	22de      	movs	r2, #222	@ 0xde
 80023b2:	2114      	movs	r1, #20
 80023b4:	f7ff fe00 	bl	8001fb8 <lcdPutS>

	LL_mDelay(5000);
 80023b8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80023bc:	f001 fb96 	bl	8003aec <LL_mDelay>

	lcdPutSSized("DOOM", 215, 0, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),8);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2100      	movs	r1, #0
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff fddb 	bl	8001f80 <decodeRgbValue>
 80023ca:	4603      	mov	r3, r0
 80023cc:	461c      	mov	r4, r3
 80023ce:	2200      	movs	r2, #0
 80023d0:	2100      	movs	r1, #0
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7ff fdd4 	bl	8001f80 <decodeRgbValue>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	2308      	movs	r3, #8
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	9200      	str	r2, [sp, #0]
 80023e2:	4623      	mov	r3, r4
 80023e4:	2200      	movs	r2, #0
 80023e6:	21d7      	movs	r1, #215	@ 0xd7
 80023e8:	4831      	ldr	r0, [pc, #196]	@ (80024b0 <demoPlot+0x39c>)
 80023ea:	f7ff fe21 	bl	8002030 <lcdPutSSized>
	lcdPutSSized("NEW GAME", 180, 64, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	2000      	movs	r0, #0
 80023f4:	f7ff fdc4 	bl	8001f80 <decodeRgbValue>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461c      	mov	r4, r3
 80023fc:	2200      	movs	r2, #0
 80023fe:	2100      	movs	r1, #0
 8002400:	2000      	movs	r0, #0
 8002402:	f7ff fdbd 	bl	8001f80 <decodeRgbValue>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	2302      	movs	r3, #2
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	9200      	str	r2, [sp, #0]
 8002410:	4623      	mov	r3, r4
 8002412:	2240      	movs	r2, #64	@ 0x40
 8002414:	21b4      	movs	r1, #180	@ 0xb4
 8002416:	4827      	ldr	r0, [pc, #156]	@ (80024b4 <demoPlot+0x3a0>)
 8002418:	f7ff fe0a 	bl	8002030 <lcdPutSSized>
	lcdPutSSized("OPTIONS", 180, 80, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 800241c:	2200      	movs	r2, #0
 800241e:	2100      	movs	r1, #0
 8002420:	2000      	movs	r0, #0
 8002422:	f7ff fdad 	bl	8001f80 <decodeRgbValue>
 8002426:	4603      	mov	r3, r0
 8002428:	461c      	mov	r4, r3
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	2000      	movs	r0, #0
 8002430:	f7ff fda6 	bl	8001f80 <decodeRgbValue>
 8002434:	4603      	mov	r3, r0
 8002436:	461a      	mov	r2, r3
 8002438:	2302      	movs	r3, #2
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	9200      	str	r2, [sp, #0]
 800243e:	4623      	mov	r3, r4
 8002440:	2250      	movs	r2, #80	@ 0x50
 8002442:	21b4      	movs	r1, #180	@ 0xb4
 8002444:	481c      	ldr	r0, [pc, #112]	@ (80024b8 <demoPlot+0x3a4>)
 8002446:	f7ff fdf3 	bl	8002030 <lcdPutSSized>
	lcdPutSSized("LOAD GAME", 180, 96, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	2000      	movs	r0, #0
 8002450:	f7ff fd96 	bl	8001f80 <decodeRgbValue>
 8002454:	4603      	mov	r3, r0
 8002456:	461c      	mov	r4, r3
 8002458:	2200      	movs	r2, #0
 800245a:	2100      	movs	r1, #0
 800245c:	2000      	movs	r0, #0
 800245e:	f7ff fd8f 	bl	8001f80 <decodeRgbValue>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	2302      	movs	r3, #2
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	9200      	str	r2, [sp, #0]
 800246c:	4623      	mov	r3, r4
 800246e:	2260      	movs	r2, #96	@ 0x60
 8002470:	21b4      	movs	r1, #180	@ 0xb4
 8002472:	4812      	ldr	r0, [pc, #72]	@ (80024bc <demoPlot+0x3a8>)
 8002474:	f7ff fddc 	bl	8002030 <lcdPutSSized>
	lcdPutSSized("SAVE GAME", 180, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8002478:	2200      	movs	r2, #0
 800247a:	2100      	movs	r1, #0
 800247c:	2000      	movs	r0, #0
 800247e:	f7ff fd7f 	bl	8001f80 <decodeRgbValue>
 8002482:	4603      	mov	r3, r0
 8002484:	461c      	mov	r4, r3
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	2000      	movs	r0, #0
 800248c:	f7ff fd78 	bl	8001f80 <decodeRgbValue>
 8002490:	4603      	mov	r3, r0
 8002492:	461a      	mov	r2, r3
 8002494:	2302      	movs	r3, #2
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	9200      	str	r2, [sp, #0]
 800249a:	4623      	mov	r3, r4
 800249c:	2270      	movs	r2, #112	@ 0x70
 800249e:	21b4      	movs	r1, #180	@ 0xb4
 80024a0:	e01e      	b.n	80024e0 <demoPlot+0x3cc>
 80024a2:	bf00      	nop
 80024a4:	08004554 	.word	0x08004554
 80024a8:	08004560 	.word	0x08004560
 80024ac:	08004570 	.word	0x08004570
 80024b0:	080044b0 	.word	0x080044b0
 80024b4:	080044b8 	.word	0x080044b8
 80024b8:	080044c4 	.word	0x080044c4
 80024bc:	080044cc 	.word	0x080044cc
 80024c0:	080044d8 	.word	0x080044d8
 80024c4:	080044e4 	.word	0x080044e4
 80024c8:	080044f0 	.word	0x080044f0
 80024cc:	080044fc 	.word	0x080044fc
 80024d0:	08004504 	.word	0x08004504
 80024d4:	08004508 	.word	0x08004508
 80024d8:	08004510 	.word	0x08004510
 80024dc:	08004518 	.word	0x08004518
 80024e0:	48b6      	ldr	r0, [pc, #728]	@ (80027bc <demoPlot+0x6a8>)
 80024e2:	f7ff fda5 	bl	8002030 <lcdPutSSized>
	lcdPutSSized("READ THIS!", 180, 128, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7ff fd48 	bl	8001f80 <decodeRgbValue>
 80024f0:	4603      	mov	r3, r0
 80024f2:	461c      	mov	r4, r3
 80024f4:	2200      	movs	r2, #0
 80024f6:	2100      	movs	r1, #0
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7ff fd41 	bl	8001f80 <decodeRgbValue>
 80024fe:	4603      	mov	r3, r0
 8002500:	461a      	mov	r2, r3
 8002502:	2302      	movs	r3, #2
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	9200      	str	r2, [sp, #0]
 8002508:	4623      	mov	r3, r4
 800250a:	2280      	movs	r2, #128	@ 0x80
 800250c:	21b4      	movs	r1, #180	@ 0xb4
 800250e:	48ac      	ldr	r0, [pc, #688]	@ (80027c0 <demoPlot+0x6ac>)
 8002510:	f7ff fd8e 	bl	8002030 <lcdPutSSized>
	lcdPutSSized("QUIT GAME", 180, 144, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8002514:	2200      	movs	r2, #0
 8002516:	2100      	movs	r1, #0
 8002518:	2000      	movs	r0, #0
 800251a:	f7ff fd31 	bl	8001f80 <decodeRgbValue>
 800251e:	4603      	mov	r3, r0
 8002520:	461c      	mov	r4, r3
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	2000      	movs	r0, #0
 8002528:	f7ff fd2a 	bl	8001f80 <decodeRgbValue>
 800252c:	4603      	mov	r3, r0
 800252e:	461a      	mov	r2, r3
 8002530:	2302      	movs	r3, #2
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	9200      	str	r2, [sp, #0]
 8002536:	4623      	mov	r3, r4
 8002538:	2290      	movs	r2, #144	@ 0x90
 800253a:	21b4      	movs	r1, #180	@ 0xb4
 800253c:	48a1      	ldr	r0, [pc, #644]	@ (80027c4 <demoPlot+0x6b0>)
 800253e:	f7ff fd77 	bl	8002030 <lcdPutSSized>

	lcdPutS("AMMO", 250, 230, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	2000      	movs	r0, #0
 8002548:	f7ff fd1a 	bl	8001f80 <decodeRgbValue>
 800254c:	4603      	mov	r3, r0
 800254e:	461c      	mov	r4, r3
 8002550:	2200      	movs	r2, #0
 8002552:	2100      	movs	r1, #0
 8002554:	2000      	movs	r0, #0
 8002556:	f7ff fd13 	bl	8001f80 <decodeRgbValue>
 800255a:	4603      	mov	r3, r0
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	4623      	mov	r3, r4
 8002560:	22e6      	movs	r2, #230	@ 0xe6
 8002562:	21fa      	movs	r1, #250	@ 0xfa
 8002564:	4898      	ldr	r0, [pc, #608]	@ (80027c8 <demoPlot+0x6b4>)
 8002566:	f7ff fd27 	bl	8001fb8 <lcdPutS>
	sprintf(ammoText, "%d", ammo);
 800256a:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	@ 0x66
 800256e:	f107 0320 	add.w	r3, r7, #32
 8002572:	4996      	ldr	r1, [pc, #600]	@ (80027cc <demoPlot+0x6b8>)
 8002574:	4618      	mov	r0, r3
 8002576:	f001 faef 	bl	8003b58 <siprintf>
	lcdPutS(ammoText, 240, 222, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	2000      	movs	r0, #0
 8002580:	f7ff fcfe 	bl	8001f80 <decodeRgbValue>
 8002584:	4603      	mov	r3, r0
 8002586:	461c      	mov	r4, r3
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	2000      	movs	r0, #0
 800258e:	f7ff fcf7 	bl	8001f80 <decodeRgbValue>
 8002592:	4603      	mov	r3, r0
 8002594:	f107 0020 	add.w	r0, r7, #32
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	4623      	mov	r3, r4
 800259c:	22de      	movs	r2, #222	@ 0xde
 800259e:	21f0      	movs	r1, #240	@ 0xf0
 80025a0:	f7ff fd0a 	bl	8001fb8 <lcdPutS>

	lcdPutS("HEALTH", 145, 230, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 80025a4:	2200      	movs	r2, #0
 80025a6:	2100      	movs	r1, #0
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7ff fce9 	bl	8001f80 <decodeRgbValue>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461c      	mov	r4, r3
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7ff fce2 	bl	8001f80 <decodeRgbValue>
 80025bc:	4603      	mov	r3, r0
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	4623      	mov	r3, r4
 80025c2:	22e6      	movs	r2, #230	@ 0xe6
 80025c4:	2191      	movs	r1, #145	@ 0x91
 80025c6:	4882      	ldr	r0, [pc, #520]	@ (80027d0 <demoPlot+0x6bc>)
 80025c8:	f7ff fcf6 	bl	8001fb8 <lcdPutS>
	sprintf(healthText, "%d%%", health);
 80025cc:	f9b7 2064 	ldrsh.w	r2, [r7, #100]	@ 0x64
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	497f      	ldr	r1, [pc, #508]	@ (80027d4 <demoPlot+0x6c0>)
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 fabe 	bl	8003b58 <siprintf>
	lcdPutS(healthText, 125, 222, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 80025dc:	2200      	movs	r2, #0
 80025de:	2100      	movs	r1, #0
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7ff fccd 	bl	8001f80 <decodeRgbValue>
 80025e6:	4603      	mov	r3, r0
 80025e8:	461c      	mov	r4, r3
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7ff fcc6 	bl	8001f80 <decodeRgbValue>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f107 0010 	add.w	r0, r7, #16
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	4623      	mov	r3, r4
 80025fe:	22de      	movs	r2, #222	@ 0xde
 8002600:	217d      	movs	r1, #125	@ 0x7d
 8002602:	f7ff fcd9 	bl	8001fb8 <lcdPutS>

	lcdPutS("ARMOR", 35, 230, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8002606:	2200      	movs	r2, #0
 8002608:	2100      	movs	r1, #0
 800260a:	2000      	movs	r0, #0
 800260c:	f7ff fcb8 	bl	8001f80 <decodeRgbValue>
 8002610:	4603      	mov	r3, r0
 8002612:	461c      	mov	r4, r3
 8002614:	2200      	movs	r2, #0
 8002616:	2100      	movs	r1, #0
 8002618:	2000      	movs	r0, #0
 800261a:	f7ff fcb1 	bl	8001f80 <decodeRgbValue>
 800261e:	4603      	mov	r3, r0
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	4623      	mov	r3, r4
 8002624:	22e6      	movs	r2, #230	@ 0xe6
 8002626:	2123      	movs	r1, #35	@ 0x23
 8002628:	486b      	ldr	r0, [pc, #428]	@ (80027d8 <demoPlot+0x6c4>)
 800262a:	f7ff fcc5 	bl	8001fb8 <lcdPutS>
	sprintf(armorText, "%d%%", armor);
 800262e:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	@ 0x62
 8002632:	463b      	mov	r3, r7
 8002634:	4967      	ldr	r1, [pc, #412]	@ (80027d4 <demoPlot+0x6c0>)
 8002636:	4618      	mov	r0, r3
 8002638:	f001 fa8e 	bl	8003b58 <siprintf>
	lcdPutS(armorText, 20, 222, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 800263c:	2200      	movs	r2, #0
 800263e:	2100      	movs	r1, #0
 8002640:	2000      	movs	r0, #0
 8002642:	f7ff fc9d 	bl	8001f80 <decodeRgbValue>
 8002646:	4603      	mov	r3, r0
 8002648:	461c      	mov	r4, r3
 800264a:	2200      	movs	r2, #0
 800264c:	2100      	movs	r1, #0
 800264e:	2000      	movs	r0, #0
 8002650:	f7ff fc96 	bl	8001f80 <decodeRgbValue>
 8002654:	4603      	mov	r3, r0
 8002656:	4638      	mov	r0, r7
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	4623      	mov	r3, r4
 800265c:	22de      	movs	r2, #222	@ 0xde
 800265e:	2114      	movs	r1, #20
 8002660:	f7ff fcaa 	bl	8001fb8 <lcdPutS>
	//lcdPutS("TEXT velkosti 3:", 220, 10, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
	//lcdPutS("ANIMACIE:", 220, 10, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));

	//-----------------------------------------------------------------------------------------------------animovane stvorce-----------------------------------------------------------------------------------------------------

	for (int16_t i = 0; i<20; i++){
 8002664:	2300      	movs	r3, #0
 8002666:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800266a:	e048      	b.n	80026fe <demoPlot+0x5ea>
	  lcdRectangle(20+i*10, 50, 100+i*10, 130, decodeRgbValue(255, 255, 255));
 800266c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002670:	461a      	mov	r2, r3
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	4413      	add	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	b29b      	uxth	r3, r3
 800267a:	3314      	adds	r3, #20
 800267c:	b29b      	uxth	r3, r3
 800267e:	b21c      	sxth	r4, r3
 8002680:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002684:	461a      	mov	r2, r3
 8002686:	0092      	lsls	r2, r2, #2
 8002688:	4413      	add	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	b29b      	uxth	r3, r3
 800268e:	3364      	adds	r3, #100	@ 0x64
 8002690:	b29b      	uxth	r3, r3
 8002692:	b21d      	sxth	r5, r3
 8002694:	22ff      	movs	r2, #255	@ 0xff
 8002696:	21ff      	movs	r1, #255	@ 0xff
 8002698:	20ff      	movs	r0, #255	@ 0xff
 800269a:	f7ff fc71 	bl	8001f80 <decodeRgbValue>
 800269e:	4603      	mov	r3, r0
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	2382      	movs	r3, #130	@ 0x82
 80026a4:	462a      	mov	r2, r5
 80026a6:	2132      	movs	r1, #50	@ 0x32
 80026a8:	4620      	mov	r0, r4
 80026aa:	f7fe f9a4 	bl	80009f6 <lcdRectangle>
	  lcdRectangle(20+i*10, 50, 100+i*10, 130, decodeRgbValue(0, 0, 0));
 80026ae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80026b2:	461a      	mov	r2, r3
 80026b4:	0092      	lsls	r2, r2, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3314      	adds	r3, #20
 80026be:	b29b      	uxth	r3, r3
 80026c0:	b21c      	sxth	r4, r3
 80026c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80026c6:	461a      	mov	r2, r3
 80026c8:	0092      	lsls	r2, r2, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3364      	adds	r3, #100	@ 0x64
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	b21d      	sxth	r5, r3
 80026d6:	2200      	movs	r2, #0
 80026d8:	2100      	movs	r1, #0
 80026da:	2000      	movs	r0, #0
 80026dc:	f7ff fc50 	bl	8001f80 <decodeRgbValue>
 80026e0:	4603      	mov	r3, r0
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	2382      	movs	r3, #130	@ 0x82
 80026e6:	462a      	mov	r2, r5
 80026e8:	2132      	movs	r1, #50	@ 0x32
 80026ea:	4620      	mov	r0, r4
 80026ec:	f7fe f983 	bl	80009f6 <lcdRectangle>
	for (int16_t i = 0; i<20; i++){
 80026f0:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3301      	adds	r3, #1
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80026fe:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002702:	2b13      	cmp	r3, #19
 8002704:	ddb2      	ble.n	800266c <demoPlot+0x558>
	}
	for (int16_t i = 0; i<20; i++){
 8002706:	2300      	movs	r3, #0
 8002708:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800270c:	e04e      	b.n	80027ac <demoPlot+0x698>
	  lcdDottedRectangle(20+i*10, 50, 100+i*10, 130, decodeRgbValue(255, 255, 255), 3);
 800270e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002712:	461a      	mov	r2, r3
 8002714:	0092      	lsls	r2, r2, #2
 8002716:	4413      	add	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	b29b      	uxth	r3, r3
 800271c:	3314      	adds	r3, #20
 800271e:	b29b      	uxth	r3, r3
 8002720:	b21c      	sxth	r4, r3
 8002722:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002726:	461a      	mov	r2, r3
 8002728:	0092      	lsls	r2, r2, #2
 800272a:	4413      	add	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	b29b      	uxth	r3, r3
 8002730:	3364      	adds	r3, #100	@ 0x64
 8002732:	b29b      	uxth	r3, r3
 8002734:	b21d      	sxth	r5, r3
 8002736:	22ff      	movs	r2, #255	@ 0xff
 8002738:	21ff      	movs	r1, #255	@ 0xff
 800273a:	20ff      	movs	r0, #255	@ 0xff
 800273c:	f7ff fc20 	bl	8001f80 <decodeRgbValue>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	2303      	movs	r3, #3
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	9200      	str	r2, [sp, #0]
 800274a:	2382      	movs	r3, #130	@ 0x82
 800274c:	462a      	mov	r2, r5
 800274e:	2132      	movs	r1, #50	@ 0x32
 8002750:	4620      	mov	r0, r4
 8002752:	f7fe f997 	bl	8000a84 <lcdDottedRectangle>
	  lcdDottedRectangle(20+i*10, 50, 100+i*10, 130, decodeRgbValue(0, 0, 0), 3);
 8002756:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800275a:	461a      	mov	r2, r3
 800275c:	0092      	lsls	r2, r2, #2
 800275e:	4413      	add	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	b29b      	uxth	r3, r3
 8002764:	3314      	adds	r3, #20
 8002766:	b29b      	uxth	r3, r3
 8002768:	b21c      	sxth	r4, r3
 800276a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800276e:	461a      	mov	r2, r3
 8002770:	0092      	lsls	r2, r2, #2
 8002772:	4413      	add	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	b29b      	uxth	r3, r3
 8002778:	3364      	adds	r3, #100	@ 0x64
 800277a:	b29b      	uxth	r3, r3
 800277c:	b21d      	sxth	r5, r3
 800277e:	2200      	movs	r2, #0
 8002780:	2100      	movs	r1, #0
 8002782:	2000      	movs	r0, #0
 8002784:	f7ff fbfc 	bl	8001f80 <decodeRgbValue>
 8002788:	4603      	mov	r3, r0
 800278a:	461a      	mov	r2, r3
 800278c:	2303      	movs	r3, #3
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	9200      	str	r2, [sp, #0]
 8002792:	2382      	movs	r3, #130	@ 0x82
 8002794:	462a      	mov	r2, r5
 8002796:	2132      	movs	r1, #50	@ 0x32
 8002798:	4620      	mov	r0, r4
 800279a:	f7fe f973 	bl	8000a84 <lcdDottedRectangle>
	for (int16_t i = 0; i<20; i++){
 800279e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3301      	adds	r3, #1
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80027ac:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	@ 0x6c
 80027b0:	2b13      	cmp	r3, #19
 80027b2:	ddac      	ble.n	800270e <demoPlot+0x5fa>
	}
	for (int16_t i = 0; i<20; i++){
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80027ba:	e05e      	b.n	800287a <demoPlot+0x766>
 80027bc:	080044d8 	.word	0x080044d8
 80027c0:	080044e4 	.word	0x080044e4
 80027c4:	080044f0 	.word	0x080044f0
 80027c8:	080044fc 	.word	0x080044fc
 80027cc:	08004504 	.word	0x08004504
 80027d0:	08004508 	.word	0x08004508
 80027d4:	08004510 	.word	0x08004510
 80027d8:	08004518 	.word	0x08004518
	  lcdDottedRectangle(20+i*10, 50, 100+i*10, 130, decodeRgbValue(255, 255, 255), 5);
 80027dc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80027e0:	461a      	mov	r2, r3
 80027e2:	0092      	lsls	r2, r2, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3314      	adds	r3, #20
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	b21c      	sxth	r4, r3
 80027f0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80027f4:	461a      	mov	r2, r3
 80027f6:	0092      	lsls	r2, r2, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3364      	adds	r3, #100	@ 0x64
 8002800:	b29b      	uxth	r3, r3
 8002802:	b21d      	sxth	r5, r3
 8002804:	22ff      	movs	r2, #255	@ 0xff
 8002806:	21ff      	movs	r1, #255	@ 0xff
 8002808:	20ff      	movs	r0, #255	@ 0xff
 800280a:	f7ff fbb9 	bl	8001f80 <decodeRgbValue>
 800280e:	4603      	mov	r3, r0
 8002810:	461a      	mov	r2, r3
 8002812:	2305      	movs	r3, #5
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	9200      	str	r2, [sp, #0]
 8002818:	2382      	movs	r3, #130	@ 0x82
 800281a:	462a      	mov	r2, r5
 800281c:	2132      	movs	r1, #50	@ 0x32
 800281e:	4620      	mov	r0, r4
 8002820:	f7fe f930 	bl	8000a84 <lcdDottedRectangle>
	  lcdDottedRectangle(20+i*10, 50, 100+i*10, 130, decodeRgbValue(0, 0, 0), 5);
 8002824:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002828:	461a      	mov	r2, r3
 800282a:	0092      	lsls	r2, r2, #2
 800282c:	4413      	add	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	b29b      	uxth	r3, r3
 8002832:	3314      	adds	r3, #20
 8002834:	b29b      	uxth	r3, r3
 8002836:	b21c      	sxth	r4, r3
 8002838:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800283c:	461a      	mov	r2, r3
 800283e:	0092      	lsls	r2, r2, #2
 8002840:	4413      	add	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	b29b      	uxth	r3, r3
 8002846:	3364      	adds	r3, #100	@ 0x64
 8002848:	b29b      	uxth	r3, r3
 800284a:	b21d      	sxth	r5, r3
 800284c:	2200      	movs	r2, #0
 800284e:	2100      	movs	r1, #0
 8002850:	2000      	movs	r0, #0
 8002852:	f7ff fb95 	bl	8001f80 <decodeRgbValue>
 8002856:	4603      	mov	r3, r0
 8002858:	461a      	mov	r2, r3
 800285a:	2305      	movs	r3, #5
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	9200      	str	r2, [sp, #0]
 8002860:	2382      	movs	r3, #130	@ 0x82
 8002862:	462a      	mov	r2, r5
 8002864:	2132      	movs	r1, #50	@ 0x32
 8002866:	4620      	mov	r0, r4
 8002868:	f7fe f90c 	bl	8000a84 <lcdDottedRectangle>
	for (int16_t i = 0; i<20; i++){
 800286c:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 8002870:	b29b      	uxth	r3, r3
 8002872:	3301      	adds	r3, #1
 8002874:	b29b      	uxth	r3, r3
 8002876:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800287a:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 800287e:	2b13      	cmp	r3, #19
 8002880:	ddac      	ble.n	80027dc <demoPlot+0x6c8>
	}
	//-----------------------------------------------------------------------------------------------------animovany kruh-----------------------------------------------------------------------------------------------------

	for (int16_t i = 0; i<10; i++){
 8002882:	2300      	movs	r3, #0
 8002884:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8002888:	e038      	b.n	80028fc <demoPlot+0x7e8>
	  lcdDottedCircle(60+i*10, 100, 50, decodeRgbValue(255, 255, 255), 3);
 800288a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800288e:	461a      	mov	r2, r3
 8002890:	0092      	lsls	r2, r2, #2
 8002892:	4413      	add	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	b29b      	uxth	r3, r3
 8002898:	333c      	adds	r3, #60	@ 0x3c
 800289a:	b29b      	uxth	r3, r3
 800289c:	b21c      	sxth	r4, r3
 800289e:	22ff      	movs	r2, #255	@ 0xff
 80028a0:	21ff      	movs	r1, #255	@ 0xff
 80028a2:	20ff      	movs	r0, #255	@ 0xff
 80028a4:	f7ff fb6c 	bl	8001f80 <decodeRgbValue>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	2303      	movs	r3, #3
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	4613      	mov	r3, r2
 80028b2:	2232      	movs	r2, #50	@ 0x32
 80028b4:	2164      	movs	r1, #100	@ 0x64
 80028b6:	4620      	mov	r0, r4
 80028b8:	f7fe fffb 	bl	80018b2 <lcdDottedCircle>
	  lcdDottedCircle(60+i*10, 100, 50, decodeRgbValue(0, 0, 0), 3);
 80028bc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80028c0:	461a      	mov	r2, r3
 80028c2:	0092      	lsls	r2, r2, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	333c      	adds	r3, #60	@ 0x3c
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	b21c      	sxth	r4, r3
 80028d0:	2200      	movs	r2, #0
 80028d2:	2100      	movs	r1, #0
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7ff fb53 	bl	8001f80 <decodeRgbValue>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	2303      	movs	r3, #3
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	4613      	mov	r3, r2
 80028e4:	2232      	movs	r2, #50	@ 0x32
 80028e6:	2164      	movs	r1, #100	@ 0x64
 80028e8:	4620      	mov	r0, r4
 80028ea:	f7fe ffe2 	bl	80018b2 <lcdDottedCircle>
	for (int16_t i = 0; i<10; i++){
 80028ee:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3301      	adds	r3, #1
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80028fc:	f9b7 3068 	ldrsh.w	r3, [r7, #104]	@ 0x68
 8002900:	2b09      	cmp	r3, #9
 8002902:	ddc2      	ble.n	800288a <demoPlot+0x776>
	}
	lcdPutS("ANIMACIE:", 220, 10, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8002904:	2200      	movs	r2, #0
 8002906:	2100      	movs	r1, #0
 8002908:	2000      	movs	r0, #0
 800290a:	f7ff fb39 	bl	8001f80 <decodeRgbValue>
 800290e:	4603      	mov	r3, r0
 8002910:	461c      	mov	r4, r3
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	2000      	movs	r0, #0
 8002918:	f7ff fb32 	bl	8001f80 <decodeRgbValue>
 800291c:	4603      	mov	r3, r0
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	4623      	mov	r3, r4
 8002922:	220a      	movs	r2, #10
 8002924:	21dc      	movs	r1, #220	@ 0xdc
 8002926:	48f0      	ldr	r0, [pc, #960]	@ (8002ce8 <demoPlot+0xbd4>)
 8002928:	f7ff fb46 	bl	8001fb8 <lcdPutS>
	lcdPutS("POLYGONY:", 220, 10, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 800292c:	221f      	movs	r2, #31
 800292e:	211f      	movs	r1, #31
 8002930:	201f      	movs	r0, #31
 8002932:	f7ff fb25 	bl	8001f80 <decodeRgbValue>
 8002936:	4603      	mov	r3, r0
 8002938:	461c      	mov	r4, r3
 800293a:	2200      	movs	r2, #0
 800293c:	2100      	movs	r1, #0
 800293e:	2000      	movs	r0, #0
 8002940:	f7ff fb1e 	bl	8001f80 <decodeRgbValue>
 8002944:	4603      	mov	r3, r0
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	4623      	mov	r3, r4
 800294a:	220a      	movs	r2, #10
 800294c:	21dc      	movs	r1, #220	@ 0xdc
 800294e:	48e7      	ldr	r0, [pc, #924]	@ (8002cec <demoPlot+0xbd8>)
 8002950:	f7ff fb32 	bl	8001fb8 <lcdPutS>

	//-----------------------------------------------------------------------------------------------------testujem polygon-----------------------------------------------------------------------------------------------------

	lcdPolygon( Pentagon, sizeof(Pentagon) / (2 * sizeof(Pentagon[0])), decodeRgbValue(255, 255, 255));
 8002954:	22ff      	movs	r2, #255	@ 0xff
 8002956:	21ff      	movs	r1, #255	@ 0xff
 8002958:	20ff      	movs	r0, #255	@ 0xff
 800295a:	f7ff fb11 	bl	8001f80 <decodeRgbValue>
 800295e:	4603      	mov	r3, r0
 8002960:	461a      	mov	r2, r3
 8002962:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002966:	2105      	movs	r1, #5
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe f98a 	bl	8000c82 <lcdPolygon>
	LL_mDelay(200);
 800296e:	20c8      	movs	r0, #200	@ 0xc8
 8002970:	f001 f8bc 	bl	8003aec <LL_mDelay>
	lcdPolygon( Pentagon, sizeof(Pentagon) / (2 * sizeof(Pentagon[0])), decodeRgbValue(0, 0, 0));
 8002974:	2200      	movs	r2, #0
 8002976:	2100      	movs	r1, #0
 8002978:	2000      	movs	r0, #0
 800297a:	f7ff fb01 	bl	8001f80 <decodeRgbValue>
 800297e:	4603      	mov	r3, r0
 8002980:	461a      	mov	r2, r3
 8002982:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002986:	2105      	movs	r1, #5
 8002988:	4618      	mov	r0, r3
 800298a:	f7fe f97a 	bl	8000c82 <lcdPolygon>
	lcdDottedPolygon( Pentagon, sizeof(Pentagon) / (2 * sizeof(Pentagon[0])), decodeRgbValue(255, 255, 255), 3);
 800298e:	22ff      	movs	r2, #255	@ 0xff
 8002990:	21ff      	movs	r1, #255	@ 0xff
 8002992:	20ff      	movs	r0, #255	@ 0xff
 8002994:	f7ff faf4 	bl	8001f80 <decodeRgbValue>
 8002998:	4603      	mov	r3, r0
 800299a:	461a      	mov	r2, r3
 800299c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80029a0:	2303      	movs	r3, #3
 80029a2:	2105      	movs	r1, #5
 80029a4:	f7fe f9c4 	bl	8000d30 <lcdDottedPolygon>
	LL_mDelay(200);
 80029a8:	20c8      	movs	r0, #200	@ 0xc8
 80029aa:	f001 f89f 	bl	8003aec <LL_mDelay>
	lcdDottedPolygon( Pentagon, sizeof(Pentagon) / (2 * sizeof(Pentagon[0])), decodeRgbValue(0, 0, 0), 3);
 80029ae:	2200      	movs	r2, #0
 80029b0:	2100      	movs	r1, #0
 80029b2:	2000      	movs	r0, #0
 80029b4:	f7ff fae4 	bl	8001f80 <decodeRgbValue>
 80029b8:	4603      	mov	r3, r0
 80029ba:	461a      	mov	r2, r3
 80029bc:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80029c0:	2303      	movs	r3, #3
 80029c2:	2105      	movs	r1, #5
 80029c4:	f7fe f9b4 	bl	8000d30 <lcdDottedPolygon>

	//-----------------------------------------------------------------------------------------------------testujem plneny trojuholnik a taktiez plneny polygon-----------------------------------------------------------------------------------------------------

    lcdFilledTriangle( Triangle, decodeRgbValue(255, 255, 255) );
 80029c8:	22ff      	movs	r2, #255	@ 0xff
 80029ca:	21ff      	movs	r1, #255	@ 0xff
 80029cc:	20ff      	movs	r0, #255	@ 0xff
 80029ce:	f7ff fad7 	bl	8001f80 <decodeRgbValue>
 80029d2:	4603      	mov	r3, r0
 80029d4:	461a      	mov	r2, r3
 80029d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe fa05 	bl	8000dec <lcdFilledTriangle>
	LL_mDelay(200);
 80029e2:	20c8      	movs	r0, #200	@ 0xc8
 80029e4:	f001 f882 	bl	8003aec <LL_mDelay>
	lcdFilledTriangle( Triangle, decodeRgbValue(0, 0, 0) );
 80029e8:	2200      	movs	r2, #0
 80029ea:	2100      	movs	r1, #0
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7ff fac7 	bl	8001f80 <decodeRgbValue>
 80029f2:	4603      	mov	r3, r0
 80029f4:	461a      	mov	r2, r3
 80029f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe f9f5 	bl	8000dec <lcdFilledTriangle>
	lcdFilledPolygon( Square, sizeof(Square) / (2 * sizeof(Square[0])), decodeRgbValue(255, 255, 255) );
 8002a02:	22ff      	movs	r2, #255	@ 0xff
 8002a04:	21ff      	movs	r1, #255	@ 0xff
 8002a06:	20ff      	movs	r0, #255	@ 0xff
 8002a08:	f7ff faba 	bl	8001f80 <decodeRgbValue>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a14:	2104      	movs	r1, #4
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fd1b 	bl	8001452 <lcdFilledPolygon>
	LL_mDelay(200);
 8002a1c:	20c8      	movs	r0, #200	@ 0xc8
 8002a1e:	f001 f865 	bl	8003aec <LL_mDelay>
	lcdFilledPolygon( Square, sizeof(Square) / (2 * sizeof(Square[0])), decodeRgbValue(0, 0, 0) );
 8002a22:	2200      	movs	r2, #0
 8002a24:	2100      	movs	r1, #0
 8002a26:	2000      	movs	r0, #0
 8002a28:	f7ff faaa 	bl	8001f80 <decodeRgbValue>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a34:	2104      	movs	r1, #4
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe fd0b 	bl	8001452 <lcdFilledPolygon>
	lcdFilledPolygon( Pentagon, sizeof(Pentagon) / (2 * sizeof(Pentagon[0])), decodeRgbValue(255, 255, 255) );
 8002a3c:	22ff      	movs	r2, #255	@ 0xff
 8002a3e:	21ff      	movs	r1, #255	@ 0xff
 8002a40:	20ff      	movs	r0, #255	@ 0xff
 8002a42:	f7ff fa9d 	bl	8001f80 <decodeRgbValue>
 8002a46:	4603      	mov	r3, r0
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a4e:	2105      	movs	r1, #5
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fe fcfe 	bl	8001452 <lcdFilledPolygon>
	LL_mDelay(200);
 8002a56:	20c8      	movs	r0, #200	@ 0xc8
 8002a58:	f001 f848 	bl	8003aec <LL_mDelay>
	lcdFilledPolygon( Pentagon, sizeof(Pentagon) / (2 * sizeof(Pentagon[0])), decodeRgbValue(0, 0, 0) );
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2100      	movs	r1, #0
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7ff fa8d 	bl	8001f80 <decodeRgbValue>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a6e:	2105      	movs	r1, #5
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe fcee 	bl	8001452 <lcdFilledPolygon>
	lcdFilledDottedPolygon( Pentagon, sizeof(Pentagon) / (2 * sizeof(Pentagon[0])), decodeRgbValue(255, 255, 255), 3 );
 8002a76:	22ff      	movs	r2, #255	@ 0xff
 8002a78:	21ff      	movs	r1, #255	@ 0xff
 8002a7a:	20ff      	movs	r0, #255	@ 0xff
 8002a7c:	f7ff fa80 	bl	8001f80 <decodeRgbValue>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461a      	mov	r2, r3
 8002a84:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002a88:	2303      	movs	r3, #3
 8002a8a:	2105      	movs	r1, #5
 8002a8c:	f7fe fd98 	bl	80015c0 <lcdFilledDottedPolygon>
	LL_mDelay(200);
 8002a90:	20c8      	movs	r0, #200	@ 0xc8
 8002a92:	f001 f82b 	bl	8003aec <LL_mDelay>
	lcdFilledDottedPolygon( Pentagon, sizeof(Pentagon) / (2 * sizeof(Pentagon[0])), decodeRgbValue(0, 0, 0), 3 );
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7ff fa70 	bl	8001f80 <decodeRgbValue>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	2105      	movs	r1, #5
 8002aac:	f7fe fd88 	bl	80015c0 <lcdFilledDottedPolygon>
	lcdPutS("POLYGONY:", 220, 10, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7ff fa63 	bl	8001f80 <decodeRgbValue>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461c      	mov	r4, r3
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7ff fa5c 	bl	8001f80 <decodeRgbValue>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	4623      	mov	r3, r4
 8002ace:	220a      	movs	r2, #10
 8002ad0:	21dc      	movs	r1, #220	@ 0xdc
 8002ad2:	4886      	ldr	r0, [pc, #536]	@ (8002cec <demoPlot+0xbd8>)
 8002ad4:	f7ff fa70 	bl	8001fb8 <lcdPutS>
	lcdPutS("STVORCE:", 220, 10, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8002ad8:	221f      	movs	r2, #31
 8002ada:	211f      	movs	r1, #31
 8002adc:	201f      	movs	r0, #31
 8002ade:	f7ff fa4f 	bl	8001f80 <decodeRgbValue>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	461c      	mov	r4, r3
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2100      	movs	r1, #0
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7ff fa48 	bl	8001f80 <decodeRgbValue>
 8002af0:	4603      	mov	r3, r0
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4623      	mov	r3, r4
 8002af6:	220a      	movs	r2, #10
 8002af8:	21dc      	movs	r1, #220	@ 0xdc
 8002afa:	487d      	ldr	r0, [pc, #500]	@ (8002cf0 <demoPlot+0xbdc>)
 8002afc:	f7ff fa5c 	bl	8001fb8 <lcdPutS>

	//-----------------------------------------------------------------------------------------------------TESTUJEM VYKRESLENIE STVORCOV-----------------------------------------------------------------------------------------------------

	lcdRectangle(30, 30, 170, 170, decodeRgbValue(255, 255, 255));
 8002b00:	22ff      	movs	r2, #255	@ 0xff
 8002b02:	21ff      	movs	r1, #255	@ 0xff
 8002b04:	20ff      	movs	r0, #255	@ 0xff
 8002b06:	f7ff fa3b 	bl	8001f80 <decodeRgbValue>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	23aa      	movs	r3, #170	@ 0xaa
 8002b10:	22aa      	movs	r2, #170	@ 0xaa
 8002b12:	211e      	movs	r1, #30
 8002b14:	201e      	movs	r0, #30
 8002b16:	f7fd ff6e 	bl	80009f6 <lcdRectangle>
	LL_mDelay(200);
 8002b1a:	20c8      	movs	r0, #200	@ 0xc8
 8002b1c:	f000 ffe6 	bl	8003aec <LL_mDelay>
	lcdRectangle(30, 30, 170, 170, decodeRgbValue(0, 0, 0));
 8002b20:	2200      	movs	r2, #0
 8002b22:	2100      	movs	r1, #0
 8002b24:	2000      	movs	r0, #0
 8002b26:	f7ff fa2b 	bl	8001f80 <decodeRgbValue>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	23aa      	movs	r3, #170	@ 0xaa
 8002b30:	22aa      	movs	r2, #170	@ 0xaa
 8002b32:	211e      	movs	r1, #30
 8002b34:	201e      	movs	r0, #30
 8002b36:	f7fd ff5e 	bl	80009f6 <lcdRectangle>
	lcdDottedRectangle(30, 30, 170, 170, decodeRgbValue(255, 255, 255), 3);
 8002b3a:	22ff      	movs	r2, #255	@ 0xff
 8002b3c:	21ff      	movs	r1, #255	@ 0xff
 8002b3e:	20ff      	movs	r0, #255	@ 0xff
 8002b40:	f7ff fa1e 	bl	8001f80 <decodeRgbValue>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461a      	mov	r2, r3
 8002b48:	2303      	movs	r3, #3
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	9200      	str	r2, [sp, #0]
 8002b4e:	23aa      	movs	r3, #170	@ 0xaa
 8002b50:	22aa      	movs	r2, #170	@ 0xaa
 8002b52:	211e      	movs	r1, #30
 8002b54:	201e      	movs	r0, #30
 8002b56:	f7fd ff95 	bl	8000a84 <lcdDottedRectangle>
	LL_mDelay(200);
 8002b5a:	20c8      	movs	r0, #200	@ 0xc8
 8002b5c:	f000 ffc6 	bl	8003aec <LL_mDelay>
	lcdDottedRectangle(30, 30, 170, 170, decodeRgbValue(0, 0, 0), 3);
 8002b60:	2200      	movs	r2, #0
 8002b62:	2100      	movs	r1, #0
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7ff fa0b 	bl	8001f80 <decodeRgbValue>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2303      	movs	r3, #3
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	9200      	str	r2, [sp, #0]
 8002b74:	23aa      	movs	r3, #170	@ 0xaa
 8002b76:	22aa      	movs	r2, #170	@ 0xaa
 8002b78:	211e      	movs	r1, #30
 8002b7a:	201e      	movs	r0, #30
 8002b7c:	f7fd ff82 	bl	8000a84 <lcdDottedRectangle>

	//-----------------------------------------------------------------------------------------------------testujem vykreslenie plneneho stvorca-----------------------------------------------------------------------------------------------------

	lcdFilledRectangle(30, 30, 170, 170, decodeRgbValue(255, 255, 255));
 8002b80:	22ff      	movs	r2, #255	@ 0xff
 8002b82:	21ff      	movs	r1, #255	@ 0xff
 8002b84:	20ff      	movs	r0, #255	@ 0xff
 8002b86:	f7ff f9fb 	bl	8001f80 <decodeRgbValue>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	23aa      	movs	r3, #170	@ 0xaa
 8002b90:	22aa      	movs	r2, #170	@ 0xaa
 8002b92:	211e      	movs	r1, #30
 8002b94:	201e      	movs	r0, #30
 8002b96:	f7fd ffc4 	bl	8000b22 <lcdFilledRectangle>
	LL_mDelay(200);
 8002b9a:	20c8      	movs	r0, #200	@ 0xc8
 8002b9c:	f000 ffa6 	bl	8003aec <LL_mDelay>
	lcdFilledRectangle(30, 30, 170, 170, decodeRgbValue(0, 0, 0));
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	f7ff f9eb 	bl	8001f80 <decodeRgbValue>
 8002baa:	4603      	mov	r3, r0
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	23aa      	movs	r3, #170	@ 0xaa
 8002bb0:	22aa      	movs	r2, #170	@ 0xaa
 8002bb2:	211e      	movs	r1, #30
 8002bb4:	201e      	movs	r0, #30
 8002bb6:	f7fd ffb4 	bl	8000b22 <lcdFilledRectangle>

	//-----------------------------------------------------------------------------------------------------testujem vykreslenie bodkovaneho stvorca-----------------------------------------------------------------------------------------------------

	lcdFilledDottedRectangle(30, 30, 170, 170, decodeRgbValue(255, 255, 255), 5);
 8002bba:	22ff      	movs	r2, #255	@ 0xff
 8002bbc:	21ff      	movs	r1, #255	@ 0xff
 8002bbe:	20ff      	movs	r0, #255	@ 0xff
 8002bc0:	f7ff f9de 	bl	8001f80 <decodeRgbValue>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	2305      	movs	r3, #5
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	9200      	str	r2, [sp, #0]
 8002bce:	23aa      	movs	r3, #170	@ 0xaa
 8002bd0:	22aa      	movs	r2, #170	@ 0xaa
 8002bd2:	211e      	movs	r1, #30
 8002bd4:	201e      	movs	r0, #30
 8002bd6:	f7fe f81c 	bl	8000c12 <lcdFilledDottedRectangle>
	LL_mDelay(200);
 8002bda:	20c8      	movs	r0, #200	@ 0xc8
 8002bdc:	f000 ff86 	bl	8003aec <LL_mDelay>
	lcdFilledDottedRectangle(30, 30, 170, 170, decodeRgbValue(0, 0, 0), 5);
 8002be0:	2200      	movs	r2, #0
 8002be2:	2100      	movs	r1, #0
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7ff f9cb 	bl	8001f80 <decodeRgbValue>
 8002bea:	4603      	mov	r3, r0
 8002bec:	461a      	mov	r2, r3
 8002bee:	2305      	movs	r3, #5
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	9200      	str	r2, [sp, #0]
 8002bf4:	23aa      	movs	r3, #170	@ 0xaa
 8002bf6:	22aa      	movs	r2, #170	@ 0xaa
 8002bf8:	211e      	movs	r1, #30
 8002bfa:	201e      	movs	r0, #30
 8002bfc:	f7fe f809 	bl	8000c12 <lcdFilledDottedRectangle>
	lcdPutS("STVORCE:", 220, 10, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8002c00:	2200      	movs	r2, #0
 8002c02:	2100      	movs	r1, #0
 8002c04:	2000      	movs	r0, #0
 8002c06:	f7ff f9bb 	bl	8001f80 <decodeRgbValue>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461c      	mov	r4, r3
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2100      	movs	r1, #0
 8002c12:	2000      	movs	r0, #0
 8002c14:	f7ff f9b4 	bl	8001f80 <decodeRgbValue>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	4623      	mov	r3, r4
 8002c1e:	220a      	movs	r2, #10
 8002c20:	21dc      	movs	r1, #220	@ 0xdc
 8002c22:	4833      	ldr	r0, [pc, #204]	@ (8002cf0 <demoPlot+0xbdc>)
 8002c24:	f7ff f9c8 	bl	8001fb8 <lcdPutS>
	lcdPutS("CIARY:", 220, 10, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8002c28:	221f      	movs	r2, #31
 8002c2a:	211f      	movs	r1, #31
 8002c2c:	201f      	movs	r0, #31
 8002c2e:	f7ff f9a7 	bl	8001f80 <decodeRgbValue>
 8002c32:	4603      	mov	r3, r0
 8002c34:	461c      	mov	r4, r3
 8002c36:	2200      	movs	r2, #0
 8002c38:	2100      	movs	r1, #0
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f7ff f9a0 	bl	8001f80 <decodeRgbValue>
 8002c40:	4603      	mov	r3, r0
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	4623      	mov	r3, r4
 8002c46:	220a      	movs	r2, #10
 8002c48:	21dc      	movs	r1, #220	@ 0xdc
 8002c4a:	482a      	ldr	r0, [pc, #168]	@ (8002cf4 <demoPlot+0xbe0>)
 8002c4c:	f7ff f9b4 	bl	8001fb8 <lcdPutS>

	//-----------------------------------------------------------------------------------------------------testujem vykreslenie ciary v oboch smeroch-----------------------------------------------------------------------------------------------------

	lcdLine(10, 10, 190, 300, decodeRgbValue(255, 255, 255));
 8002c50:	22ff      	movs	r2, #255	@ 0xff
 8002c52:	21ff      	movs	r1, #255	@ 0xff
 8002c54:	20ff      	movs	r0, #255	@ 0xff
 8002c56:	f7ff f993 	bl	8001f80 <decodeRgbValue>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002c62:	22be      	movs	r2, #190	@ 0xbe
 8002c64:	210a      	movs	r1, #10
 8002c66:	200a      	movs	r0, #10
 8002c68:	f7fd fcea 	bl	8000640 <lcdLine>
	LL_mDelay(200);
 8002c6c:	20c8      	movs	r0, #200	@ 0xc8
 8002c6e:	f000 ff3d 	bl	8003aec <LL_mDelay>
	lcdLine(10, 10, 190, 300, decodeRgbValue(0, 0, 0));
 8002c72:	2200      	movs	r2, #0
 8002c74:	2100      	movs	r1, #0
 8002c76:	2000      	movs	r0, #0
 8002c78:	f7ff f982 	bl	8001f80 <decodeRgbValue>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002c84:	22be      	movs	r2, #190	@ 0xbe
 8002c86:	210a      	movs	r1, #10
 8002c88:	200a      	movs	r0, #10
 8002c8a:	f7fd fcd9 	bl	8000640 <lcdLine>
	lcdLine(10, 10, 300, 150, decodeRgbValue(255, 255, 255));
 8002c8e:	22ff      	movs	r2, #255	@ 0xff
 8002c90:	21ff      	movs	r1, #255	@ 0xff
 8002c92:	20ff      	movs	r0, #255	@ 0xff
 8002c94:	f7ff f974 	bl	8001f80 <decodeRgbValue>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	2396      	movs	r3, #150	@ 0x96
 8002c9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002ca2:	210a      	movs	r1, #10
 8002ca4:	200a      	movs	r0, #10
 8002ca6:	f7fd fccb 	bl	8000640 <lcdLine>
	LL_mDelay(200);
 8002caa:	20c8      	movs	r0, #200	@ 0xc8
 8002cac:	f000 ff1e 	bl	8003aec <LL_mDelay>
	lcdLine(10, 10, 300, 150, decodeRgbValue(0, 0, 0));
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f7ff f963 	bl	8001f80 <decodeRgbValue>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	2396      	movs	r3, #150	@ 0x96
 8002cc0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cc4:	210a      	movs	r1, #10
 8002cc6:	200a      	movs	r0, #10
 8002cc8:	f7fd fcba 	bl	8000640 <lcdLine>
	lcdPutS("CIARY:", 220, 10, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2100      	movs	r1, #0
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f7ff f955 	bl	8001f80 <decodeRgbValue>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461c      	mov	r4, r3
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2100      	movs	r1, #0
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f7ff f94e 	bl	8001f80 <decodeRgbValue>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	e007      	b.n	8002cf8 <demoPlot+0xbe4>
 8002ce8:	08004520 	.word	0x08004520
 8002cec:	0800452c 	.word	0x0800452c
 8002cf0:	08004538 	.word	0x08004538
 8002cf4:	08004544 	.word	0x08004544
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	4623      	mov	r3, r4
 8002cfc:	220a      	movs	r2, #10
 8002cfe:	21dc      	movs	r1, #220	@ 0xdc
 8002d00:	4851      	ldr	r0, [pc, #324]	@ (8002e48 <demoPlot+0xd34>)
 8002d02:	f7ff f959 	bl	8001fb8 <lcdPutS>
	lcdPutS("KRUHY:", 220, 10, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8002d06:	221f      	movs	r2, #31
 8002d08:	211f      	movs	r1, #31
 8002d0a:	201f      	movs	r0, #31
 8002d0c:	f7ff f938 	bl	8001f80 <decodeRgbValue>
 8002d10:	4603      	mov	r3, r0
 8002d12:	461c      	mov	r4, r3
 8002d14:	2200      	movs	r2, #0
 8002d16:	2100      	movs	r1, #0
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f7ff f931 	bl	8001f80 <decodeRgbValue>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	4623      	mov	r3, r4
 8002d24:	220a      	movs	r2, #10
 8002d26:	21dc      	movs	r1, #220	@ 0xdc
 8002d28:	4848      	ldr	r0, [pc, #288]	@ (8002e4c <demoPlot+0xd38>)
 8002d2a:	f7ff f945 	bl	8001fb8 <lcdPutS>

	//-----------------------------------------------------------------------------------------------------testujem vykreslenie kruhu-----------------------------------------------------------------------------------------------------

	lcdCircle(100, 100, 80, decodeRgbValue(255, 255, 255));
 8002d2e:	22ff      	movs	r2, #255	@ 0xff
 8002d30:	21ff      	movs	r1, #255	@ 0xff
 8002d32:	20ff      	movs	r0, #255	@ 0xff
 8002d34:	f7ff f924 	bl	8001f80 <decodeRgbValue>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2250      	movs	r2, #80	@ 0x50
 8002d3c:	2164      	movs	r1, #100	@ 0x64
 8002d3e:	2064      	movs	r0, #100	@ 0x64
 8002d40:	f7fe fcfa 	bl	8001738 <lcdCircle>
	LL_mDelay(200);
 8002d44:	20c8      	movs	r0, #200	@ 0xc8
 8002d46:	f000 fed1 	bl	8003aec <LL_mDelay>
	lcdCircle(100, 100, 80, decodeRgbValue(0, 0, 0));
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7ff f916 	bl	8001f80 <decodeRgbValue>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2250      	movs	r2, #80	@ 0x50
 8002d58:	2164      	movs	r1, #100	@ 0x64
 8002d5a:	2064      	movs	r0, #100	@ 0x64
 8002d5c:	f7fe fcec 	bl	8001738 <lcdCircle>
	lcdDottedCircle(100, 100, 80, decodeRgbValue(255, 255, 255), 3);
 8002d60:	22ff      	movs	r2, #255	@ 0xff
 8002d62:	21ff      	movs	r1, #255	@ 0xff
 8002d64:	20ff      	movs	r0, #255	@ 0xff
 8002d66:	f7ff f90b 	bl	8001f80 <decodeRgbValue>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	2303      	movs	r3, #3
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	4613      	mov	r3, r2
 8002d74:	2250      	movs	r2, #80	@ 0x50
 8002d76:	2164      	movs	r1, #100	@ 0x64
 8002d78:	2064      	movs	r0, #100	@ 0x64
 8002d7a:	f7fe fd9a 	bl	80018b2 <lcdDottedCircle>
	LL_mDelay(200);
 8002d7e:	20c8      	movs	r0, #200	@ 0xc8
 8002d80:	f000 feb4 	bl	8003aec <LL_mDelay>
	lcdDottedCircle(100, 100, 80, decodeRgbValue(0, 0, 0), 3);
 8002d84:	2200      	movs	r2, #0
 8002d86:	2100      	movs	r1, #0
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7ff f8f9 	bl	8001f80 <decodeRgbValue>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	2303      	movs	r3, #3
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	4613      	mov	r3, r2
 8002d98:	2250      	movs	r2, #80	@ 0x50
 8002d9a:	2164      	movs	r1, #100	@ 0x64
 8002d9c:	2064      	movs	r0, #100	@ 0x64
 8002d9e:	f7fe fd88 	bl	80018b2 <lcdDottedCircle>

	//-----------------------------------------------------------------------------------------------------testujem vykreslenie plneho kruhu-----------------------------------------------------------------------------------------------------

	lcdFilledCircle(100, 100, 80, decodeRgbValue(255, 255, 255));
 8002da2:	22ff      	movs	r2, #255	@ 0xff
 8002da4:	21ff      	movs	r1, #255	@ 0xff
 8002da6:	20ff      	movs	r0, #255	@ 0xff
 8002da8:	f7ff f8ea 	bl	8001f80 <decodeRgbValue>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2250      	movs	r2, #80	@ 0x50
 8002db0:	2164      	movs	r1, #100	@ 0x64
 8002db2:	2064      	movs	r0, #100	@ 0x64
 8002db4:	f7fe fe3a 	bl	8001a2c <lcdFilledCircle>
	LL_mDelay(200);
 8002db8:	20c8      	movs	r0, #200	@ 0xc8
 8002dba:	f000 fe97 	bl	8003aec <LL_mDelay>
	lcdFilledCircle(100, 100, 80, decodeRgbValue(0, 0, 0));
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7ff f8dc 	bl	8001f80 <decodeRgbValue>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2250      	movs	r2, #80	@ 0x50
 8002dcc:	2164      	movs	r1, #100	@ 0x64
 8002dce:	2064      	movs	r0, #100	@ 0x64
 8002dd0:	f7fe fe2c 	bl	8001a2c <lcdFilledCircle>
	lcdFilledDottedCircle(100, 100, 80, decodeRgbValue(255, 255, 255), 5);
 8002dd4:	22ff      	movs	r2, #255	@ 0xff
 8002dd6:	21ff      	movs	r1, #255	@ 0xff
 8002dd8:	20ff      	movs	r0, #255	@ 0xff
 8002dda:	f7ff f8d1 	bl	8001f80 <decodeRgbValue>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	2305      	movs	r3, #5
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	2250      	movs	r2, #80	@ 0x50
 8002dea:	2164      	movs	r1, #100	@ 0x64
 8002dec:	2064      	movs	r0, #100	@ 0x64
 8002dee:	f7fe fed0 	bl	8001b92 <lcdFilledDottedCircle>
	LL_mDelay(500);
 8002df2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002df6:	f000 fe79 	bl	8003aec <LL_mDelay>
	lcdFilledDottedCircle(100, 100, 80, decodeRgbValue(0, 0, 0), 5);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7ff f8be 	bl	8001f80 <decodeRgbValue>
 8002e04:	4603      	mov	r3, r0
 8002e06:	461a      	mov	r2, r3
 8002e08:	2305      	movs	r3, #5
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	2250      	movs	r2, #80	@ 0x50
 8002e10:	2164      	movs	r1, #100	@ 0x64
 8002e12:	2064      	movs	r0, #100	@ 0x64
 8002e14:	f7fe febd 	bl	8001b92 <lcdFilledDottedCircle>
	lcdPutS("KRUHY:", 220, 10, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f7ff f8af 	bl	8001f80 <decodeRgbValue>
 8002e22:	4603      	mov	r3, r0
 8002e24:	461c      	mov	r4, r3
 8002e26:	2200      	movs	r2, #0
 8002e28:	2100      	movs	r1, #0
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7ff f8a8 	bl	8001f80 <decodeRgbValue>
 8002e30:	4603      	mov	r3, r0
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	4623      	mov	r3, r4
 8002e36:	220a      	movs	r2, #10
 8002e38:	21dc      	movs	r1, #220	@ 0xdc
 8002e3a:	4804      	ldr	r0, [pc, #16]	@ (8002e4c <demoPlot+0xd38>)
 8002e3c:	f7ff f8bc 	bl	8001fb8 <lcdPutS>

}
 8002e40:	bf00      	nop
 8002e42:	3770      	adds	r7, #112	@ 0x70
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bdb0      	pop	{r4, r5, r7, pc}
 8002e48:	08004544 	.word	0x08004544
 8002e4c:	0800454c 	.word	0x0800454c

08002e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e60:	4b0c      	ldr	r3, [pc, #48]	@ (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e82:	4a04      	ldr	r2, [pc, #16]	@ (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	60d3      	str	r3, [r2, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002e9c:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <LL_RCC_HSI_Enable+0x1c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <LL_RCC_HSI_Enable+0x1c>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6013      	str	r3, [r2, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002ebc:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <LL_RCC_HSI_IsReady+0x20>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40021000 	.word	0x40021000

08002edc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002ee4:	4b07      	ldr	r3, [pc, #28]	@ (8002f04 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4904      	ldr	r1, [pc, #16]	@ (8002f04 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000

08002f08 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002f10:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <LL_RCC_SetSysClkSource+0x24>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f023 0203 	bic.w	r2, r3, #3
 8002f18:	4904      	ldr	r1, [pc, #16]	@ (8002f2c <LL_RCC_SetSysClkSource+0x24>)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	40021000 	.word	0x40021000

08002f30 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f34:	4b04      	ldr	r3, [pc, #16]	@ (8002f48 <LL_RCC_GetSysClkSource+0x18>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 030c 	and.w	r3, r3, #12
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000

08002f4c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002f54:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <LL_RCC_SetAHBPrescaler+0x24>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f5c:	4904      	ldr	r1, [pc, #16]	@ (8002f70 <LL_RCC_SetAHBPrescaler+0x24>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	40021000 	.word	0x40021000

08002f74 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f84:	4904      	ldr	r1, [pc, #16]	@ (8002f98 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	604b      	str	r3, [r1, #4]
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	40021000 	.word	0x40021000

08002f9c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002fa4:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002fac:	4904      	ldr	r1, [pc, #16]	@ (8002fc0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	40021000 	.word	0x40021000

08002fc4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002fcc:	4b08      	ldr	r3, [pc, #32]	@ (8002ff0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002fce:	69da      	ldr	r2, [r3, #28]
 8002fd0:	4907      	ldr	r1, [pc, #28]	@ (8002ff0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002fd8:	4b05      	ldr	r3, [pc, #20]	@ (8002ff0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002ffc:	4b08      	ldr	r3, [pc, #32]	@ (8003020 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002ffe:	699a      	ldr	r2, [r3, #24]
 8003000:	4907      	ldr	r1, [pc, #28]	@ (8003020 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4313      	orrs	r3, r2
 8003006:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003008:	4b05      	ldr	r3, [pc, #20]	@ (8003020 <LL_APB2_GRP1_EnableClock+0x2c>)
 800300a:	699a      	ldr	r2, [r3, #24]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4013      	ands	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003012:	68fb      	ldr	r3, [r7, #12]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40021000 	.word	0x40021000

08003024 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800302c:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <LL_FLASH_SetLatency+0x24>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f023 0207 	bic.w	r2, r3, #7
 8003034:	4904      	ldr	r1, [pc, #16]	@ (8003048 <LL_FLASH_SetLatency+0x24>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4313      	orrs	r3, r2
 800303a:	600b      	str	r3, [r1, #0]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	40022000 	.word	0x40022000

0800304c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003050:	4b04      	ldr	r3, [pc, #16]	@ (8003064 <LL_FLASH_GetLatency+0x18>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0307 	and.w	r3, r3, #7
}
 8003058:	4618      	mov	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40022000 	.word	0x40022000

08003068 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b04      	cmp	r3, #4
 8003074:	d106      	bne.n	8003084 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8003076:	4b09      	ldr	r3, [pc, #36]	@ (800309c <LL_SYSTICK_SetClkSource+0x34>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a08      	ldr	r2, [pc, #32]	@ (800309c <LL_SYSTICK_SetClkSource+0x34>)
 800307c:	f043 0304 	orr.w	r3, r3, #4
 8003080:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8003082:	e005      	b.n	8003090 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8003084:	4b05      	ldr	r3, [pc, #20]	@ (800309c <LL_SYSTICK_SetClkSource+0x34>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a04      	ldr	r2, [pc, #16]	@ (800309c <LL_SYSTICK_SetClkSource+0x34>)
 800308a:	f023 0304 	bic.w	r3, r3, #4
 800308e:	6013      	str	r3, [r2, #0]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	e000e010 	.word	0xe000e010

080030a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80030a6:	2001      	movs	r0, #1
 80030a8:	f7ff ffa4 	bl	8002ff4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80030ac:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80030b0:	f7ff ff88 	bl	8002fc4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b4:	2003      	movs	r0, #3
 80030b6:	f7ff fecb 	bl	8002e50 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030ba:	f000 f84d 	bl	8003158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030be:	f7fd f905 	bl	80002cc <MX_GPIO_Init>
  MX_SPI1_Init();
 80030c2:	f000 f95d 	bl	8003380 <MX_SPI1_Init>

  initCD_Pin();
 80030c6:	f000 f9fb 	bl	80034c0 <initCD_Pin>
  initCS_Pin();
 80030ca:	f000 f9df 	bl	800348c <initCS_Pin>
  initRES_Pin();
 80030ce:	f000 fa13 	bl	80034f8 <initRES_Pin>

  LL_mDelay(1);
 80030d2:	2001      	movs	r0, #1
 80030d4:	f000 fd0a 	bl	8003aec <LL_mDelay>

  lcdInitialise(LCD_ORIENTATION3);
 80030d8:	20c0      	movs	r0, #192	@ 0xc0
 80030da:	f7fd f988 	bl	80003ee <lcdInitialise>
  //lcdClearDisplay(decodeRgbValue(80, 0, 0));

  //vycistit dostupne pixely
  lcdFilledRectangle(0, 0, 255, 239, decodeRgbValue(0, 0, 0));
 80030de:	2200      	movs	r2, #0
 80030e0:	2100      	movs	r1, #0
 80030e2:	2000      	movs	r0, #0
 80030e4:	f7fe ff4c 	bl	8001f80 <decodeRgbValue>
 80030e8:	4603      	mov	r3, r0
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	23ef      	movs	r3, #239	@ 0xef
 80030ee:	22ff      	movs	r2, #255	@ 0xff
 80030f0:	2100      	movs	r1, #0
 80030f2:	2000      	movs	r0, #0
 80030f4:	f7fd fd15 	bl	8000b22 <lcdFilledRectangle>
  //vycistit nedostupne pixely
  lcdFilledRectangle(255, 0, 512, 239, decodeRgbValue(10, 10, 10));
 80030f8:	220a      	movs	r2, #10
 80030fa:	210a      	movs	r1, #10
 80030fc:	200a      	movs	r0, #10
 80030fe:	f7fe ff3f 	bl	8001f80 <decodeRgbValue>
 8003102:	4603      	mov	r3, r0
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	23ef      	movs	r3, #239	@ 0xef
 8003108:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800310c:	2100      	movs	r1, #0
 800310e:	20ff      	movs	r0, #255	@ 0xff
 8003110:	f7fd fd07 	bl	8000b22 <lcdFilledRectangle>
  lcdLine(0, 0, 0, 239, decodeRgbValue(0, 0, 0));
 8003114:	2200      	movs	r2, #0
 8003116:	2100      	movs	r1, #0
 8003118:	2000      	movs	r0, #0
 800311a:	f7fe ff31 	bl	8001f80 <decodeRgbValue>
 800311e:	4603      	mov	r3, r0
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	23ef      	movs	r3, #239	@ 0xef
 8003124:	2200      	movs	r2, #0
 8003126:	2100      	movs	r1, #0
 8003128:	2000      	movs	r0, #0
 800312a:	f7fd fa89 	bl	8000640 <lcdLine>
  lcdLine(255, 0, 255, 239, decodeRgbValue(0, 0, 0));
 800312e:	2200      	movs	r2, #0
 8003130:	2100      	movs	r1, #0
 8003132:	2000      	movs	r0, #0
 8003134:	f7fe ff24 	bl	8001f80 <decodeRgbValue>
 8003138:	4603      	mov	r3, r0
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	23ef      	movs	r3, #239	@ 0xef
 800313e:	22ff      	movs	r2, #255	@ 0xff
 8003140:	2100      	movs	r1, #0
 8003142:	20ff      	movs	r0, #255	@ 0xff
 8003144:	f7fd fa7c 	bl	8000640 <lcdLine>


	// demo cyklus, kde testujem vykreslovanie a animaciu, potom tu bude game logic a menu asi
	while (1)
	{
		demoPlot();
 8003148:	f7fe ffe4 	bl	8002114 <demoPlot>
		LL_mDelay(300);
 800314c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003150:	f000 fccc 	bl	8003aec <LL_mDelay>
		demoPlot();
 8003154:	bf00      	nop
 8003156:	e7f7      	b.n	8003148 <main+0xa8>

08003158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800315c:	2000      	movs	r0, #0
 800315e:	f7ff ff61 	bl	8003024 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8003162:	f7ff ff73 	bl	800304c <LL_FLASH_GetLatency>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <SystemClock_Config+0x18>
  {
  Error_Handler();
 800316c:	f000 f82a 	bl	80031c4 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8003170:	f7ff fe92 	bl	8002e98 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8003174:	bf00      	nop
 8003176:	f7ff fe9f 	bl	8002eb8 <LL_RCC_HSI_IsReady>
 800317a:	4603      	mov	r3, r0
 800317c:	2b01      	cmp	r3, #1
 800317e:	d1fa      	bne.n	8003176 <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8003180:	2010      	movs	r0, #16
 8003182:	f7ff feab 	bl	8002edc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003186:	2000      	movs	r0, #0
 8003188:	f7ff fee0 	bl	8002f4c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800318c:	2000      	movs	r0, #0
 800318e:	f7ff fef1 	bl	8002f74 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8003192:	2000      	movs	r0, #0
 8003194:	f7ff ff02 	bl	8002f9c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003198:	2000      	movs	r0, #0
 800319a:	f7ff feb5 	bl	8002f08 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800319e:	bf00      	nop
 80031a0:	f7ff fec6 	bl	8002f30 <LL_RCC_GetSysClkSource>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1fa      	bne.n	80031a0 <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 80031aa:	4805      	ldr	r0, [pc, #20]	@ (80031c0 <SystemClock_Config+0x68>)
 80031ac:	f000 fc90 	bl	8003ad0 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80031b0:	2004      	movs	r0, #4
 80031b2:	f7ff ff59 	bl	8003068 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 80031b6:	4802      	ldr	r0, [pc, #8]	@ (80031c0 <SystemClock_Config+0x68>)
 80031b8:	f000 fcbe 	bl	8003b38 <LL_SetSystemCoreClock>
}
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	007a1200 	.word	0x007a1200

080031c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <LL_AHB1_GRP1_EnableClock>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80031dc:	4b08      	ldr	r3, [pc, #32]	@ (8003200 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	4907      	ldr	r1, [pc, #28]	@ (8003200 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80031e8:	4b05      	ldr	r3, [pc, #20]	@ (8003200 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4013      	ands	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031f2:	68fb      	ldr	r3, [r7, #12]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	40021000 	.word	0x40021000

08003204 <LL_APB2_GRP1_EnableClock>:
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800320c:	4b08      	ldr	r3, [pc, #32]	@ (8003230 <LL_APB2_GRP1_EnableClock+0x2c>)
 800320e:	699a      	ldr	r2, [r3, #24]
 8003210:	4907      	ldr	r1, [pc, #28]	@ (8003230 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4313      	orrs	r3, r2
 8003216:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003218:	4b05      	ldr	r3, [pc, #20]	@ (8003230 <LL_APB2_GRP1_EnableClock+0x2c>)
 800321a:	699a      	ldr	r2, [r3, #24]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4013      	ands	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003222:	68fb      	ldr	r3, [r7, #12]
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	40021000 	.word	0x40021000

08003234 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	601a      	str	r2, [r3, #0]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f023 0210 	bic.w	r2, r3, #16
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	605a      	str	r2, [r3, #4]
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f043 0208 	orr.w	r2, r3, #8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	605a      	str	r2, [r3, #4]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f023 0208 	bic.w	r2, r3, #8
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	605a      	str	r2, [r3, #4]
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d101      	bne.n	80032f8 <LL_SPI_IsActiveFlag_TXE+0x18>
 80032f4:	2301      	movs	r3, #1
 80032f6:	e000      	b.n	80032fa <LL_SPI_IsActiveFlag_TXE+0x1a>
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	330c      	adds	r3, #12
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	b2db      	uxtb	r3, r3
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8003322:	b480      	push	{r7}
 8003324:	b085      	sub	sp, #20
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	460b      	mov	r3, r1
 800332c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	330c      	adds	r3, #12
 8003332:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_GPIO_SetOutputPin>:
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	619a      	str	r2, [r3, #24]
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <LL_GPIO_ResetOutputPin>:
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b090      	sub	sp, #64	@ 0x40
 8003384:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003386:	f107 0318 	add.w	r3, r7, #24
 800338a:	2228      	movs	r2, #40	@ 0x28
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fc02 	bl	8003b98 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003394:	463b      	mov	r3, r7
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	60da      	str	r2, [r3, #12]
 80033a0:	611a      	str	r2, [r3, #16]
 80033a2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80033a4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80033a8:	f7ff ff2c 	bl	8003204 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80033ac:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80033b0:	f7ff ff10 	bl	80031d4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80033b4:	23e0      	movs	r3, #224	@ 0xe0
 80033b6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80033b8:	2302      	movs	r3, #2
 80033ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80033bc:	2303      	movs	r3, #3
 80033be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033c4:	2300      	movs	r3, #0
 80033c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80033c8:	2305      	movs	r3, #5
 80033ca:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033cc:	463b      	mov	r3, r7
 80033ce:	4619      	mov	r1, r3
 80033d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033d4:	f000 fa63 	bl	800389e <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80033d8:	2300      	movs	r3, #0
 80033da:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80033dc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80033e0:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80033e2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80033e6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80033e8:	2300      	movs	r3, #0
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80033ec:	2300      	movs	r3, #0
 80033ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80033f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  // rychlost prenosu ovplyvnuje
  SPI_InitStruct.BaudRate =  LL_SPI_BAUDRATEPRESCALER_DIV2; //najrychlejsie
 80033f6:	2300      	movs	r3, #0
 80033f8:	633b      	str	r3, [r7, #48]	@ 0x30
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32; //250kBps povodne
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64; //125kBps
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128; //pomalsie
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV256; //najpomalsie
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80033fa:	2300      	movs	r3, #0
 80033fc:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80033fe:	2300      	movs	r3, #0
 8003400:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8003402:	2307      	movs	r3, #7
 8003404:	63fb      	str	r3, [r7, #60]	@ 0x3c

  SPI1->CR2 |= 1 << 12;
 8003406:	4b0e      	ldr	r3, [pc, #56]	@ (8003440 <MX_SPI1_Init+0xc0>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4a0d      	ldr	r2, [pc, #52]	@ (8003440 <MX_SPI1_Init+0xc0>)
 800340c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003410:	6053      	str	r3, [r2, #4]

  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003412:	f107 0318 	add.w	r3, r7, #24
 8003416:	4619      	mov	r1, r3
 8003418:	4809      	ldr	r0, [pc, #36]	@ (8003440 <MX_SPI1_Init+0xc0>)
 800341a:	f000 fae6 	bl	80039ea <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800341e:	2100      	movs	r1, #0
 8003420:	4807      	ldr	r0, [pc, #28]	@ (8003440 <MX_SPI1_Init+0xc0>)
 8003422:	f7ff ff17 	bl	8003254 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8003426:	4806      	ldr	r0, [pc, #24]	@ (8003440 <MX_SPI1_Init+0xc0>)
 8003428:	f7ff ff37 	bl	800329a <LL_SPI_DisableNSSPulseMgt>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 800342c:	4804      	ldr	r0, [pc, #16]	@ (8003440 <MX_SPI1_Init+0xc0>)
 800342e:	f7ff ff24 	bl	800327a <LL_SPI_EnableNSSPulseMgt>
  LL_SPI_Enable(SPI1);
 8003432:	4803      	ldr	r0, [pc, #12]	@ (8003440 <MX_SPI1_Init+0xc0>)
 8003434:	f7ff fefe 	bl	8003234 <LL_SPI_Enable>

}
 8003438:	bf00      	nop
 800343a:	3740      	adds	r7, #64	@ 0x40
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40013000 	.word	0x40013000

08003444 <readWriteSPI1>:


unsigned char readWriteSPI1(unsigned char txData)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
	unsigned char  rxData;

	LL_SPI_TransmitData8(SPI1, (uint8_t)txData);
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	4619      	mov	r1, r3
 8003452:	480d      	ldr	r0, [pc, #52]	@ (8003488 <readWriteSPI1+0x44>)
 8003454:	f7ff ff65 	bl	8003322 <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_TXE(SPI1) != SET);
 8003458:	bf00      	nop
 800345a:	480b      	ldr	r0, [pc, #44]	@ (8003488 <readWriteSPI1+0x44>)
 800345c:	f7ff ff40 	bl	80032e0 <LL_SPI_IsActiveFlag_TXE>
 8003460:	4603      	mov	r3, r0
 8003462:	2b01      	cmp	r3, #1
 8003464:	d1f9      	bne.n	800345a <readWriteSPI1+0x16>

	// wait until RXNE = 1
	while(LL_SPI_IsActiveFlag_RXNE(SPI1) != SET);
 8003466:	bf00      	nop
 8003468:	4807      	ldr	r0, [pc, #28]	@ (8003488 <readWriteSPI1+0x44>)
 800346a:	f7ff ff26 	bl	80032ba <LL_SPI_IsActiveFlag_RXNE>
 800346e:	4603      	mov	r3, r0
 8003470:	2b01      	cmp	r3, #1
 8003472:	d1f9      	bne.n	8003468 <readWriteSPI1+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = LL_SPI_ReceiveData8(SPI1);
 8003474:	4804      	ldr	r0, [pc, #16]	@ (8003488 <readWriteSPI1+0x44>)
 8003476:	f7ff ff46 	bl	8003306 <LL_SPI_ReceiveData8>
 800347a:	4603      	mov	r3, r0
 800347c:	73fb      	strb	r3, [r7, #15]

	return rxData;
 800347e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40013000 	.word	0x40013000

0800348c <initCS_Pin>:

void initCS_Pin(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
	cs_set();
 8003490:	f000 f802 	bl	8003498 <cs_set>
}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}

08003498 <cs_set>:

void cs_set(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 800349c:	2120      	movs	r1, #32
 800349e:	4802      	ldr	r0, [pc, #8]	@ (80034a8 <cs_set+0x10>)
 80034a0:	f7ff ff51 	bl	8003346 <LL_GPIO_SetOutputPin>
}
 80034a4:	bf00      	nop
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	48000400 	.word	0x48000400

080034ac <cs_reset>:

void cs_reset(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 80034b0:	2120      	movs	r1, #32
 80034b2:	4802      	ldr	r0, [pc, #8]	@ (80034bc <cs_reset+0x10>)
 80034b4:	f7ff ff55 	bl	8003362 <LL_GPIO_ResetOutputPin>
}
 80034b8:	bf00      	nop
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	48000400 	.word	0x48000400

080034c0 <initCD_Pin>:

void initCD_Pin(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <cd_set>:

void cd_set(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 80034d4:	2140      	movs	r1, #64	@ 0x40
 80034d6:	4802      	ldr	r0, [pc, #8]	@ (80034e0 <cd_set+0x10>)
 80034d8:	f7ff ff35 	bl	8003346 <LL_GPIO_SetOutputPin>
}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	48000400 	.word	0x48000400

080034e4 <cd_reset>:

void cd_reset(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 80034e8:	2140      	movs	r1, #64	@ 0x40
 80034ea:	4802      	ldr	r0, [pc, #8]	@ (80034f4 <cd_reset+0x10>)
 80034ec:	f7ff ff39 	bl	8003362 <LL_GPIO_ResetOutputPin>
}
 80034f0:	bf00      	nop
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	48000400 	.word	0x48000400

080034f8 <initRES_Pin>:

void initRES_Pin(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	*/
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <res_set>:

void res_set(void)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 800350a:	2108      	movs	r1, #8
 800350c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003510:	f7ff ff19 	bl	8003346 <LL_GPIO_SetOutputPin>
}
 8003514:	bf00      	nop
 8003516:	bd80      	pop	{r7, pc}

08003518 <res_reset>:

void res_reset(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 800351c:	2108      	movs	r1, #8
 800351e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003522:	f7ff ff1e 	bl	8003362 <LL_GPIO_ResetOutputPin>
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}

0800352a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800352e:	bf00      	nop
 8003530:	e7fd      	b.n	800352e <NMI_Handler+0x4>

08003532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003532:	b480      	push	{r7}
 8003534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003536:	bf00      	nop
 8003538:	e7fd      	b.n	8003536 <HardFault_Handler+0x4>

0800353a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800353e:	bf00      	nop
 8003540:	e7fd      	b.n	800353e <MemManage_Handler+0x4>

08003542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003542:	b480      	push	{r7}
 8003544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003546:	bf00      	nop
 8003548:	e7fd      	b.n	8003546 <BusFault_Handler+0x4>

0800354a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800354e:	bf00      	nop
 8003550:	e7fd      	b.n	800354e <UsageFault_Handler+0x4>

08003552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003552:	b480      	push	{r7}
 8003554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003580:	f000 f874 	bl	800366c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003584:	bf00      	nop
 8003586:	bd80      	pop	{r7, pc}

08003588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003590:	4a14      	ldr	r2, [pc, #80]	@ (80035e4 <_sbrk+0x5c>)
 8003592:	4b15      	ldr	r3, [pc, #84]	@ (80035e8 <_sbrk+0x60>)
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800359c:	4b13      	ldr	r3, [pc, #76]	@ (80035ec <_sbrk+0x64>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035a4:	4b11      	ldr	r3, [pc, #68]	@ (80035ec <_sbrk+0x64>)
 80035a6:	4a12      	ldr	r2, [pc, #72]	@ (80035f0 <_sbrk+0x68>)
 80035a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035aa:	4b10      	ldr	r3, [pc, #64]	@ (80035ec <_sbrk+0x64>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d207      	bcs.n	80035c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035b8:	f000 faf6 	bl	8003ba8 <__errno>
 80035bc:	4603      	mov	r3, r0
 80035be:	220c      	movs	r2, #12
 80035c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035c2:	f04f 33ff 	mov.w	r3, #4294967295
 80035c6:	e009      	b.n	80035dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035c8:	4b08      	ldr	r3, [pc, #32]	@ (80035ec <_sbrk+0x64>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035ce:	4b07      	ldr	r3, [pc, #28]	@ (80035ec <_sbrk+0x64>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4413      	add	r3, r2
 80035d6:	4a05      	ldr	r2, [pc, #20]	@ (80035ec <_sbrk+0x64>)
 80035d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035da:	68fb      	ldr	r3, [r7, #12]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20003000 	.word	0x20003000
 80035e8:	00000400 	.word	0x00000400
 80035ec:	20000074 	.word	0x20000074
 80035f0:	200001c8 	.word	0x200001c8

080035f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035f8:	4b06      	ldr	r3, [pc, #24]	@ (8003614 <SystemInit+0x20>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fe:	4a05      	ldr	r2, [pc, #20]	@ (8003614 <SystemInit+0x20>)
 8003600:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003604:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003618:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003650 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800361c:	f7ff ffea 	bl	80035f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003620:	480c      	ldr	r0, [pc, #48]	@ (8003654 <LoopForever+0x6>)
  ldr r1, =_edata
 8003622:	490d      	ldr	r1, [pc, #52]	@ (8003658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003624:	4a0d      	ldr	r2, [pc, #52]	@ (800365c <LoopForever+0xe>)
  movs r3, #0
 8003626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003628:	e002      	b.n	8003630 <LoopCopyDataInit>

0800362a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800362a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800362c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800362e:	3304      	adds	r3, #4

08003630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003634:	d3f9      	bcc.n	800362a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003636:	4a0a      	ldr	r2, [pc, #40]	@ (8003660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003638:	4c0a      	ldr	r4, [pc, #40]	@ (8003664 <LoopForever+0x16>)
  movs r3, #0
 800363a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800363c:	e001      	b.n	8003642 <LoopFillZerobss>

0800363e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800363e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003640:	3204      	adds	r2, #4

08003642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003644:	d3fb      	bcc.n	800363e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003646:	f000 fab5 	bl	8003bb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800364a:	f7ff fd29 	bl	80030a0 <main>

0800364e <LoopForever>:

LoopForever:
    b LoopForever
 800364e:	e7fe      	b.n	800364e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003650:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003658:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 800365c:	080048c8 	.word	0x080048c8
  ldr r2, =_sbss
 8003660:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8003664:	200001c4 	.word	0x200001c4

08003668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003668:	e7fe      	b.n	8003668 <ADC1_2_IRQHandler>
	...

0800366c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003670:	4b06      	ldr	r3, [pc, #24]	@ (800368c <HAL_IncTick+0x20>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	4b06      	ldr	r3, [pc, #24]	@ (8003690 <HAL_IncTick+0x24>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4413      	add	r3, r2
 800367c:	4a04      	ldr	r2, [pc, #16]	@ (8003690 <HAL_IncTick+0x24>)
 800367e:	6013      	str	r3, [r2, #0]
}
 8003680:	bf00      	nop
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000004 	.word	0x20000004
 8003690:	20000078 	.word	0x20000078

08003694 <LL_GPIO_SetPinMode>:
{
 8003694:	b480      	push	{r7}
 8003696:	b089      	sub	sp, #36	@ 0x24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	2103      	movs	r1, #3
 80036bc:	fa01 f303 	lsl.w	r3, r1, r3
 80036c0:	43db      	mvns	r3, r3
 80036c2:	401a      	ands	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	61bb      	str	r3, [r7, #24]
  return result;
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	fab3 f383 	clz	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	fa01 f303 	lsl.w	r3, r1, r3
 80036e0:	431a      	orrs	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	601a      	str	r2, [r3, #0]
}
 80036e6:	bf00      	nop
 80036e8:	3724      	adds	r7, #36	@ 0x24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <LL_GPIO_SetPinOutputType>:
{
 80036f2:	b480      	push	{r7}
 80036f4:	b085      	sub	sp, #20
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	43db      	mvns	r3, r3
 8003706:	401a      	ands	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	431a      	orrs	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	605a      	str	r2, [r3, #4]
}
 8003716:	bf00      	nop
 8003718:	3714      	adds	r7, #20
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <LL_GPIO_SetPinSpeed>:
{
 8003722:	b480      	push	{r7}
 8003724:	b089      	sub	sp, #36	@ 0x24
 8003726:	af00      	add	r7, sp, #0
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	fa93 f3a3 	rbit	r3, r3
 800373c:	613b      	str	r3, [r7, #16]
  return result;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	fab3 f383 	clz	r3, r3
 8003744:	b2db      	uxtb	r3, r3
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	2103      	movs	r1, #3
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	401a      	ands	r2, r3
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	61bb      	str	r3, [r7, #24]
  return result;
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	fab3 f383 	clz	r3, r3
 8003764:	b2db      	uxtb	r3, r3
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	fa01 f303 	lsl.w	r3, r1, r3
 800376e:	431a      	orrs	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	609a      	str	r2, [r3, #8]
}
 8003774:	bf00      	nop
 8003776:	3724      	adds	r7, #36	@ 0x24
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_GPIO_SetPinPull>:
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	@ 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	613b      	str	r3, [r7, #16]
  return result;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2103      	movs	r1, #3
 80037a8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	401a      	ands	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	fa93 f3a3 	rbit	r3, r3
 80037ba:	61bb      	str	r3, [r7, #24]
  return result;
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	fab3 f383 	clz	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	fa01 f303 	lsl.w	r3, r1, r3
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	60da      	str	r2, [r3, #12]
}
 80037d2:	bf00      	nop
 80037d4:	3724      	adds	r7, #36	@ 0x24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <LL_GPIO_SetAFPin_0_7>:
{
 80037de:	b480      	push	{r7}
 80037e0:	b089      	sub	sp, #36	@ 0x24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	613b      	str	r3, [r7, #16]
  return result;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	fab3 f383 	clz	r3, r3
 8003800:	b2db      	uxtb	r3, r3
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	210f      	movs	r1, #15
 8003806:	fa01 f303 	lsl.w	r3, r1, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	401a      	ands	r2, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	fa93 f3a3 	rbit	r3, r3
 8003818:	61bb      	str	r3, [r7, #24]
  return result;
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	fab3 f383 	clz	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	fa01 f303 	lsl.w	r3, r1, r3
 800382a:	431a      	orrs	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	621a      	str	r2, [r3, #32]
}
 8003830:	bf00      	nop
 8003832:	3724      	adds	r7, #36	@ 0x24
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <LL_GPIO_SetAFPin_8_15>:
{
 800383c:	b480      	push	{r7}
 800383e:	b089      	sub	sp, #36	@ 0x24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	613b      	str	r3, [r7, #16]
  return result;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	fab3 f383 	clz	r3, r3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	210f      	movs	r1, #15
 8003866:	fa01 f303 	lsl.w	r3, r1, r3
 800386a:	43db      	mvns	r3, r3
 800386c:	401a      	ands	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	fa93 f3a3 	rbit	r3, r3
 800387a:	61bb      	str	r3, [r7, #24]
  return result;
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	fab3 f383 	clz	r3, r3
 8003882:	b2db      	uxtb	r3, r3
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	fa01 f303 	lsl.w	r3, r1, r3
 800388c:	431a      	orrs	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003892:	bf00      	nop
 8003894:	3724      	adds	r7, #36	@ 0x24
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b088      	sub	sp, #32
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	fa93 f3a3 	rbit	r3, r3
 80038b4:	613b      	str	r3, [r7, #16]
  return result;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	fab3 f383 	clz	r3, r3
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80038c0:	e051      	b.n	8003966 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	2101      	movs	r1, #1
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	fa01 f303 	lsl.w	r3, r1, r3
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d043      	beq.n	8003960 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d003      	beq.n	80038e8 <LL_GPIO_Init+0x4a>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d10e      	bne.n	8003906 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	461a      	mov	r2, r3
 80038ee:	69b9      	ldr	r1, [r7, #24]
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff16 	bl	8003722 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6819      	ldr	r1, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	461a      	mov	r2, r3
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff fef6 	bl	80036f2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	461a      	mov	r2, r3
 800390c:	69b9      	ldr	r1, [r7, #24]
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff ff36 	bl	8003780 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d11a      	bne.n	8003952 <LL_GPIO_Init+0xb4>
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	60bb      	str	r3, [r7, #8]
  return result;
 8003928:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b07      	cmp	r3, #7
 8003932:	d807      	bhi.n	8003944 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	461a      	mov	r2, r3
 800393a:	69b9      	ldr	r1, [r7, #24]
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff ff4e 	bl	80037de <LL_GPIO_SetAFPin_0_7>
 8003942:	e006      	b.n	8003952 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	461a      	mov	r2, r3
 800394a:	69b9      	ldr	r1, [r7, #24]
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff75 	bl	800383c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	461a      	mov	r2, r3
 8003958:	69b9      	ldr	r1, [r7, #24]
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff fe9a 	bl	8003694 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	3301      	adds	r3, #1
 8003964:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1a6      	bne.n	80038c2 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <LL_SPI_IsEnabled>:
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398e:	2b40      	cmp	r3, #64	@ 0x40
 8003990:	d101      	bne.n	8003996 <LL_SPI_IsEnabled+0x18>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <LL_SPI_IsEnabled+0x1a>
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LL_SPI_SetRxFIFOThreshold>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	605a      	str	r2, [r3, #4]
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <LL_SPI_SetCRCPolynomial>:
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	611a      	str	r2, [r3, #16]
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ffc0 	bl	800397e <LL_SPI_IsEnabled>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d145      	bne.n	8003a90 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a0c:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	6811      	ldr	r1, [r2, #0]
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	6852      	ldr	r2, [r2, #4]
 8003a18:	4311      	orrs	r1, r2
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	68d2      	ldr	r2, [r2, #12]
 8003a1e:	4311      	orrs	r1, r2
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	6912      	ldr	r2, [r2, #16]
 8003a24:	4311      	orrs	r1, r2
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	6952      	ldr	r2, [r2, #20]
 8003a2a:	4311      	orrs	r1, r2
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	6992      	ldr	r2, [r2, #24]
 8003a30:	4311      	orrs	r1, r2
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	69d2      	ldr	r2, [r2, #28]
 8003a36:	4311      	orrs	r1, r2
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	6a12      	ldr	r2, [r2, #32]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a4c:	f023 0304 	bic.w	r3, r3, #4
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	6891      	ldr	r1, [r2, #8]
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	6952      	ldr	r2, [r2, #20]
 8003a58:	0c12      	lsrs	r2, r2, #16
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a6a:	d204      	bcs.n	8003a76 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8003a6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff ff97 	bl	80039a4 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a7e:	d105      	bne.n	8003a8c <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a84:	4619      	mov	r1, r3
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff ff9f 	bl	80039ca <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aae:	4a07      	ldr	r2, [pc, #28]	@ (8003acc <LL_InitTick+0x30>)
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003ab4:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <LL_InitTick+0x30>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aba:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <LL_InitTick+0x30>)
 8003abc:	2205      	movs	r2, #5
 8003abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	e000e010 	.word	0xe000e010

08003ad0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003ad8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff ffdd 	bl	8003a9c <LL_InitTick>
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003af4:	4b0f      	ldr	r3, [pc, #60]	@ (8003b34 <LL_mDelay+0x48>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003afa:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b02:	d00c      	beq.n	8003b1e <LL_mDelay+0x32>
  {
    Delay++;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3301      	adds	r3, #1
 8003b08:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003b0a:	e008      	b.n	8003b1e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003b0c:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <LL_mDelay+0x48>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <LL_mDelay+0x32>
    {
      Delay--;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f3      	bne.n	8003b0c <LL_mDelay+0x20>
    }
  }
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	e000e010 	.word	0xe000e010

08003b38 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003b40:	4a04      	ldr	r2, [pc, #16]	@ (8003b54 <LL_SetSystemCoreClock+0x1c>)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6013      	str	r3, [r2, #0]
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000000 	.word	0x20000000

08003b58 <siprintf>:
 8003b58:	b40e      	push	{r1, r2, r3}
 8003b5a:	b500      	push	{lr}
 8003b5c:	b09c      	sub	sp, #112	@ 0x70
 8003b5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003b60:	9002      	str	r0, [sp, #8]
 8003b62:	9006      	str	r0, [sp, #24]
 8003b64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003b68:	4809      	ldr	r0, [pc, #36]	@ (8003b90 <siprintf+0x38>)
 8003b6a:	9107      	str	r1, [sp, #28]
 8003b6c:	9104      	str	r1, [sp, #16]
 8003b6e:	4909      	ldr	r1, [pc, #36]	@ (8003b94 <siprintf+0x3c>)
 8003b70:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b74:	9105      	str	r1, [sp, #20]
 8003b76:	6800      	ldr	r0, [r0, #0]
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	a902      	add	r1, sp, #8
 8003b7c:	f000 f994 	bl	8003ea8 <_svfiprintf_r>
 8003b80:	9b02      	ldr	r3, [sp, #8]
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	b01c      	add	sp, #112	@ 0x70
 8003b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b8c:	b003      	add	sp, #12
 8003b8e:	4770      	bx	lr
 8003b90:	20000008 	.word	0x20000008
 8003b94:	ffff0208 	.word	0xffff0208

08003b98 <memset>:
 8003b98:	4402      	add	r2, r0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d100      	bne.n	8003ba2 <memset+0xa>
 8003ba0:	4770      	bx	lr
 8003ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ba6:	e7f9      	b.n	8003b9c <memset+0x4>

08003ba8 <__errno>:
 8003ba8:	4b01      	ldr	r3, [pc, #4]	@ (8003bb0 <__errno+0x8>)
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000008 	.word	0x20000008

08003bb4 <__libc_init_array>:
 8003bb4:	b570      	push	{r4, r5, r6, lr}
 8003bb6:	4d0d      	ldr	r5, [pc, #52]	@ (8003bec <__libc_init_array+0x38>)
 8003bb8:	4c0d      	ldr	r4, [pc, #52]	@ (8003bf0 <__libc_init_array+0x3c>)
 8003bba:	1b64      	subs	r4, r4, r5
 8003bbc:	10a4      	asrs	r4, r4, #2
 8003bbe:	2600      	movs	r6, #0
 8003bc0:	42a6      	cmp	r6, r4
 8003bc2:	d109      	bne.n	8003bd8 <__libc_init_array+0x24>
 8003bc4:	4d0b      	ldr	r5, [pc, #44]	@ (8003bf4 <__libc_init_array+0x40>)
 8003bc6:	4c0c      	ldr	r4, [pc, #48]	@ (8003bf8 <__libc_init_array+0x44>)
 8003bc8:	f000 fc66 	bl	8004498 <_init>
 8003bcc:	1b64      	subs	r4, r4, r5
 8003bce:	10a4      	asrs	r4, r4, #2
 8003bd0:	2600      	movs	r6, #0
 8003bd2:	42a6      	cmp	r6, r4
 8003bd4:	d105      	bne.n	8003be2 <__libc_init_array+0x2e>
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
 8003bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bdc:	4798      	blx	r3
 8003bde:	3601      	adds	r6, #1
 8003be0:	e7ee      	b.n	8003bc0 <__libc_init_array+0xc>
 8003be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be6:	4798      	blx	r3
 8003be8:	3601      	adds	r6, #1
 8003bea:	e7f2      	b.n	8003bd2 <__libc_init_array+0x1e>
 8003bec:	080048c0 	.word	0x080048c0
 8003bf0:	080048c0 	.word	0x080048c0
 8003bf4:	080048c0 	.word	0x080048c0
 8003bf8:	080048c4 	.word	0x080048c4

08003bfc <__retarget_lock_acquire_recursive>:
 8003bfc:	4770      	bx	lr

08003bfe <__retarget_lock_release_recursive>:
 8003bfe:	4770      	bx	lr

08003c00 <_free_r>:
 8003c00:	b538      	push	{r3, r4, r5, lr}
 8003c02:	4605      	mov	r5, r0
 8003c04:	2900      	cmp	r1, #0
 8003c06:	d041      	beq.n	8003c8c <_free_r+0x8c>
 8003c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c0c:	1f0c      	subs	r4, r1, #4
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	bfb8      	it	lt
 8003c12:	18e4      	addlt	r4, r4, r3
 8003c14:	f000 f8e0 	bl	8003dd8 <__malloc_lock>
 8003c18:	4a1d      	ldr	r2, [pc, #116]	@ (8003c90 <_free_r+0x90>)
 8003c1a:	6813      	ldr	r3, [r2, #0]
 8003c1c:	b933      	cbnz	r3, 8003c2c <_free_r+0x2c>
 8003c1e:	6063      	str	r3, [r4, #4]
 8003c20:	6014      	str	r4, [r2, #0]
 8003c22:	4628      	mov	r0, r5
 8003c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c28:	f000 b8dc 	b.w	8003de4 <__malloc_unlock>
 8003c2c:	42a3      	cmp	r3, r4
 8003c2e:	d908      	bls.n	8003c42 <_free_r+0x42>
 8003c30:	6820      	ldr	r0, [r4, #0]
 8003c32:	1821      	adds	r1, r4, r0
 8003c34:	428b      	cmp	r3, r1
 8003c36:	bf01      	itttt	eq
 8003c38:	6819      	ldreq	r1, [r3, #0]
 8003c3a:	685b      	ldreq	r3, [r3, #4]
 8003c3c:	1809      	addeq	r1, r1, r0
 8003c3e:	6021      	streq	r1, [r4, #0]
 8003c40:	e7ed      	b.n	8003c1e <_free_r+0x1e>
 8003c42:	461a      	mov	r2, r3
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	b10b      	cbz	r3, 8003c4c <_free_r+0x4c>
 8003c48:	42a3      	cmp	r3, r4
 8003c4a:	d9fa      	bls.n	8003c42 <_free_r+0x42>
 8003c4c:	6811      	ldr	r1, [r2, #0]
 8003c4e:	1850      	adds	r0, r2, r1
 8003c50:	42a0      	cmp	r0, r4
 8003c52:	d10b      	bne.n	8003c6c <_free_r+0x6c>
 8003c54:	6820      	ldr	r0, [r4, #0]
 8003c56:	4401      	add	r1, r0
 8003c58:	1850      	adds	r0, r2, r1
 8003c5a:	4283      	cmp	r3, r0
 8003c5c:	6011      	str	r1, [r2, #0]
 8003c5e:	d1e0      	bne.n	8003c22 <_free_r+0x22>
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	6053      	str	r3, [r2, #4]
 8003c66:	4408      	add	r0, r1
 8003c68:	6010      	str	r0, [r2, #0]
 8003c6a:	e7da      	b.n	8003c22 <_free_r+0x22>
 8003c6c:	d902      	bls.n	8003c74 <_free_r+0x74>
 8003c6e:	230c      	movs	r3, #12
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	e7d6      	b.n	8003c22 <_free_r+0x22>
 8003c74:	6820      	ldr	r0, [r4, #0]
 8003c76:	1821      	adds	r1, r4, r0
 8003c78:	428b      	cmp	r3, r1
 8003c7a:	bf04      	itt	eq
 8003c7c:	6819      	ldreq	r1, [r3, #0]
 8003c7e:	685b      	ldreq	r3, [r3, #4]
 8003c80:	6063      	str	r3, [r4, #4]
 8003c82:	bf04      	itt	eq
 8003c84:	1809      	addeq	r1, r1, r0
 8003c86:	6021      	streq	r1, [r4, #0]
 8003c88:	6054      	str	r4, [r2, #4]
 8003c8a:	e7ca      	b.n	8003c22 <_free_r+0x22>
 8003c8c:	bd38      	pop	{r3, r4, r5, pc}
 8003c8e:	bf00      	nop
 8003c90:	200001c0 	.word	0x200001c0

08003c94 <sbrk_aligned>:
 8003c94:	b570      	push	{r4, r5, r6, lr}
 8003c96:	4e0f      	ldr	r6, [pc, #60]	@ (8003cd4 <sbrk_aligned+0x40>)
 8003c98:	460c      	mov	r4, r1
 8003c9a:	6831      	ldr	r1, [r6, #0]
 8003c9c:	4605      	mov	r5, r0
 8003c9e:	b911      	cbnz	r1, 8003ca6 <sbrk_aligned+0x12>
 8003ca0:	f000 fba6 	bl	80043f0 <_sbrk_r>
 8003ca4:	6030      	str	r0, [r6, #0]
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	4628      	mov	r0, r5
 8003caa:	f000 fba1 	bl	80043f0 <_sbrk_r>
 8003cae:	1c43      	adds	r3, r0, #1
 8003cb0:	d103      	bne.n	8003cba <sbrk_aligned+0x26>
 8003cb2:	f04f 34ff 	mov.w	r4, #4294967295
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	bd70      	pop	{r4, r5, r6, pc}
 8003cba:	1cc4      	adds	r4, r0, #3
 8003cbc:	f024 0403 	bic.w	r4, r4, #3
 8003cc0:	42a0      	cmp	r0, r4
 8003cc2:	d0f8      	beq.n	8003cb6 <sbrk_aligned+0x22>
 8003cc4:	1a21      	subs	r1, r4, r0
 8003cc6:	4628      	mov	r0, r5
 8003cc8:	f000 fb92 	bl	80043f0 <_sbrk_r>
 8003ccc:	3001      	adds	r0, #1
 8003cce:	d1f2      	bne.n	8003cb6 <sbrk_aligned+0x22>
 8003cd0:	e7ef      	b.n	8003cb2 <sbrk_aligned+0x1e>
 8003cd2:	bf00      	nop
 8003cd4:	200001bc 	.word	0x200001bc

08003cd8 <_malloc_r>:
 8003cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cdc:	1ccd      	adds	r5, r1, #3
 8003cde:	f025 0503 	bic.w	r5, r5, #3
 8003ce2:	3508      	adds	r5, #8
 8003ce4:	2d0c      	cmp	r5, #12
 8003ce6:	bf38      	it	cc
 8003ce8:	250c      	movcc	r5, #12
 8003cea:	2d00      	cmp	r5, #0
 8003cec:	4606      	mov	r6, r0
 8003cee:	db01      	blt.n	8003cf4 <_malloc_r+0x1c>
 8003cf0:	42a9      	cmp	r1, r5
 8003cf2:	d904      	bls.n	8003cfe <_malloc_r+0x26>
 8003cf4:	230c      	movs	r3, #12
 8003cf6:	6033      	str	r3, [r6, #0]
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003dd4 <_malloc_r+0xfc>
 8003d02:	f000 f869 	bl	8003dd8 <__malloc_lock>
 8003d06:	f8d8 3000 	ldr.w	r3, [r8]
 8003d0a:	461c      	mov	r4, r3
 8003d0c:	bb44      	cbnz	r4, 8003d60 <_malloc_r+0x88>
 8003d0e:	4629      	mov	r1, r5
 8003d10:	4630      	mov	r0, r6
 8003d12:	f7ff ffbf 	bl	8003c94 <sbrk_aligned>
 8003d16:	1c43      	adds	r3, r0, #1
 8003d18:	4604      	mov	r4, r0
 8003d1a:	d158      	bne.n	8003dce <_malloc_r+0xf6>
 8003d1c:	f8d8 4000 	ldr.w	r4, [r8]
 8003d20:	4627      	mov	r7, r4
 8003d22:	2f00      	cmp	r7, #0
 8003d24:	d143      	bne.n	8003dae <_malloc_r+0xd6>
 8003d26:	2c00      	cmp	r4, #0
 8003d28:	d04b      	beq.n	8003dc2 <_malloc_r+0xea>
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	4639      	mov	r1, r7
 8003d2e:	4630      	mov	r0, r6
 8003d30:	eb04 0903 	add.w	r9, r4, r3
 8003d34:	f000 fb5c 	bl	80043f0 <_sbrk_r>
 8003d38:	4581      	cmp	r9, r0
 8003d3a:	d142      	bne.n	8003dc2 <_malloc_r+0xea>
 8003d3c:	6821      	ldr	r1, [r4, #0]
 8003d3e:	1a6d      	subs	r5, r5, r1
 8003d40:	4629      	mov	r1, r5
 8003d42:	4630      	mov	r0, r6
 8003d44:	f7ff ffa6 	bl	8003c94 <sbrk_aligned>
 8003d48:	3001      	adds	r0, #1
 8003d4a:	d03a      	beq.n	8003dc2 <_malloc_r+0xea>
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	442b      	add	r3, r5
 8003d50:	6023      	str	r3, [r4, #0]
 8003d52:	f8d8 3000 	ldr.w	r3, [r8]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	bb62      	cbnz	r2, 8003db4 <_malloc_r+0xdc>
 8003d5a:	f8c8 7000 	str.w	r7, [r8]
 8003d5e:	e00f      	b.n	8003d80 <_malloc_r+0xa8>
 8003d60:	6822      	ldr	r2, [r4, #0]
 8003d62:	1b52      	subs	r2, r2, r5
 8003d64:	d420      	bmi.n	8003da8 <_malloc_r+0xd0>
 8003d66:	2a0b      	cmp	r2, #11
 8003d68:	d917      	bls.n	8003d9a <_malloc_r+0xc2>
 8003d6a:	1961      	adds	r1, r4, r5
 8003d6c:	42a3      	cmp	r3, r4
 8003d6e:	6025      	str	r5, [r4, #0]
 8003d70:	bf18      	it	ne
 8003d72:	6059      	strne	r1, [r3, #4]
 8003d74:	6863      	ldr	r3, [r4, #4]
 8003d76:	bf08      	it	eq
 8003d78:	f8c8 1000 	streq.w	r1, [r8]
 8003d7c:	5162      	str	r2, [r4, r5]
 8003d7e:	604b      	str	r3, [r1, #4]
 8003d80:	4630      	mov	r0, r6
 8003d82:	f000 f82f 	bl	8003de4 <__malloc_unlock>
 8003d86:	f104 000b 	add.w	r0, r4, #11
 8003d8a:	1d23      	adds	r3, r4, #4
 8003d8c:	f020 0007 	bic.w	r0, r0, #7
 8003d90:	1ac2      	subs	r2, r0, r3
 8003d92:	bf1c      	itt	ne
 8003d94:	1a1b      	subne	r3, r3, r0
 8003d96:	50a3      	strne	r3, [r4, r2]
 8003d98:	e7af      	b.n	8003cfa <_malloc_r+0x22>
 8003d9a:	6862      	ldr	r2, [r4, #4]
 8003d9c:	42a3      	cmp	r3, r4
 8003d9e:	bf0c      	ite	eq
 8003da0:	f8c8 2000 	streq.w	r2, [r8]
 8003da4:	605a      	strne	r2, [r3, #4]
 8003da6:	e7eb      	b.n	8003d80 <_malloc_r+0xa8>
 8003da8:	4623      	mov	r3, r4
 8003daa:	6864      	ldr	r4, [r4, #4]
 8003dac:	e7ae      	b.n	8003d0c <_malloc_r+0x34>
 8003dae:	463c      	mov	r4, r7
 8003db0:	687f      	ldr	r7, [r7, #4]
 8003db2:	e7b6      	b.n	8003d22 <_malloc_r+0x4a>
 8003db4:	461a      	mov	r2, r3
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	42a3      	cmp	r3, r4
 8003dba:	d1fb      	bne.n	8003db4 <_malloc_r+0xdc>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	6053      	str	r3, [r2, #4]
 8003dc0:	e7de      	b.n	8003d80 <_malloc_r+0xa8>
 8003dc2:	230c      	movs	r3, #12
 8003dc4:	6033      	str	r3, [r6, #0]
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f000 f80c 	bl	8003de4 <__malloc_unlock>
 8003dcc:	e794      	b.n	8003cf8 <_malloc_r+0x20>
 8003dce:	6005      	str	r5, [r0, #0]
 8003dd0:	e7d6      	b.n	8003d80 <_malloc_r+0xa8>
 8003dd2:	bf00      	nop
 8003dd4:	200001c0 	.word	0x200001c0

08003dd8 <__malloc_lock>:
 8003dd8:	4801      	ldr	r0, [pc, #4]	@ (8003de0 <__malloc_lock+0x8>)
 8003dda:	f7ff bf0f 	b.w	8003bfc <__retarget_lock_acquire_recursive>
 8003dde:	bf00      	nop
 8003de0:	200001b8 	.word	0x200001b8

08003de4 <__malloc_unlock>:
 8003de4:	4801      	ldr	r0, [pc, #4]	@ (8003dec <__malloc_unlock+0x8>)
 8003de6:	f7ff bf0a 	b.w	8003bfe <__retarget_lock_release_recursive>
 8003dea:	bf00      	nop
 8003dec:	200001b8 	.word	0x200001b8

08003df0 <__ssputs_r>:
 8003df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003df4:	688e      	ldr	r6, [r1, #8]
 8003df6:	461f      	mov	r7, r3
 8003df8:	42be      	cmp	r6, r7
 8003dfa:	680b      	ldr	r3, [r1, #0]
 8003dfc:	4682      	mov	sl, r0
 8003dfe:	460c      	mov	r4, r1
 8003e00:	4690      	mov	r8, r2
 8003e02:	d82d      	bhi.n	8003e60 <__ssputs_r+0x70>
 8003e04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e0c:	d026      	beq.n	8003e5c <__ssputs_r+0x6c>
 8003e0e:	6965      	ldr	r5, [r4, #20]
 8003e10:	6909      	ldr	r1, [r1, #16]
 8003e12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e16:	eba3 0901 	sub.w	r9, r3, r1
 8003e1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e1e:	1c7b      	adds	r3, r7, #1
 8003e20:	444b      	add	r3, r9
 8003e22:	106d      	asrs	r5, r5, #1
 8003e24:	429d      	cmp	r5, r3
 8003e26:	bf38      	it	cc
 8003e28:	461d      	movcc	r5, r3
 8003e2a:	0553      	lsls	r3, r2, #21
 8003e2c:	d527      	bpl.n	8003e7e <__ssputs_r+0x8e>
 8003e2e:	4629      	mov	r1, r5
 8003e30:	f7ff ff52 	bl	8003cd8 <_malloc_r>
 8003e34:	4606      	mov	r6, r0
 8003e36:	b360      	cbz	r0, 8003e92 <__ssputs_r+0xa2>
 8003e38:	6921      	ldr	r1, [r4, #16]
 8003e3a:	464a      	mov	r2, r9
 8003e3c:	f000 fae8 	bl	8004410 <memcpy>
 8003e40:	89a3      	ldrh	r3, [r4, #12]
 8003e42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e4a:	81a3      	strh	r3, [r4, #12]
 8003e4c:	6126      	str	r6, [r4, #16]
 8003e4e:	6165      	str	r5, [r4, #20]
 8003e50:	444e      	add	r6, r9
 8003e52:	eba5 0509 	sub.w	r5, r5, r9
 8003e56:	6026      	str	r6, [r4, #0]
 8003e58:	60a5      	str	r5, [r4, #8]
 8003e5a:	463e      	mov	r6, r7
 8003e5c:	42be      	cmp	r6, r7
 8003e5e:	d900      	bls.n	8003e62 <__ssputs_r+0x72>
 8003e60:	463e      	mov	r6, r7
 8003e62:	6820      	ldr	r0, [r4, #0]
 8003e64:	4632      	mov	r2, r6
 8003e66:	4641      	mov	r1, r8
 8003e68:	f000 faa8 	bl	80043bc <memmove>
 8003e6c:	68a3      	ldr	r3, [r4, #8]
 8003e6e:	1b9b      	subs	r3, r3, r6
 8003e70:	60a3      	str	r3, [r4, #8]
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	4433      	add	r3, r6
 8003e76:	6023      	str	r3, [r4, #0]
 8003e78:	2000      	movs	r0, #0
 8003e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e7e:	462a      	mov	r2, r5
 8003e80:	f000 fad4 	bl	800442c <_realloc_r>
 8003e84:	4606      	mov	r6, r0
 8003e86:	2800      	cmp	r0, #0
 8003e88:	d1e0      	bne.n	8003e4c <__ssputs_r+0x5c>
 8003e8a:	6921      	ldr	r1, [r4, #16]
 8003e8c:	4650      	mov	r0, sl
 8003e8e:	f7ff feb7 	bl	8003c00 <_free_r>
 8003e92:	230c      	movs	r3, #12
 8003e94:	f8ca 3000 	str.w	r3, [sl]
 8003e98:	89a3      	ldrh	r3, [r4, #12]
 8003e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e9e:	81a3      	strh	r3, [r4, #12]
 8003ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea4:	e7e9      	b.n	8003e7a <__ssputs_r+0x8a>
	...

08003ea8 <_svfiprintf_r>:
 8003ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eac:	4698      	mov	r8, r3
 8003eae:	898b      	ldrh	r3, [r1, #12]
 8003eb0:	061b      	lsls	r3, r3, #24
 8003eb2:	b09d      	sub	sp, #116	@ 0x74
 8003eb4:	4607      	mov	r7, r0
 8003eb6:	460d      	mov	r5, r1
 8003eb8:	4614      	mov	r4, r2
 8003eba:	d510      	bpl.n	8003ede <_svfiprintf_r+0x36>
 8003ebc:	690b      	ldr	r3, [r1, #16]
 8003ebe:	b973      	cbnz	r3, 8003ede <_svfiprintf_r+0x36>
 8003ec0:	2140      	movs	r1, #64	@ 0x40
 8003ec2:	f7ff ff09 	bl	8003cd8 <_malloc_r>
 8003ec6:	6028      	str	r0, [r5, #0]
 8003ec8:	6128      	str	r0, [r5, #16]
 8003eca:	b930      	cbnz	r0, 8003eda <_svfiprintf_r+0x32>
 8003ecc:	230c      	movs	r3, #12
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed4:	b01d      	add	sp, #116	@ 0x74
 8003ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eda:	2340      	movs	r3, #64	@ 0x40
 8003edc:	616b      	str	r3, [r5, #20]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ee2:	2320      	movs	r3, #32
 8003ee4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ee8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eec:	2330      	movs	r3, #48	@ 0x30
 8003eee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800408c <_svfiprintf_r+0x1e4>
 8003ef2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ef6:	f04f 0901 	mov.w	r9, #1
 8003efa:	4623      	mov	r3, r4
 8003efc:	469a      	mov	sl, r3
 8003efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f02:	b10a      	cbz	r2, 8003f08 <_svfiprintf_r+0x60>
 8003f04:	2a25      	cmp	r2, #37	@ 0x25
 8003f06:	d1f9      	bne.n	8003efc <_svfiprintf_r+0x54>
 8003f08:	ebba 0b04 	subs.w	fp, sl, r4
 8003f0c:	d00b      	beq.n	8003f26 <_svfiprintf_r+0x7e>
 8003f0e:	465b      	mov	r3, fp
 8003f10:	4622      	mov	r2, r4
 8003f12:	4629      	mov	r1, r5
 8003f14:	4638      	mov	r0, r7
 8003f16:	f7ff ff6b 	bl	8003df0 <__ssputs_r>
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	f000 80a7 	beq.w	800406e <_svfiprintf_r+0x1c6>
 8003f20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f22:	445a      	add	r2, fp
 8003f24:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f26:	f89a 3000 	ldrb.w	r3, [sl]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 809f 	beq.w	800406e <_svfiprintf_r+0x1c6>
 8003f30:	2300      	movs	r3, #0
 8003f32:	f04f 32ff 	mov.w	r2, #4294967295
 8003f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f3a:	f10a 0a01 	add.w	sl, sl, #1
 8003f3e:	9304      	str	r3, [sp, #16]
 8003f40:	9307      	str	r3, [sp, #28]
 8003f42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f46:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f48:	4654      	mov	r4, sl
 8003f4a:	2205      	movs	r2, #5
 8003f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f50:	484e      	ldr	r0, [pc, #312]	@ (800408c <_svfiprintf_r+0x1e4>)
 8003f52:	f7fc f945 	bl	80001e0 <memchr>
 8003f56:	9a04      	ldr	r2, [sp, #16]
 8003f58:	b9d8      	cbnz	r0, 8003f92 <_svfiprintf_r+0xea>
 8003f5a:	06d0      	lsls	r0, r2, #27
 8003f5c:	bf44      	itt	mi
 8003f5e:	2320      	movmi	r3, #32
 8003f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f64:	0711      	lsls	r1, r2, #28
 8003f66:	bf44      	itt	mi
 8003f68:	232b      	movmi	r3, #43	@ 0x2b
 8003f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f72:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f74:	d015      	beq.n	8003fa2 <_svfiprintf_r+0xfa>
 8003f76:	9a07      	ldr	r2, [sp, #28]
 8003f78:	4654      	mov	r4, sl
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	f04f 0c0a 	mov.w	ip, #10
 8003f80:	4621      	mov	r1, r4
 8003f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f86:	3b30      	subs	r3, #48	@ 0x30
 8003f88:	2b09      	cmp	r3, #9
 8003f8a:	d94b      	bls.n	8004024 <_svfiprintf_r+0x17c>
 8003f8c:	b1b0      	cbz	r0, 8003fbc <_svfiprintf_r+0x114>
 8003f8e:	9207      	str	r2, [sp, #28]
 8003f90:	e014      	b.n	8003fbc <_svfiprintf_r+0x114>
 8003f92:	eba0 0308 	sub.w	r3, r0, r8
 8003f96:	fa09 f303 	lsl.w	r3, r9, r3
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	9304      	str	r3, [sp, #16]
 8003f9e:	46a2      	mov	sl, r4
 8003fa0:	e7d2      	b.n	8003f48 <_svfiprintf_r+0xa0>
 8003fa2:	9b03      	ldr	r3, [sp, #12]
 8003fa4:	1d19      	adds	r1, r3, #4
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	9103      	str	r1, [sp, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	bfbb      	ittet	lt
 8003fae:	425b      	neglt	r3, r3
 8003fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8003fb4:	9307      	strge	r3, [sp, #28]
 8003fb6:	9307      	strlt	r3, [sp, #28]
 8003fb8:	bfb8      	it	lt
 8003fba:	9204      	strlt	r2, [sp, #16]
 8003fbc:	7823      	ldrb	r3, [r4, #0]
 8003fbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fc0:	d10a      	bne.n	8003fd8 <_svfiprintf_r+0x130>
 8003fc2:	7863      	ldrb	r3, [r4, #1]
 8003fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fc6:	d132      	bne.n	800402e <_svfiprintf_r+0x186>
 8003fc8:	9b03      	ldr	r3, [sp, #12]
 8003fca:	1d1a      	adds	r2, r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	9203      	str	r2, [sp, #12]
 8003fd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003fd4:	3402      	adds	r4, #2
 8003fd6:	9305      	str	r3, [sp, #20]
 8003fd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800409c <_svfiprintf_r+0x1f4>
 8003fdc:	7821      	ldrb	r1, [r4, #0]
 8003fde:	2203      	movs	r2, #3
 8003fe0:	4650      	mov	r0, sl
 8003fe2:	f7fc f8fd 	bl	80001e0 <memchr>
 8003fe6:	b138      	cbz	r0, 8003ff8 <_svfiprintf_r+0x150>
 8003fe8:	9b04      	ldr	r3, [sp, #16]
 8003fea:	eba0 000a 	sub.w	r0, r0, sl
 8003fee:	2240      	movs	r2, #64	@ 0x40
 8003ff0:	4082      	lsls	r2, r0
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	3401      	adds	r4, #1
 8003ff6:	9304      	str	r3, [sp, #16]
 8003ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ffc:	4824      	ldr	r0, [pc, #144]	@ (8004090 <_svfiprintf_r+0x1e8>)
 8003ffe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004002:	2206      	movs	r2, #6
 8004004:	f7fc f8ec 	bl	80001e0 <memchr>
 8004008:	2800      	cmp	r0, #0
 800400a:	d036      	beq.n	800407a <_svfiprintf_r+0x1d2>
 800400c:	4b21      	ldr	r3, [pc, #132]	@ (8004094 <_svfiprintf_r+0x1ec>)
 800400e:	bb1b      	cbnz	r3, 8004058 <_svfiprintf_r+0x1b0>
 8004010:	9b03      	ldr	r3, [sp, #12]
 8004012:	3307      	adds	r3, #7
 8004014:	f023 0307 	bic.w	r3, r3, #7
 8004018:	3308      	adds	r3, #8
 800401a:	9303      	str	r3, [sp, #12]
 800401c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800401e:	4433      	add	r3, r6
 8004020:	9309      	str	r3, [sp, #36]	@ 0x24
 8004022:	e76a      	b.n	8003efa <_svfiprintf_r+0x52>
 8004024:	fb0c 3202 	mla	r2, ip, r2, r3
 8004028:	460c      	mov	r4, r1
 800402a:	2001      	movs	r0, #1
 800402c:	e7a8      	b.n	8003f80 <_svfiprintf_r+0xd8>
 800402e:	2300      	movs	r3, #0
 8004030:	3401      	adds	r4, #1
 8004032:	9305      	str	r3, [sp, #20]
 8004034:	4619      	mov	r1, r3
 8004036:	f04f 0c0a 	mov.w	ip, #10
 800403a:	4620      	mov	r0, r4
 800403c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004040:	3a30      	subs	r2, #48	@ 0x30
 8004042:	2a09      	cmp	r2, #9
 8004044:	d903      	bls.n	800404e <_svfiprintf_r+0x1a6>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0c6      	beq.n	8003fd8 <_svfiprintf_r+0x130>
 800404a:	9105      	str	r1, [sp, #20]
 800404c:	e7c4      	b.n	8003fd8 <_svfiprintf_r+0x130>
 800404e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004052:	4604      	mov	r4, r0
 8004054:	2301      	movs	r3, #1
 8004056:	e7f0      	b.n	800403a <_svfiprintf_r+0x192>
 8004058:	ab03      	add	r3, sp, #12
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	462a      	mov	r2, r5
 800405e:	4b0e      	ldr	r3, [pc, #56]	@ (8004098 <_svfiprintf_r+0x1f0>)
 8004060:	a904      	add	r1, sp, #16
 8004062:	4638      	mov	r0, r7
 8004064:	f3af 8000 	nop.w
 8004068:	1c42      	adds	r2, r0, #1
 800406a:	4606      	mov	r6, r0
 800406c:	d1d6      	bne.n	800401c <_svfiprintf_r+0x174>
 800406e:	89ab      	ldrh	r3, [r5, #12]
 8004070:	065b      	lsls	r3, r3, #25
 8004072:	f53f af2d 	bmi.w	8003ed0 <_svfiprintf_r+0x28>
 8004076:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004078:	e72c      	b.n	8003ed4 <_svfiprintf_r+0x2c>
 800407a:	ab03      	add	r3, sp, #12
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	462a      	mov	r2, r5
 8004080:	4b05      	ldr	r3, [pc, #20]	@ (8004098 <_svfiprintf_r+0x1f0>)
 8004082:	a904      	add	r1, sp, #16
 8004084:	4638      	mov	r0, r7
 8004086:	f000 f879 	bl	800417c <_printf_i>
 800408a:	e7ed      	b.n	8004068 <_svfiprintf_r+0x1c0>
 800408c:	08004884 	.word	0x08004884
 8004090:	0800488e 	.word	0x0800488e
 8004094:	00000000 	.word	0x00000000
 8004098:	08003df1 	.word	0x08003df1
 800409c:	0800488a 	.word	0x0800488a

080040a0 <_printf_common>:
 80040a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040a4:	4616      	mov	r6, r2
 80040a6:	4698      	mov	r8, r3
 80040a8:	688a      	ldr	r2, [r1, #8]
 80040aa:	690b      	ldr	r3, [r1, #16]
 80040ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040b0:	4293      	cmp	r3, r2
 80040b2:	bfb8      	it	lt
 80040b4:	4613      	movlt	r3, r2
 80040b6:	6033      	str	r3, [r6, #0]
 80040b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040bc:	4607      	mov	r7, r0
 80040be:	460c      	mov	r4, r1
 80040c0:	b10a      	cbz	r2, 80040c6 <_printf_common+0x26>
 80040c2:	3301      	adds	r3, #1
 80040c4:	6033      	str	r3, [r6, #0]
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	0699      	lsls	r1, r3, #26
 80040ca:	bf42      	ittt	mi
 80040cc:	6833      	ldrmi	r3, [r6, #0]
 80040ce:	3302      	addmi	r3, #2
 80040d0:	6033      	strmi	r3, [r6, #0]
 80040d2:	6825      	ldr	r5, [r4, #0]
 80040d4:	f015 0506 	ands.w	r5, r5, #6
 80040d8:	d106      	bne.n	80040e8 <_printf_common+0x48>
 80040da:	f104 0a19 	add.w	sl, r4, #25
 80040de:	68e3      	ldr	r3, [r4, #12]
 80040e0:	6832      	ldr	r2, [r6, #0]
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	42ab      	cmp	r3, r5
 80040e6:	dc26      	bgt.n	8004136 <_printf_common+0x96>
 80040e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80040ec:	6822      	ldr	r2, [r4, #0]
 80040ee:	3b00      	subs	r3, #0
 80040f0:	bf18      	it	ne
 80040f2:	2301      	movne	r3, #1
 80040f4:	0692      	lsls	r2, r2, #26
 80040f6:	d42b      	bmi.n	8004150 <_printf_common+0xb0>
 80040f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80040fc:	4641      	mov	r1, r8
 80040fe:	4638      	mov	r0, r7
 8004100:	47c8      	blx	r9
 8004102:	3001      	adds	r0, #1
 8004104:	d01e      	beq.n	8004144 <_printf_common+0xa4>
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	6922      	ldr	r2, [r4, #16]
 800410a:	f003 0306 	and.w	r3, r3, #6
 800410e:	2b04      	cmp	r3, #4
 8004110:	bf02      	ittt	eq
 8004112:	68e5      	ldreq	r5, [r4, #12]
 8004114:	6833      	ldreq	r3, [r6, #0]
 8004116:	1aed      	subeq	r5, r5, r3
 8004118:	68a3      	ldr	r3, [r4, #8]
 800411a:	bf0c      	ite	eq
 800411c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004120:	2500      	movne	r5, #0
 8004122:	4293      	cmp	r3, r2
 8004124:	bfc4      	itt	gt
 8004126:	1a9b      	subgt	r3, r3, r2
 8004128:	18ed      	addgt	r5, r5, r3
 800412a:	2600      	movs	r6, #0
 800412c:	341a      	adds	r4, #26
 800412e:	42b5      	cmp	r5, r6
 8004130:	d11a      	bne.n	8004168 <_printf_common+0xc8>
 8004132:	2000      	movs	r0, #0
 8004134:	e008      	b.n	8004148 <_printf_common+0xa8>
 8004136:	2301      	movs	r3, #1
 8004138:	4652      	mov	r2, sl
 800413a:	4641      	mov	r1, r8
 800413c:	4638      	mov	r0, r7
 800413e:	47c8      	blx	r9
 8004140:	3001      	adds	r0, #1
 8004142:	d103      	bne.n	800414c <_printf_common+0xac>
 8004144:	f04f 30ff 	mov.w	r0, #4294967295
 8004148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800414c:	3501      	adds	r5, #1
 800414e:	e7c6      	b.n	80040de <_printf_common+0x3e>
 8004150:	18e1      	adds	r1, r4, r3
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	2030      	movs	r0, #48	@ 0x30
 8004156:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800415a:	4422      	add	r2, r4
 800415c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004160:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004164:	3302      	adds	r3, #2
 8004166:	e7c7      	b.n	80040f8 <_printf_common+0x58>
 8004168:	2301      	movs	r3, #1
 800416a:	4622      	mov	r2, r4
 800416c:	4641      	mov	r1, r8
 800416e:	4638      	mov	r0, r7
 8004170:	47c8      	blx	r9
 8004172:	3001      	adds	r0, #1
 8004174:	d0e6      	beq.n	8004144 <_printf_common+0xa4>
 8004176:	3601      	adds	r6, #1
 8004178:	e7d9      	b.n	800412e <_printf_common+0x8e>
	...

0800417c <_printf_i>:
 800417c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004180:	7e0f      	ldrb	r7, [r1, #24]
 8004182:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004184:	2f78      	cmp	r7, #120	@ 0x78
 8004186:	4691      	mov	r9, r2
 8004188:	4680      	mov	r8, r0
 800418a:	460c      	mov	r4, r1
 800418c:	469a      	mov	sl, r3
 800418e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004192:	d807      	bhi.n	80041a4 <_printf_i+0x28>
 8004194:	2f62      	cmp	r7, #98	@ 0x62
 8004196:	d80a      	bhi.n	80041ae <_printf_i+0x32>
 8004198:	2f00      	cmp	r7, #0
 800419a:	f000 80d2 	beq.w	8004342 <_printf_i+0x1c6>
 800419e:	2f58      	cmp	r7, #88	@ 0x58
 80041a0:	f000 80b9 	beq.w	8004316 <_printf_i+0x19a>
 80041a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041ac:	e03a      	b.n	8004224 <_printf_i+0xa8>
 80041ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041b2:	2b15      	cmp	r3, #21
 80041b4:	d8f6      	bhi.n	80041a4 <_printf_i+0x28>
 80041b6:	a101      	add	r1, pc, #4	@ (adr r1, 80041bc <_printf_i+0x40>)
 80041b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041bc:	08004215 	.word	0x08004215
 80041c0:	08004229 	.word	0x08004229
 80041c4:	080041a5 	.word	0x080041a5
 80041c8:	080041a5 	.word	0x080041a5
 80041cc:	080041a5 	.word	0x080041a5
 80041d0:	080041a5 	.word	0x080041a5
 80041d4:	08004229 	.word	0x08004229
 80041d8:	080041a5 	.word	0x080041a5
 80041dc:	080041a5 	.word	0x080041a5
 80041e0:	080041a5 	.word	0x080041a5
 80041e4:	080041a5 	.word	0x080041a5
 80041e8:	08004329 	.word	0x08004329
 80041ec:	08004253 	.word	0x08004253
 80041f0:	080042e3 	.word	0x080042e3
 80041f4:	080041a5 	.word	0x080041a5
 80041f8:	080041a5 	.word	0x080041a5
 80041fc:	0800434b 	.word	0x0800434b
 8004200:	080041a5 	.word	0x080041a5
 8004204:	08004253 	.word	0x08004253
 8004208:	080041a5 	.word	0x080041a5
 800420c:	080041a5 	.word	0x080041a5
 8004210:	080042eb 	.word	0x080042eb
 8004214:	6833      	ldr	r3, [r6, #0]
 8004216:	1d1a      	adds	r2, r3, #4
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6032      	str	r2, [r6, #0]
 800421c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004220:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004224:	2301      	movs	r3, #1
 8004226:	e09d      	b.n	8004364 <_printf_i+0x1e8>
 8004228:	6833      	ldr	r3, [r6, #0]
 800422a:	6820      	ldr	r0, [r4, #0]
 800422c:	1d19      	adds	r1, r3, #4
 800422e:	6031      	str	r1, [r6, #0]
 8004230:	0606      	lsls	r6, r0, #24
 8004232:	d501      	bpl.n	8004238 <_printf_i+0xbc>
 8004234:	681d      	ldr	r5, [r3, #0]
 8004236:	e003      	b.n	8004240 <_printf_i+0xc4>
 8004238:	0645      	lsls	r5, r0, #25
 800423a:	d5fb      	bpl.n	8004234 <_printf_i+0xb8>
 800423c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004240:	2d00      	cmp	r5, #0
 8004242:	da03      	bge.n	800424c <_printf_i+0xd0>
 8004244:	232d      	movs	r3, #45	@ 0x2d
 8004246:	426d      	negs	r5, r5
 8004248:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800424c:	4859      	ldr	r0, [pc, #356]	@ (80043b4 <_printf_i+0x238>)
 800424e:	230a      	movs	r3, #10
 8004250:	e011      	b.n	8004276 <_printf_i+0xfa>
 8004252:	6821      	ldr	r1, [r4, #0]
 8004254:	6833      	ldr	r3, [r6, #0]
 8004256:	0608      	lsls	r0, r1, #24
 8004258:	f853 5b04 	ldr.w	r5, [r3], #4
 800425c:	d402      	bmi.n	8004264 <_printf_i+0xe8>
 800425e:	0649      	lsls	r1, r1, #25
 8004260:	bf48      	it	mi
 8004262:	b2ad      	uxthmi	r5, r5
 8004264:	2f6f      	cmp	r7, #111	@ 0x6f
 8004266:	4853      	ldr	r0, [pc, #332]	@ (80043b4 <_printf_i+0x238>)
 8004268:	6033      	str	r3, [r6, #0]
 800426a:	bf14      	ite	ne
 800426c:	230a      	movne	r3, #10
 800426e:	2308      	moveq	r3, #8
 8004270:	2100      	movs	r1, #0
 8004272:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004276:	6866      	ldr	r6, [r4, #4]
 8004278:	60a6      	str	r6, [r4, #8]
 800427a:	2e00      	cmp	r6, #0
 800427c:	bfa2      	ittt	ge
 800427e:	6821      	ldrge	r1, [r4, #0]
 8004280:	f021 0104 	bicge.w	r1, r1, #4
 8004284:	6021      	strge	r1, [r4, #0]
 8004286:	b90d      	cbnz	r5, 800428c <_printf_i+0x110>
 8004288:	2e00      	cmp	r6, #0
 800428a:	d04b      	beq.n	8004324 <_printf_i+0x1a8>
 800428c:	4616      	mov	r6, r2
 800428e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004292:	fb03 5711 	mls	r7, r3, r1, r5
 8004296:	5dc7      	ldrb	r7, [r0, r7]
 8004298:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800429c:	462f      	mov	r7, r5
 800429e:	42bb      	cmp	r3, r7
 80042a0:	460d      	mov	r5, r1
 80042a2:	d9f4      	bls.n	800428e <_printf_i+0x112>
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d10b      	bne.n	80042c0 <_printf_i+0x144>
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	07df      	lsls	r7, r3, #31
 80042ac:	d508      	bpl.n	80042c0 <_printf_i+0x144>
 80042ae:	6923      	ldr	r3, [r4, #16]
 80042b0:	6861      	ldr	r1, [r4, #4]
 80042b2:	4299      	cmp	r1, r3
 80042b4:	bfde      	ittt	le
 80042b6:	2330      	movle	r3, #48	@ 0x30
 80042b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042c0:	1b92      	subs	r2, r2, r6
 80042c2:	6122      	str	r2, [r4, #16]
 80042c4:	f8cd a000 	str.w	sl, [sp]
 80042c8:	464b      	mov	r3, r9
 80042ca:	aa03      	add	r2, sp, #12
 80042cc:	4621      	mov	r1, r4
 80042ce:	4640      	mov	r0, r8
 80042d0:	f7ff fee6 	bl	80040a0 <_printf_common>
 80042d4:	3001      	adds	r0, #1
 80042d6:	d14a      	bne.n	800436e <_printf_i+0x1f2>
 80042d8:	f04f 30ff 	mov.w	r0, #4294967295
 80042dc:	b004      	add	sp, #16
 80042de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	f043 0320 	orr.w	r3, r3, #32
 80042e8:	6023      	str	r3, [r4, #0]
 80042ea:	4833      	ldr	r0, [pc, #204]	@ (80043b8 <_printf_i+0x23c>)
 80042ec:	2778      	movs	r7, #120	@ 0x78
 80042ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	6831      	ldr	r1, [r6, #0]
 80042f6:	061f      	lsls	r7, r3, #24
 80042f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80042fc:	d402      	bmi.n	8004304 <_printf_i+0x188>
 80042fe:	065f      	lsls	r7, r3, #25
 8004300:	bf48      	it	mi
 8004302:	b2ad      	uxthmi	r5, r5
 8004304:	6031      	str	r1, [r6, #0]
 8004306:	07d9      	lsls	r1, r3, #31
 8004308:	bf44      	itt	mi
 800430a:	f043 0320 	orrmi.w	r3, r3, #32
 800430e:	6023      	strmi	r3, [r4, #0]
 8004310:	b11d      	cbz	r5, 800431a <_printf_i+0x19e>
 8004312:	2310      	movs	r3, #16
 8004314:	e7ac      	b.n	8004270 <_printf_i+0xf4>
 8004316:	4827      	ldr	r0, [pc, #156]	@ (80043b4 <_printf_i+0x238>)
 8004318:	e7e9      	b.n	80042ee <_printf_i+0x172>
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	f023 0320 	bic.w	r3, r3, #32
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	e7f6      	b.n	8004312 <_printf_i+0x196>
 8004324:	4616      	mov	r6, r2
 8004326:	e7bd      	b.n	80042a4 <_printf_i+0x128>
 8004328:	6833      	ldr	r3, [r6, #0]
 800432a:	6825      	ldr	r5, [r4, #0]
 800432c:	6961      	ldr	r1, [r4, #20]
 800432e:	1d18      	adds	r0, r3, #4
 8004330:	6030      	str	r0, [r6, #0]
 8004332:	062e      	lsls	r6, r5, #24
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	d501      	bpl.n	800433c <_printf_i+0x1c0>
 8004338:	6019      	str	r1, [r3, #0]
 800433a:	e002      	b.n	8004342 <_printf_i+0x1c6>
 800433c:	0668      	lsls	r0, r5, #25
 800433e:	d5fb      	bpl.n	8004338 <_printf_i+0x1bc>
 8004340:	8019      	strh	r1, [r3, #0]
 8004342:	2300      	movs	r3, #0
 8004344:	6123      	str	r3, [r4, #16]
 8004346:	4616      	mov	r6, r2
 8004348:	e7bc      	b.n	80042c4 <_printf_i+0x148>
 800434a:	6833      	ldr	r3, [r6, #0]
 800434c:	1d1a      	adds	r2, r3, #4
 800434e:	6032      	str	r2, [r6, #0]
 8004350:	681e      	ldr	r6, [r3, #0]
 8004352:	6862      	ldr	r2, [r4, #4]
 8004354:	2100      	movs	r1, #0
 8004356:	4630      	mov	r0, r6
 8004358:	f7fb ff42 	bl	80001e0 <memchr>
 800435c:	b108      	cbz	r0, 8004362 <_printf_i+0x1e6>
 800435e:	1b80      	subs	r0, r0, r6
 8004360:	6060      	str	r0, [r4, #4]
 8004362:	6863      	ldr	r3, [r4, #4]
 8004364:	6123      	str	r3, [r4, #16]
 8004366:	2300      	movs	r3, #0
 8004368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800436c:	e7aa      	b.n	80042c4 <_printf_i+0x148>
 800436e:	6923      	ldr	r3, [r4, #16]
 8004370:	4632      	mov	r2, r6
 8004372:	4649      	mov	r1, r9
 8004374:	4640      	mov	r0, r8
 8004376:	47d0      	blx	sl
 8004378:	3001      	adds	r0, #1
 800437a:	d0ad      	beq.n	80042d8 <_printf_i+0x15c>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	079b      	lsls	r3, r3, #30
 8004380:	d413      	bmi.n	80043aa <_printf_i+0x22e>
 8004382:	68e0      	ldr	r0, [r4, #12]
 8004384:	9b03      	ldr	r3, [sp, #12]
 8004386:	4298      	cmp	r0, r3
 8004388:	bfb8      	it	lt
 800438a:	4618      	movlt	r0, r3
 800438c:	e7a6      	b.n	80042dc <_printf_i+0x160>
 800438e:	2301      	movs	r3, #1
 8004390:	4632      	mov	r2, r6
 8004392:	4649      	mov	r1, r9
 8004394:	4640      	mov	r0, r8
 8004396:	47d0      	blx	sl
 8004398:	3001      	adds	r0, #1
 800439a:	d09d      	beq.n	80042d8 <_printf_i+0x15c>
 800439c:	3501      	adds	r5, #1
 800439e:	68e3      	ldr	r3, [r4, #12]
 80043a0:	9903      	ldr	r1, [sp, #12]
 80043a2:	1a5b      	subs	r3, r3, r1
 80043a4:	42ab      	cmp	r3, r5
 80043a6:	dcf2      	bgt.n	800438e <_printf_i+0x212>
 80043a8:	e7eb      	b.n	8004382 <_printf_i+0x206>
 80043aa:	2500      	movs	r5, #0
 80043ac:	f104 0619 	add.w	r6, r4, #25
 80043b0:	e7f5      	b.n	800439e <_printf_i+0x222>
 80043b2:	bf00      	nop
 80043b4:	08004895 	.word	0x08004895
 80043b8:	080048a6 	.word	0x080048a6

080043bc <memmove>:
 80043bc:	4288      	cmp	r0, r1
 80043be:	b510      	push	{r4, lr}
 80043c0:	eb01 0402 	add.w	r4, r1, r2
 80043c4:	d902      	bls.n	80043cc <memmove+0x10>
 80043c6:	4284      	cmp	r4, r0
 80043c8:	4623      	mov	r3, r4
 80043ca:	d807      	bhi.n	80043dc <memmove+0x20>
 80043cc:	1e43      	subs	r3, r0, #1
 80043ce:	42a1      	cmp	r1, r4
 80043d0:	d008      	beq.n	80043e4 <memmove+0x28>
 80043d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043da:	e7f8      	b.n	80043ce <memmove+0x12>
 80043dc:	4402      	add	r2, r0
 80043de:	4601      	mov	r1, r0
 80043e0:	428a      	cmp	r2, r1
 80043e2:	d100      	bne.n	80043e6 <memmove+0x2a>
 80043e4:	bd10      	pop	{r4, pc}
 80043e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043ee:	e7f7      	b.n	80043e0 <memmove+0x24>

080043f0 <_sbrk_r>:
 80043f0:	b538      	push	{r3, r4, r5, lr}
 80043f2:	4d06      	ldr	r5, [pc, #24]	@ (800440c <_sbrk_r+0x1c>)
 80043f4:	2300      	movs	r3, #0
 80043f6:	4604      	mov	r4, r0
 80043f8:	4608      	mov	r0, r1
 80043fa:	602b      	str	r3, [r5, #0]
 80043fc:	f7ff f8c4 	bl	8003588 <_sbrk>
 8004400:	1c43      	adds	r3, r0, #1
 8004402:	d102      	bne.n	800440a <_sbrk_r+0x1a>
 8004404:	682b      	ldr	r3, [r5, #0]
 8004406:	b103      	cbz	r3, 800440a <_sbrk_r+0x1a>
 8004408:	6023      	str	r3, [r4, #0]
 800440a:	bd38      	pop	{r3, r4, r5, pc}
 800440c:	200001b4 	.word	0x200001b4

08004410 <memcpy>:
 8004410:	440a      	add	r2, r1
 8004412:	4291      	cmp	r1, r2
 8004414:	f100 33ff 	add.w	r3, r0, #4294967295
 8004418:	d100      	bne.n	800441c <memcpy+0xc>
 800441a:	4770      	bx	lr
 800441c:	b510      	push	{r4, lr}
 800441e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004426:	4291      	cmp	r1, r2
 8004428:	d1f9      	bne.n	800441e <memcpy+0xe>
 800442a:	bd10      	pop	{r4, pc}

0800442c <_realloc_r>:
 800442c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004430:	4680      	mov	r8, r0
 8004432:	4615      	mov	r5, r2
 8004434:	460c      	mov	r4, r1
 8004436:	b921      	cbnz	r1, 8004442 <_realloc_r+0x16>
 8004438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800443c:	4611      	mov	r1, r2
 800443e:	f7ff bc4b 	b.w	8003cd8 <_malloc_r>
 8004442:	b92a      	cbnz	r2, 8004450 <_realloc_r+0x24>
 8004444:	f7ff fbdc 	bl	8003c00 <_free_r>
 8004448:	2400      	movs	r4, #0
 800444a:	4620      	mov	r0, r4
 800444c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004450:	f000 f81a 	bl	8004488 <_malloc_usable_size_r>
 8004454:	4285      	cmp	r5, r0
 8004456:	4606      	mov	r6, r0
 8004458:	d802      	bhi.n	8004460 <_realloc_r+0x34>
 800445a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800445e:	d8f4      	bhi.n	800444a <_realloc_r+0x1e>
 8004460:	4629      	mov	r1, r5
 8004462:	4640      	mov	r0, r8
 8004464:	f7ff fc38 	bl	8003cd8 <_malloc_r>
 8004468:	4607      	mov	r7, r0
 800446a:	2800      	cmp	r0, #0
 800446c:	d0ec      	beq.n	8004448 <_realloc_r+0x1c>
 800446e:	42b5      	cmp	r5, r6
 8004470:	462a      	mov	r2, r5
 8004472:	4621      	mov	r1, r4
 8004474:	bf28      	it	cs
 8004476:	4632      	movcs	r2, r6
 8004478:	f7ff ffca 	bl	8004410 <memcpy>
 800447c:	4621      	mov	r1, r4
 800447e:	4640      	mov	r0, r8
 8004480:	f7ff fbbe 	bl	8003c00 <_free_r>
 8004484:	463c      	mov	r4, r7
 8004486:	e7e0      	b.n	800444a <_realloc_r+0x1e>

08004488 <_malloc_usable_size_r>:
 8004488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800448c:	1f18      	subs	r0, r3, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	bfbc      	itt	lt
 8004492:	580b      	ldrlt	r3, [r1, r0]
 8004494:	18c0      	addlt	r0, r0, r3
 8004496:	4770      	bx	lr

08004498 <_init>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	bf00      	nop
 800449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449e:	bc08      	pop	{r3}
 80044a0:	469e      	mov	lr, r3
 80044a2:	4770      	bx	lr

080044a4 <_fini>:
 80044a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a6:	bf00      	nop
 80044a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044aa:	bc08      	pop	{r3}
 80044ac:	469e      	mov	lr, r3
 80044ae:	4770      	bx	lr
