
DOOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b78  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08006d08  08006d08  00007d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007358  08007358  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  08007358  08007358  00008358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007360  08007360  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007360  08007360  00008360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007364  08007364  00008364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007368  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009080  2**0
                  CONTENTS
 10 .bss          000004a8  20000080  20000080  00009080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000528  20000528  00009080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000063a0  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a29  00000000  00000000  0000f450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  00010e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005d9  00000000  00000000  00011658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c29e  00000000  00000000  00011c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a64a  00000000  00000000  0002decf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a192c  00000000  00000000  00038519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d9e45  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b48  00000000  00000000  000d9e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  000dc9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006cf0 	.word	0x08006cf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08006cf0 	.word	0x08006cf0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <initPolygon>:
Player player;
int boundX = 1000;
int boundY = 1000;

// Function to initialize a polygon
void initPolygon(Polygon *polygon, int16_t *vertices, int16_t numVertices, int16_t color) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	4611      	mov	r1, r2
 8000c54:	461a      	mov	r2, r3
 8000c56:	460b      	mov	r3, r1
 8000c58:	80fb      	strh	r3, [r7, #6]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	80bb      	strh	r3, [r7, #4]
    polygon->vertices = (int16_t *)malloc(numVertices * 3 * sizeof(int16_t));
 8000c5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c62:	4613      	mov	r3, r2
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	4413      	add	r3, r2
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 fd04 	bl	8004678 <malloc>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	601a      	str	r2, [r3, #0]
    if (polygon->vertices == NULL) {
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d105      	bne.n	8000c8c <initPolygon+0x44>
        printf("Error allocating memory for polygon vertices.\n");
 8000c80:	4814      	ldr	r0, [pc, #80]	@ (8000cd4 <initPolygon+0x8c>)
 8000c82:	f003 fec7 	bl	8004a14 <puts>
        exit(EXIT_FAILURE);
 8000c86:	2001      	movs	r0, #1
 8000c88:	f003 fce4 	bl	8004654 <exit>
    }
    for (int i = 0; i < numVertices * 3; i++) {
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	e00e      	b.n	8000cb0 <initPolygon+0x68>
        polygon->vertices[i] = vertices[i];
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	441a      	add	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	6819      	ldr	r1, [r3, #0]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ca8:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < numVertices * 3; i++) {
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	4413      	add	r3, r2
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbe8      	blt.n	8000c92 <initPolygon+0x4a>
    }
    polygon->numVertices = numVertices;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	88fa      	ldrh	r2, [r7, #6]
 8000cc4:	809a      	strh	r2, [r3, #4]
    polygon->color = color;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	88ba      	ldrh	r2, [r7, #4]
 8000cca:	80da      	strh	r2, [r3, #6]
}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	08006d08 	.word	0x08006d08

08000cd8 <addPolygon>:

// Function to add a new polygon to the polygons array
void addPolygon(int16_t *vertices, int16_t numVertices, int16_t color) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	803b      	strh	r3, [r7, #0]
    if (polygonCount >= MAX_POLYGONS) {
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <addPolygon+0x48>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b63      	cmp	r3, #99	@ 0x63
 8000cee:	dd03      	ble.n	8000cf8 <addPolygon+0x20>
        printf("Cannot add more polygons. Maximum limit reached.\n");
 8000cf0:	480c      	ldr	r0, [pc, #48]	@ (8000d24 <addPolygon+0x4c>)
 8000cf2:	f003 fe8f 	bl	8004a14 <puts>
        return;
 8000cf6:	e010      	b.n	8000d1a <addPolygon+0x42>
    }
    initPolygon(&polygons[polygonCount], vertices, numVertices, color);
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <addPolygon+0x48>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <addPolygon+0x50>)
 8000d00:	1898      	adds	r0, r3, r2
 8000d02:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d06:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f7ff ff9c 	bl	8000c48 <initPolygon>
    polygonCount++;
 8000d10:	4b03      	ldr	r3, [pc, #12]	@ (8000d20 <addPolygon+0x48>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3301      	adds	r3, #1
 8000d16:	4a02      	ldr	r2, [pc, #8]	@ (8000d20 <addPolygon+0x48>)
 8000d18:	6013      	str	r3, [r2, #0]
}
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200003bc 	.word	0x200003bc
 8000d24:	08006d38 	.word	0x08006d38
 8000d28:	2000009c 	.word	0x2000009c

08000d2c <initPolygons>:

    polygonCount--;
}

// Function to initialize polygons from preset map
void initPolygons() {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b09a      	sub	sp, #104	@ 0x68
 8000d30:	af00      	add	r7, sp, #0

	//arena s pouzitim polyline
	for(int8_t i=0; i<5; i++) {
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000d38:	e06d      	b.n	8000e16 <initPolygons+0xea>
		int16_t EastWall3[] = {200+200*i, 0, 0,   200*i, 0, 0,   200*i, 0, 100,   200+200*i, 0, 100};
 8000d3a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000d3e:	3301      	adds	r3, #1
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	461a      	mov	r2, r3
 8000d44:	0092      	lsls	r2, r2, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	461a      	mov	r2, r3
 8000d4a:	0091      	lsls	r1, r2, #2
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4413      	add	r3, r2
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8000d68:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	0092      	lsls	r2, r2, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	461a      	mov	r2, r3
 8000d76:	0091      	lsls	r1, r2, #2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	b21b      	sxth	r3, r3
 8000d84:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8000d94:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	0092      	lsls	r2, r2, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	461a      	mov	r2, r3
 8000da2:	0091      	lsls	r1, r2, #2
 8000da4:	461a      	mov	r2, r3
 8000da6:	460b      	mov	r3, r1
 8000da8:	4413      	add	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8000dba:	2364      	movs	r3, #100	@ 0x64
 8000dbc:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8000dc0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	461a      	mov	r2, r3
 8000dca:	0092      	lsls	r2, r2, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	461a      	mov	r2, r3
 8000dd0:	0091      	lsls	r1, r2, #2
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8000de8:	2364      	movs	r3, #100	@ 0x64
 8000dea:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		addPolygon(EastWall3, 4, decodeRgbValue(255, 255, 0)); // east
 8000dee:	2200      	movs	r2, #0
 8000df0:	21ff      	movs	r1, #255	@ 0xff
 8000df2:	20ff      	movs	r0, #255	@ 0xff
 8000df4:	f001 fd4a 	bl	800288c <decodeRgbValue>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e00:	2104      	movs	r1, #4
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff68 	bl	8000cd8 <addPolygon>
	for(int8_t i=0; i<5; i++) {
 8000e08:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000e16:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	dd8d      	ble.n	8000d3a <initPolygons+0xe>
	}
	for(int8_t i=0; i<5; i++) {
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8000e24:	e06b      	b.n	8000efe <initPolygons+0x1d2>
		int16_t EastWall4[] = {1000, 200+200*i, 0,   1000, 200*i, 0,   1000, 200*i, 100,   1000, 200+200*i, 100};
 8000e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8000e2c:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000e30:	3301      	adds	r3, #1
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	0091      	lsls	r1, r2, #2
 8000e3e:	461a      	mov	r2, r3
 8000e40:	460b      	mov	r3, r1
 8000e42:	4413      	add	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8000e50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e54:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8000e56:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	0092      	lsls	r2, r2, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	461a      	mov	r2, r3
 8000e64:	0091      	lsls	r1, r2, #2
 8000e66:	461a      	mov	r2, r3
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8000e74:	2300      	movs	r3, #0
 8000e76:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8000e78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e7c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8000e80:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	461a      	mov	r2, r3
 8000e88:	0092      	lsls	r2, r2, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	0091      	lsls	r1, r2, #2
 8000e90:	461a      	mov	r2, r3
 8000e92:	460b      	mov	r3, r1
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8000ea0:	2364      	movs	r3, #100	@ 0x64
 8000ea2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8000ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eaa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000eae:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	0092      	lsls	r2, r2, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	0091      	lsls	r1, r2, #2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8000ed0:	2364      	movs	r3, #100	@ 0x64
 8000ed2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		addPolygon(EastWall4, 4, decodeRgbValue(255, 255, 0)); // north
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	21ff      	movs	r1, #255	@ 0xff
 8000eda:	20ff      	movs	r0, #255	@ 0xff
 8000edc:	f001 fcd6 	bl	800288c <decodeRgbValue>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	b21a      	sxth	r2, r3
 8000ee4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ee8:	2104      	movs	r1, #4
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fef4 	bl	8000cd8 <addPolygon>
	for(int8_t i=0; i<5; i++) {
 8000ef0:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8000efe:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	dd8f      	ble.n	8000e26 <initPolygons+0xfa>
	}
	for(int8_t i=0; i<5; i++) {
 8000f06:	2300      	movs	r3, #0
 8000f08:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8000f0c:	e06b      	b.n	8000fe6 <initPolygons+0x2ba>
		int16_t EastWall3[] = {800-200*i, 1000, 0,   1000-200*i, 1000, 0,   1000-200*i, 1000, 100,   800-200*i, 1000, 100};
 8000f0e:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	461a      	mov	r2, r3
 8000f16:	0212      	lsls	r2, r2, #8
 8000f18:	1ad2      	subs	r2, r2, r3
 8000f1a:	0092      	lsls	r2, r2, #2
 8000f1c:	441a      	add	r2, r3
 8000f1e:	00d2      	lsls	r2, r2, #3
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	83bb      	strh	r3, [r7, #28]
 8000f30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f34:	83fb      	strh	r3, [r7, #30]
 8000f36:	2300      	movs	r3, #0
 8000f38:	843b      	strh	r3, [r7, #32]
 8000f3a:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	0212      	lsls	r2, r2, #8
 8000f44:	1ad2      	subs	r2, r2, r3
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	441a      	add	r2, r3
 8000f4a:	00d2      	lsls	r2, r2, #3
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000f5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f60:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000f62:	2300      	movs	r3, #0
 8000f64:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000f66:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	0212      	lsls	r2, r2, #8
 8000f70:	1ad2      	subs	r2, r2, r3
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	441a      	add	r2, r3
 8000f76:	00d2      	lsls	r2, r2, #3
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	853b      	strh	r3, [r7, #40]	@ 0x28
 8000f88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f8c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000f8e:	2364      	movs	r3, #100	@ 0x64
 8000f90:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000f92:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	0212      	lsls	r2, r2, #8
 8000f9c:	1ad2      	subs	r2, r2, r3
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	441a      	add	r2, r3
 8000fa2:	00d2      	lsls	r2, r2, #3
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000fb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb8:	863b      	strh	r3, [r7, #48]	@ 0x30
 8000fba:	2364      	movs	r3, #100	@ 0x64
 8000fbc:	867b      	strh	r3, [r7, #50]	@ 0x32
		addPolygon(EastWall3, 4, decodeRgbValue(255, 255, 0)); // west
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	21ff      	movs	r1, #255	@ 0xff
 8000fc2:	20ff      	movs	r0, #255	@ 0xff
 8000fc4:	f001 fc62 	bl	800288c <decodeRgbValue>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fe80 	bl	8000cd8 <addPolygon>
	for(int8_t i=0; i<5; i++) {
 8000fd8:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	3301      	adds	r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8000fe6:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	dd8f      	ble.n	8000f0e <initPolygons+0x1e2>
	}
	for(int8_t i=0; i<5; i++) {
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8000ff4:	e066      	b.n	80010c4 <initPolygons+0x398>
		int16_t EastWall4[] = {0, 800-200*i, 0,   0, 1000-200*i, 0,   0, 1000-200*i, 100,   0, 800-200*i, 100};
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	80bb      	strh	r3, [r7, #4]
 8000ffa:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	0212      	lsls	r2, r2, #8
 8001004:	1ad2      	subs	r2, r2, r3
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	441a      	add	r2, r3
 800100a:	00d2      	lsls	r2, r2, #3
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	b29b      	uxth	r3, r3
 8001012:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8001016:	b29b      	uxth	r3, r3
 8001018:	b21b      	sxth	r3, r3
 800101a:	80fb      	strh	r3, [r7, #6]
 800101c:	2300      	movs	r3, #0
 800101e:	813b      	strh	r3, [r7, #8]
 8001020:	2300      	movs	r3, #0
 8001022:	817b      	strh	r3, [r7, #10]
 8001024:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001028:	b29b      	uxth	r3, r3
 800102a:	461a      	mov	r2, r3
 800102c:	0212      	lsls	r2, r2, #8
 800102e:	1ad2      	subs	r2, r2, r3
 8001030:	0092      	lsls	r2, r2, #2
 8001032:	441a      	add	r2, r3
 8001034:	00d2      	lsls	r2, r2, #3
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	b29b      	uxth	r3, r3
 800103c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001040:	b29b      	uxth	r3, r3
 8001042:	b21b      	sxth	r3, r3
 8001044:	81bb      	strh	r3, [r7, #12]
 8001046:	2300      	movs	r3, #0
 8001048:	81fb      	strh	r3, [r7, #14]
 800104a:	2300      	movs	r3, #0
 800104c:	823b      	strh	r3, [r7, #16]
 800104e:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001052:	b29b      	uxth	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	0212      	lsls	r2, r2, #8
 8001058:	1ad2      	subs	r2, r2, r3
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	441a      	add	r2, r3
 800105e:	00d2      	lsls	r2, r2, #3
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	b29b      	uxth	r3, r3
 8001066:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800106a:	b29b      	uxth	r3, r3
 800106c:	b21b      	sxth	r3, r3
 800106e:	827b      	strh	r3, [r7, #18]
 8001070:	2364      	movs	r3, #100	@ 0x64
 8001072:	82bb      	strh	r3, [r7, #20]
 8001074:	2300      	movs	r3, #0
 8001076:	82fb      	strh	r3, [r7, #22]
 8001078:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800107c:	b29b      	uxth	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	0212      	lsls	r2, r2, #8
 8001082:	1ad2      	subs	r2, r2, r3
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	441a      	add	r2, r3
 8001088:	00d2      	lsls	r2, r2, #3
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	b29b      	uxth	r3, r3
 8001090:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8001094:	b29b      	uxth	r3, r3
 8001096:	b21b      	sxth	r3, r3
 8001098:	833b      	strh	r3, [r7, #24]
 800109a:	2364      	movs	r3, #100	@ 0x64
 800109c:	837b      	strh	r3, [r7, #26]
		addPolygon(EastWall4, 4, decodeRgbValue(255, 255, 0)); // south
 800109e:	2200      	movs	r2, #0
 80010a0:	21ff      	movs	r1, #255	@ 0xff
 80010a2:	20ff      	movs	r0, #255	@ 0xff
 80010a4:	f001 fbf2 	bl	800288c <decodeRgbValue>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2104      	movs	r1, #4
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fe11 	bl	8000cd8 <addPolygon>
	for(int8_t i=0; i<5; i++) {
 80010b6:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	3301      	adds	r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80010c4:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	dd94      	ble.n	8000ff6 <initPolygons+0x2ca>
	}

}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3768      	adds	r7, #104	@ 0x68
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <initPlayer>:
        free(polygons[i].vertices);
    }
}

// Function to initialize the player
void initPlayer() {
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
	player.x = 100;        // Initial X position
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <initPlayer+0x34>)
 80010de:	4a0c      	ldr	r2, [pc, #48]	@ (8001110 <initPlayer+0x38>)
 80010e0:	601a      	str	r2, [r3, #0]
    player.y = 100;        // Initial Y position
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <initPlayer+0x34>)
 80010e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <initPlayer+0x38>)
 80010e6:	605a      	str	r2, [r3, #4]
    player.z = 50;         // Initial Z position
 80010e8:	4b08      	ldr	r3, [pc, #32]	@ (800110c <initPlayer+0x34>)
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <initPlayer+0x3c>)
 80010ec:	609a      	str	r2, [r3, #8]
    player.rotation = 0.5; // Initial rotation angle
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <initPlayer+0x34>)
 80010f0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80010f4:	60da      	str	r2, [r3, #12]
    player.health = 100;    // Starting health
 80010f6:	4b05      	ldr	r3, [pc, #20]	@ (800110c <initPlayer+0x34>)
 80010f8:	2264      	movs	r2, #100	@ 0x64
 80010fa:	821a      	strh	r2, [r3, #16]
    player.ammo = 50;       // Starting ammo
 80010fc:	4b03      	ldr	r3, [pc, #12]	@ (800110c <initPlayer+0x34>)
 80010fe:	2232      	movs	r2, #50	@ 0x32
 8001100:	825a      	strh	r2, [r3, #18]
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	200003c0 	.word	0x200003c0
 8001110:	42c80000 	.word	0x42c80000
 8001114:	42480000 	.word	0x42480000

08001118 <movePlayer>:

void movePlayer(Player *player, float step) {
 8001118:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	ed87 0a00 	vstr	s0, [r7]
	player->x += step*cos(player->rotation);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa0c 	bl	8000548 <__aeabi_f2d>
 8001130:	4604      	mov	r4, r0
 8001132:	460d      	mov	r5, r1
 8001134:	6838      	ldr	r0, [r7, #0]
 8001136:	f7ff fa07 	bl	8000548 <__aeabi_f2d>
 800113a:	4680      	mov	r8, r0
 800113c:	4689      	mov	r9, r1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fa00 	bl	8000548 <__aeabi_f2d>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	ec43 2b10 	vmov	d0, r2, r3
 8001150:	f004 fc6e 	bl	8005a30 <cos>
 8001154:	ec53 2b10 	vmov	r2, r3, d0
 8001158:	4640      	mov	r0, r8
 800115a:	4649      	mov	r1, r9
 800115c:	f7ff fa4c 	bl	80005f8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4620      	mov	r0, r4
 8001166:	4629      	mov	r1, r5
 8001168:	f7ff f890 	bl	800028c <__adddf3>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fd18 	bl	8000ba8 <__aeabi_d2f>
 8001178:	4602      	mov	r2, r0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	601a      	str	r2, [r3, #0]
	player->y += step*sin(player->rotation);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9e0 	bl	8000548 <__aeabi_f2d>
 8001188:	4604      	mov	r4, r0
 800118a:	460d      	mov	r5, r1
 800118c:	6838      	ldr	r0, [r7, #0]
 800118e:	f7ff f9db 	bl	8000548 <__aeabi_f2d>
 8001192:	4680      	mov	r8, r0
 8001194:	4689      	mov	r9, r1
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f9d4 	bl	8000548 <__aeabi_f2d>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	ec43 2b10 	vmov	d0, r2, r3
 80011a8:	f004 fc9e 	bl	8005ae8 <sin>
 80011ac:	ec53 2b10 	vmov	r2, r3, d0
 80011b0:	4640      	mov	r0, r8
 80011b2:	4649      	mov	r1, r9
 80011b4:	f7ff fa20 	bl	80005f8 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4620      	mov	r0, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	f7ff f864 	bl	800028c <__adddf3>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fcec 	bl	8000ba8 <__aeabi_d2f>
 80011d0:	4602      	mov	r2, r0
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	605a      	str	r2, [r3, #4]
	if ((player->x > boundX)||(player->x < 0)) {	//when hitting wall the player slides
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	ed93 7a00 	vldr	s14, [r3]
 80011dc:	4b43      	ldr	r3, [pc, #268]	@ (80012ec <movePlayer+0x1d4>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	ee07 3a90 	vmov	s15, r3
 80011e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	dc07      	bgt.n	8001202 <movePlayer+0xea>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001200:	d52b      	bpl.n	800125a <movePlayer+0x142>
		player->x -= step*cos(player->rotation);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff f99e 	bl	8000548 <__aeabi_f2d>
 800120c:	4604      	mov	r4, r0
 800120e:	460d      	mov	r5, r1
 8001210:	6838      	ldr	r0, [r7, #0]
 8001212:	f7ff f999 	bl	8000548 <__aeabi_f2d>
 8001216:	4680      	mov	r8, r0
 8001218:	4689      	mov	r9, r1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f992 	bl	8000548 <__aeabi_f2d>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	ec43 2b10 	vmov	d0, r2, r3
 800122c:	f004 fc00 	bl	8005a30 <cos>
 8001230:	ec53 2b10 	vmov	r2, r3, d0
 8001234:	4640      	mov	r0, r8
 8001236:	4649      	mov	r1, r9
 8001238:	f7ff f9de 	bl	80005f8 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	f7ff f820 	bl	8000288 <__aeabi_dsub>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fcaa 	bl	8000ba8 <__aeabi_d2f>
 8001254:	4602      	mov	r2, r0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	601a      	str	r2, [r3, #0]
	}
	if ((player->y > boundY)||(player->y < 0)) {
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001260:	4b23      	ldr	r3, [pc, #140]	@ (80012f0 <movePlayer+0x1d8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001274:	dc08      	bgt.n	8001288 <movePlayer+0x170>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	edd3 7a01 	vldr	s15, [r3, #4]
 800127c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001284:	d400      	bmi.n	8001288 <movePlayer+0x170>
			player->y -= step*sin(player->rotation);
	}
}
 8001286:	e02b      	b.n	80012e0 <movePlayer+0x1c8>
			player->y -= step*sin(player->rotation);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f95b 	bl	8000548 <__aeabi_f2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
 8001296:	6838      	ldr	r0, [r7, #0]
 8001298:	f7ff f956 	bl	8000548 <__aeabi_f2d>
 800129c:	4680      	mov	r8, r0
 800129e:	4689      	mov	r9, r1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f94f 	bl	8000548 <__aeabi_f2d>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	ec43 2b10 	vmov	d0, r2, r3
 80012b2:	f004 fc19 	bl	8005ae8 <sin>
 80012b6:	ec53 2b10 	vmov	r2, r3, d0
 80012ba:	4640      	mov	r0, r8
 80012bc:	4649      	mov	r1, r9
 80012be:	f7ff f99b 	bl	80005f8 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4620      	mov	r0, r4
 80012c8:	4629      	mov	r1, r5
 80012ca:	f7fe ffdd 	bl	8000288 <__aeabi_dsub>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fc67 	bl	8000ba8 <__aeabi_d2f>
 80012da:	4602      	mov	r2, r0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	605a      	str	r2, [r3, #4]
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012ea:	bf00      	nop
 80012ec:	20000000 	.word	0x20000000
 80012f0:	20000004 	.word	0x20000004
 80012f4:	00000000 	.word	0x00000000

080012f8 <rotatePlayer>:

void rotatePlayer(Player *player, float angle) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	ed87 0a00 	vstr	s0, [r7]
	player->rotation += angle;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	ed93 7a03 	vldr	s14, [r3, #12]
 800130a:	edd7 7a00 	vldr	s15, [r7]
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a03 	vstr	s15, [r3, #12]
	if (player->rotation > 3.1416) {
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f913 	bl	8000548 <__aeabi_f2d>
 8001322:	a321      	add	r3, pc, #132	@ (adr r3, 80013a8 <rotatePlayer+0xb0>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff fbf6 	bl	8000b18 <__aeabi_dcmpgt>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d012      	beq.n	8001358 <rotatePlayer+0x60>
		player->rotation -= 6.2832;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f906 	bl	8000548 <__aeabi_f2d>
 800133c:	a31c      	add	r3, pc, #112	@ (adr r3, 80013b0 <rotatePlayer+0xb8>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7fe ffa1 	bl	8000288 <__aeabi_dsub>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff fc2b 	bl	8000ba8 <__aeabi_d2f>
 8001352:	4602      	mov	r2, r0
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	60da      	str	r2, [r3, #12]
	}
	if (player->rotation < -3.1416) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f8f3 	bl	8000548 <__aeabi_f2d>
 8001362:	a315      	add	r3, pc, #84	@ (adr r3, 80013b8 <rotatePlayer+0xc0>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	f7ff fbb8 	bl	8000adc <__aeabi_dcmplt>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d100      	bne.n	8001374 <rotatePlayer+0x7c>
		player->rotation += 6.2832;
	}
}
 8001372:	e012      	b.n	800139a <rotatePlayer+0xa2>
		player->rotation += 6.2832;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8e5 	bl	8000548 <__aeabi_f2d>
 800137e:	a30c      	add	r3, pc, #48	@ (adr r3, 80013b0 <rotatePlayer+0xb8>)
 8001380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001384:	f7fe ff82 	bl	800028c <__adddf3>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fc0a 	bl	8000ba8 <__aeabi_d2f>
 8001394:	4602      	mov	r2, r0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	60da      	str	r2, [r3, #12]
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	f3af 8000 	nop.w
 80013a8:	2e48e8a7 	.word	0x2e48e8a7
 80013ac:	400921ff 	.word	0x400921ff
 80013b0:	2e48e8a7 	.word	0x2e48e8a7
 80013b4:	401921ff 	.word	0x401921ff
 80013b8:	2e48e8a7 	.word	0x2e48e8a7
 80013bc:	c00921ff 	.word	0xc00921ff

080013c0 <startNewGame>:

void startNewGame(){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	initPolygons(0);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff fcb1 	bl	8000d2c <initPolygons>
	initPlayer(0);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fe84 	bl	80010d8 <initPlayer>
	gameLoop();
 80013d0:	f000 f802 	bl	80013d8 <gameLoop>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <gameLoop>:

void gameLoop(){
 80013d8:	b5b0      	push	{r4, r5, r7, lr}
 80013da:	b090      	sub	sp, #64	@ 0x40
 80013dc:	af02      	add	r7, sp, #8
	// in this loop we walk down the hallway and at the end we turn back
	int8_t step = 10;	// kazdych 10 pixelov bude bodka
 80013de:	230a      	movs	r3, #10
 80013e0:	71fb      	strb	r3, [r7, #7]

	lcdPutS("test 3D rendera:", 220, 10, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 80013e2:	221f      	movs	r2, #31
 80013e4:	211f      	movs	r1, #31
 80013e6:	201f      	movs	r0, #31
 80013e8:	f001 fa50 	bl	800288c <decodeRgbValue>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461c      	mov	r4, r3
 80013f0:	2200      	movs	r2, #0
 80013f2:	2100      	movs	r1, #0
 80013f4:	2000      	movs	r0, #0
 80013f6:	f001 fa49 	bl	800288c <decodeRgbValue>
 80013fa:	4603      	mov	r3, r0
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	4623      	mov	r3, r4
 8001400:	220a      	movs	r2, #10
 8001402:	21dc      	movs	r1, #220	@ 0xdc
 8001404:	48a7      	ldr	r0, [pc, #668]	@ (80016a4 <gameLoop+0x2cc>)
 8001406:	f001 fa5d 	bl	80028c4 <lcdPutS>
	lcdRectangle(20, 225, 300, 250, decodeRgbValue(255, 255, 255)); //dolny status bar
 800140a:	22ff      	movs	r2, #255	@ 0xff
 800140c:	21ff      	movs	r1, #255	@ 0xff
 800140e:	20ff      	movs	r0, #255	@ 0xff
 8001410:	f001 fa3c 	bl	800288c <decodeRgbValue>
 8001414:	4603      	mov	r3, r0
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	23fa      	movs	r3, #250	@ 0xfa
 800141a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800141e:	21e1      	movs	r1, #225	@ 0xe1
 8001420:	2014      	movs	r0, #20
 8001422:	f000 ff34 	bl	800228e <lcdRectangle>
	lcdCircle(160,232,5,decodeRgbValue(255, 255, 255)); //akysi kruh, v povodnej doom je tam hlava hraca
 8001426:	22ff      	movs	r2, #255	@ 0xff
 8001428:	21ff      	movs	r1, #255	@ 0xff
 800142a:	20ff      	movs	r0, #255	@ 0xff
 800142c:	f001 fa2e 	bl	800288c <decodeRgbValue>
 8001430:	4603      	mov	r3, r0
 8001432:	2205      	movs	r2, #5
 8001434:	21e8      	movs	r1, #232	@ 0xe8
 8001436:	20a0      	movs	r0, #160	@ 0xa0
 8001438:	f001 f810 	bl	800245c <lcdCircle>

	while(1){

		//bodkovane polygony su o 40% rychlejsie
		for(int k = 0; k<20; k++) {
 800143c:	2300      	movs	r3, #0
 800143e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001440:	e075      	b.n	800152e <gameLoop+0x156>
			for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 8001442:	2300      	movs	r3, #0
 8001444:	633b      	str	r3, [r7, #48]	@ 0x30
 8001446:	e02d      	b.n	80014a4 <gameLoop+0xcc>
				lcd3DPolyline(polygons[i].vertices, polygons[i].numVertices, polygons[i].color, player.x, player.y, player.z, player.rotation, 1, step);
 8001448:	4a97      	ldr	r2, [pc, #604]	@ (80016a8 <gameLoop+0x2d0>)
 800144a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800144c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001450:	4a95      	ldr	r2, [pc, #596]	@ (80016a8 <gameLoop+0x2d0>)
 8001452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4413      	add	r3, r2
 8001458:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800145c:	4a92      	ldr	r2, [pc, #584]	@ (80016a8 <gameLoop+0x2d0>)
 800145e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	4413      	add	r3, r2
 8001464:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b90      	ldr	r3, [pc, #576]	@ (80016ac <gameLoop+0x2d4>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	4b8e      	ldr	r3, [pc, #568]	@ (80016ac <gameLoop+0x2d4>)
 8001472:	ed93 7a01 	vldr	s14, [r3, #4]
 8001476:	4b8d      	ldr	r3, [pc, #564]	@ (80016ac <gameLoop+0x2d4>)
 8001478:	edd3 6a02 	vldr	s13, [r3, #8]
 800147c:	4b8b      	ldr	r3, [pc, #556]	@ (80016ac <gameLoop+0x2d4>)
 800147e:	ed93 6a03 	vldr	s12, [r3, #12]
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2301      	movs	r3, #1
 800148a:	eef0 1a46 	vmov.f32	s3, s12
 800148e:	eeb0 1a66 	vmov.f32	s2, s13
 8001492:	eef0 0a47 	vmov.f32	s1, s14
 8001496:	eeb0 0a67 	vmov.f32	s0, s15
 800149a:	f001 fccb 	bl	8002e34 <lcd3DPolyline>
			for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 800149e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014a0:	3301      	adds	r3, #1
 80014a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80014a4:	4b82      	ldr	r3, [pc, #520]	@ (80016b0 <gameLoop+0x2d8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014aa:	429a      	cmp	r2, r3
 80014ac:	dbcc      	blt.n	8001448 <gameLoop+0x70>
			}
			for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014b2:	e02f      	b.n	8001514 <gameLoop+0x13c>
				lcd3DPolyline(polygons[i].vertices, polygons[i].numVertices, decodeRgbValue(0, 0, 0), player.x, player.y, player.z, player.rotation, 1, step);
 80014b4:	4a7c      	ldr	r2, [pc, #496]	@ (80016a8 <gameLoop+0x2d0>)
 80014b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b8:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80014bc:	4a7a      	ldr	r2, [pc, #488]	@ (80016a8 <gameLoop+0x2d0>)
 80014be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4413      	add	r3, r2
 80014c4:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	2000      	movs	r0, #0
 80014ce:	f001 f9dd 	bl	800288c <decodeRgbValue>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b75      	ldr	r3, [pc, #468]	@ (80016ac <gameLoop+0x2d4>)
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	4b73      	ldr	r3, [pc, #460]	@ (80016ac <gameLoop+0x2d4>)
 80014de:	ed93 7a01 	vldr	s14, [r3, #4]
 80014e2:	4b72      	ldr	r3, [pc, #456]	@ (80016ac <gameLoop+0x2d4>)
 80014e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80014e8:	4b70      	ldr	r3, [pc, #448]	@ (80016ac <gameLoop+0x2d4>)
 80014ea:	ed93 6a03 	vldr	s12, [r3, #12]
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2301      	movs	r3, #1
 80014f6:	eef0 1a46 	vmov.f32	s3, s12
 80014fa:	eeb0 1a66 	vmov.f32	s2, s13
 80014fe:	eef0 0a47 	vmov.f32	s1, s14
 8001502:	eeb0 0a67 	vmov.f32	s0, s15
 8001506:	4629      	mov	r1, r5
 8001508:	4620      	mov	r0, r4
 800150a:	f001 fc93 	bl	8002e34 <lcd3DPolyline>
			for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 800150e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001510:	3301      	adds	r3, #1
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001514:	4b66      	ldr	r3, [pc, #408]	@ (80016b0 <gameLoop+0x2d8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800151a:	429a      	cmp	r2, r3
 800151c:	dbca      	blt.n	80014b4 <gameLoop+0xdc>
			}
			movePlayer(&player, 50); //moving camera forward
 800151e:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 80016b4 <gameLoop+0x2dc>
 8001522:	4862      	ldr	r0, [pc, #392]	@ (80016ac <gameLoop+0x2d4>)
 8001524:	f7ff fdf8 	bl	8001118 <movePlayer>
		for(int k = 0; k<20; k++) {
 8001528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800152a:	3301      	adds	r3, #1
 800152c:	637b      	str	r3, [r7, #52]	@ 0x34
 800152e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001530:	2b13      	cmp	r3, #19
 8001532:	dd86      	ble.n	8001442 <gameLoop+0x6a>
		}
		for(int k = 0; k<10; k++) {
 8001534:	2300      	movs	r3, #0
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001538:	e075      	b.n	8001626 <gameLoop+0x24e>
			for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
 800153e:	e02d      	b.n	800159c <gameLoop+0x1c4>
				lcd3DPolyline(polygons[i].vertices, polygons[i].numVertices, polygons[i].color, player.x, player.y, player.z, player.rotation, 1, step);
 8001540:	4a59      	ldr	r2, [pc, #356]	@ (80016a8 <gameLoop+0x2d0>)
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001548:	4a57      	ldr	r2, [pc, #348]	@ (80016a8 <gameLoop+0x2d0>)
 800154a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4413      	add	r3, r2
 8001550:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8001554:	4a54      	ldr	r2, [pc, #336]	@ (80016a8 <gameLoop+0x2d0>)
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	4413      	add	r3, r2
 800155c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001560:	b29a      	uxth	r2, r3
 8001562:	4b52      	ldr	r3, [pc, #328]	@ (80016ac <gameLoop+0x2d4>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	4b50      	ldr	r3, [pc, #320]	@ (80016ac <gameLoop+0x2d4>)
 800156a:	ed93 7a01 	vldr	s14, [r3, #4]
 800156e:	4b4f      	ldr	r3, [pc, #316]	@ (80016ac <gameLoop+0x2d4>)
 8001570:	edd3 6a02 	vldr	s13, [r3, #8]
 8001574:	4b4d      	ldr	r3, [pc, #308]	@ (80016ac <gameLoop+0x2d4>)
 8001576:	ed93 6a03 	vldr	s12, [r3, #12]
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2301      	movs	r3, #1
 8001582:	eef0 1a46 	vmov.f32	s3, s12
 8001586:	eeb0 1a66 	vmov.f32	s2, s13
 800158a:	eef0 0a47 	vmov.f32	s1, s14
 800158e:	eeb0 0a67 	vmov.f32	s0, s15
 8001592:	f001 fc4f 	bl	8002e34 <lcd3DPolyline>
			for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	3301      	adds	r3, #1
 800159a:	627b      	str	r3, [r7, #36]	@ 0x24
 800159c:	4b44      	ldr	r3, [pc, #272]	@ (80016b0 <gameLoop+0x2d8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a2:	429a      	cmp	r2, r3
 80015a4:	dbcc      	blt.n	8001540 <gameLoop+0x168>
			}
			for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
 80015aa:	e02f      	b.n	800160c <gameLoop+0x234>
				lcd3DPolyline(polygons[i].vertices, polygons[i].numVertices, decodeRgbValue(0, 0, 0), player.x, player.y, player.z, player.rotation, 1, step);
 80015ac:	4a3e      	ldr	r2, [pc, #248]	@ (80016a8 <gameLoop+0x2d0>)
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80015b4:	4a3c      	ldr	r2, [pc, #240]	@ (80016a8 <gameLoop+0x2d0>)
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4413      	add	r3, r2
 80015bc:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2000      	movs	r0, #0
 80015c6:	f001 f961 	bl	800288c <decodeRgbValue>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b37      	ldr	r3, [pc, #220]	@ (80016ac <gameLoop+0x2d4>)
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	4b35      	ldr	r3, [pc, #212]	@ (80016ac <gameLoop+0x2d4>)
 80015d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80015da:	4b34      	ldr	r3, [pc, #208]	@ (80016ac <gameLoop+0x2d4>)
 80015dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80015e0:	4b32      	ldr	r3, [pc, #200]	@ (80016ac <gameLoop+0x2d4>)
 80015e2:	ed93 6a03 	vldr	s12, [r3, #12]
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2301      	movs	r3, #1
 80015ee:	eef0 1a46 	vmov.f32	s3, s12
 80015f2:	eeb0 1a66 	vmov.f32	s2, s13
 80015f6:	eef0 0a47 	vmov.f32	s1, s14
 80015fa:	eeb0 0a67 	vmov.f32	s0, s15
 80015fe:	4629      	mov	r1, r5
 8001600:	4620      	mov	r0, r4
 8001602:	f001 fc17 	bl	8002e34 <lcd3DPolyline>
			for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 8001606:	6a3b      	ldr	r3, [r7, #32]
 8001608:	3301      	adds	r3, #1
 800160a:	623b      	str	r3, [r7, #32]
 800160c:	4b28      	ldr	r3, [pc, #160]	@ (80016b0 <gameLoop+0x2d8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6a3a      	ldr	r2, [r7, #32]
 8001612:	429a      	cmp	r2, r3
 8001614:	dbca      	blt.n	80015ac <gameLoop+0x1d4>
			}
			rotatePlayer(&player, 3.1416/10);
 8001616:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 80016b8 <gameLoop+0x2e0>
 800161a:	4824      	ldr	r0, [pc, #144]	@ (80016ac <gameLoop+0x2d4>)
 800161c:	f7ff fe6c 	bl	80012f8 <rotatePlayer>
		for(int k = 0; k<10; k++) {
 8001620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001622:	3301      	adds	r3, #1
 8001624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001628:	2b09      	cmp	r3, #9
 800162a:	dd86      	ble.n	800153a <gameLoop+0x162>
		}
		for(int k = 0; k<20; k++) {
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
 8001630:	e081      	b.n	8001736 <gameLoop+0x35e>
			for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
 8001636:	e02d      	b.n	8001694 <gameLoop+0x2bc>
				lcd3DPolyline(polygons[i].vertices, polygons[i].numVertices, polygons[i].color, player.x, player.y, player.z, player.rotation, 1, step);
 8001638:	4a1b      	ldr	r2, [pc, #108]	@ (80016a8 <gameLoop+0x2d0>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001640:	4a19      	ldr	r2, [pc, #100]	@ (80016a8 <gameLoop+0x2d0>)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4413      	add	r3, r2
 8001648:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800164c:	4a16      	ldr	r2, [pc, #88]	@ (80016a8 <gameLoop+0x2d0>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4413      	add	r3, r2
 8001654:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <gameLoop+0x2d4>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <gameLoop+0x2d4>)
 8001662:	ed93 7a01 	vldr	s14, [r3, #4]
 8001666:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <gameLoop+0x2d4>)
 8001668:	edd3 6a02 	vldr	s13, [r3, #8]
 800166c:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <gameLoop+0x2d4>)
 800166e:	ed93 6a03 	vldr	s12, [r3, #12]
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2301      	movs	r3, #1
 800167a:	eef0 1a46 	vmov.f32	s3, s12
 800167e:	eeb0 1a66 	vmov.f32	s2, s13
 8001682:	eef0 0a47 	vmov.f32	s1, s14
 8001686:	eeb0 0a67 	vmov.f32	s0, s15
 800168a:	f001 fbd3 	bl	8002e34 <lcd3DPolyline>
			for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	3301      	adds	r3, #1
 8001692:	61bb      	str	r3, [r7, #24]
 8001694:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <gameLoop+0x2d8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	429a      	cmp	r2, r3
 800169c:	dbcc      	blt.n	8001638 <gameLoop+0x260>
			}
			for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e03b      	b.n	800171c <gameLoop+0x344>
 80016a4:	08006d84 	.word	0x08006d84
 80016a8:	2000009c 	.word	0x2000009c
 80016ac:	200003c0 	.word	0x200003c0
 80016b0:	200003bc 	.word	0x200003bc
 80016b4:	42480000 	.word	0x42480000
 80016b8:	3ea0d994 	.word	0x3ea0d994
				lcd3DPolyline(polygons[i].vertices, polygons[i].numVertices, decodeRgbValue(0, 0, 0), player.x, player.y, player.z, player.rotation, 1, step);
 80016bc:	4a60      	ldr	r2, [pc, #384]	@ (8001840 <gameLoop+0x468>)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80016c4:	4a5e      	ldr	r2, [pc, #376]	@ (8001840 <gameLoop+0x468>)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4413      	add	r3, r2
 80016cc:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	2000      	movs	r0, #0
 80016d6:	f001 f8d9 	bl	800288c <decodeRgbValue>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	4b59      	ldr	r3, [pc, #356]	@ (8001844 <gameLoop+0x46c>)
 80016e0:	edd3 7a00 	vldr	s15, [r3]
 80016e4:	4b57      	ldr	r3, [pc, #348]	@ (8001844 <gameLoop+0x46c>)
 80016e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80016ea:	4b56      	ldr	r3, [pc, #344]	@ (8001844 <gameLoop+0x46c>)
 80016ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80016f0:	4b54      	ldr	r3, [pc, #336]	@ (8001844 <gameLoop+0x46c>)
 80016f2:	ed93 6a03 	vldr	s12, [r3, #12]
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	2301      	movs	r3, #1
 80016fe:	eef0 1a46 	vmov.f32	s3, s12
 8001702:	eeb0 1a66 	vmov.f32	s2, s13
 8001706:	eef0 0a47 	vmov.f32	s1, s14
 800170a:	eeb0 0a67 	vmov.f32	s0, s15
 800170e:	4629      	mov	r1, r5
 8001710:	4620      	mov	r0, r4
 8001712:	f001 fb8f 	bl	8002e34 <lcd3DPolyline>
			for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	4b4a      	ldr	r3, [pc, #296]	@ (8001848 <gameLoop+0x470>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	429a      	cmp	r2, r3
 8001724:	dbca      	blt.n	80016bc <gameLoop+0x2e4>
			}
			movePlayer(&player, 50); //moving camera forward
 8001726:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 800184c <gameLoop+0x474>
 800172a:	4846      	ldr	r0, [pc, #280]	@ (8001844 <gameLoop+0x46c>)
 800172c:	f7ff fcf4 	bl	8001118 <movePlayer>
		for(int k = 0; k<20; k++) {
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	3301      	adds	r3, #1
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	2b13      	cmp	r3, #19
 800173a:	f77f af7a 	ble.w	8001632 <gameLoop+0x25a>
		}
		for(int k = 0; k<10; k++) {
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	e075      	b.n	8001830 <gameLoop+0x458>
			for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	e02d      	b.n	80017a6 <gameLoop+0x3ce>
				lcd3DPolyline(polygons[i].vertices, polygons[i].numVertices, polygons[i].color, player.x, player.y, player.z, player.rotation, 1, step);
 800174a:	4a3d      	ldr	r2, [pc, #244]	@ (8001840 <gameLoop+0x468>)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001752:	4a3b      	ldr	r2, [pc, #236]	@ (8001840 <gameLoop+0x468>)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4413      	add	r3, r2
 800175a:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800175e:	4a38      	ldr	r2, [pc, #224]	@ (8001840 <gameLoop+0x468>)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4413      	add	r3, r2
 8001766:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800176a:	b29a      	uxth	r2, r3
 800176c:	4b35      	ldr	r3, [pc, #212]	@ (8001844 <gameLoop+0x46c>)
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	4b34      	ldr	r3, [pc, #208]	@ (8001844 <gameLoop+0x46c>)
 8001774:	ed93 7a01 	vldr	s14, [r3, #4]
 8001778:	4b32      	ldr	r3, [pc, #200]	@ (8001844 <gameLoop+0x46c>)
 800177a:	edd3 6a02 	vldr	s13, [r3, #8]
 800177e:	4b31      	ldr	r3, [pc, #196]	@ (8001844 <gameLoop+0x46c>)
 8001780:	ed93 6a03 	vldr	s12, [r3, #12]
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	eef0 1a46 	vmov.f32	s3, s12
 8001790:	eeb0 1a66 	vmov.f32	s2, s13
 8001794:	eef0 0a47 	vmov.f32	s1, s14
 8001798:	eeb0 0a67 	vmov.f32	s0, s15
 800179c:	f001 fb4a 	bl	8002e34 <lcd3DPolyline>
			for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3301      	adds	r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b28      	ldr	r3, [pc, #160]	@ (8001848 <gameLoop+0x470>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	dbcc      	blt.n	800174a <gameLoop+0x372>
			}
			for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	e02f      	b.n	8001816 <gameLoop+0x43e>
				lcd3DPolyline(polygons[i].vertices, polygons[i].numVertices, decodeRgbValue(0, 0, 0), player.x, player.y, player.z, player.rotation, 1, step);
 80017b6:	4a22      	ldr	r2, [pc, #136]	@ (8001840 <gameLoop+0x468>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80017be:	4a20      	ldr	r2, [pc, #128]	@ (8001840 <gameLoop+0x468>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	4413      	add	r3, r2
 80017c6:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2000      	movs	r0, #0
 80017d0:	f001 f85c 	bl	800288c <decodeRgbValue>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <gameLoop+0x46c>)
 80017da:	edd3 7a00 	vldr	s15, [r3]
 80017de:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <gameLoop+0x46c>)
 80017e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80017e4:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <gameLoop+0x46c>)
 80017e6:	edd3 6a02 	vldr	s13, [r3, #8]
 80017ea:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <gameLoop+0x46c>)
 80017ec:	ed93 6a03 	vldr	s12, [r3, #12]
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2301      	movs	r3, #1
 80017f8:	eef0 1a46 	vmov.f32	s3, s12
 80017fc:	eeb0 1a66 	vmov.f32	s2, s13
 8001800:	eef0 0a47 	vmov.f32	s1, s14
 8001804:	eeb0 0a67 	vmov.f32	s0, s15
 8001808:	4629      	mov	r1, r5
 800180a:	4620      	mov	r0, r4
 800180c:	f001 fb12 	bl	8002e34 <lcd3DPolyline>
			for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	3301      	adds	r3, #1
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <gameLoop+0x470>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	429a      	cmp	r2, r3
 800181e:	dbca      	blt.n	80017b6 <gameLoop+0x3de>
			}
			rotatePlayer(&player, 3.1416/10);
 8001820:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001850 <gameLoop+0x478>
 8001824:	4807      	ldr	r0, [pc, #28]	@ (8001844 <gameLoop+0x46c>)
 8001826:	f7ff fd67 	bl	80012f8 <rotatePlayer>
		for(int k = 0; k<10; k++) {
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	3301      	adds	r3, #1
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	2b09      	cmp	r3, #9
 8001834:	dd86      	ble.n	8001744 <gameLoop+0x36c>
		}

		LL_mDelay(3000);
 8001836:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800183a:	f002 fed5 	bl	80045e8 <LL_mDelay>
	while(1){
 800183e:	e5fd      	b.n	800143c <gameLoop+0x64>
 8001840:	2000009c 	.word	0x2000009c
 8001844:	200003c0 	.word	0x200003c0
 8001848:	200003bc 	.word	0x200003bc
 800184c:	42480000 	.word	0x42480000
 8001850:	3ea0d994 	.word	0x3ea0d994

08001854 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800185c:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <LL_SYSCFG_EnableFastModePlus+0x20>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4904      	ldr	r1, [pc, #16]	@ (8001874 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4313      	orrs	r3, r2
 8001866:	600b      	str	r3, [r1, #0]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	40010000 	.word	0x40010000

08001878 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800189e:	695a      	ldr	r2, [r3, #20]
 80018a0:	4907      	ldr	r1, [pc, #28]	@ (80018c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80018a8:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018aa:	695a      	ldr	r2, [r3, #20]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4013      	ands	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40021000 	.word	0x40021000

080018c4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ca:	463b      	mov	r3, r7
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
 80018d8:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80018da:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80018de:	f7ff ffd9 	bl	8001894 <LL_AHB1_GRP1_EnableClock>
	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80018e2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80018e6:	f7ff ffd5 	bl	8001894 <LL_AHB1_GRP1_EnableClock>
	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80018ea:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80018ee:	f7ff ffd1 	bl	8001894 <LL_AHB1_GRP1_EnableClock>

	  /**/
	  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4);
 80018f2:	2118      	movs	r1, #24
 80018f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f8:	f7ff ffbe 	bl	8001878 <LL_GPIO_ResetOutputPin>

	  /**/
	  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6);
 80018fc:	2170      	movs	r1, #112	@ 0x70
 80018fe:	4821      	ldr	r0, [pc, #132]	@ (8001984 <MX_GPIO_Init+0xc0>)
 8001900:	f7ff ffba 	bl	8001878 <LL_GPIO_ResetOutputPin>

	  /**/
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 8001904:	2318      	movs	r3, #24
 8001906:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001908:	2301      	movs	r3, #1
 800190a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
	  //GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	463b      	mov	r3, r7
 800191a:	4619      	mov	r1, r3
 800191c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001920:	f002 fd3b 	bl	800439a <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_7;
 8001924:	238b      	movs	r3, #139	@ 0x8b
 8001926:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	463b      	mov	r3, r7
 8001932:	4619      	mov	r1, r3
 8001934:	4813      	ldr	r0, [pc, #76]	@ (8001984 <MX_GPIO_Init+0xc0>)
 8001936:	f002 fd30 	bl	800439a <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 800193a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800193e:	603b      	str	r3, [r7, #0]
	                          |LL_GPIO_PIN_12;
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	463b      	mov	r3, r7
 800194a:	4619      	mov	r1, r3
 800194c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001950:	f002 fd23 	bl	800439a <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6;
 8001954:	2370      	movs	r3, #112	@ 0x70
 8001956:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001958:	2301      	movs	r3, #1
 800195a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
	  //GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001968:	463b      	mov	r3, r7
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	@ (8001984 <MX_GPIO_Init+0xc0>)
 800196e:	f002 fd14 	bl	800439a <LL_GPIO_Init>

	  /**/
	  LL_SYSCFG_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8001972:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001976:	f7ff ff6d 	bl	8001854 <LL_SYSCFG_EnableFastModePlus>

}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	48000400 	.word	0x48000400

08001988 <lcdReset>:

// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	res_reset();
 800198c:	f002 faa2 	bl	8003ed4 <res_reset>
	LL_mDelay(100);
 8001990:	2064      	movs	r0, #100	@ 0x64
 8001992:	f002 fe29 	bl	80045e8 <LL_mDelay>

	res_set();
 8001996:	f002 fa94 	bl	8003ec2 <res_set>
	LL_mDelay(100);
 800199a:	2064      	movs	r0, #100	@ 0x64
 800199c:	f002 fe24 	bl	80045e8 <LL_mDelay>
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address) //urcuje obsah nasledujucich write data/parameter
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
	cd_reset();
 80019ae:	f002 fa77 	bl	8003ea0 <cd_reset>
	cs_reset();
 80019b2:	f002 fa59 	bl	8003e68 <cs_reset>
	readWriteSPI1(address);
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f002 fa21 	bl	8003e00 <readWriteSPI1>
	cs_set();
 80019be:	f002 fa49 	bl	8003e54 <cs_set>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <lcdWriteParameter>:

void lcdWriteParameter(int8_t parameter) //tymto sa zapisuju rozne veci
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
	cd_set();
 80019d4:	f002 fa5a 	bl	8003e8c <cd_set>
	cs_reset();
 80019d8:	f002 fa46 	bl	8003e68 <cs_reset>
	readWriteSPI1(parameter);
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fa0e 	bl	8003e00 <readWriteSPI1>
	cs_set();
 80019e4:	f002 fa36 	bl	8003e54 <cs_set>
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2)  //tymto sa zapisuje farba
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	460a      	mov	r2, r1
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	4613      	mov	r3, r2
 80019fe:	71bb      	strb	r3, [r7, #6]
	cd_set();
 8001a00:	f002 fa44 	bl	8003e8c <cd_set>
	cs_reset();
 8001a04:	f002 fa30 	bl	8003e68 <cs_reset>
	readWriteSPI1(dataByte1); //posielame samostatne dva bajty o farbe
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 f9f8 	bl	8003e00 <readWriteSPI1>
	readWriteSPI1(dataByte2);
 8001a10:	79bb      	ldrb	r3, [r7, #6]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f002 f9f4 	bl	8003e00 <readWriteSPI1>
	cs_set();
 8001a18:	f002 fa1c 	bl	8003e54 <cs_set>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <lcdInitialise>:

void lcdInitialise(uint8_t orientation)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD


	// Hardware reset the LCD
	lcdReset();
 8001a2e:	f7ff ffab 	bl	8001988 <lcdReset>

    lcdWriteCommand(EXIT_SLEEP_MODE);
 8001a32:	2011      	movs	r0, #17
 8001a34:	f7ff ffb6 	bl	80019a4 <lcdWriteCommand>
    LL_mDelay(100); //Delay(10000); // Wait for the screen to wake up
 8001a38:	2064      	movs	r0, #100	@ 0x64
 8001a3a:	f002 fdd5 	bl	80045e8 <LL_mDelay>

    lcdWriteCommand(SET_PIXEL_FORMAT);
 8001a3e:	203a      	movs	r0, #58	@ 0x3a
 8001a40:	f7ff ffb0 	bl	80019a4 <lcdWriteCommand>
    lcdWriteParameter(0x05); // 16 bits per pixel
 8001a44:	2005      	movs	r0, #5
 8001a46:	f7ff ffc0 	bl	80019ca <lcdWriteParameter>

    lcdWriteCommand(SET_GAMMA_CURVE);
 8001a4a:	2026      	movs	r0, #38	@ 0x26
 8001a4c:	f7ff ffaa 	bl	80019a4 <lcdWriteCommand>
    lcdWriteParameter(0x04); // Select gamma curve 3
 8001a50:	2004      	movs	r0, #4
 8001a52:	f7ff ffba 	bl	80019ca <lcdWriteParameter>

    lcdWriteCommand(GAM_R_SEL);
 8001a56:	20f2      	movs	r0, #242	@ 0xf2
 8001a58:	f7ff ffa4 	bl	80019a4 <lcdWriteCommand>
    lcdWriteParameter(0x01); // Gamma adjustment enabled
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f7ff ffb4 	bl	80019ca <lcdWriteParameter>

    lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 8001a62:	20e0      	movs	r0, #224	@ 0xe0
 8001a64:	f7ff ff9e 	bl	80019a4 <lcdWriteCommand>
    lcdWriteParameter(0x3f); // 1st Parameter
 8001a68:	203f      	movs	r0, #63	@ 0x3f
 8001a6a:	f7ff ffae 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x25); // 2nd Parameter
 8001a6e:	2025      	movs	r0, #37	@ 0x25
 8001a70:	f7ff ffab 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x1c); // 3rd Parameter
 8001a74:	201c      	movs	r0, #28
 8001a76:	f7ff ffa8 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x1e); // 4th Parameter
 8001a7a:	201e      	movs	r0, #30
 8001a7c:	f7ff ffa5 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x20); // 5th Parameter
 8001a80:	2020      	movs	r0, #32
 8001a82:	f7ff ffa2 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x12); // 6th Parameter
 8001a86:	2012      	movs	r0, #18
 8001a88:	f7ff ff9f 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 7th Parameter
 8001a8c:	202a      	movs	r0, #42	@ 0x2a
 8001a8e:	f7ff ff9c 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x90); // 8th Parameter
 8001a92:	f06f 006f 	mvn.w	r0, #111	@ 0x6f
 8001a96:	f7ff ff98 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x24); // 9th Parameter
 8001a9a:	2024      	movs	r0, #36	@ 0x24
 8001a9c:	f7ff ff95 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x11); // 10th Parameter
 8001aa0:	2011      	movs	r0, #17
 8001aa2:	f7ff ff92 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x00); // 11th Parameter
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff ff8f 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x00); // 12th Parameter
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff ff8c 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x00); // 13th Parameter
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f7ff ff89 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x00); // 14th Parameter
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f7ff ff86 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x00); // 15th Parameter
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff ff83 	bl	80019ca <lcdWriteParameter>

    lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 8001ac4:	20e1      	movs	r0, #225	@ 0xe1
 8001ac6:	f7ff ff6d 	bl	80019a4 <lcdWriteCommand>
    lcdWriteParameter(0x20); // 1st Parameter
 8001aca:	2020      	movs	r0, #32
 8001acc:	f7ff ff7d 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x20); // 2nd Parameter
 8001ad0:	2020      	movs	r0, #32
 8001ad2:	f7ff ff7a 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x20); // 3rd Parameter
 8001ad6:	2020      	movs	r0, #32
 8001ad8:	f7ff ff77 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x20); // 4th Parameter
 8001adc:	2020      	movs	r0, #32
 8001ade:	f7ff ff74 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x05); // 5th Parameter
 8001ae2:	2005      	movs	r0, #5
 8001ae4:	f7ff ff71 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x00); // 6th Parameter
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff ff6e 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x15); // 7th Parameter
 8001aee:	2015      	movs	r0, #21
 8001af0:	f7ff ff6b 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0xa7); // 8th Parameter
 8001af4:	f06f 0058 	mvn.w	r0, #88	@ 0x58
 8001af8:	f7ff ff67 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x3d); // 9th Parameter
 8001afc:	203d      	movs	r0, #61	@ 0x3d
 8001afe:	f7ff ff64 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x18); // 10th Parameter
 8001b02:	2018      	movs	r0, #24
 8001b04:	f7ff ff61 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x25); // 11th Parameter
 8001b08:	2025      	movs	r0, #37	@ 0x25
 8001b0a:	f7ff ff5e 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 12th Parameter
 8001b0e:	202a      	movs	r0, #42	@ 0x2a
 8001b10:	f7ff ff5b 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 13th Parameter
 8001b14:	202b      	movs	r0, #43	@ 0x2b
 8001b16:	f7ff ff58 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 14th Parameter
 8001b1a:	202b      	movs	r0, #43	@ 0x2b
 8001b1c:	f7ff ff55 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x3a); // 15th Parameter
 8001b20:	203a      	movs	r0, #58	@ 0x3a
 8001b22:	f7ff ff52 	bl	80019ca <lcdWriteParameter>

    lcdWriteCommand(FRAME_RATE_CONTROL1);
 8001b26:	20b1      	movs	r0, #177	@ 0xb1
 8001b28:	f7ff ff3c 	bl	80019a4 <lcdWriteCommand>
    lcdWriteParameter(0x08); // DIVA = 8
 8001b2c:	2008      	movs	r0, #8
 8001b2e:	f7ff ff4c 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x08); // VPA = 8
 8001b32:	2008      	movs	r0, #8
 8001b34:	f7ff ff49 	bl	80019ca <lcdWriteParameter>

    lcdWriteCommand(DISPLAY_INVERSION);
 8001b38:	20b4      	movs	r0, #180	@ 0xb4
 8001b3a:	f7ff ff33 	bl	80019a4 <lcdWriteCommand>
    lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8001b3e:	2007      	movs	r0, #7
 8001b40:	f7ff ff43 	bl	80019ca <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL1);
 8001b44:	20c0      	movs	r0, #192	@ 0xc0
 8001b46:	f7ff ff2d 	bl	80019a4 <lcdWriteCommand>
    lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 8001b4a:	200a      	movs	r0, #10
 8001b4c:	f7ff ff3d 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 8001b50:	2002      	movs	r0, #2
 8001b52:	f7ff ff3a 	bl	80019ca <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL2);
 8001b56:	20c1      	movs	r0, #193	@ 0xc1
 8001b58:	f7ff ff24 	bl	80019a4 <lcdWriteCommand>
    lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 8001b5c:	2002      	movs	r0, #2
 8001b5e:	f7ff ff34 	bl	80019ca <lcdWriteParameter>

    lcdWriteCommand(VCOM_CONTROL1);
 8001b62:	20c5      	movs	r0, #197	@ 0xc5
 8001b64:	f7ff ff1e 	bl	80019a4 <lcdWriteCommand>
    lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 8001b68:	2050      	movs	r0, #80	@ 0x50
 8001b6a:	f7ff ff2e 	bl	80019ca <lcdWriteParameter>
    lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 8001b6e:	205b      	movs	r0, #91	@ 0x5b
 8001b70:	f7ff ff2b 	bl	80019ca <lcdWriteParameter>

    lcdWriteCommand(VCOM_OFFSET_CONTROL);
 8001b74:	20c7      	movs	r0, #199	@ 0xc7
 8001b76:	f7ff ff15 	bl	80019a4 <lcdWriteCommand>
    lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 8001b7a:	2040      	movs	r0, #64	@ 0x40
 8001b7c:	f7ff ff25 	bl	80019ca <lcdWriteParameter>

    // here we set orientation for every pixel (first we define addresses)
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 8001b80:	202a      	movs	r0, #42	@ 0x2a
 8001b82:	f7ff ff0f 	bl	80019a4 <lcdWriteCommand>
	lcdWriteParameter(0x00); // X high start byte
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7ff ff1f 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0x00); // X low start byte
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f7ff ff1c 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0x01); // X high end byte
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7ff ff19 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0x3F); // X low end byte - 319
 8001b98:	203f      	movs	r0, #63	@ 0x3f
 8001b9a:	f7ff ff16 	bl	80019ca <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS);
 8001b9e:	202b      	movs	r0, #43	@ 0x2b
 8001ba0:	f7ff ff00 	bl	80019a4 <lcdWriteCommand>
	lcdWriteParameter(0x00); // Y high start byte
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	f7ff ff10 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0x00); // Y low start byte
 8001baa:	2000      	movs	r0, #0
 8001bac:	f7ff ff0d 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0x00); // Y high end byte
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f7ff ff0a 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0xEF); // Y low end byte (239, 0x00EF in hex)
 8001bb6:	f06f 0010 	mvn.w	r0, #16
 8001bba:	f7ff ff06 	bl	80019ca <lcdWriteParameter>

	// Select display orientation
    lcdWriteCommand(SET_ADDRESS_MODE);
 8001bbe:	2036      	movs	r0, #54	@ 0x36
 8001bc0:	f7ff fef0 	bl	80019a4 <lcdWriteCommand>
	lcdWriteParameter(orientation);
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fefe 	bl	80019ca <lcdWriteParameter>

	// Set the display to on
    lcdWriteCommand(SET_DISPLAY_ON);
 8001bce:	2029      	movs	r0, #41	@ 0x29
 8001bd0:	f7ff fee8 	bl	80019a4 <lcdWriteCommand>
    lcdWriteCommand(WRITE_MEMORY_START);
 8001bd4:	202c      	movs	r0, #44	@ 0x2c
 8001bd6:	f7ff fee5 	bl	80019a4 <lcdWriteCommand>
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <lcdClearDisplay>:

// LCD graphics functions -----------------------------------------------------------------------------------

void lcdClearDisplay(uint16_t colour)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	80fb      	strh	r3, [r7, #6]
	uint32_t pixel;

	// Set the column address to 0-319
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 8001bee:	202a      	movs	r0, #42	@ 0x2a
 8001bf0:	f7ff fed8 	bl	80019a4 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f7ff fee8 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f7ff fee5 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0x01);
 8001c00:	2001      	movs	r0, #1
 8001c02:	f7ff fee2 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0x3F);
 8001c06:	203f      	movs	r0, #63	@ 0x3f
 8001c08:	f7ff fedf 	bl	80019ca <lcdWriteParameter>

	// Set the page address to 0-239
	lcdWriteCommand(SET_PAGE_ADDRESS);
 8001c0c:	202b      	movs	r0, #43	@ 0x2b
 8001c0e:	f7ff fec9 	bl	80019a4 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001c12:	2000      	movs	r0, #0
 8001c14:	f7ff fed9 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7ff fed6 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f7ff fed3 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0xEF);
 8001c24:	f06f 0010 	mvn.w	r0, #16
 8001c28:	f7ff fecf 	bl	80019ca <lcdWriteParameter>

	// Plot the pixels
	lcdWriteCommand(WRITE_MEMORY_START);
 8001c2c:	202c      	movs	r0, #44	@ 0x2c
 8001c2e:	f7ff feb9 	bl	80019a4 <lcdWriteCommand>
	for(pixel = 0; pixel < 76799; pixel++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	e00c      	b.n	8001c52 <lcdClearDisplay+0x6e>
	{
		lcdWriteData(colour >> 8, colour);
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	88fa      	ldrh	r2, [r7, #6]
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	4611      	mov	r1, r2
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fed2 	bl	80019f0 <lcdWriteData>
	for(pixel = 0; pixel < 76799; pixel++)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4a03      	ldr	r2, [pc, #12]	@ (8001c64 <lcdClearDisplay+0x80>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d9ee      	bls.n	8001c38 <lcdClearDisplay+0x54>
	}

}
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	00012bfe 	.word	0x00012bfe

08001c68 <lcdPlot>:

// changing a single pixel on display
void lcdPlot(int16_t x, int16_t y, uint16_t colour)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]
 8001c72:	460b      	mov	r3, r1
 8001c74:	80bb      	strh	r3, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	807b      	strh	r3, [r7, #2]
	// Horizontal Address Start Position
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 8001c7a:	202a      	movs	r0, #42	@ 0x2a
 8001c7c:	f7ff fe92 	bl	80019a4 <lcdWriteCommand>
	lcdWriteParameter(x >> 8);
 8001c80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c84:	121b      	asrs	r3, r3, #8
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fe9d 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(x);
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	b25b      	sxtb	r3, r3
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fe98 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0x01);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f7ff fe95 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0x3F);//319
 8001ca0:	203f      	movs	r0, #63	@ 0x3f
 8001ca2:	f7ff fe92 	bl	80019ca <lcdWriteParameter>

	// Vertical Address end Position
	lcdWriteCommand(SET_PAGE_ADDRESS);
 8001ca6:	202b      	movs	r0, #43	@ 0x2b
 8001ca8:	f7ff fe7c 	bl	80019a4 <lcdWriteCommand>
	lcdWriteParameter(y >> 8);
 8001cac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cb0:	121b      	asrs	r3, r3, #8
 8001cb2:	b21b      	sxth	r3, r3
 8001cb4:	b25b      	sxtb	r3, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fe87 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(y);
 8001cbc:	88bb      	ldrh	r3, [r7, #4]
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff fe82 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7ff fe7f 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0xEF);//239
 8001ccc:	f06f 0010 	mvn.w	r0, #16
 8001cd0:	f7ff fe7b 	bl	80019ca <lcdWriteParameter>

	// Plot the point
	lcdWriteCommand(WRITE_MEMORY_START);
 8001cd4:	202c      	movs	r0, #44	@ 0x2c
 8001cd6:	f7ff fe65 	bl	80019a4 <lcdWriteCommand>
	lcdWriteData(colour >> 8, colour);
 8001cda:	887b      	ldrh	r3, [r7, #2]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fe81 	bl	80019f0 <lcdWriteData>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <lcdLine>:

void lcdLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8001cf6:	b590      	push	{r4, r7, lr}
 8001cf8:	b08b      	sub	sp, #44	@ 0x2c
 8001cfa:	af02      	add	r7, sp, #8
 8001cfc:	4604      	mov	r4, r0
 8001cfe:	4608      	mov	r0, r1
 8001d00:	4611      	mov	r1, r2
 8001d02:	461a      	mov	r2, r3
 8001d04:	4623      	mov	r3, r4
 8001d06:	80fb      	strh	r3, [r7, #6]
 8001d08:	4603      	mov	r3, r0
 8001d0a:	80bb      	strh	r3, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]
 8001d10:	4613      	mov	r3, r2
 8001d12:	803b      	strh	r3, [r7, #0]
	if(x0 == x1){ //vodorovna ciara optimalizovane
 8001d14:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d10d      	bne.n	8001d3c <lcdLine+0x46>
		lcdFilledRectangle(x0, y0, x1, y1, colour);
 8001d20:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001d24:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001d28:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001d2c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d30:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	4623      	mov	r3, r4
 8001d36:	f000 faf1 	bl	800231c <lcdFilledRectangle>
		return;
 8001d3a:	e10a      	b.n	8001f52 <lcdLine+0x25c>
	}
	else if(y0 == y1){ //zvisla ciara optimalizovane
 8001d3c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001d40:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d10d      	bne.n	8001d64 <lcdLine+0x6e>
		lcdFilledRectangle(x0, y0, x1, y1, colour);
 8001d48:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001d4c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001d50:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001d54:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d58:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	4623      	mov	r3, r4
 8001d5e:	f000 fadd 	bl	800231c <lcdFilledRectangle>
		return;
 8001d62:	e0f6      	b.n	8001f52 <lcdLine+0x25c>
	}

	int16_t dy = y1 - y0;
 8001d64:	883a      	ldrh	r2, [r7, #0]
 8001d66:	88bb      	ldrh	r3, [r7, #4]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	83fb      	strh	r3, [r7, #30]
	int16_t dx = x1 - x0;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	83bb      	strh	r3, [r7, #28]
	int16_t stepx, stepy;

	if (dy < 0) //derivacie musia byt kladne
 8001d78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	da07      	bge.n	8001d90 <lcdLine+0x9a>
	{
		dy = -dy; stepy = -1;
 8001d80:	8bfb      	ldrh	r3, [r7, #30]
 8001d82:	425b      	negs	r3, r3
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	83fb      	strh	r3, [r7, #30]
 8001d88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d8c:	833b      	strh	r3, [r7, #24]
 8001d8e:	e001      	b.n	8001d94 <lcdLine+0x9e>
	}
	else stepy = 1;
 8001d90:	2301      	movs	r3, #1
 8001d92:	833b      	strh	r3, [r7, #24]

	if (dx < 0) //derivacie musia byt kladne
 8001d94:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	da07      	bge.n	8001dac <lcdLine+0xb6>
	{
		dx = -dx; stepx = -1;
 8001d9c:	8bbb      	ldrh	r3, [r7, #28]
 8001d9e:	425b      	negs	r3, r3
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	83bb      	strh	r3, [r7, #28]
 8001da4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001da8:	837b      	strh	r3, [r7, #26]
 8001daa:	e001      	b.n	8001db0 <lcdLine+0xba>
	}
	else stepx = 1;
 8001dac:	2301      	movs	r3, #1
 8001dae:	837b      	strh	r3, [r7, #26]

	dy <<= 1;	//dy*2
 8001db0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	83fb      	strh	r3, [r7, #30]
	dx <<= 1;	//dx*2
 8001db8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	83bb      	strh	r3, [r7, #28]

	lcdPlot(x0, y0, colour);	//zaciatocny pixel
 8001dc0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001dc2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ff4c 	bl	8001c68 <lcdPlot>
	uint16_t partialLineStartCoord = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	82fb      	strh	r3, [r7, #22]

	if (dx > dy) {  //menej nez 45 stupnov
 8001dd4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001dd8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	dd59      	ble.n	8001e94 <lcdLine+0x19e>
		partialLineStartCoord = x0-1;
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	82fb      	strh	r3, [r7, #22]
		int fraction = dy - (dx >> 1);	//dy-(dx/2)
 8001de6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001dea:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001dee:	1052      	asrs	r2, r2, #1
 8001df0:	b212      	sxth	r2, r2
 8001df2:	1a9b      	subs	r3, r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
		while (x0 != x1)
 8001df6:	e02f      	b.n	8001e58 <lcdLine+0x162>
		{

			if (fraction >= 0) //when we move up 1 pixel on Y axis
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db22      	blt.n	8001e44 <lcdLine+0x14e>
			{
				if((y0>0)&&(y0<255)) {
 8001dfe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	dd12      	ble.n	8001e2c <lcdLine+0x136>
 8001e06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e0a:	2bfe      	cmp	r3, #254	@ 0xfe
 8001e0c:	dc0e      	bgt.n	8001e2c <lcdLine+0x136>
					lcdFilledRectangle(partialLineStartCoord+1, y0, x0, y0, colour);
 8001e0e:	8afb      	ldrh	r3, [r7, #22]
 8001e10:	3301      	adds	r3, #1
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	b218      	sxth	r0, r3
 8001e16:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001e1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e1e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e22:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	4623      	mov	r3, r4
 8001e28:	f000 fa78 	bl	800231c <lcdFilledRectangle>
				}
				partialLineStartCoord = x0;
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	82fb      	strh	r3, [r7, #22]
				y0 += stepy;
 8001e30:	88ba      	ldrh	r2, [r7, #4]
 8001e32:	8b3b      	ldrh	r3, [r7, #24]
 8001e34:	4413      	add	r3, r2
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	80bb      	strh	r3, [r7, #4]
				fraction -= dx;
 8001e3a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	613b      	str	r3, [r7, #16]
			}
			x0 += stepx;
 8001e44:	88fa      	ldrh	r2, [r7, #6]
 8001e46:	8b7b      	ldrh	r3, [r7, #26]
 8001e48:	4413      	add	r3, r2
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	80fb      	strh	r3, [r7, #6]
			fraction += dy;
 8001e4e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4413      	add	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
		while (x0 != x1)
 8001e58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d1c9      	bne.n	8001df8 <lcdLine+0x102>
		}
		if((y0>0)&&(y0<255)) {
 8001e64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	dd72      	ble.n	8001f52 <lcdLine+0x25c>
 8001e6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e70:	2bfe      	cmp	r3, #254	@ 0xfe
 8001e72:	dc6e      	bgt.n	8001f52 <lcdLine+0x25c>
			lcdFilledRectangle(partialLineStartCoord+1, y0, x0, y0, colour);
 8001e74:	8afb      	ldrh	r3, [r7, #22]
 8001e76:	3301      	adds	r3, #1
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	b218      	sxth	r0, r3
 8001e7c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001e80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e84:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e88:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	4623      	mov	r3, r4
 8001e8e:	f000 fa45 	bl	800231c <lcdFilledRectangle>
 8001e92:	e05e      	b.n	8001f52 <lcdLine+0x25c>
		}
	}
	else			//viac nez 45 stupnov
	{
		partialLineStartCoord = y0-1;
 8001e94:	88bb      	ldrh	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	82fb      	strh	r3, [r7, #22]
		int fraction = dx - (dy >> 1);
 8001e9a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e9e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001ea2:	1052      	asrs	r2, r2, #1
 8001ea4:	b212      	sxth	r2, r2
 8001ea6:	1a9b      	subs	r3, r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]
		while (y0 != y1)
 8001eaa:	e032      	b.n	8001f12 <lcdLine+0x21c>
		{
			if (fraction >= 0)	//when we move up 1 pixel on X axis
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db25      	blt.n	8001efe <lcdLine+0x208>
			{
				if((y0>0)&&(y0<255)&&(partialLineStartCoord+1>0)&&(partialLineStartCoord+1<255)) {
 8001eb2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	dd15      	ble.n	8001ee6 <lcdLine+0x1f0>
 8001eba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ebe:	2bfe      	cmp	r3, #254	@ 0xfe
 8001ec0:	dc11      	bgt.n	8001ee6 <lcdLine+0x1f0>
 8001ec2:	8afb      	ldrh	r3, [r7, #22]
 8001ec4:	2bfd      	cmp	r3, #253	@ 0xfd
 8001ec6:	d80e      	bhi.n	8001ee6 <lcdLine+0x1f0>
					lcdFilledRectangle(x0, partialLineStartCoord+1, x0, y0, colour);
 8001ec8:	8afb      	ldrh	r3, [r7, #22]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	b219      	sxth	r1, r3
 8001ed0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001ed4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ed8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001edc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	4623      	mov	r3, r4
 8001ee2:	f000 fa1b 	bl	800231c <lcdFilledRectangle>
				}
				partialLineStartCoord = y0;
 8001ee6:	88bb      	ldrh	r3, [r7, #4]
 8001ee8:	82fb      	strh	r3, [r7, #22]
				x0 += stepx;
 8001eea:	88fa      	ldrh	r2, [r7, #6]
 8001eec:	8b7b      	ldrh	r3, [r7, #26]
 8001eee:	4413      	add	r3, r2
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 8001ef4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	60fb      	str	r3, [r7, #12]
			}
			y0 += stepy;
 8001efe:	88ba      	ldrh	r2, [r7, #4]
 8001f00:	8b3b      	ldrh	r3, [r7, #24]
 8001f02:	4413      	add	r3, r2
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	80bb      	strh	r3, [r7, #4]
			fraction += dx;
 8001f08:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
		while (y0 != y1)
 8001f12:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001f16:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d1c6      	bne.n	8001eac <lcdLine+0x1b6>
		}
		if((y0>0)&&(y0<255)&&(partialLineStartCoord+1>0)&&(partialLineStartCoord+1<255)) {
 8001f1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	dd15      	ble.n	8001f52 <lcdLine+0x25c>
 8001f26:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f2a:	2bfe      	cmp	r3, #254	@ 0xfe
 8001f2c:	dc11      	bgt.n	8001f52 <lcdLine+0x25c>
 8001f2e:	8afb      	ldrh	r3, [r7, #22]
 8001f30:	2bfd      	cmp	r3, #253	@ 0xfd
 8001f32:	d80e      	bhi.n	8001f52 <lcdLine+0x25c>
			lcdFilledRectangle(x0, partialLineStartCoord+1, x0, y0, colour);
 8001f34:	8afb      	ldrh	r3, [r7, #22]
 8001f36:	3301      	adds	r3, #1
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	b219      	sxth	r1, r3
 8001f3c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001f40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f44:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001f48:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	f000 f9e5 	bl	800231c <lcdFilledRectangle>
		}
	}
}
 8001f52:	3724      	adds	r7, #36	@ 0x24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd90      	pop	{r4, r7, pc}

08001f58 <lcdDottedLine>:

void lcdDottedLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour, uint16_t step)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b089      	sub	sp, #36	@ 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4604      	mov	r4, r0
 8001f60:	4608      	mov	r0, r1
 8001f62:	4611      	mov	r1, r2
 8001f64:	461a      	mov	r2, r3
 8001f66:	4623      	mov	r3, r4
 8001f68:	80fb      	strh	r3, [r7, #6]
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	80bb      	strh	r3, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	807b      	strh	r3, [r7, #2]
 8001f72:	4613      	mov	r3, r2
 8001f74:	803b      	strh	r3, [r7, #0]
	int16_t dy = y1 - y0;
 8001f76:	883a      	ldrh	r2, [r7, #0]
 8001f78:	88bb      	ldrh	r3, [r7, #4]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	83fb      	strh	r3, [r7, #30]
	int16_t dx = x1 - x0;
 8001f80:	887a      	ldrh	r2, [r7, #2]
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	83bb      	strh	r3, [r7, #28]
	int16_t stepx, stepy;
	int16_t delta = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	82fb      	strh	r3, [r7, #22]
	int16_t astep = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	817b      	strh	r3, [r7, #10]
	int16_t stp = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	82bb      	strh	r3, [r7, #20]

	if (dy < 0)
 8001f96:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da07      	bge.n	8001fae <lcdDottedLine+0x56>
	{
		dy = -dy; stepy = -1;
 8001f9e:	8bfb      	ldrh	r3, [r7, #30]
 8001fa0:	425b      	negs	r3, r3
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	83fb      	strh	r3, [r7, #30]
 8001fa6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001faa:	833b      	strh	r3, [r7, #24]
 8001fac:	e001      	b.n	8001fb2 <lcdDottedLine+0x5a>
	}
	else stepy = 1;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	833b      	strh	r3, [r7, #24]

 	if (dx < 0)
 8001fb2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	da07      	bge.n	8001fca <lcdDottedLine+0x72>
	{
		dx = -dx; stepx = -1;
 8001fba:	8bbb      	ldrh	r3, [r7, #28]
 8001fbc:	425b      	negs	r3, r3
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	83bb      	strh	r3, [r7, #28]
 8001fc2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fc6:	837b      	strh	r3, [r7, #26]
 8001fc8:	e001      	b.n	8001fce <lcdDottedLine+0x76>
	}
	else stepx = 1;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	837b      	strh	r3, [r7, #26]

	dy <<= 1;
 8001fce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	83fb      	strh	r3, [r7, #30]
	dx <<= 1;
 8001fd6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	83bb      	strh	r3, [r7, #28]

	if (dx > dy) {
 8001fde:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001fe2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	dd59      	ble.n	800209e <lcdDottedLine+0x146>
		int fraction = dy - (dx >> 1);
 8001fea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001fee:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001ff2:	1052      	asrs	r2, r2, #1
 8001ff4:	b212      	sxth	r2, r2
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
		delta = abs(x0 - x1);
 8001ffa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ffe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	bfb8      	it	lt
 8002008:	425b      	neglt	r3, r3
 800200a:	82fb      	strh	r3, [r7, #22]
		astep = abs(stepx);
 800200c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002010:	2b00      	cmp	r3, #0
 8002012:	bfb8      	it	lt
 8002014:	425b      	neglt	r3, r3
 8002016:	b29b      	uxth	r3, r3
 8002018:	817b      	strh	r3, [r7, #10]
		while (delta > 0)
 800201a:	e03b      	b.n	8002094 <lcdDottedLine+0x13c>
		{
			if (fraction >= 0)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	db09      	blt.n	8002036 <lcdDottedLine+0xde>
			{
				y0 += stepy;
 8002022:	88ba      	ldrh	r2, [r7, #4]
 8002024:	8b3b      	ldrh	r3, [r7, #24]
 8002026:	4413      	add	r3, r2
 8002028:	b29b      	uxth	r3, r3
 800202a:	80bb      	strh	r3, [r7, #4]
				fraction -= dx;
 800202c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	613b      	str	r3, [r7, #16]
			}
			if((stp%step==0)&&(y0>0)&&(y0<255)) {
 8002036:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800203a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800203c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002040:	fb01 f202 	mul.w	r2, r1, r2
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10f      	bne.n	800206a <lcdDottedLine+0x112>
 800204a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	dd0b      	ble.n	800206a <lcdDottedLine+0x112>
 8002052:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002056:	2bfe      	cmp	r3, #254	@ 0xfe
 8002058:	dc07      	bgt.n	800206a <lcdDottedLine+0x112>
				lcdPlot(x0, y0, colour);
 800205a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800205c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fdff 	bl	8001c68 <lcdPlot>
			}
   			x0 += stepx;
 800206a:	88fa      	ldrh	r2, [r7, #6]
 800206c:	8b7b      	ldrh	r3, [r7, #26]
 800206e:	4413      	add	r3, r2
 8002070:	b29b      	uxth	r3, r3
 8002072:	80fb      	strh	r3, [r7, #6]
   			delta = delta - astep;
 8002074:	8afa      	ldrh	r2, [r7, #22]
 8002076:	897b      	ldrh	r3, [r7, #10]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	b29b      	uxth	r3, r3
 800207c:	82fb      	strh	r3, [r7, #22]
   			fraction += dy;
 800207e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4413      	add	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
   			stp++;
 8002088:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800208c:	b29b      	uxth	r3, r3
 800208e:	3301      	adds	r3, #1
 8002090:	b29b      	uxth	r3, r3
 8002092:	82bb      	strh	r3, [r7, #20]
		while (delta > 0)
 8002094:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002098:	2b00      	cmp	r3, #0
 800209a:	dcbf      	bgt.n	800201c <lcdDottedLine+0xc4>
			delta = delta - astep;
			fraction += dx;
			stp++;
		}
	}
}
 800209c:	e058      	b.n	8002150 <lcdDottedLine+0x1f8>
		int fraction = dx - (dy >> 1);
 800209e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020a2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80020a6:	1052      	asrs	r2, r2, #1
 80020a8:	b212      	sxth	r2, r2
 80020aa:	1a9b      	subs	r3, r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
		delta = abs(y0 - y1);
 80020ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80020b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bfb8      	it	lt
 80020bc:	425b      	neglt	r3, r3
 80020be:	82fb      	strh	r3, [r7, #22]
		astep = abs(stepy);
 80020c0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bfb8      	it	lt
 80020c8:	425b      	neglt	r3, r3
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	817b      	strh	r3, [r7, #10]
		while (delta > 0)
 80020ce:	e03b      	b.n	8002148 <lcdDottedLine+0x1f0>
			if (fraction >= 0)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	db09      	blt.n	80020ea <lcdDottedLine+0x192>
				x0 += stepx;
 80020d6:	88fa      	ldrh	r2, [r7, #6]
 80020d8:	8b7b      	ldrh	r3, [r7, #26]
 80020da:	4413      	add	r3, r2
 80020dc:	b29b      	uxth	r3, r3
 80020de:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 80020e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	60fb      	str	r3, [r7, #12]
			if((stp%step==0)&&(y0>0)&&(y0<255)) {
 80020ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020ee:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80020f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80020f4:	fb01 f202 	mul.w	r2, r1, r2
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10f      	bne.n	800211e <lcdDottedLine+0x1c6>
 80020fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	dd0b      	ble.n	800211e <lcdDottedLine+0x1c6>
 8002106:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800210a:	2bfe      	cmp	r3, #254	@ 0xfe
 800210c:	dc07      	bgt.n	800211e <lcdDottedLine+0x1c6>
				lcdPlot(x0, y0, colour);
 800210e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002110:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fda5 	bl	8001c68 <lcdPlot>
			y0 += stepy;
 800211e:	88ba      	ldrh	r2, [r7, #4]
 8002120:	8b3b      	ldrh	r3, [r7, #24]
 8002122:	4413      	add	r3, r2
 8002124:	b29b      	uxth	r3, r3
 8002126:	80bb      	strh	r3, [r7, #4]
			delta = delta - astep;
 8002128:	8afa      	ldrh	r2, [r7, #22]
 800212a:	897b      	ldrh	r3, [r7, #10]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	b29b      	uxth	r3, r3
 8002130:	82fb      	strh	r3, [r7, #22]
			fraction += dx;
 8002132:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	4413      	add	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]
			stp++;
 800213c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002140:	b29b      	uxth	r3, r3
 8002142:	3301      	adds	r3, #1
 8002144:	b29b      	uxth	r3, r3
 8002146:	82bb      	strh	r3, [r7, #20]
		while (delta > 0)
 8002148:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800214c:	2b00      	cmp	r3, #0
 800214e:	dcbf      	bgt.n	80020d0 <lcdDottedLine+0x178>
}
 8002150:	bf00      	nop
 8002152:	3724      	adds	r7, #36	@ 0x24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd90      	pop	{r4, r7, pc}

08002158 <lcdPolyline>:

void lcdPolyline(int16_t *points, int16_t lines, uint16_t colour)
{
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af02      	add	r7, sp, #8
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	807b      	strh	r3, [r7, #2]
 8002164:	4613      	mov	r3, r2
 8002166:	803b      	strh	r3, [r7, #0]
	for(int16_t i = 0; i<lines-1; i++){
 8002168:	2300      	movs	r3, #0
 800216a:	82fb      	strh	r3, [r7, #22]
 800216c:	e032      	b.n	80021d4 <lcdPolyline+0x7c>
		int16_t x0 = points[2*i];
 800216e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	4413      	add	r3, r2
 8002178:	881b      	ldrh	r3, [r3, #0]
 800217a:	82bb      	strh	r3, [r7, #20]
		int16_t y0 = points[2*i + 1];
 800217c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	4413      	add	r3, r2
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	827b      	strh	r3, [r7, #18]
		int16_t x1 = points[2*(i+1)];
 800218c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002190:	3301      	adds	r3, #1
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	823b      	strh	r3, [r7, #16]
		int16_t y1 = points[2*(i+1) + 1];
 800219c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021a0:	3301      	adds	r3, #1
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	3302      	adds	r3, #2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	81fb      	strh	r3, [r7, #14]
		lcdLine(x0, y0, x1, y1, colour);
 80021ae:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80021b2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80021b6:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80021ba:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80021be:	883b      	ldrh	r3, [r7, #0]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	4623      	mov	r3, r4
 80021c4:	f7ff fd97 	bl	8001cf6 <lcdLine>
	for(int16_t i = 0; i<lines-1; i++){
 80021c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	82fb      	strh	r3, [r7, #22]
 80021d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80021d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021dc:	3b01      	subs	r3, #1
 80021de:	429a      	cmp	r2, r3
 80021e0:	dbc5      	blt.n	800216e <lcdPolyline+0x16>
	}
}
 80021e2:	bf00      	nop
 80021e4:	bf00      	nop
 80021e6:	371c      	adds	r7, #28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd90      	pop	{r4, r7, pc}

080021ec <lcdDottedPolyline>:
void lcdDottedPolyline(int16_t *points, int16_t lines, uint16_t colour, uint16_t step)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b08b      	sub	sp, #44	@ 0x2c
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	4608      	mov	r0, r1
 80021f6:	4611      	mov	r1, r2
 80021f8:	461a      	mov	r2, r3
 80021fa:	4603      	mov	r3, r0
 80021fc:	817b      	strh	r3, [r7, #10]
 80021fe:	460b      	mov	r3, r1
 8002200:	813b      	strh	r3, [r7, #8]
 8002202:	4613      	mov	r3, r2
 8002204:	80fb      	strh	r3, [r7, #6]
	for(int16_t i = 0; i<lines-1; i++){
 8002206:	2300      	movs	r3, #0
 8002208:	83fb      	strh	r3, [r7, #30]
 800220a:	e034      	b.n	8002276 <lcdDottedPolyline+0x8a>
		int16_t x0 = points[2*i];
 800220c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4413      	add	r3, r2
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	83bb      	strh	r3, [r7, #28]
		int16_t y0 = points[2*i + 1];
 800221a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4413      	add	r3, r2
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	837b      	strh	r3, [r7, #26]
		int16_t x1 = points[2*(i+1)];
 800222a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800222e:	3301      	adds	r3, #1
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4413      	add	r3, r2
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	833b      	strh	r3, [r7, #24]
		int16_t y1 = points[2*(i+1) + 1];
 800223a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800223e:	3301      	adds	r3, #1
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	3302      	adds	r3, #2
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4413      	add	r3, r2
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	82fb      	strh	r3, [r7, #22]
		lcdDottedLine(x0, y0, x1, y1, colour, step);
 800224c:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8002250:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002254:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8002258:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 800225c:	88fb      	ldrh	r3, [r7, #6]
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	893b      	ldrh	r3, [r7, #8]
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	4623      	mov	r3, r4
 8002266:	f7ff fe77 	bl	8001f58 <lcdDottedLine>
	for(int16_t i = 0; i<lines-1; i++){
 800226a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800226e:	b29b      	uxth	r3, r3
 8002270:	3301      	adds	r3, #1
 8002272:	b29b      	uxth	r3, r3
 8002274:	83fb      	strh	r3, [r7, #30]
 8002276:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800227a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800227e:	3b01      	subs	r3, #1
 8002280:	429a      	cmp	r2, r3
 8002282:	dbc3      	blt.n	800220c <lcdDottedPolyline+0x20>
	}
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3724      	adds	r7, #36	@ 0x24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd90      	pop	{r4, r7, pc}

0800228e <lcdRectangle>:

// Draw a rectangle between x0, y0 and x1, y1
void lcdRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 800228e:	b590      	push	{r4, r7, lr}
 8002290:	b085      	sub	sp, #20
 8002292:	af02      	add	r7, sp, #8
 8002294:	4604      	mov	r4, r0
 8002296:	4608      	mov	r0, r1
 8002298:	4611      	mov	r1, r2
 800229a:	461a      	mov	r2, r3
 800229c:	4623      	mov	r3, r4
 800229e:	80fb      	strh	r3, [r7, #6]
 80022a0:	4603      	mov	r3, r0
 80022a2:	80bb      	strh	r3, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]
 80022a8:	4613      	mov	r3, r2
 80022aa:	803b      	strh	r3, [r7, #0]
	lcdLine(x0, y0, x0, y1, colour);
 80022ac:	f9b7 4000 	ldrsh.w	r4, [r7]
 80022b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80022b4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80022b8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80022bc:	8b3b      	ldrh	r3, [r7, #24]
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	4623      	mov	r3, r4
 80022c2:	f7ff fd18 	bl	8001cf6 <lcdLine>
	lcdLine(x0, y1, x1, y1, colour);
 80022c6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80022ca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80022ce:	f9b7 1000 	ldrsh.w	r1, [r7]
 80022d2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80022d6:	8b3b      	ldrh	r3, [r7, #24]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	4623      	mov	r3, r4
 80022dc:	f7ff fd0b 	bl	8001cf6 <lcdLine>
	lcdLine(x1, y0, x1, y1, colour);
 80022e0:	f9b7 4000 	ldrsh.w	r4, [r7]
 80022e4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80022e8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80022ec:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80022f0:	8b3b      	ldrh	r3, [r7, #24]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	4623      	mov	r3, r4
 80022f6:	f7ff fcfe 	bl	8001cf6 <lcdLine>
	lcdLine(x0, y0, x1, y0, colour);
 80022fa:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80022fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002302:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002306:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800230a:	8b3b      	ldrh	r3, [r7, #24]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	4623      	mov	r3, r4
 8002310:	f7ff fcf1 	bl	8001cf6 <lcdLine>
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bd90      	pop	{r4, r7, pc}

0800231c <lcdFilledRectangle>:
	lcdDottedLine(x0, y0, x1, y0, colour, step);
}

// Draw a filled rectangle
void lcdFilledRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	4604      	mov	r4, r0
 8002324:	4608      	mov	r0, r1
 8002326:	4611      	mov	r1, r2
 8002328:	461a      	mov	r2, r3
 800232a:	4623      	mov	r3, r4
 800232c:	80fb      	strh	r3, [r7, #6]
 800232e:	4603      	mov	r3, r0
 8002330:	80bb      	strh	r3, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	807b      	strh	r3, [r7, #2]
 8002336:	4613      	mov	r3, r2
 8002338:	803b      	strh	r3, [r7, #0]
	uint32_t pixels;
	int16_t pom = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	817b      	strh	r3, [r7, #10]
	if (x0>x1){	//x1 must be greater than x0
 800233e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002342:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002346:	429a      	cmp	r2, r3
 8002348:	dd05      	ble.n	8002356 <lcdFilledRectangle+0x3a>
		pom = x0;
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	817b      	strh	r3, [r7, #10]
		x0 = x1;
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	80fb      	strh	r3, [r7, #6]
		x1 = pom;
 8002352:	897b      	ldrh	r3, [r7, #10]
 8002354:	807b      	strh	r3, [r7, #2]
	}
	if (y0>y1){	//y1 must be greater than y0
 8002356:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800235a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800235e:	429a      	cmp	r2, r3
 8002360:	dd05      	ble.n	800236e <lcdFilledRectangle+0x52>
		pom = y0;
 8002362:	88bb      	ldrh	r3, [r7, #4]
 8002364:	817b      	strh	r3, [r7, #10]
		y0 = y1;
 8002366:	883b      	ldrh	r3, [r7, #0]
 8002368:	80bb      	strh	r3, [r7, #4]
		y1 = pom;
 800236a:	897b      	ldrh	r3, [r7, #10]
 800236c:	803b      	strh	r3, [r7, #0]
	}

	if((y1>0)&&(y0<255)){	//to prevent plotting nonsense
 800236e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002372:	2b00      	cmp	r3, #0
 8002374:	dd6e      	ble.n	8002454 <lcdFilledRectangle+0x138>
 8002376:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800237a:	2bfe      	cmp	r3, #254	@ 0xfe
 800237c:	dc6a      	bgt.n	8002454 <lcdFilledRectangle+0x138>
		if(y0<0) {	//
 800237e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	da01      	bge.n	800238a <lcdFilledRectangle+0x6e>
			y0 = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	80bb      	strh	r3, [r7, #4]
		}
		if(y1>255) {
 800238a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800238e:	2bff      	cmp	r3, #255	@ 0xff
 8002390:	dd01      	ble.n	8002396 <lcdFilledRectangle+0x7a>
			y1 = 255;
 8002392:	23ff      	movs	r3, #255	@ 0xff
 8002394:	803b      	strh	r3, [r7, #0]
		}
		// To speed up plotting we define a x window with the width of the
		// rectangle and then just output the required number of bytes to
		// fill down to the end point
		lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8002396:	202a      	movs	r0, #42	@ 0x2a
 8002398:	f7ff fb04 	bl	80019a4 <lcdWriteCommand>
		lcdWriteParameter(x0 >> 8);
 800239c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a0:	121b      	asrs	r3, r3, #8
 80023a2:	b21b      	sxth	r3, r3
 80023a4:	b25b      	sxtb	r3, r3
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fb0f 	bl	80019ca <lcdWriteParameter>
		lcdWriteParameter(x0);
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	b25b      	sxtb	r3, r3
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fb0a 	bl	80019ca <lcdWriteParameter>
		lcdWriteParameter(x1 >> 8);
 80023b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80023ba:	121b      	asrs	r3, r3, #8
 80023bc:	b21b      	sxth	r3, r3
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fb02 	bl	80019ca <lcdWriteParameter>
		lcdWriteParameter(x1);
 80023c6:	887b      	ldrh	r3, [r7, #2]
 80023c8:	b25b      	sxtb	r3, r3
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fafd 	bl	80019ca <lcdWriteParameter>

		lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 80023d0:	202b      	movs	r0, #43	@ 0x2b
 80023d2:	f7ff fae7 	bl	80019a4 <lcdWriteCommand>
		lcdWriteParameter(y0 >> 8);
 80023d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80023da:	121b      	asrs	r3, r3, #8
 80023dc:	b21b      	sxth	r3, r3
 80023de:	b25b      	sxtb	r3, r3
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff faf2 	bl	80019ca <lcdWriteParameter>
		lcdWriteParameter(y0);
 80023e6:	88bb      	ldrh	r3, [r7, #4]
 80023e8:	b25b      	sxtb	r3, r3
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff faed 	bl	80019ca <lcdWriteParameter>
		lcdWriteParameter(y1 >> 8);
 80023f0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80023f4:	121b      	asrs	r3, r3, #8
 80023f6:	b21b      	sxth	r3, r3
 80023f8:	b25b      	sxtb	r3, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fae5 	bl	80019ca <lcdWriteParameter>
		lcdWriteParameter(y1);
 8002400:	883b      	ldrh	r3, [r7, #0]
 8002402:	b25b      	sxtb	r3, r3
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fae0 	bl	80019ca <lcdWriteParameter>

		lcdWriteCommand(WRITE_MEMORY_START);
 800240a:	202c      	movs	r0, #44	@ 0x2c
 800240c:	f7ff faca 	bl	80019a4 <lcdWriteCommand>
		for (pixels = 0; pixels < (((x1+1) - x0) * ((y1+1) - y0)); pixels++)
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	e00c      	b.n	8002430 <lcdFilledRectangle+0x114>
				lcdWriteData(colour >> 8, colour);
 8002416:	8c3b      	ldrh	r3, [r7, #32]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	b29b      	uxth	r3, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	8c3a      	ldrh	r2, [r7, #32]
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fae3 	bl	80019f0 <lcdWriteData>
		for (pixels = 0; pixels < (((x1+1) - x0) * ((y1+1) - y0)); pixels++)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	3301      	adds	r3, #1
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002440:	1c51      	adds	r1, r2, #1
 8002442:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002446:	1a8a      	subs	r2, r1, r2
 8002448:	fb02 f303 	mul.w	r3, r2, r3
 800244c:	461a      	mov	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4293      	cmp	r3, r2
 8002452:	d3e0      	bcc.n	8002416 <lcdFilledRectangle+0xfa>
	}
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	bd90      	pop	{r4, r7, pc}

0800245c <lcdCircle>:
		lcdFilledDottedTriangle( pointsT, colour, step );
	}
}

void lcdCircle(int16_t xCentre, int16_t yCentre, int16_t radius, uint16_t colour)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	4604      	mov	r4, r0
 8002464:	4608      	mov	r0, r1
 8002466:	4611      	mov	r1, r2
 8002468:	461a      	mov	r2, r3
 800246a:	4623      	mov	r3, r4
 800246c:	80fb      	strh	r3, [r7, #6]
 800246e:	4603      	mov	r3, r0
 8002470:	80bb      	strh	r3, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	807b      	strh	r3, [r7, #2]
 8002476:	4613      	mov	r3, r2
 8002478:	803b      	strh	r3, [r7, #0]
	int16_t x = 0, y = radius;
 800247a:	2300      	movs	r3, #0
 800247c:	81fb      	strh	r3, [r7, #14]
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	81bb      	strh	r3, [r7, #12]
	int16_t d = 3 - (2 * radius);
 8002482:	887b      	ldrh	r3, [r7, #2]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	b29b      	uxth	r3, r3
 8002488:	f1c3 0303 	rsb	r3, r3, #3
 800248c:	b29b      	uxth	r3, r3
 800248e:	817b      	strh	r3, [r7, #10]

    while(x <= y)
 8002490:	e095      	b.n	80025be <lcdCircle+0x162>
	{
		lcdPlot(xCentre + x, yCentre + y, colour);
 8002492:	88fa      	ldrh	r2, [r7, #6]
 8002494:	89fb      	ldrh	r3, [r7, #14]
 8002496:	4413      	add	r3, r2
 8002498:	b29b      	uxth	r3, r3
 800249a:	b218      	sxth	r0, r3
 800249c:	88ba      	ldrh	r2, [r7, #4]
 800249e:	89bb      	ldrh	r3, [r7, #12]
 80024a0:	4413      	add	r3, r2
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	b21b      	sxth	r3, r3
 80024a6:	883a      	ldrh	r2, [r7, #0]
 80024a8:	4619      	mov	r1, r3
 80024aa:	f7ff fbdd 	bl	8001c68 <lcdPlot>
		lcdPlot(xCentre + y, yCentre + x, colour);
 80024ae:	88fa      	ldrh	r2, [r7, #6]
 80024b0:	89bb      	ldrh	r3, [r7, #12]
 80024b2:	4413      	add	r3, r2
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	b218      	sxth	r0, r3
 80024b8:	88ba      	ldrh	r2, [r7, #4]
 80024ba:	89fb      	ldrh	r3, [r7, #14]
 80024bc:	4413      	add	r3, r2
 80024be:	b29b      	uxth	r3, r3
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	883a      	ldrh	r2, [r7, #0]
 80024c4:	4619      	mov	r1, r3
 80024c6:	f7ff fbcf 	bl	8001c68 <lcdPlot>
		lcdPlot(xCentre - x, yCentre + y, colour);
 80024ca:	88fa      	ldrh	r2, [r7, #6]
 80024cc:	89fb      	ldrh	r3, [r7, #14]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	b218      	sxth	r0, r3
 80024d4:	88ba      	ldrh	r2, [r7, #4]
 80024d6:	89bb      	ldrh	r3, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	b29b      	uxth	r3, r3
 80024dc:	b21b      	sxth	r3, r3
 80024de:	883a      	ldrh	r2, [r7, #0]
 80024e0:	4619      	mov	r1, r3
 80024e2:	f7ff fbc1 	bl	8001c68 <lcdPlot>
		lcdPlot(xCentre + y, yCentre - x, colour);
 80024e6:	88fa      	ldrh	r2, [r7, #6]
 80024e8:	89bb      	ldrh	r3, [r7, #12]
 80024ea:	4413      	add	r3, r2
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	b218      	sxth	r0, r3
 80024f0:	88ba      	ldrh	r2, [r7, #4]
 80024f2:	89fb      	ldrh	r3, [r7, #14]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	b21b      	sxth	r3, r3
 80024fa:	883a      	ldrh	r2, [r7, #0]
 80024fc:	4619      	mov	r1, r3
 80024fe:	f7ff fbb3 	bl	8001c68 <lcdPlot>
		lcdPlot(xCentre - x, yCentre - y, colour);
 8002502:	88fa      	ldrh	r2, [r7, #6]
 8002504:	89fb      	ldrh	r3, [r7, #14]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	b29b      	uxth	r3, r3
 800250a:	b218      	sxth	r0, r3
 800250c:	88ba      	ldrh	r2, [r7, #4]
 800250e:	89bb      	ldrh	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	b29b      	uxth	r3, r3
 8002514:	b21b      	sxth	r3, r3
 8002516:	883a      	ldrh	r2, [r7, #0]
 8002518:	4619      	mov	r1, r3
 800251a:	f7ff fba5 	bl	8001c68 <lcdPlot>
		lcdPlot(xCentre - y, yCentre - x, colour);
 800251e:	88fa      	ldrh	r2, [r7, #6]
 8002520:	89bb      	ldrh	r3, [r7, #12]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	b29b      	uxth	r3, r3
 8002526:	b218      	sxth	r0, r3
 8002528:	88ba      	ldrh	r2, [r7, #4]
 800252a:	89fb      	ldrh	r3, [r7, #14]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	b29b      	uxth	r3, r3
 8002530:	b21b      	sxth	r3, r3
 8002532:	883a      	ldrh	r2, [r7, #0]
 8002534:	4619      	mov	r1, r3
 8002536:	f7ff fb97 	bl	8001c68 <lcdPlot>
		lcdPlot(xCentre + x, yCentre - y, colour);
 800253a:	88fa      	ldrh	r2, [r7, #6]
 800253c:	89fb      	ldrh	r3, [r7, #14]
 800253e:	4413      	add	r3, r2
 8002540:	b29b      	uxth	r3, r3
 8002542:	b218      	sxth	r0, r3
 8002544:	88ba      	ldrh	r2, [r7, #4]
 8002546:	89bb      	ldrh	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	b29b      	uxth	r3, r3
 800254c:	b21b      	sxth	r3, r3
 800254e:	883a      	ldrh	r2, [r7, #0]
 8002550:	4619      	mov	r1, r3
 8002552:	f7ff fb89 	bl	8001c68 <lcdPlot>
		lcdPlot(xCentre - y, yCentre + x, colour);
 8002556:	88fa      	ldrh	r2, [r7, #6]
 8002558:	89bb      	ldrh	r3, [r7, #12]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	b29b      	uxth	r3, r3
 800255e:	b218      	sxth	r0, r3
 8002560:	88ba      	ldrh	r2, [r7, #4]
 8002562:	89fb      	ldrh	r3, [r7, #14]
 8002564:	4413      	add	r3, r2
 8002566:	b29b      	uxth	r3, r3
 8002568:	b21b      	sxth	r3, r3
 800256a:	883a      	ldrh	r2, [r7, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	f7ff fb7b 	bl	8001c68 <lcdPlot>

		if (d < 0) d += (4 * x) + 6;
 8002572:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002576:	2b00      	cmp	r3, #0
 8002578:	da09      	bge.n	800258e <lcdCircle+0x132>
 800257a:	89fb      	ldrh	r3, [r7, #14]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	b29a      	uxth	r2, r3
 8002580:	897b      	ldrh	r3, [r7, #10]
 8002582:	4413      	add	r3, r2
 8002584:	b29b      	uxth	r3, r3
 8002586:	3306      	adds	r3, #6
 8002588:	b29b      	uxth	r3, r3
 800258a:	817b      	strh	r3, [r7, #10]
 800258c:	e011      	b.n	80025b2 <lcdCircle+0x156>
		else
		{
			d += (4 * (x - y)) + 10;
 800258e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002592:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	b29b      	uxth	r3, r3
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	b29a      	uxth	r2, r3
 800259e:	897b      	ldrh	r3, [r7, #10]
 80025a0:	4413      	add	r3, r2
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	330a      	adds	r3, #10
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	817b      	strh	r3, [r7, #10]
			y -= 1;
 80025aa:	89bb      	ldrh	r3, [r7, #12]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	81bb      	strh	r3, [r7, #12]
		}

		x++;
 80025b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3301      	adds	r3, #1
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	81fb      	strh	r3, [r7, #14]
    while(x <= y)
 80025be:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80025c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	f77f af63 	ble.w	8002492 <lcdCircle+0x36>
	}
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd90      	pop	{r4, r7, pc}
	...

080025d8 <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, int16_t x, int16_t y, uint16_t fgColour, uint16_t bgColour)
{
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4604      	mov	r4, r0
 80025e0:	4608      	mov	r0, r1
 80025e2:	4611      	mov	r1, r2
 80025e4:	461a      	mov	r2, r3
 80025e6:	4623      	mov	r3, r4
 80025e8:	71fb      	strb	r3, [r7, #7]
 80025ea:	4603      	mov	r3, r0
 80025ec:	80bb      	strh	r3, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	807b      	strh	r3, [r7, #2]
 80025f2:	4613      	mov	r3, r2
 80025f4:	803b      	strh	r3, [r7, #0]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 80025f6:	202a      	movs	r0, #42	@ 0x2a
 80025f8:	f7ff f9d4 	bl	80019a4 <lcdWriteCommand>
	lcdWriteParameter(x >> 8);
 80025fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002600:	121b      	asrs	r3, r3, #8
 8002602:	b21b      	sxth	r3, r3
 8002604:	b25b      	sxtb	r3, r3
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff f9df 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(x);
 800260c:	88bb      	ldrh	r3, [r7, #4]
 800260e:	b25b      	sxtb	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff f9da 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter((x+5) >> 8);
 8002616:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800261a:	3305      	adds	r3, #5
 800261c:	121b      	asrs	r3, r3, #8
 800261e:	b25b      	sxtb	r3, r3
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff f9d2 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(x+5);
 8002626:	88bb      	ldrh	r3, [r7, #4]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	3305      	adds	r3, #5
 800262c:	b2db      	uxtb	r3, r3
 800262e:	b25b      	sxtb	r3, r3
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff f9ca 	bl	80019ca <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8002636:	202b      	movs	r0, #43	@ 0x2b
 8002638:	f7ff f9b4 	bl	80019a4 <lcdWriteCommand>
	lcdWriteParameter(y >> 8);
 800263c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002640:	121b      	asrs	r3, r3, #8
 8002642:	b21b      	sxth	r3, r3
 8002644:	b25b      	sxtb	r3, r3
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff f9bf 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(y);
 800264c:	887b      	ldrh	r3, [r7, #2]
 800264e:	b25b      	sxtb	r3, r3
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff f9ba 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002656:	2000      	movs	r0, #0
 8002658:	f7ff f9b7 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0xEF);
 800265c:	f06f 0010 	mvn.w	r0, #16
 8002660:	f7ff f9b3 	bl	80019ca <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8002664:	202c      	movs	r0, #44	@ 0x2c
 8002666:	f7ff f99d 	bl	80019a4 <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++)
 800266a:	2300      	movs	r3, #0
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	e036      	b.n	80026de <lcdPutCh+0x106>
	{
		for (column = 0; column < 6; column++)
 8002670:	2300      	movs	r3, #0
 8002672:	73bb      	strb	r3, [r7, #14]
 8002674:	e02d      	b.n	80026d2 <lcdPutCh+0xfa>
		{
			// Calculate the mirrored column index
			uint8_t mirroredColumn = 5 - column;
 8002676:	7bbb      	ldrb	r3, [r7, #14]
 8002678:	f1c3 0305 	rsb	r3, r3, #5
 800267c:	737b      	strb	r3, [r7, #13]
			// Check the bit corresponding to the current row in the mirrored column
			if ((fontus[character][mirroredColumn]) & (1 << row))
 800267e:	79fa      	ldrb	r2, [r7, #7]
 8002680:	7b79      	ldrb	r1, [r7, #13]
 8002682:	481b      	ldr	r0, [pc, #108]	@ (80026f0 <lcdPutCh+0x118>)
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4403      	add	r3, r0
 800268e:	440b      	add	r3, r1
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	fa42 f303 	asr.w	r3, r2, r3
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00a      	beq.n	80026b8 <lcdPutCh+0xe0>
				lcdWriteData(fgColour >> 8, fgColour);
 80026a2:	883b      	ldrh	r3, [r7, #0]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	883a      	ldrh	r2, [r7, #0]
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff f99d 	bl	80019f0 <lcdWriteData>
 80026b6:	e009      	b.n	80026cc <lcdPutCh+0xf4>
			else
				lcdWriteData(bgColour >> 8, bgColour);
 80026b8:	8c3b      	ldrh	r3, [r7, #32]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	b29b      	uxth	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	8c3a      	ldrh	r2, [r7, #32]
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f992 	bl	80019f0 <lcdWriteData>
		for (column = 0; column < 6; column++)
 80026cc:	7bbb      	ldrb	r3, [r7, #14]
 80026ce:	3301      	adds	r3, #1
 80026d0:	73bb      	strb	r3, [r7, #14]
 80026d2:	7bbb      	ldrb	r3, [r7, #14]
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d9ce      	bls.n	8002676 <lcdPutCh+0x9e>
	for (row = 0; row < 8; row++)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	3301      	adds	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	2b07      	cmp	r3, #7
 80026e2:	d9c5      	bls.n	8002670 <lcdPutCh+0x98>
		}
	}
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd90      	pop	{r4, r7, pc}
 80026ee:	bf00      	nop
 80026f0:	08006e08 	.word	0x08006e08

080026f4 <lcdPutChSized>:

void lcdPutChSized(unsigned char character, int16_t x, int16_t y, uint16_t fgColour, uint16_t bgColour, uint8_t size)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	4604      	mov	r4, r0
 80026fc:	4608      	mov	r0, r1
 80026fe:	4611      	mov	r1, r2
 8002700:	461a      	mov	r2, r3
 8002702:	4623      	mov	r3, r4
 8002704:	71fb      	strb	r3, [r7, #7]
 8002706:	4603      	mov	r3, r0
 8002708:	80bb      	strh	r3, [r7, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	807b      	strh	r3, [r7, #2]
 800270e:	4613      	mov	r3, r2
 8002710:	803b      	strh	r3, [r7, #0]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8002712:	202a      	movs	r0, #42	@ 0x2a
 8002714:	f7ff f946 	bl	80019a4 <lcdWriteCommand>
	lcdWriteParameter(x >> 8);
 8002718:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800271c:	121b      	asrs	r3, r3, #8
 800271e:	b21b      	sxth	r3, r3
 8002720:	b25b      	sxtb	r3, r3
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff f951 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(x);
 8002728:	88bb      	ldrh	r3, [r7, #4]
 800272a:	b25b      	sxtb	r3, r3
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff f94c 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter((x+5*size) >> 8);
 8002732:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002736:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	440b      	add	r3, r1
 8002742:	121b      	asrs	r3, r3, #8
 8002744:	b25b      	sxtb	r3, r3
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff f93f 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(x+5*size);
 800274c:	88bb      	ldrh	r3, [r7, #4]
 800274e:	b2da      	uxtb	r2, r3
 8002750:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002754:	4619      	mov	r1, r3
 8002756:	0089      	lsls	r1, r1, #2
 8002758:	440b      	add	r3, r1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	4413      	add	r3, r2
 800275e:	b2db      	uxtb	r3, r3
 8002760:	b25b      	sxtb	r3, r3
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff f931 	bl	80019ca <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8002768:	202b      	movs	r0, #43	@ 0x2b
 800276a:	f7ff f91b 	bl	80019a4 <lcdWriteCommand>
	lcdWriteParameter(y >> 8);
 800276e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002772:	121b      	asrs	r3, r3, #8
 8002774:	b21b      	sxth	r3, r3
 8002776:	b25b      	sxtb	r3, r3
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff f926 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(y);
 800277e:	887b      	ldrh	r3, [r7, #2]
 8002780:	b25b      	sxtb	r3, r3
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff f921 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002788:	2000      	movs	r0, #0
 800278a:	f7ff f91e 	bl	80019ca <lcdWriteParameter>
	lcdWriteParameter(0xEF);
 800278e:	f06f 0010 	mvn.w	r0, #16
 8002792:	f7ff f91a 	bl	80019ca <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8002796:	202c      	movs	r0, #44	@ 0x2c
 8002798:	f7ff f904 	bl	80019a4 <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8*size; row+=size)
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
 80027a0:	e067      	b.n	8002872 <lcdPutChSized+0x17e>
	{
		for (column = 0; column < 6*size; column+=size)
 80027a2:	2300      	movs	r3, #0
 80027a4:	73bb      	strb	r3, [r7, #14]
 80027a6:	e056      	b.n	8002856 <lcdPutChSized+0x162>
		{
			uint8_t mirroredColumn = 5*size - column;
 80027a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80027ac:	461a      	mov	r2, r3
 80027ae:	0092      	lsls	r2, r2, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	7bbb      	ldrb	r3, [r7, #14]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	737b      	strb	r3, [r7, #13]
			if ((fontus[character][(uint8_t)(mirroredColumn/size)]) & (1 << (uint8_t)(row/size)))
 80027ba:	79fa      	ldrb	r2, [r7, #7]
 80027bc:	7b79      	ldrb	r1, [r7, #13]
 80027be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80027c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	4618      	mov	r0, r3
 80027ca:	492f      	ldr	r1, [pc, #188]	@ (8002888 <lcdPutChSized+0x194>)
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	440b      	add	r3, r1
 80027d6:	4403      	add	r3, r0
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	4619      	mov	r1, r3
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	fa41 f303 	asr.w	r3, r1, r3
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d02b      	beq.n	800284c <lcdPutChSized+0x158>
				lcdFilledRectangle(x+column, y+row, x+column+size-1, y+row+size-1, fgColour);
 80027f4:	7bbb      	ldrb	r3, [r7, #14]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	88bb      	ldrh	r3, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	b218      	sxth	r0, r3
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	b29a      	uxth	r2, r3
 8002804:	887b      	ldrh	r3, [r7, #2]
 8002806:	4413      	add	r3, r2
 8002808:	b29b      	uxth	r3, r3
 800280a:	b219      	sxth	r1, r3
 800280c:	7bbb      	ldrb	r3, [r7, #14]
 800280e:	b29a      	uxth	r2, r3
 8002810:	88bb      	ldrh	r3, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	b29a      	uxth	r2, r3
 8002816:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800281a:	b29b      	uxth	r3, r3
 800281c:	4413      	add	r3, r2
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29b      	uxth	r3, r3
 8002824:	b21c      	sxth	r4, r3
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	b29a      	uxth	r2, r3
 800282a:	887b      	ldrh	r3, [r7, #2]
 800282c:	4413      	add	r3, r2
 800282e:	b29a      	uxth	r2, r3
 8002830:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002834:	b29b      	uxth	r3, r3
 8002836:	4413      	add	r3, r2
 8002838:	b29b      	uxth	r3, r3
 800283a:	3b01      	subs	r3, #1
 800283c:	b29b      	uxth	r3, r3
 800283e:	b21a      	sxth	r2, r3
 8002840:	883b      	ldrh	r3, [r7, #0]
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	4613      	mov	r3, r2
 8002846:	4622      	mov	r2, r4
 8002848:	f7ff fd68 	bl	800231c <lcdFilledRectangle>
		for (column = 0; column < 6*size; column+=size)
 800284c:	7bba      	ldrb	r2, [r7, #14]
 800284e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002852:	4413      	add	r3, r2
 8002854:	73bb      	strb	r3, [r7, #14]
 8002856:	7bb9      	ldrb	r1, [r7, #14]
 8002858:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4299      	cmp	r1, r3
 8002866:	db9f      	blt.n	80027a8 <lcdPutChSized+0xb4>
	for (row = 0; row < 8*size; row+=size)
 8002868:	7bfa      	ldrb	r2, [r7, #15]
 800286a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800286e:	4413      	add	r3, r2
 8002870:	73fb      	strb	r3, [r7, #15]
 8002872:	7bfa      	ldrb	r2, [r7, #15]
 8002874:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	429a      	cmp	r2, r3
 800287c:	db91      	blt.n	80027a2 <lcdPutChSized+0xae>
		}
	}
}
 800287e:	bf00      	nop
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	bd90      	pop	{r4, r7, pc}
 8002888:	08006e08 	.word	0x08006e08

0800288c <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
 8002896:	460b      	mov	r3, r1
 8002898:	71bb      	strb	r3, [r7, #6]
 800289a:	4613      	mov	r3, r2
 800289c:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 800289e:	797b      	ldrb	r3, [r7, #5]
 80028a0:	02db      	lsls	r3, r3, #11
 80028a2:	b21a      	sxth	r2, r3
 80028a4:	79bb      	ldrb	r3, [r7, #6]
 80028a6:	019b      	lsls	r3, r3, #6
 80028a8:	b21b      	sxth	r3, r3
 80028aa:	4313      	orrs	r3, r2
 80028ac:	b21a      	sxth	r2, r3
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	b21b      	sxth	r3, r3
 80028b2:	4313      	orrs	r3, r2
 80028b4:	b21b      	sxth	r3, r3
 80028b6:	b29b      	uxth	r3, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <lcdPutS>:
// it easy to place text
uint8_t lcdTextY(uint8_t y) { return y*8; }

// Plot a string of characters to the LCD
void lcdPutS(const char *string, int16_t x, int16_t y, uint16_t fgColour, uint16_t bgColour)
{
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b089      	sub	sp, #36	@ 0x24
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	4608      	mov	r0, r1
 80028ce:	4611      	mov	r1, r2
 80028d0:	461a      	mov	r2, r3
 80028d2:	4603      	mov	r3, r0
 80028d4:	817b      	strh	r3, [r7, #10]
 80028d6:	460b      	mov	r3, r1
 80028d8:	813b      	strh	r3, [r7, #8]
 80028da:	4613      	mov	r3, r2
 80028dc:	80fb      	strh	r3, [r7, #6]
	int16_t origin = x;
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	82bb      	strh	r3, [r7, #20]
	int16_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	82fb      	strh	r3, [r7, #22]
 80028e6:	e026      	b.n	8002936 <lcdPutS+0x72>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x < 10)
 80028e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80028ec:	2b09      	cmp	r3, #9
 80028ee:	dc05      	bgt.n	80028fc <lcdPutS+0x38>
		{
			x = origin;
 80028f0:	8abb      	ldrh	r3, [r7, #20]
 80028f2:	817b      	strh	r3, [r7, #10]
			y += 8;
 80028f4:	893b      	ldrh	r3, [r7, #8]
 80028f6:	3308      	adds	r3, #8
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	813b      	strh	r3, [r7, #8]
		}

		// If we move past the bottom of the screen just exit
		if (y > 230) break;
 80028fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002900:	2be6      	cmp	r3, #230	@ 0xe6
 8002902:	dc21      	bgt.n	8002948 <lcdPutS+0x84>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 8002904:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	4413      	add	r3, r2
 800290c:	7818      	ldrb	r0, [r3, #0]
 800290e:	88fc      	ldrh	r4, [r7, #6]
 8002910:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002914:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002918:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	4623      	mov	r3, r4
 800291e:	f7ff fe5b 	bl	80025d8 <lcdPutCh>
		x -= 6;
 8002922:	897b      	ldrh	r3, [r7, #10]
 8002924:	3b06      	subs	r3, #6
 8002926:	b29b      	uxth	r3, r3
 8002928:	817b      	strh	r3, [r7, #10]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 800292a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800292e:	b29b      	uxth	r3, r3
 8002930:	3301      	adds	r3, #1
 8002932:	b29b      	uxth	r3, r3
 8002934:	82fb      	strh	r3, [r7, #22]
 8002936:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f7fd fc48 	bl	80001d0 <strlen>
 8002940:	4603      	mov	r3, r0
 8002942:	429c      	cmp	r4, r3
 8002944:	d3d0      	bcc.n	80028e8 <lcdPutS+0x24>
	}
}
 8002946:	e000      	b.n	800294a <lcdPutS+0x86>
		if (y > 230) break;
 8002948:	bf00      	nop
}
 800294a:	bf00      	nop
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	bd90      	pop	{r4, r7, pc}

08002952 <lcdPutSSized>:

// Plot a string of characters to the LCD
void lcdPutSSized(const char *string, int16_t x, int16_t y, uint16_t fgColour, uint16_t bgColour, uint8_t size)
{
 8002952:	b590      	push	{r4, r7, lr}
 8002954:	b089      	sub	sp, #36	@ 0x24
 8002956:	af02      	add	r7, sp, #8
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	4608      	mov	r0, r1
 800295c:	4611      	mov	r1, r2
 800295e:	461a      	mov	r2, r3
 8002960:	4603      	mov	r3, r0
 8002962:	817b      	strh	r3, [r7, #10]
 8002964:	460b      	mov	r3, r1
 8002966:	813b      	strh	r3, [r7, #8]
 8002968:	4613      	mov	r3, r2
 800296a:	80fb      	strh	r3, [r7, #6]
	x = x-size*6;
 800296c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002970:	b29b      	uxth	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	897b      	ldrh	r3, [r7, #10]
 800297e:	4413      	add	r3, r2
 8002980:	b29b      	uxth	r3, r3
 8002982:	817b      	strh	r3, [r7, #10]
	int16_t origin = x;
 8002984:	897b      	ldrh	r3, [r7, #10]
 8002986:	82bb      	strh	r3, [r7, #20]
	int16_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8002988:	2300      	movs	r3, #0
 800298a:	82fb      	strh	r3, [r7, #22]
 800298c:	e056      	b.n	8002a3c <lcdPutSSized+0xea>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x < 1*size)
 800298e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002992:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002996:	429a      	cmp	r2, r3
 8002998:	da0a      	bge.n	80029b0 <lcdPutSSized+0x5e>
		{
			x = origin;
 800299a:	8abb      	ldrh	r3, [r7, #20]
 800299c:	817b      	strh	r3, [r7, #10]
			y += 8*size;
 800299e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	893b      	ldrh	r3, [r7, #8]
 80029aa:	4413      	add	r3, r2
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	813b      	strh	r3, [r7, #8]
		}

		// If we move past the bottom of the screen just exit
		if (y > (239-6*size)) break;
 80029b0:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80029b4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80029b8:	4613      	mov	r3, r2
 80029ba:	0092      	lsls	r2, r2, #2
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	33ef      	adds	r3, #239	@ 0xef
 80029c2:	4299      	cmp	r1, r3
 80029c4:	dc43      	bgt.n	8002a4e <lcdPutSSized+0xfc>

		// Plot the current character
		lcdPutChSized(string[characterNumber], x, y, fgColour, bgColour, size);
 80029c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4413      	add	r3, r2
 80029ce:	7818      	ldrb	r0, [r3, #0]
 80029d0:	88fc      	ldrh	r4, [r7, #6]
 80029d2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80029d6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80029da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80029de:	9301      	str	r3, [sp, #4]
 80029e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	4623      	mov	r3, r4
 80029e6:	f7ff fe85 	bl	80026f4 <lcdPutChSized>
		if ((x-6*size)>0) x -= 6*size;
 80029ea:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80029ee:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80029f2:	4613      	mov	r3, r2
 80029f4:	0092      	lsls	r2, r2, #2
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	440b      	add	r3, r1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	dd0c      	ble.n	8002a1a <lcdPutSSized+0xc8>
 8002a00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	897b      	ldrh	r3, [r7, #10]
 8002a12:	4413      	add	r3, r2
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	817b      	strh	r3, [r7, #10]
 8002a18:	e00a      	b.n	8002a30 <lcdPutSSized+0xde>
		else
		{
			x = origin;
 8002a1a:	8abb      	ldrh	r3, [r7, #20]
 8002a1c:	817b      	strh	r3, [r7, #10]
			y += 8*size;
 8002a1e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	893b      	ldrh	r3, [r7, #8]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	813b      	strh	r3, [r7, #8]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8002a30:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3301      	adds	r3, #1
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	82fb      	strh	r3, [r7, #22]
 8002a3c:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f7fd fbc5 	bl	80001d0 <strlen>
 8002a46:	4603      	mov	r3, r0
 8002a48:	429c      	cmp	r4, r3
 8002a4a:	d3a0      	bcc.n	800298e <lcdPutSSized+0x3c>
		}
	}
}
 8002a4c:	e000      	b.n	8002a50 <lcdPutSSized+0xfe>
		if (y > (239-6*size)) break;
 8002a4e:	bf00      	nop
}
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd90      	pop	{r4, r7, pc}

08002a58 <threeDto2D>:

uint8_t threeDto2D(int16_t *points, float *playerCoord, float alpha, float *twoDCoords) {
 8002a58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a5c:	b090      	sub	sp, #64	@ 0x40
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a68:	603a      	str	r2, [r7, #0]
	//points je 1D obsahuje X Y Z bodu
	float_t dx = (float_t)((float)(points[0]) - playerCoord[0]);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a82:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	float_t dy = (float_t)((float)(points[1]) - playerCoord[1]);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3302      	adds	r3, #2
 8002a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a8e:	ee07 3a90 	vmov	s15, r3
 8002a92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	edd3 7a00 	vldr	s15, [r3]
 8002a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aa2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float_t dz = (float_t)((float)(points[2]) - playerCoord[2]);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	3308      	adds	r3, #8
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	//float_t vz = sqrt(dx^2 + dy^2 + dz^2);	//vzdialenost od bodu euklidovska
	float_t vzh = sqrt((dx*dx) + (dy*dy));		//vzdialenost od bodu na xy osi
 8002ac6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002aca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ace:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002ad2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ada:	ee17 0a90 	vmov	r0, s15
 8002ade:	f7fd fd33 	bl	8000548 <__aeabi_f2d>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	ec43 2b10 	vmov	d0, r2, r3
 8002aea:	f002 fddd 	bl	80056a8 <sqrt>
 8002aee:	ec53 2b10 	vmov	r2, r3, d0
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	f7fe f857 	bl	8000ba8 <__aeabi_d2f>
 8002afa:	4603      	mov	r3, r0
 8002afc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	//alfa je vlastne horizontalne natocenie kamery
	//beta je absolutne horizontalne natocenie telesa voci kamere
	float_t beta = atan(dy/dx) + (dx<=0)*3.1416*((alpha>0)-(alpha<=0));
 8002afe:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002b02:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002b06:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b0a:	ee16 0a90 	vmov	r0, s13
 8002b0e:	f7fd fd1b 	bl	8000548 <__aeabi_f2d>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	ec43 2b10 	vmov	d0, r2, r3
 8002b1a:	f002 fdf1 	bl	8005700 <atan>
 8002b1e:	ec59 8b10 	vmov	r8, r9, d0
 8002b22:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002b26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2e:	d803      	bhi.n	8002b38 <threeDto2D+0xe0>
 8002b30:	f04f 0000 	mov.w	r0, #0
 8002b34:	49bc      	ldr	r1, [pc, #752]	@ (8002e28 <threeDto2D+0x3d0>)
 8002b36:	e003      	b.n	8002b40 <threeDto2D+0xe8>
 8002b38:	f04f 0000 	mov.w	r0, #0
 8002b3c:	f04f 0100 	mov.w	r1, #0
 8002b40:	a3ad      	add	r3, pc, #692	@ (adr r3, 8002df8 <threeDto2D+0x3a0>)
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f7fd fd57 	bl	80005f8 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4614      	mov	r4, r2
 8002b50:	461d      	mov	r5, r3
 8002b52:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5e:	bfcc      	ite	gt
 8002b60:	2301      	movgt	r3, #1
 8002b62:	2300      	movle	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b74:	bf94      	ite	ls
 8002b76:	2301      	movls	r3, #1
 8002b78:	2300      	movhi	r3, #0
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fcd0 	bl	8000524 <__aeabi_i2d>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4620      	mov	r0, r4
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	f7fd fd34 	bl	80005f8 <__aeabi_dmul>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4640      	mov	r0, r8
 8002b96:	4649      	mov	r1, r9
 8002b98:	f7fd fb78 	bl	800028c <__adddf3>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f7fe f800 	bl	8000ba8 <__aeabi_d2f>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	62bb      	str	r3, [r7, #40]	@ 0x28
	float_t gamma = beta - alpha;	//relativne horizontalne natocenie telesa voci kamere
 8002bac:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	uint8_t success = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if((gamma>-1.5707)&&(gamma<1.5707)) {
 8002bc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002bc4:	f7fd fcc0 	bl	8000548 <__aeabi_f2d>
 8002bc8:	a38d      	add	r3, pc, #564	@ (adr r3, 8002e00 <threeDto2D+0x3a8>)
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	f7fd ffa3 	bl	8000b18 <__aeabi_dcmpgt>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00d      	beq.n	8002bf4 <threeDto2D+0x19c>
 8002bd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002bda:	f7fd fcb5 	bl	8000548 <__aeabi_f2d>
 8002bde:	a38a      	add	r3, pc, #552	@ (adr r3, 8002e08 <threeDto2D+0x3b0>)
 8002be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be4:	f7fd ff7a 	bl	8000adc <__aeabi_dcmplt>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <threeDto2D+0x19c>
		success = 1;	//ak je bod za kamerou, tak je to zle, este som to nedomyslel
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	float_t beta2 = atan(dz/vzh);	//kolmost telesa voci kamere
 8002bf4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002bf8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002bfc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c00:	ee16 0a90 	vmov	r0, s13
 8002c04:	f7fd fca0 	bl	8000548 <__aeabi_f2d>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	ec43 2b10 	vmov	d0, r2, r3
 8002c10:	f002 fd76 	bl	8005700 <atan>
 8002c14:	ec53 2b10 	vmov	r2, r3, d0
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f7fd ffc4 	bl	8000ba8 <__aeabi_d2f>
 8002c20:	4603      	mov	r3, r0
 8002c22:	623b      	str	r3, [r7, #32]

	//beta3 - absolutna kolmost, gamma3 - relativna kolmost telesa voci kamere
	float_t beta3 = atan(dz/(vzh*cos(gamma))) + ((-1.57 > gamma)||(gamma > 1.57))*3.1416*((dz>0)-(dz<=0));
 8002c24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c26:	f7fd fc8f 	bl	8000548 <__aeabi_f2d>
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	460d      	mov	r5, r1
 8002c2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c30:	f7fd fc8a 	bl	8000548 <__aeabi_f2d>
 8002c34:	4680      	mov	r8, r0
 8002c36:	4689      	mov	r9, r1
 8002c38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c3a:	f7fd fc85 	bl	8000548 <__aeabi_f2d>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	ec43 2b10 	vmov	d0, r2, r3
 8002c46:	f002 fef3 	bl	8005a30 <cos>
 8002c4a:	ec53 2b10 	vmov	r2, r3, d0
 8002c4e:	4640      	mov	r0, r8
 8002c50:	4649      	mov	r1, r9
 8002c52:	f7fd fcd1 	bl	80005f8 <__aeabi_dmul>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	f7fd fdf5 	bl	800084c <__aeabi_ddiv>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	ec43 2b17 	vmov	d7, r2, r3
 8002c6a:	eeb0 0a47 	vmov.f32	s0, s14
 8002c6e:	eef0 0a67 	vmov.f32	s1, s15
 8002c72:	f002 fd45 	bl	8005700 <atan>
 8002c76:	ec59 8b10 	vmov	r8, r9, d0
 8002c7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c7c:	f7fd fc64 	bl	8000548 <__aeabi_f2d>
 8002c80:	a363      	add	r3, pc, #396	@ (adr r3, 8002e10 <threeDto2D+0x3b8>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	f7fd ff29 	bl	8000adc <__aeabi_dcmplt>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <threeDto2D+0x24e>
 8002c90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c92:	f7fd fc59 	bl	8000548 <__aeabi_f2d>
 8002c96:	a360      	add	r3, pc, #384	@ (adr r3, 8002e18 <threeDto2D+0x3c0>)
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	f7fd ff3c 	bl	8000b18 <__aeabi_dcmpgt>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <threeDto2D+0x252>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <threeDto2D+0x254>
 8002caa:	2300      	movs	r3, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fc39 	bl	8000524 <__aeabi_i2d>
 8002cb2:	a351      	add	r3, pc, #324	@ (adr r3, 8002df8 <threeDto2D+0x3a0>)
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	f7fd fc9e 	bl	80005f8 <__aeabi_dmul>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4614      	mov	r4, r2
 8002cc2:	461d      	mov	r5, r3
 8002cc4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002cc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd0:	bfcc      	ite	gt
 8002cd2:	2301      	movgt	r3, #1
 8002cd4:	2300      	movle	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002cde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce6:	bf94      	ite	ls
 8002ce8:	2301      	movls	r3, #1
 8002cea:	2300      	movhi	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd fc17 	bl	8000524 <__aeabi_i2d>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	f7fd fc7b 	bl	80005f8 <__aeabi_dmul>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4640      	mov	r0, r8
 8002d08:	4649      	mov	r1, r9
 8002d0a:	f7fd fabf 	bl	800028c <__adddf3>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4610      	mov	r0, r2
 8002d14:	4619      	mov	r1, r3
 8002d16:	f7fd ff47 	bl	8000ba8 <__aeabi_d2f>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	61fb      	str	r3, [r7, #28]
	float_t alfa2 = 0; //zatial nie je potreba
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]
	float_t gamma3 = beta3 - alfa2;
 8002d24:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d28:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d30:	edc7 7a05 	vstr	s15, [r7, #20]

	// zo ziskanych uhlov vypocitame suradnice na obrazovke, 2 najdolezitejsie vzorce
	//twoDCoords[0] = 160+160*( 1.27 * sin(gamma) * cos(beta2) );	//povodne
	//twoDCoords[0] = 160+160*( 1.7 *fabs(gamma)*sin(gamma) * cos(beta2) ); //nieco je v pohode, ale nie
	twoDCoords[0] = 160+160*( 1.27 * gamma * cos(beta2) );	//tiez moze byt
 8002d34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d36:	f7fd fc07 	bl	8000548 <__aeabi_f2d>
 8002d3a:	a339      	add	r3, pc, #228	@ (adr r3, 8002e20 <threeDto2D+0x3c8>)
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	f7fd fc5a 	bl	80005f8 <__aeabi_dmul>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	4614      	mov	r4, r2
 8002d4a:	461d      	mov	r5, r3
 8002d4c:	6a38      	ldr	r0, [r7, #32]
 8002d4e:	f7fd fbfb 	bl	8000548 <__aeabi_f2d>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	ec43 2b10 	vmov	d0, r2, r3
 8002d5a:	f002 fe69 	bl	8005a30 <cos>
 8002d5e:	ec53 2b10 	vmov	r2, r3, d0
 8002d62:	4620      	mov	r0, r4
 8002d64:	4629      	mov	r1, r5
 8002d66:	f7fd fc47 	bl	80005f8 <__aeabi_dmul>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	4b2d      	ldr	r3, [pc, #180]	@ (8002e2c <threeDto2D+0x3d4>)
 8002d78:	f7fd fc3e 	bl	80005f8 <__aeabi_dmul>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	4b28      	ldr	r3, [pc, #160]	@ (8002e2c <threeDto2D+0x3d4>)
 8002d8a:	f7fd fa7f 	bl	800028c <__adddf3>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4610      	mov	r0, r2
 8002d94:	4619      	mov	r1, r3
 8002d96:	f7fd ff07 	bl	8000ba8 <__aeabi_d2f>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	601a      	str	r2, [r3, #0]
	//twoDCoords[0] = 160+160*( 1.27 * gamma ); //jednoduche a funguje
	twoDCoords[1] = 120-160*( gamma3*1.27 ); //1.27
 8002da0:	6978      	ldr	r0, [r7, #20]
 8002da2:	f7fd fbd1 	bl	8000548 <__aeabi_f2d>
 8002da6:	a31e      	add	r3, pc, #120	@ (adr r3, 8002e20 <threeDto2D+0x3c8>)
 8002da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dac:	f7fd fc24 	bl	80005f8 <__aeabi_dmul>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <threeDto2D+0x3d4>)
 8002dbe:	f7fd fc1b 	bl	80005f8 <__aeabi_dmul>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	f04f 0000 	mov.w	r0, #0
 8002dca:	4919      	ldr	r1, [pc, #100]	@ (8002e30 <threeDto2D+0x3d8>)
 8002dcc:	f7fd fa5c 	bl	8000288 <__aeabi_dsub>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	1d1c      	adds	r4, r3, #4
 8002ddc:	f7fd fee4 	bl	8000ba8 <__aeabi_d2f>
 8002de0:	4603      	mov	r3, r0
 8002de2:	6023      	str	r3, [r4, #0]

	return success;
 8002de4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3740      	adds	r7, #64	@ 0x40
 8002dec:	46bd      	mov	sp, r7
 8002dee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002df2:	bf00      	nop
 8002df4:	f3af 8000 	nop.w
 8002df8:	2e48e8a7 	.word	0x2e48e8a7
 8002dfc:	400921ff 	.word	0x400921ff
 8002e00:	52bd3c36 	.word	0x52bd3c36
 8002e04:	bff92196 	.word	0xbff92196
 8002e08:	52bd3c36 	.word	0x52bd3c36
 8002e0c:	3ff92196 	.word	0x3ff92196
 8002e10:	51eb851f 	.word	0x51eb851f
 8002e14:	bff91eb8 	.word	0xbff91eb8
 8002e18:	51eb851f 	.word	0x51eb851f
 8002e1c:	3ff91eb8 	.word	0x3ff91eb8
 8002e20:	851eb852 	.word	0x851eb852
 8002e24:	3ff451eb 	.word	0x3ff451eb
 8002e28:	3ff00000 	.word	0x3ff00000
 8002e2c:	40640000 	.word	0x40640000
 8002e30:	405e0000 	.word	0x405e0000

08002e34 <lcd3DPolyline>:
			break;
		}
	}
}

void lcd3DPolyline(int16_t *points, int16_t sides, uint16_t colour, float px, float py, float pz, float alpha, int8_t dotted, int8_t step){
 8002e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e38:	b093      	sub	sp, #76	@ 0x4c
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	61f8      	str	r0, [r7, #28]
 8002e3e:	4608      	mov	r0, r1
 8002e40:	4611      	mov	r1, r2
 8002e42:	ed87 0a05 	vstr	s0, [r7, #20]
 8002e46:	edc7 0a04 	vstr	s1, [r7, #16]
 8002e4a:	ed87 1a03 	vstr	s2, [r7, #12]
 8002e4e:	edc7 1a02 	vstr	s3, [r7, #8]
 8002e52:	461a      	mov	r2, r3
 8002e54:	4603      	mov	r3, r0
 8002e56:	837b      	strh	r3, [r7, #26]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	833b      	strh	r3, [r7, #24]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	71fb      	strb	r3, [r7, #7]
 8002e60:	466b      	mov	r3, sp
 8002e62:	461e      	mov	r6, r3
	int16_t polygonFormat[2*sides];
 8002e64:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002e68:	0059      	lsls	r1, r3, #1
 8002e6a:	1e4b      	subs	r3, r1, #1
 8002e6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e6e:	460a      	mov	r2, r1
 8002e70:	2300      	movs	r3, #0
 8002e72:	4690      	mov	r8, r2
 8002e74:	4699      	mov	r9, r3
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8002e82:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8002e86:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8002e8a:	460a      	mov	r2, r1
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	4614      	mov	r4, r2
 8002e90:	461d      	mov	r5, r3
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	012b      	lsls	r3, r5, #4
 8002e9c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002ea0:	0122      	lsls	r2, r4, #4
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	3307      	adds	r3, #7
 8002ea8:	08db      	lsrs	r3, r3, #3
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	ebad 0d03 	sub.w	sp, sp, r3
 8002eb0:	466b      	mov	r3, sp
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	085b      	lsrs	r3, r3, #1
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float_t playerCoord[3] = {px, py, pz};
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	633b      	str	r3, [r7, #48]	@ 0x30
	float twoDCoords[2];  // Temporary array for results
	uint8_t success = 0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	for(int16_t i=0; i<sides; i++){
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002ed2:	e03c      	b.n	8002f4e <lcd3DPolyline+0x11a>
		success = threeDto2D(&points[3 * i], playerCoord, alpha, twoDCoords);
 8002ed4:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 8002ed8:	4613      	mov	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4413      	add	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f107 0220 	add.w	r2, r7, #32
 8002eea:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002eee:	ed97 0a02 	vldr	s0, [r7, #8]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fdb0 	bl	8002a58 <threeDto2D>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		if(!success) return;	//if any point is behing camera it doesn't plot the object
 8002efe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <lcd3DPolyline+0xd6>
 8002f06:	46b5      	mov	sp, r6
 8002f08:	e07b      	b.n	8003002 <lcd3DPolyline+0x1ce>
		polygonFormat[2 * i] = (int16_t)(twoDCoords[0]);
 8002f0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f0e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002f12:	005a      	lsls	r2, r3, #1
 8002f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f18:	ee17 3a90 	vmov	r3, s15
 8002f1c:	b219      	sxth	r1, r3
 8002f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f20:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		polygonFormat[2 * i + 1] = (int16_t)(twoDCoords[1]);
 8002f24:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f28:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f34:	ee17 3a90 	vmov	r3, s15
 8002f38:	b219      	sxth	r1, r3
 8002f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f3c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int16_t i=0; i<sides; i++){
 8002f40:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002f4e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 8002f52:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	dbbc      	blt.n	8002ed4 <lcd3DPolyline+0xa0>
	}
	int16_t xRes = 320;
 8002f5a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002f5e:	873b      	strh	r3, [r7, #56]	@ 0x38
	int16_t yRes = 240;
 8002f60:	23f0      	movs	r3, #240	@ 0xf0
 8002f62:	86fb      	strh	r3, [r7, #54]	@ 0x36
	for(int8_t i=0; i<sides; i++) {
 8002f64:	2300      	movs	r3, #0
 8002f66:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002f6a:	e042      	b.n	8002ff2 <lcd3DPolyline+0x1be>
		if( (polygonFormat[2*i] > 0)&&(polygonFormat[2*i] < xRes)&&(polygonFormat[2*i+1] > 0)&&(polygonFormat[2*i+1] < yRes) ) {
 8002f6c:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8002f70:	005a      	lsls	r2, r3, #1
 8002f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f74:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	dd33      	ble.n	8002fe4 <lcd3DPolyline+0x1b0>
 8002f7c:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8002f80:	005a      	lsls	r2, r3, #1
 8002f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f84:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002f88:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	dd29      	ble.n	8002fe4 <lcd3DPolyline+0x1b0>
 8002f90:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f9a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	dd20      	ble.n	8002fe4 <lcd3DPolyline+0x1b0>
 8002fa2:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fac:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002fb0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	dd15      	ble.n	8002fe4 <lcd3DPolyline+0x1b0>
			if(!dotted) {
 8002fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d107      	bne.n	8002fd0 <lcd3DPolyline+0x19c>
				lcdPolyline( polygonFormat, sides, colour);
 8002fc0:	8b3a      	ldrh	r2, [r7, #24]
 8002fc2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002fca:	f7ff f8c5 	bl	8002158 <lcdPolyline>
			}
			else{
				lcdDottedPolyline( polygonFormat, sides, colour, step);
			}
			break;
 8002fce:	e017      	b.n	8003000 <lcd3DPolyline+0x1cc>
				lcdDottedPolyline( polygonFormat, sides, colour, step);
 8002fd0:	f997 3068 	ldrsb.w	r3, [r7, #104]	@ 0x68
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	8b3a      	ldrh	r2, [r7, #24]
 8002fd8:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8002fdc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002fde:	f7ff f905 	bl	80021ec <lcdDottedPolyline>
			break;
 8002fe2:	e00d      	b.n	8003000 <lcd3DPolyline+0x1cc>
	for(int8_t i=0; i<sides; i++) {
 8002fe4:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002ff2:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8002ff6:	b21b      	sxth	r3, r3
 8002ff8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	dcb5      	bgt.n	8002f6c <lcd3DPolyline+0x138>
 8003000:	46b5      	mov	sp, r6
		}
	}
}
 8003002:	374c      	adds	r7, #76	@ 0x4c
 8003004:	46bd      	mov	sp, r7
 8003006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800300c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800301c:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003028:	4013      	ands	r3, r2
 800302a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003034:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003038:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800303c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800303e:	4a04      	ldr	r2, [pc, #16]	@ (8003050 <__NVIC_SetPriorityGrouping+0x44>)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	60d3      	str	r3, [r2, #12]
}
 8003044:	bf00      	nop
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800305c:	4b06      	ldr	r3, [pc, #24]	@ (8003078 <LL_FLASH_SetLatency+0x24>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 0207 	bic.w	r2, r3, #7
 8003064:	4904      	ldr	r1, [pc, #16]	@ (8003078 <LL_FLASH_SetLatency+0x24>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4313      	orrs	r3, r2
 800306a:	600b      	str	r3, [r1, #0]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40022000 	.word	0x40022000

0800307c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003080:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <LL_FLASH_GetLatency+0x18>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0307 	and.w	r3, r3, #7
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40022000 	.word	0x40022000

08003098 <LL_GPIO_IsInputPinSet>:
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	4013      	ands	r3, r2
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
	...

080030c4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80030cc:	4b08      	ldr	r3, [pc, #32]	@ (80030f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	4907      	ldr	r1, [pc, #28]	@ (80030f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80030d8:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4013      	ands	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030e2:	68fb      	ldr	r3, [r7, #12]
}
 80030e4:	bf00      	nop
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	40021000 	.word	0x40021000

080030f4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80030fc:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <LL_APB2_GRP1_EnableClock+0x2c>)
 80030fe:	699a      	ldr	r2, [r3, #24]
 8003100:	4907      	ldr	r1, [pc, #28]	@ (8003120 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4313      	orrs	r3, r2
 8003106:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003108:	4b05      	ldr	r3, [pc, #20]	@ (8003120 <LL_APB2_GRP1_EnableClock+0x2c>)
 800310a:	699a      	ldr	r2, [r3, #24]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4013      	ands	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003112:	68fb      	ldr	r3, [r7, #12]
}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	40021000 	.word	0x40021000

08003124 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b04      	cmp	r3, #4
 8003130:	d106      	bne.n	8003140 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8003132:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <LL_SYSTICK_SetClkSource+0x34>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a08      	ldr	r2, [pc, #32]	@ (8003158 <LL_SYSTICK_SetClkSource+0x34>)
 8003138:	f043 0304 	orr.w	r3, r3, #4
 800313c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800313e:	e005      	b.n	800314c <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8003140:	4b05      	ldr	r3, [pc, #20]	@ (8003158 <LL_SYSTICK_SetClkSource+0x34>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a04      	ldr	r2, [pc, #16]	@ (8003158 <LL_SYSTICK_SetClkSource+0x34>)
 8003146:	f023 0304 	bic.w	r3, r3, #4
 800314a:	6013      	str	r3, [r2, #0]
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000e010 	.word	0xe000e010

0800315c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003160:	4b05      	ldr	r3, [pc, #20]	@ (8003178 <LL_RCC_HSI_Enable+0x1c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a04      	ldr	r2, [pc, #16]	@ (8003178 <LL_RCC_HSI_Enable+0x1c>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6013      	str	r3, [r2, #0]
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000

0800317c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003180:	4b06      	ldr	r3, [pc, #24]	@ (800319c <LL_RCC_HSI_IsReady+0x20>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b02      	cmp	r3, #2
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
}
 8003192:	4618      	mov	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	40021000 	.word	0x40021000

080031a0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80031a8:	4b07      	ldr	r3, [pc, #28]	@ (80031c8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4904      	ldr	r1, [pc, #16]	@ (80031c8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000

080031cc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <LL_RCC_SetSysClkSource+0x24>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f023 0203 	bic.w	r2, r3, #3
 80031dc:	4904      	ldr	r1, [pc, #16]	@ (80031f0 <LL_RCC_SetSysClkSource+0x24>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	40021000 	.word	0x40021000

080031f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80031f8:	4b04      	ldr	r3, [pc, #16]	@ (800320c <LL_RCC_GetSysClkSource+0x18>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 030c 	and.w	r3, r3, #12
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000

08003210 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003218:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <LL_RCC_SetAHBPrescaler+0x24>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003220:	4904      	ldr	r1, [pc, #16]	@ (8003234 <LL_RCC_SetAHBPrescaler+0x24>)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	40021000 	.word	0x40021000

08003238 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003240:	4b06      	ldr	r3, [pc, #24]	@ (800325c <LL_RCC_SetAPB1Prescaler+0x24>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003248:	4904      	ldr	r1, [pc, #16]	@ (800325c <LL_RCC_SetAPB1Prescaler+0x24>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	40021000 	.word	0x40021000

08003260 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003268:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <LL_RCC_SetAPB2Prescaler+0x24>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003270:	4904      	ldr	r1, [pc, #16]	@ (8003284 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	40021000 	.word	0x40021000

08003288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800328e:	2001      	movs	r0, #1
 8003290:	f7ff ff30 	bl	80030f4 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8003294:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003298:	f7ff ff14 	bl	80030c4 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800329c:	2003      	movs	r0, #3
 800329e:	f7ff feb5 	bl	800300c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032a2:	f000 f82d 	bl	8003300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032a6:	f7fe fb0d 	bl	80018c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80032aa:	f000 fd47 	bl	8003d3c <MX_SPI1_Init>

  initCD_Pin();
 80032ae:	f000 fde5 	bl	8003e7c <initCD_Pin>
  initCS_Pin();
 80032b2:	f000 fdc9 	bl	8003e48 <initCS_Pin>
  initRES_Pin();
 80032b6:	f000 fdfd 	bl	8003eb4 <initRES_Pin>

  LL_mDelay(1);
 80032ba:	2001      	movs	r0, #1
 80032bc:	f001 f994 	bl	80045e8 <LL_mDelay>

  uint8_t buttonD4_val = 1;		//NOT NEEDED NOW
 80032c0:	2301      	movs	r3, #1
 80032c2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 2 */
  lcdInitialise(LCD_ORIENTATION3);
 80032c4:	20c0      	movs	r0, #192	@ 0xc0
 80032c6:	f7fe fbad 	bl	8001a24 <lcdInitialise>
  lcdClearDisplay(decodeRgbValue(0, 0, 0));
 80032ca:	2200      	movs	r2, #0
 80032cc:	2100      	movs	r1, #0
 80032ce:	2000      	movs	r0, #0
 80032d0:	f7ff fadc 	bl	800288c <decodeRgbValue>
 80032d4:	4603      	mov	r3, r0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe fc84 	bl	8001be4 <lcdClearDisplay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//buttonD4_val = LL_GPIO_ReadInputPort(LL_GPIO_PIN_ALL);

	buttonD4_val = LL_GPIO_IsInputPinSet(GPIOB,GPIO_PIN_4);
 80032dc:	2110      	movs	r1, #16
 80032de:	4807      	ldr	r0, [pc, #28]	@ (80032fc <main+0x74>)
 80032e0:	f7ff feda 	bl	8003098 <LL_GPIO_IsInputPinSet>
 80032e4:	4603      	mov	r3, r0
 80032e6:	71fb      	strb	r3, [r7, #7]
	if(buttonD4_val == 0)
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f6      	bne.n	80032dc <main+0x54>
	{
	  menu();
 80032ee:	f000 f845 	bl	800337c <menu>
	  LL_mDelay(300);
 80032f2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80032f6:	f001 f977 	bl	80045e8 <LL_mDelay>
	buttonD4_val = LL_GPIO_IsInputPinSet(GPIOB,GPIO_PIN_4);
 80032fa:	e7ef      	b.n	80032dc <main+0x54>
 80032fc:	48000400 	.word	0x48000400

08003300 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8003304:	2000      	movs	r0, #0
 8003306:	f7ff fea5 	bl	8003054 <LL_FLASH_SetLatency>

	  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800330a:	f7ff feb7 	bl	800307c <LL_FLASH_GetLatency>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <SystemClock_Config+0x18>
	  {
	  Error_Handler();
 8003314:	f000 f82a 	bl	800336c <Error_Handler>
	  }
	  LL_RCC_HSI_Enable();
 8003318:	f7ff ff20 	bl	800315c <LL_RCC_HSI_Enable>

	   // Wait till HSI is ready
	  while(LL_RCC_HSI_IsReady() != 1)
 800331c:	bf00      	nop
 800331e:	f7ff ff2d 	bl	800317c <LL_RCC_HSI_IsReady>
 8003322:	4603      	mov	r3, r0
 8003324:	2b01      	cmp	r3, #1
 8003326:	d1fa      	bne.n	800331e <SystemClock_Config+0x1e>
	  {

	  }
	  LL_RCC_HSI_SetCalibTrimming(16);
 8003328:	2010      	movs	r0, #16
 800332a:	f7ff ff39 	bl	80031a0 <LL_RCC_HSI_SetCalibTrimming>
	  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800332e:	2000      	movs	r0, #0
 8003330:	f7ff ff6e 	bl	8003210 <LL_RCC_SetAHBPrescaler>
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003334:	2000      	movs	r0, #0
 8003336:	f7ff ff7f 	bl	8003238 <LL_RCC_SetAPB1Prescaler>
	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800333a:	2000      	movs	r0, #0
 800333c:	f7ff ff90 	bl	8003260 <LL_RCC_SetAPB2Prescaler>
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003340:	2000      	movs	r0, #0
 8003342:	f7ff ff43 	bl	80031cc <LL_RCC_SetSysClkSource>

	   // Wait till System clock is ready
	  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003346:	bf00      	nop
 8003348:	f7ff ff54 	bl	80031f4 <LL_RCC_GetSysClkSource>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1fa      	bne.n	8003348 <SystemClock_Config+0x48>
	  {

	  }
	  LL_Init1msTick(8000000);
 8003352:	4805      	ldr	r0, [pc, #20]	@ (8003368 <SystemClock_Config+0x68>)
 8003354:	f001 f93a 	bl	80045cc <LL_Init1msTick>
	  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8003358:	2004      	movs	r0, #4
 800335a:	f7ff fee3 	bl	8003124 <LL_SYSTICK_SetClkSource>
	  LL_SetSystemCoreClock(8000000);
 800335e:	4802      	ldr	r0, [pc, #8]	@ (8003368 <SystemClock_Config+0x68>)
 8003360:	f001 f968 	bl	8004634 <LL_SetSystemCoreClock>
}
 8003364:	bf00      	nop
 8003366:	bd80      	pop	{r7, pc}
 8003368:	007a1200 	.word	0x007a1200

0800336c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <menu>:

#include "ili9163.h"
#include "gameLogic.h"
#include "spi.h"

void menu(){
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b093      	sub	sp, #76	@ 0x4c
 8003380:	af02      	add	r7, sp, #8
	lcdPutSSized("DOOM", 215, 0, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),8);
 8003382:	221f      	movs	r2, #31
 8003384:	211f      	movs	r1, #31
 8003386:	201f      	movs	r0, #31
 8003388:	f7ff fa80 	bl	800288c <decodeRgbValue>
 800338c:	4603      	mov	r3, r0
 800338e:	461c      	mov	r4, r3
 8003390:	2200      	movs	r2, #0
 8003392:	2100      	movs	r1, #0
 8003394:	2000      	movs	r0, #0
 8003396:	f7ff fa79 	bl	800288c <decodeRgbValue>
 800339a:	4603      	mov	r3, r0
 800339c:	461a      	mov	r2, r3
 800339e:	2308      	movs	r3, #8
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	9200      	str	r2, [sp, #0]
 80033a4:	4623      	mov	r3, r4
 80033a6:	2200      	movs	r2, #0
 80033a8:	21d7      	movs	r1, #215	@ 0xd7
 80033aa:	48a3      	ldr	r0, [pc, #652]	@ (8003638 <menu+0x2bc>)
 80033ac:	f7ff fad1 	bl	8002952 <lcdPutSSized>
	lcdPutSSized("NEW GAME", 180, 64, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80033b0:	221f      	movs	r2, #31
 80033b2:	211f      	movs	r1, #31
 80033b4:	201f      	movs	r0, #31
 80033b6:	f7ff fa69 	bl	800288c <decodeRgbValue>
 80033ba:	4603      	mov	r3, r0
 80033bc:	461c      	mov	r4, r3
 80033be:	2200      	movs	r2, #0
 80033c0:	2100      	movs	r1, #0
 80033c2:	2000      	movs	r0, #0
 80033c4:	f7ff fa62 	bl	800288c <decodeRgbValue>
 80033c8:	4603      	mov	r3, r0
 80033ca:	461a      	mov	r2, r3
 80033cc:	2302      	movs	r3, #2
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	9200      	str	r2, [sp, #0]
 80033d2:	4623      	mov	r3, r4
 80033d4:	2240      	movs	r2, #64	@ 0x40
 80033d6:	21b4      	movs	r1, #180	@ 0xb4
 80033d8:	4898      	ldr	r0, [pc, #608]	@ (800363c <menu+0x2c0>)
 80033da:	f7ff faba 	bl	8002952 <lcdPutSSized>
	lcdPutSSized("OPTIONS", 180, 80, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80033de:	221f      	movs	r2, #31
 80033e0:	211f      	movs	r1, #31
 80033e2:	201f      	movs	r0, #31
 80033e4:	f7ff fa52 	bl	800288c <decodeRgbValue>
 80033e8:	4603      	mov	r3, r0
 80033ea:	461c      	mov	r4, r3
 80033ec:	2200      	movs	r2, #0
 80033ee:	2100      	movs	r1, #0
 80033f0:	2000      	movs	r0, #0
 80033f2:	f7ff fa4b 	bl	800288c <decodeRgbValue>
 80033f6:	4603      	mov	r3, r0
 80033f8:	461a      	mov	r2, r3
 80033fa:	2302      	movs	r3, #2
 80033fc:	9301      	str	r3, [sp, #4]
 80033fe:	9200      	str	r2, [sp, #0]
 8003400:	4623      	mov	r3, r4
 8003402:	2250      	movs	r2, #80	@ 0x50
 8003404:	21b4      	movs	r1, #180	@ 0xb4
 8003406:	488e      	ldr	r0, [pc, #568]	@ (8003640 <menu+0x2c4>)
 8003408:	f7ff faa3 	bl	8002952 <lcdPutSSized>
	lcdPutSSized("LOAD GAME", 180, 96, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 800340c:	221f      	movs	r2, #31
 800340e:	211f      	movs	r1, #31
 8003410:	201f      	movs	r0, #31
 8003412:	f7ff fa3b 	bl	800288c <decodeRgbValue>
 8003416:	4603      	mov	r3, r0
 8003418:	461c      	mov	r4, r3
 800341a:	2200      	movs	r2, #0
 800341c:	2100      	movs	r1, #0
 800341e:	2000      	movs	r0, #0
 8003420:	f7ff fa34 	bl	800288c <decodeRgbValue>
 8003424:	4603      	mov	r3, r0
 8003426:	461a      	mov	r2, r3
 8003428:	2302      	movs	r3, #2
 800342a:	9301      	str	r3, [sp, #4]
 800342c:	9200      	str	r2, [sp, #0]
 800342e:	4623      	mov	r3, r4
 8003430:	2260      	movs	r2, #96	@ 0x60
 8003432:	21b4      	movs	r1, #180	@ 0xb4
 8003434:	4883      	ldr	r0, [pc, #524]	@ (8003644 <menu+0x2c8>)
 8003436:	f7ff fa8c 	bl	8002952 <lcdPutSSized>
	lcdPutSSized("SAVE GAME", 180, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 800343a:	221f      	movs	r2, #31
 800343c:	211f      	movs	r1, #31
 800343e:	201f      	movs	r0, #31
 8003440:	f7ff fa24 	bl	800288c <decodeRgbValue>
 8003444:	4603      	mov	r3, r0
 8003446:	461c      	mov	r4, r3
 8003448:	2200      	movs	r2, #0
 800344a:	2100      	movs	r1, #0
 800344c:	2000      	movs	r0, #0
 800344e:	f7ff fa1d 	bl	800288c <decodeRgbValue>
 8003452:	4603      	mov	r3, r0
 8003454:	461a      	mov	r2, r3
 8003456:	2302      	movs	r3, #2
 8003458:	9301      	str	r3, [sp, #4]
 800345a:	9200      	str	r2, [sp, #0]
 800345c:	4623      	mov	r3, r4
 800345e:	2270      	movs	r2, #112	@ 0x70
 8003460:	21b4      	movs	r1, #180	@ 0xb4
 8003462:	4879      	ldr	r0, [pc, #484]	@ (8003648 <menu+0x2cc>)
 8003464:	f7ff fa75 	bl	8002952 <lcdPutSSized>
	lcdPutSSized("READ THIS!", 180, 128, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8003468:	221f      	movs	r2, #31
 800346a:	211f      	movs	r1, #31
 800346c:	201f      	movs	r0, #31
 800346e:	f7ff fa0d 	bl	800288c <decodeRgbValue>
 8003472:	4603      	mov	r3, r0
 8003474:	461c      	mov	r4, r3
 8003476:	2200      	movs	r2, #0
 8003478:	2100      	movs	r1, #0
 800347a:	2000      	movs	r0, #0
 800347c:	f7ff fa06 	bl	800288c <decodeRgbValue>
 8003480:	4603      	mov	r3, r0
 8003482:	461a      	mov	r2, r3
 8003484:	2302      	movs	r3, #2
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	9200      	str	r2, [sp, #0]
 800348a:	4623      	mov	r3, r4
 800348c:	2280      	movs	r2, #128	@ 0x80
 800348e:	21b4      	movs	r1, #180	@ 0xb4
 8003490:	486e      	ldr	r0, [pc, #440]	@ (800364c <menu+0x2d0>)
 8003492:	f7ff fa5e 	bl	8002952 <lcdPutSSized>
	lcdPutSSized("QUIT GAME", 180, 144, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8003496:	221f      	movs	r2, #31
 8003498:	211f      	movs	r1, #31
 800349a:	201f      	movs	r0, #31
 800349c:	f7ff f9f6 	bl	800288c <decodeRgbValue>
 80034a0:	4603      	mov	r3, r0
 80034a2:	461c      	mov	r4, r3
 80034a4:	2200      	movs	r2, #0
 80034a6:	2100      	movs	r1, #0
 80034a8:	2000      	movs	r0, #0
 80034aa:	f7ff f9ef 	bl	800288c <decodeRgbValue>
 80034ae:	4603      	mov	r3, r0
 80034b0:	461a      	mov	r2, r3
 80034b2:	2302      	movs	r3, #2
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	9200      	str	r2, [sp, #0]
 80034b8:	4623      	mov	r3, r4
 80034ba:	2290      	movs	r2, #144	@ 0x90
 80034bc:	21b4      	movs	r1, #180	@ 0xb4
 80034be:	4864      	ldr	r0, [pc, #400]	@ (8003650 <menu+0x2d4>)
 80034c0:	f7ff fa47 	bl	8002952 <lcdPutSSized>

	int16_t ammo = 24;
 80034c4:	2318      	movs	r3, #24
 80034c6:	877b      	strh	r3, [r7, #58]	@ 0x3a
	int16_t health = 78;
 80034c8:	234e      	movs	r3, #78	@ 0x4e
 80034ca:	873b      	strh	r3, [r7, #56]	@ 0x38
	int16_t armor = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
	char ammoText[16];
	char healthText[16];
	char armorText[16];


	lcdPutS("AMMO", 250, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 80034d0:	221f      	movs	r2, #31
 80034d2:	211f      	movs	r1, #31
 80034d4:	201f      	movs	r0, #31
 80034d6:	f7ff f9d9 	bl	800288c <decodeRgbValue>
 80034da:	4603      	mov	r3, r0
 80034dc:	461c      	mov	r4, r3
 80034de:	2200      	movs	r2, #0
 80034e0:	2100      	movs	r1, #0
 80034e2:	2000      	movs	r0, #0
 80034e4:	f7ff f9d2 	bl	800288c <decodeRgbValue>
 80034e8:	4603      	mov	r3, r0
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	4623      	mov	r3, r4
 80034ee:	22e6      	movs	r2, #230	@ 0xe6
 80034f0:	21fa      	movs	r1, #250	@ 0xfa
 80034f2:	4858      	ldr	r0, [pc, #352]	@ (8003654 <menu+0x2d8>)
 80034f4:	f7ff f9e6 	bl	80028c4 <lcdPutS>
	sprintf(ammoText, "%d", ammo);
 80034f8:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 80034fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003500:	4955      	ldr	r1, [pc, #340]	@ (8003658 <menu+0x2dc>)
 8003502:	4618      	mov	r0, r3
 8003504:	f001 fa8e 	bl	8004a24 <siprintf>
	lcdPutS(ammoText, 240, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8003508:	221f      	movs	r2, #31
 800350a:	211f      	movs	r1, #31
 800350c:	201f      	movs	r0, #31
 800350e:	f7ff f9bd 	bl	800288c <decodeRgbValue>
 8003512:	4603      	mov	r3, r0
 8003514:	461c      	mov	r4, r3
 8003516:	2200      	movs	r2, #0
 8003518:	2100      	movs	r1, #0
 800351a:	2000      	movs	r0, #0
 800351c:	f7ff f9b6 	bl	800288c <decodeRgbValue>
 8003520:	4603      	mov	r3, r0
 8003522:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	4623      	mov	r3, r4
 800352a:	22de      	movs	r2, #222	@ 0xde
 800352c:	21f0      	movs	r1, #240	@ 0xf0
 800352e:	f7ff f9c9 	bl	80028c4 <lcdPutS>

	lcdPutS("HEALTH", 145, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8003532:	221f      	movs	r2, #31
 8003534:	211f      	movs	r1, #31
 8003536:	201f      	movs	r0, #31
 8003538:	f7ff f9a8 	bl	800288c <decodeRgbValue>
 800353c:	4603      	mov	r3, r0
 800353e:	461c      	mov	r4, r3
 8003540:	2200      	movs	r2, #0
 8003542:	2100      	movs	r1, #0
 8003544:	2000      	movs	r0, #0
 8003546:	f7ff f9a1 	bl	800288c <decodeRgbValue>
 800354a:	4603      	mov	r3, r0
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	4623      	mov	r3, r4
 8003550:	22e6      	movs	r2, #230	@ 0xe6
 8003552:	2191      	movs	r1, #145	@ 0x91
 8003554:	4841      	ldr	r0, [pc, #260]	@ (800365c <menu+0x2e0>)
 8003556:	f7ff f9b5 	bl	80028c4 <lcdPutS>
	sprintf(healthText, "%d%%", health);
 800355a:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 800355e:	f107 0314 	add.w	r3, r7, #20
 8003562:	493f      	ldr	r1, [pc, #252]	@ (8003660 <menu+0x2e4>)
 8003564:	4618      	mov	r0, r3
 8003566:	f001 fa5d 	bl	8004a24 <siprintf>
	lcdPutS(healthText, 125, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 800356a:	221f      	movs	r2, #31
 800356c:	211f      	movs	r1, #31
 800356e:	201f      	movs	r0, #31
 8003570:	f7ff f98c 	bl	800288c <decodeRgbValue>
 8003574:	4603      	mov	r3, r0
 8003576:	461c      	mov	r4, r3
 8003578:	2200      	movs	r2, #0
 800357a:	2100      	movs	r1, #0
 800357c:	2000      	movs	r0, #0
 800357e:	f7ff f985 	bl	800288c <decodeRgbValue>
 8003582:	4603      	mov	r3, r0
 8003584:	f107 0014 	add.w	r0, r7, #20
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	4623      	mov	r3, r4
 800358c:	22de      	movs	r2, #222	@ 0xde
 800358e:	217d      	movs	r1, #125	@ 0x7d
 8003590:	f7ff f998 	bl	80028c4 <lcdPutS>

	lcdPutS("ARMOR", 35, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8003594:	221f      	movs	r2, #31
 8003596:	211f      	movs	r1, #31
 8003598:	201f      	movs	r0, #31
 800359a:	f7ff f977 	bl	800288c <decodeRgbValue>
 800359e:	4603      	mov	r3, r0
 80035a0:	461c      	mov	r4, r3
 80035a2:	2200      	movs	r2, #0
 80035a4:	2100      	movs	r1, #0
 80035a6:	2000      	movs	r0, #0
 80035a8:	f7ff f970 	bl	800288c <decodeRgbValue>
 80035ac:	4603      	mov	r3, r0
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	4623      	mov	r3, r4
 80035b2:	22e6      	movs	r2, #230	@ 0xe6
 80035b4:	2123      	movs	r1, #35	@ 0x23
 80035b6:	482b      	ldr	r0, [pc, #172]	@ (8003664 <menu+0x2e8>)
 80035b8:	f7ff f984 	bl	80028c4 <lcdPutS>
	sprintf(armorText, "%d%%", armor);
 80035bc:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80035c0:	1d3b      	adds	r3, r7, #4
 80035c2:	4927      	ldr	r1, [pc, #156]	@ (8003660 <menu+0x2e4>)
 80035c4:	4618      	mov	r0, r3
 80035c6:	f001 fa2d 	bl	8004a24 <siprintf>
	lcdPutS(armorText, 20, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 80035ca:	221f      	movs	r2, #31
 80035cc:	211f      	movs	r1, #31
 80035ce:	201f      	movs	r0, #31
 80035d0:	f7ff f95c 	bl	800288c <decodeRgbValue>
 80035d4:	4603      	mov	r3, r0
 80035d6:	461c      	mov	r4, r3
 80035d8:	2200      	movs	r2, #0
 80035da:	2100      	movs	r1, #0
 80035dc:	2000      	movs	r0, #0
 80035de:	f7ff f955 	bl	800288c <decodeRgbValue>
 80035e2:	4603      	mov	r3, r0
 80035e4:	1d38      	adds	r0, r7, #4
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	4623      	mov	r3, r4
 80035ea:	22de      	movs	r2, #222	@ 0xde
 80035ec:	2114      	movs	r1, #20
 80035ee:	f7ff f969 	bl	80028c4 <lcdPutS>

		int select = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		while(select != 6)	//main menu cycle
 80035f6:	e171      	b.n	80038dc <menu+0x560>
		{

			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) == GPIO_PIN_RESET)	//choose lower option
 80035f8:	2102      	movs	r1, #2
 80035fa:	481b      	ldr	r0, [pc, #108]	@ (8003668 <menu+0x2ec>)
 80035fc:	f000 fdb0 	bl	8004160 <HAL_GPIO_ReadPin>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10b      	bne.n	800361e <menu+0x2a2>
			{
				if(select == 0)
 8003606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d102      	bne.n	8003612 <menu+0x296>
					select = 5;
 800360c:	2305      	movs	r3, #5
 800360e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003610:	e005      	b.n	800361e <menu+0x2a2>
				else if(select != 0)
 8003612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <menu+0x2a2>
					select--;
 8003618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800361a:	3b01      	subs	r3, #1
 800361c:	63fb      	str	r3, [r7, #60]	@ 0x3c
			}

			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0) == GPIO_PIN_RESET)	//choose option above
 800361e:	2101      	movs	r1, #1
 8003620:	4811      	ldr	r0, [pc, #68]	@ (8003668 <menu+0x2ec>)
 8003622:	f000 fd9d 	bl	8004160 <HAL_GPIO_ReadPin>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d125      	bne.n	8003678 <menu+0x2fc>
			{
				if(select == 5)
 800362c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800362e:	2b05      	cmp	r3, #5
 8003630:	d11c      	bne.n	800366c <menu+0x2f0>
					select = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003636:	e01f      	b.n	8003678 <menu+0x2fc>
 8003638:	08006d98 	.word	0x08006d98
 800363c:	08006da0 	.word	0x08006da0
 8003640:	08006dac 	.word	0x08006dac
 8003644:	08006db4 	.word	0x08006db4
 8003648:	08006dc0 	.word	0x08006dc0
 800364c:	08006dcc 	.word	0x08006dcc
 8003650:	08006dd8 	.word	0x08006dd8
 8003654:	08006de4 	.word	0x08006de4
 8003658:	08006dec 	.word	0x08006dec
 800365c:	08006df0 	.word	0x08006df0
 8003660:	08006df8 	.word	0x08006df8
 8003664:	08006e00 	.word	0x08006e00
 8003668:	48000400 	.word	0x48000400
				else if(select != 5)
 800366c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800366e:	2b05      	cmp	r3, #5
 8003670:	d002      	beq.n	8003678 <menu+0x2fc>
					select++;
 8003672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003674:	3301      	adds	r3, #1
 8003676:	63fb      	str	r3, [r7, #60]	@ 0x3c
			}

			if(select == 0)
 8003678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800367a:	2b00      	cmp	r3, #0
 800367c:	d12d      	bne.n	80036da <menu+0x35e>
			{
				lcdPutSSized("NEW GAME", 180, 64, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 800367e:	2200      	movs	r2, #0
 8003680:	2100      	movs	r1, #0
 8003682:	2000      	movs	r0, #0
 8003684:	f7ff f902 	bl	800288c <decodeRgbValue>
 8003688:	4603      	mov	r3, r0
 800368a:	461c      	mov	r4, r3
 800368c:	2200      	movs	r2, #0
 800368e:	2100      	movs	r1, #0
 8003690:	2000      	movs	r0, #0
 8003692:	f7ff f8fb 	bl	800288c <decodeRgbValue>
 8003696:	4603      	mov	r3, r0
 8003698:	461a      	mov	r2, r3
 800369a:	2302      	movs	r3, #2
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	9200      	str	r2, [sp, #0]
 80036a0:	4623      	mov	r3, r4
 80036a2:	2240      	movs	r2, #64	@ 0x40
 80036a4:	21b4      	movs	r1, #180	@ 0xb4
 80036a6:	48d8      	ldr	r0, [pc, #864]	@ (8003a08 <menu+0x68c>)
 80036a8:	f7ff f953 	bl	8002952 <lcdPutSSized>
				lcdPutSSized("NEW GAME", 180, 64, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80036ac:	221f      	movs	r2, #31
 80036ae:	211f      	movs	r1, #31
 80036b0:	201f      	movs	r0, #31
 80036b2:	f7ff f8eb 	bl	800288c <decodeRgbValue>
 80036b6:	4603      	mov	r3, r0
 80036b8:	461c      	mov	r4, r3
 80036ba:	2200      	movs	r2, #0
 80036bc:	2100      	movs	r1, #0
 80036be:	2000      	movs	r0, #0
 80036c0:	f7ff f8e4 	bl	800288c <decodeRgbValue>
 80036c4:	4603      	mov	r3, r0
 80036c6:	461a      	mov	r2, r3
 80036c8:	2302      	movs	r3, #2
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	9200      	str	r2, [sp, #0]
 80036ce:	4623      	mov	r3, r4
 80036d0:	2240      	movs	r2, #64	@ 0x40
 80036d2:	21b4      	movs	r1, #180	@ 0xb4
 80036d4:	48cc      	ldr	r0, [pc, #816]	@ (8003a08 <menu+0x68c>)
 80036d6:	f7ff f93c 	bl	8002952 <lcdPutSSized>
			}
			if(select == 1)
 80036da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d12d      	bne.n	800373c <menu+0x3c0>
			{
				lcdPutSSized("OPTIONS", 180, 80, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 80036e0:	2200      	movs	r2, #0
 80036e2:	2100      	movs	r1, #0
 80036e4:	2000      	movs	r0, #0
 80036e6:	f7ff f8d1 	bl	800288c <decodeRgbValue>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461c      	mov	r4, r3
 80036ee:	2200      	movs	r2, #0
 80036f0:	2100      	movs	r1, #0
 80036f2:	2000      	movs	r0, #0
 80036f4:	f7ff f8ca 	bl	800288c <decodeRgbValue>
 80036f8:	4603      	mov	r3, r0
 80036fa:	461a      	mov	r2, r3
 80036fc:	2302      	movs	r3, #2
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	9200      	str	r2, [sp, #0]
 8003702:	4623      	mov	r3, r4
 8003704:	2250      	movs	r2, #80	@ 0x50
 8003706:	21b4      	movs	r1, #180	@ 0xb4
 8003708:	48c0      	ldr	r0, [pc, #768]	@ (8003a0c <menu+0x690>)
 800370a:	f7ff f922 	bl	8002952 <lcdPutSSized>
				lcdPutSSized("OPTIONS", 180, 80, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 800370e:	221f      	movs	r2, #31
 8003710:	211f      	movs	r1, #31
 8003712:	201f      	movs	r0, #31
 8003714:	f7ff f8ba 	bl	800288c <decodeRgbValue>
 8003718:	4603      	mov	r3, r0
 800371a:	461c      	mov	r4, r3
 800371c:	2200      	movs	r2, #0
 800371e:	2100      	movs	r1, #0
 8003720:	2000      	movs	r0, #0
 8003722:	f7ff f8b3 	bl	800288c <decodeRgbValue>
 8003726:	4603      	mov	r3, r0
 8003728:	461a      	mov	r2, r3
 800372a:	2302      	movs	r3, #2
 800372c:	9301      	str	r3, [sp, #4]
 800372e:	9200      	str	r2, [sp, #0]
 8003730:	4623      	mov	r3, r4
 8003732:	2250      	movs	r2, #80	@ 0x50
 8003734:	21b4      	movs	r1, #180	@ 0xb4
 8003736:	48b5      	ldr	r0, [pc, #724]	@ (8003a0c <menu+0x690>)
 8003738:	f7ff f90b 	bl	8002952 <lcdPutSSized>
			}
			if(select == 2)
 800373c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800373e:	2b02      	cmp	r3, #2
 8003740:	d12d      	bne.n	800379e <menu+0x422>
			{
				lcdPutSSized("LOAD GAME", 180, 96, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8003742:	2200      	movs	r2, #0
 8003744:	2100      	movs	r1, #0
 8003746:	2000      	movs	r0, #0
 8003748:	f7ff f8a0 	bl	800288c <decodeRgbValue>
 800374c:	4603      	mov	r3, r0
 800374e:	461c      	mov	r4, r3
 8003750:	2200      	movs	r2, #0
 8003752:	2100      	movs	r1, #0
 8003754:	2000      	movs	r0, #0
 8003756:	f7ff f899 	bl	800288c <decodeRgbValue>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	2302      	movs	r3, #2
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	9200      	str	r2, [sp, #0]
 8003764:	4623      	mov	r3, r4
 8003766:	2260      	movs	r2, #96	@ 0x60
 8003768:	21b4      	movs	r1, #180	@ 0xb4
 800376a:	48a9      	ldr	r0, [pc, #676]	@ (8003a10 <menu+0x694>)
 800376c:	f7ff f8f1 	bl	8002952 <lcdPutSSized>
				lcdPutSSized("LOAD GAME", 180, 96, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8003770:	221f      	movs	r2, #31
 8003772:	211f      	movs	r1, #31
 8003774:	201f      	movs	r0, #31
 8003776:	f7ff f889 	bl	800288c <decodeRgbValue>
 800377a:	4603      	mov	r3, r0
 800377c:	461c      	mov	r4, r3
 800377e:	2200      	movs	r2, #0
 8003780:	2100      	movs	r1, #0
 8003782:	2000      	movs	r0, #0
 8003784:	f7ff f882 	bl	800288c <decodeRgbValue>
 8003788:	4603      	mov	r3, r0
 800378a:	461a      	mov	r2, r3
 800378c:	2302      	movs	r3, #2
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	9200      	str	r2, [sp, #0]
 8003792:	4623      	mov	r3, r4
 8003794:	2260      	movs	r2, #96	@ 0x60
 8003796:	21b4      	movs	r1, #180	@ 0xb4
 8003798:	489d      	ldr	r0, [pc, #628]	@ (8003a10 <menu+0x694>)
 800379a:	f7ff f8da 	bl	8002952 <lcdPutSSized>
			}
			if(select == 3)
 800379e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d12d      	bne.n	8003800 <menu+0x484>
			{
				lcdPutSSized("SAVE GAME", 180, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 80037a4:	2200      	movs	r2, #0
 80037a6:	2100      	movs	r1, #0
 80037a8:	2000      	movs	r0, #0
 80037aa:	f7ff f86f 	bl	800288c <decodeRgbValue>
 80037ae:	4603      	mov	r3, r0
 80037b0:	461c      	mov	r4, r3
 80037b2:	2200      	movs	r2, #0
 80037b4:	2100      	movs	r1, #0
 80037b6:	2000      	movs	r0, #0
 80037b8:	f7ff f868 	bl	800288c <decodeRgbValue>
 80037bc:	4603      	mov	r3, r0
 80037be:	461a      	mov	r2, r3
 80037c0:	2302      	movs	r3, #2
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	9200      	str	r2, [sp, #0]
 80037c6:	4623      	mov	r3, r4
 80037c8:	2270      	movs	r2, #112	@ 0x70
 80037ca:	21b4      	movs	r1, #180	@ 0xb4
 80037cc:	4891      	ldr	r0, [pc, #580]	@ (8003a14 <menu+0x698>)
 80037ce:	f7ff f8c0 	bl	8002952 <lcdPutSSized>
				lcdPutSSized("SAVE GAME", 180, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80037d2:	221f      	movs	r2, #31
 80037d4:	211f      	movs	r1, #31
 80037d6:	201f      	movs	r0, #31
 80037d8:	f7ff f858 	bl	800288c <decodeRgbValue>
 80037dc:	4603      	mov	r3, r0
 80037de:	461c      	mov	r4, r3
 80037e0:	2200      	movs	r2, #0
 80037e2:	2100      	movs	r1, #0
 80037e4:	2000      	movs	r0, #0
 80037e6:	f7ff f851 	bl	800288c <decodeRgbValue>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	2302      	movs	r3, #2
 80037f0:	9301      	str	r3, [sp, #4]
 80037f2:	9200      	str	r2, [sp, #0]
 80037f4:	4623      	mov	r3, r4
 80037f6:	2270      	movs	r2, #112	@ 0x70
 80037f8:	21b4      	movs	r1, #180	@ 0xb4
 80037fa:	4886      	ldr	r0, [pc, #536]	@ (8003a14 <menu+0x698>)
 80037fc:	f7ff f8a9 	bl	8002952 <lcdPutSSized>
			}
			if(select == 4)
 8003800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003802:	2b04      	cmp	r3, #4
 8003804:	d12d      	bne.n	8003862 <menu+0x4e6>
			{
				lcdPutSSized("READ THIS!", 180, 128, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8003806:	2200      	movs	r2, #0
 8003808:	2100      	movs	r1, #0
 800380a:	2000      	movs	r0, #0
 800380c:	f7ff f83e 	bl	800288c <decodeRgbValue>
 8003810:	4603      	mov	r3, r0
 8003812:	461c      	mov	r4, r3
 8003814:	2200      	movs	r2, #0
 8003816:	2100      	movs	r1, #0
 8003818:	2000      	movs	r0, #0
 800381a:	f7ff f837 	bl	800288c <decodeRgbValue>
 800381e:	4603      	mov	r3, r0
 8003820:	461a      	mov	r2, r3
 8003822:	2302      	movs	r3, #2
 8003824:	9301      	str	r3, [sp, #4]
 8003826:	9200      	str	r2, [sp, #0]
 8003828:	4623      	mov	r3, r4
 800382a:	2280      	movs	r2, #128	@ 0x80
 800382c:	21b4      	movs	r1, #180	@ 0xb4
 800382e:	487a      	ldr	r0, [pc, #488]	@ (8003a18 <menu+0x69c>)
 8003830:	f7ff f88f 	bl	8002952 <lcdPutSSized>
				lcdPutSSized("READ THIS!", 180, 128, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8003834:	221f      	movs	r2, #31
 8003836:	211f      	movs	r1, #31
 8003838:	201f      	movs	r0, #31
 800383a:	f7ff f827 	bl	800288c <decodeRgbValue>
 800383e:	4603      	mov	r3, r0
 8003840:	461c      	mov	r4, r3
 8003842:	2200      	movs	r2, #0
 8003844:	2100      	movs	r1, #0
 8003846:	2000      	movs	r0, #0
 8003848:	f7ff f820 	bl	800288c <decodeRgbValue>
 800384c:	4603      	mov	r3, r0
 800384e:	461a      	mov	r2, r3
 8003850:	2302      	movs	r3, #2
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	9200      	str	r2, [sp, #0]
 8003856:	4623      	mov	r3, r4
 8003858:	2280      	movs	r2, #128	@ 0x80
 800385a:	21b4      	movs	r1, #180	@ 0xb4
 800385c:	486e      	ldr	r0, [pc, #440]	@ (8003a18 <menu+0x69c>)
 800385e:	f7ff f878 	bl	8002952 <lcdPutSSized>
			}
			if(select == 5)
 8003862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003864:	2b05      	cmp	r3, #5
 8003866:	d12d      	bne.n	80038c4 <menu+0x548>
			{
				lcdPutSSized("QUIT GAME", 180, 144, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8003868:	2200      	movs	r2, #0
 800386a:	2100      	movs	r1, #0
 800386c:	2000      	movs	r0, #0
 800386e:	f7ff f80d 	bl	800288c <decodeRgbValue>
 8003872:	4603      	mov	r3, r0
 8003874:	461c      	mov	r4, r3
 8003876:	2200      	movs	r2, #0
 8003878:	2100      	movs	r1, #0
 800387a:	2000      	movs	r0, #0
 800387c:	f7ff f806 	bl	800288c <decodeRgbValue>
 8003880:	4603      	mov	r3, r0
 8003882:	461a      	mov	r2, r3
 8003884:	2302      	movs	r3, #2
 8003886:	9301      	str	r3, [sp, #4]
 8003888:	9200      	str	r2, [sp, #0]
 800388a:	4623      	mov	r3, r4
 800388c:	2290      	movs	r2, #144	@ 0x90
 800388e:	21b4      	movs	r1, #180	@ 0xb4
 8003890:	4862      	ldr	r0, [pc, #392]	@ (8003a1c <menu+0x6a0>)
 8003892:	f7ff f85e 	bl	8002952 <lcdPutSSized>
				lcdPutSSized("QUIT GAME", 180, 144, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8003896:	221f      	movs	r2, #31
 8003898:	211f      	movs	r1, #31
 800389a:	201f      	movs	r0, #31
 800389c:	f7fe fff6 	bl	800288c <decodeRgbValue>
 80038a0:	4603      	mov	r3, r0
 80038a2:	461c      	mov	r4, r3
 80038a4:	2200      	movs	r2, #0
 80038a6:	2100      	movs	r1, #0
 80038a8:	2000      	movs	r0, #0
 80038aa:	f7fe ffef 	bl	800288c <decodeRgbValue>
 80038ae:	4603      	mov	r3, r0
 80038b0:	461a      	mov	r2, r3
 80038b2:	2302      	movs	r3, #2
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	9200      	str	r2, [sp, #0]
 80038b8:	4623      	mov	r3, r4
 80038ba:	2290      	movs	r2, #144	@ 0x90
 80038bc:	21b4      	movs	r1, #180	@ 0xb4
 80038be:	4857      	ldr	r0, [pc, #348]	@ (8003a1c <menu+0x6a0>)
 80038c0:	f7ff f847 	bl	8002952 <lcdPutSSized>
			}

			//confirm your option
			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == GPIO_PIN_RESET && select == 0)
 80038c4:	2108      	movs	r1, #8
 80038c6:	4856      	ldr	r0, [pc, #344]	@ (8003a20 <menu+0x6a4>)
 80038c8:	f000 fc4a 	bl	8004160 <HAL_GPIO_ReadPin>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d104      	bne.n	80038dc <menu+0x560>
 80038d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <menu+0x560>
				select = 6;
 80038d8:	2306      	movs	r3, #6
 80038da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		while(select != 6)	//main menu cycle
 80038dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038de:	2b06      	cmp	r3, #6
 80038e0:	f47f ae8a 	bne.w	80035f8 <menu+0x27c>


		}

	//delete the menu
	lcdPutSSized("DOOM", 215, 0, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),8);
 80038e4:	2200      	movs	r2, #0
 80038e6:	2100      	movs	r1, #0
 80038e8:	2000      	movs	r0, #0
 80038ea:	f7fe ffcf 	bl	800288c <decodeRgbValue>
 80038ee:	4603      	mov	r3, r0
 80038f0:	461c      	mov	r4, r3
 80038f2:	2200      	movs	r2, #0
 80038f4:	2100      	movs	r1, #0
 80038f6:	2000      	movs	r0, #0
 80038f8:	f7fe ffc8 	bl	800288c <decodeRgbValue>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	2308      	movs	r3, #8
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	9200      	str	r2, [sp, #0]
 8003906:	4623      	mov	r3, r4
 8003908:	2200      	movs	r2, #0
 800390a:	21d7      	movs	r1, #215	@ 0xd7
 800390c:	4845      	ldr	r0, [pc, #276]	@ (8003a24 <menu+0x6a8>)
 800390e:	f7ff f820 	bl	8002952 <lcdPutSSized>
	lcdPutSSized("NEW GAME", 180, 64, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8003912:	2200      	movs	r2, #0
 8003914:	2100      	movs	r1, #0
 8003916:	2000      	movs	r0, #0
 8003918:	f7fe ffb8 	bl	800288c <decodeRgbValue>
 800391c:	4603      	mov	r3, r0
 800391e:	461c      	mov	r4, r3
 8003920:	2200      	movs	r2, #0
 8003922:	2100      	movs	r1, #0
 8003924:	2000      	movs	r0, #0
 8003926:	f7fe ffb1 	bl	800288c <decodeRgbValue>
 800392a:	4603      	mov	r3, r0
 800392c:	461a      	mov	r2, r3
 800392e:	2302      	movs	r3, #2
 8003930:	9301      	str	r3, [sp, #4]
 8003932:	9200      	str	r2, [sp, #0]
 8003934:	4623      	mov	r3, r4
 8003936:	2240      	movs	r2, #64	@ 0x40
 8003938:	21b4      	movs	r1, #180	@ 0xb4
 800393a:	4833      	ldr	r0, [pc, #204]	@ (8003a08 <menu+0x68c>)
 800393c:	f7ff f809 	bl	8002952 <lcdPutSSized>
	lcdPutSSized("OPTIONS", 180, 80, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8003940:	2200      	movs	r2, #0
 8003942:	2100      	movs	r1, #0
 8003944:	2000      	movs	r0, #0
 8003946:	f7fe ffa1 	bl	800288c <decodeRgbValue>
 800394a:	4603      	mov	r3, r0
 800394c:	461c      	mov	r4, r3
 800394e:	2200      	movs	r2, #0
 8003950:	2100      	movs	r1, #0
 8003952:	2000      	movs	r0, #0
 8003954:	f7fe ff9a 	bl	800288c <decodeRgbValue>
 8003958:	4603      	mov	r3, r0
 800395a:	461a      	mov	r2, r3
 800395c:	2302      	movs	r3, #2
 800395e:	9301      	str	r3, [sp, #4]
 8003960:	9200      	str	r2, [sp, #0]
 8003962:	4623      	mov	r3, r4
 8003964:	2250      	movs	r2, #80	@ 0x50
 8003966:	21b4      	movs	r1, #180	@ 0xb4
 8003968:	4828      	ldr	r0, [pc, #160]	@ (8003a0c <menu+0x690>)
 800396a:	f7fe fff2 	bl	8002952 <lcdPutSSized>
	lcdPutSSized("LOAD GAME", 180, 96, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 800396e:	2200      	movs	r2, #0
 8003970:	2100      	movs	r1, #0
 8003972:	2000      	movs	r0, #0
 8003974:	f7fe ff8a 	bl	800288c <decodeRgbValue>
 8003978:	4603      	mov	r3, r0
 800397a:	461c      	mov	r4, r3
 800397c:	2200      	movs	r2, #0
 800397e:	2100      	movs	r1, #0
 8003980:	2000      	movs	r0, #0
 8003982:	f7fe ff83 	bl	800288c <decodeRgbValue>
 8003986:	4603      	mov	r3, r0
 8003988:	461a      	mov	r2, r3
 800398a:	2302      	movs	r3, #2
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	9200      	str	r2, [sp, #0]
 8003990:	4623      	mov	r3, r4
 8003992:	2260      	movs	r2, #96	@ 0x60
 8003994:	21b4      	movs	r1, #180	@ 0xb4
 8003996:	481e      	ldr	r0, [pc, #120]	@ (8003a10 <menu+0x694>)
 8003998:	f7fe ffdb 	bl	8002952 <lcdPutSSized>
	lcdPutSSized("SAVE GAME", 180, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 800399c:	2200      	movs	r2, #0
 800399e:	2100      	movs	r1, #0
 80039a0:	2000      	movs	r0, #0
 80039a2:	f7fe ff73 	bl	800288c <decodeRgbValue>
 80039a6:	4603      	mov	r3, r0
 80039a8:	461c      	mov	r4, r3
 80039aa:	2200      	movs	r2, #0
 80039ac:	2100      	movs	r1, #0
 80039ae:	2000      	movs	r0, #0
 80039b0:	f7fe ff6c 	bl	800288c <decodeRgbValue>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461a      	mov	r2, r3
 80039b8:	2302      	movs	r3, #2
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	9200      	str	r2, [sp, #0]
 80039be:	4623      	mov	r3, r4
 80039c0:	2270      	movs	r2, #112	@ 0x70
 80039c2:	21b4      	movs	r1, #180	@ 0xb4
 80039c4:	4813      	ldr	r0, [pc, #76]	@ (8003a14 <menu+0x698>)
 80039c6:	f7fe ffc4 	bl	8002952 <lcdPutSSized>
	lcdPutSSized("READ THIS!", 180, 128, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 80039ca:	2200      	movs	r2, #0
 80039cc:	2100      	movs	r1, #0
 80039ce:	2000      	movs	r0, #0
 80039d0:	f7fe ff5c 	bl	800288c <decodeRgbValue>
 80039d4:	4603      	mov	r3, r0
 80039d6:	461c      	mov	r4, r3
 80039d8:	2200      	movs	r2, #0
 80039da:	2100      	movs	r1, #0
 80039dc:	2000      	movs	r0, #0
 80039de:	f7fe ff55 	bl	800288c <decodeRgbValue>
 80039e2:	4603      	mov	r3, r0
 80039e4:	461a      	mov	r2, r3
 80039e6:	2302      	movs	r3, #2
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	9200      	str	r2, [sp, #0]
 80039ec:	4623      	mov	r3, r4
 80039ee:	2280      	movs	r2, #128	@ 0x80
 80039f0:	21b4      	movs	r1, #180	@ 0xb4
 80039f2:	4809      	ldr	r0, [pc, #36]	@ (8003a18 <menu+0x69c>)
 80039f4:	f7fe ffad 	bl	8002952 <lcdPutSSized>
	lcdPutSSized("QUIT GAME", 180, 144, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 80039f8:	2200      	movs	r2, #0
 80039fa:	2100      	movs	r1, #0
 80039fc:	2000      	movs	r0, #0
 80039fe:	f7fe ff45 	bl	800288c <decodeRgbValue>
 8003a02:	4603      	mov	r3, r0
 8003a04:	461c      	mov	r4, r3
 8003a06:	e00f      	b.n	8003a28 <menu+0x6ac>
 8003a08:	08006da0 	.word	0x08006da0
 8003a0c:	08006dac 	.word	0x08006dac
 8003a10:	08006db4 	.word	0x08006db4
 8003a14:	08006dc0 	.word	0x08006dc0
 8003a18:	08006dcc 	.word	0x08006dcc
 8003a1c:	08006dd8 	.word	0x08006dd8
 8003a20:	48000400 	.word	0x48000400
 8003a24:	08006d98 	.word	0x08006d98
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f7fe ff2d 	bl	800288c <decodeRgbValue>
 8003a32:	4603      	mov	r3, r0
 8003a34:	461a      	mov	r2, r3
 8003a36:	2302      	movs	r3, #2
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	9200      	str	r2, [sp, #0]
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	2290      	movs	r2, #144	@ 0x90
 8003a40:	21b4      	movs	r1, #180	@ 0xb4
 8003a42:	484d      	ldr	r0, [pc, #308]	@ (8003b78 <menu+0x7fc>)
 8003a44:	f7fe ff85 	bl	8002952 <lcdPutSSized>

	lcdPutS("AMMO", 250, 230, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8003a48:	2200      	movs	r2, #0
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f7fe ff1d 	bl	800288c <decodeRgbValue>
 8003a52:	4603      	mov	r3, r0
 8003a54:	461c      	mov	r4, r3
 8003a56:	2200      	movs	r2, #0
 8003a58:	2100      	movs	r1, #0
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f7fe ff16 	bl	800288c <decodeRgbValue>
 8003a60:	4603      	mov	r3, r0
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	4623      	mov	r3, r4
 8003a66:	22e6      	movs	r2, #230	@ 0xe6
 8003a68:	21fa      	movs	r1, #250	@ 0xfa
 8003a6a:	4844      	ldr	r0, [pc, #272]	@ (8003b7c <menu+0x800>)
 8003a6c:	f7fe ff2a 	bl	80028c4 <lcdPutS>
	sprintf(ammoText, "%d", ammo);
 8003a70:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	@ 0x3a
 8003a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a78:	4941      	ldr	r1, [pc, #260]	@ (8003b80 <menu+0x804>)
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 ffd2 	bl	8004a24 <siprintf>
	lcdPutS(ammoText, 240, 222, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8003a80:	2200      	movs	r2, #0
 8003a82:	2100      	movs	r1, #0
 8003a84:	2000      	movs	r0, #0
 8003a86:	f7fe ff01 	bl	800288c <decodeRgbValue>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	461c      	mov	r4, r3
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2100      	movs	r1, #0
 8003a92:	2000      	movs	r0, #0
 8003a94:	f7fe fefa 	bl	800288c <decodeRgbValue>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	4623      	mov	r3, r4
 8003aa2:	22de      	movs	r2, #222	@ 0xde
 8003aa4:	21f0      	movs	r1, #240	@ 0xf0
 8003aa6:	f7fe ff0d 	bl	80028c4 <lcdPutS>

	lcdPutS("HEALTH", 145, 230, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2100      	movs	r1, #0
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f7fe feec 	bl	800288c <decodeRgbValue>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	461c      	mov	r4, r3
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2100      	movs	r1, #0
 8003abc:	2000      	movs	r0, #0
 8003abe:	f7fe fee5 	bl	800288c <decodeRgbValue>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	4623      	mov	r3, r4
 8003ac8:	22e6      	movs	r2, #230	@ 0xe6
 8003aca:	2191      	movs	r1, #145	@ 0x91
 8003acc:	482d      	ldr	r0, [pc, #180]	@ (8003b84 <menu+0x808>)
 8003ace:	f7fe fef9 	bl	80028c4 <lcdPutS>
	sprintf(healthText, "%d%%", health);
 8003ad2:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 8003ad6:	f107 0314 	add.w	r3, r7, #20
 8003ada:	492b      	ldr	r1, [pc, #172]	@ (8003b88 <menu+0x80c>)
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 ffa1 	bl	8004a24 <siprintf>
	lcdPutS(healthText, 125, 222, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f7fe fed0 	bl	800288c <decodeRgbValue>
 8003aec:	4603      	mov	r3, r0
 8003aee:	461c      	mov	r4, r3
 8003af0:	2200      	movs	r2, #0
 8003af2:	2100      	movs	r1, #0
 8003af4:	2000      	movs	r0, #0
 8003af6:	f7fe fec9 	bl	800288c <decodeRgbValue>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f107 0014 	add.w	r0, r7, #20
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	4623      	mov	r3, r4
 8003b04:	22de      	movs	r2, #222	@ 0xde
 8003b06:	217d      	movs	r1, #125	@ 0x7d
 8003b08:	f7fe fedc 	bl	80028c4 <lcdPutS>

	lcdPutS("ARMOR", 35, 230, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2100      	movs	r1, #0
 8003b10:	2000      	movs	r0, #0
 8003b12:	f7fe febb 	bl	800288c <decodeRgbValue>
 8003b16:	4603      	mov	r3, r0
 8003b18:	461c      	mov	r4, r3
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	2000      	movs	r0, #0
 8003b20:	f7fe feb4 	bl	800288c <decodeRgbValue>
 8003b24:	4603      	mov	r3, r0
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	4623      	mov	r3, r4
 8003b2a:	22e6      	movs	r2, #230	@ 0xe6
 8003b2c:	2123      	movs	r1, #35	@ 0x23
 8003b2e:	4817      	ldr	r0, [pc, #92]	@ (8003b8c <menu+0x810>)
 8003b30:	f7fe fec8 	bl	80028c4 <lcdPutS>
	sprintf(armorText, "%d%%", armor);
 8003b34:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	4913      	ldr	r1, [pc, #76]	@ (8003b88 <menu+0x80c>)
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 ff71 	bl	8004a24 <siprintf>
	lcdPutS(armorText, 20, 222, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8003b42:	2200      	movs	r2, #0
 8003b44:	2100      	movs	r1, #0
 8003b46:	2000      	movs	r0, #0
 8003b48:	f7fe fea0 	bl	800288c <decodeRgbValue>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	461c      	mov	r4, r3
 8003b50:	2200      	movs	r2, #0
 8003b52:	2100      	movs	r1, #0
 8003b54:	2000      	movs	r0, #0
 8003b56:	f7fe fe99 	bl	800288c <decodeRgbValue>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	1d38      	adds	r0, r7, #4
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	4623      	mov	r3, r4
 8003b62:	22de      	movs	r2, #222	@ 0xde
 8003b64:	2114      	movs	r1, #20
 8003b66:	f7fe fead 	bl	80028c4 <lcdPutS>

	startNewGame();
 8003b6a:	f7fd fc29 	bl	80013c0 <startNewGame>
}
 8003b6e:	bf00      	nop
 8003b70:	3744      	adds	r7, #68	@ 0x44
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd90      	pop	{r4, r7, pc}
 8003b76:	bf00      	nop
 8003b78:	08006dd8 	.word	0x08006dd8
 8003b7c:	08006de4 	.word	0x08006de4
 8003b80:	08006dec 	.word	0x08006dec
 8003b84:	08006df0 	.word	0x08006df0
 8003b88:	08006df8 	.word	0x08006df8
 8003b8c:	08006e00 	.word	0x08006e00

08003b90 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	601a      	str	r2, [r3, #0]
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f023 0210 	bic.w	r2, r3, #16
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	605a      	str	r2, [r3, #4]
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f043 0208 	orr.w	r2, r3, #8
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	605a      	str	r2, [r3, #4]
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f023 0208 	bic.w	r2, r3, #8
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	605a      	str	r2, [r3, #4]
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <LL_SPI_IsActiveFlag_RXNE+0x18>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e000      	b.n	8003c30 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d101      	bne.n	8003c54 <LL_SPI_IsActiveFlag_TXE+0x18>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	330c      	adds	r3, #12
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	b2db      	uxtb	r3, r3
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	330c      	adds	r3, #12
 8003c8e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <LL_GPIO_SetOutputPin>:
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	619a      	str	r2, [r3, #24]
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <LL_GPIO_ResetOutputPin>:
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
	...

08003cdc <LL_AHB1_GRP1_EnableClock>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8003ce4:	4b08      	ldr	r3, [pc, #32]	@ (8003d08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003ce6:	695a      	ldr	r2, [r3, #20]
 8003ce8:	4907      	ldr	r1, [pc, #28]	@ (8003d08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003cf0:	4b05      	ldr	r3, [pc, #20]	@ (8003d08 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40021000 	.word	0x40021000

08003d0c <LL_APB2_GRP1_EnableClock>:
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003d14:	4b08      	ldr	r3, [pc, #32]	@ (8003d38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	4907      	ldr	r1, [pc, #28]	@ (8003d38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003d20:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003d22:	699a      	ldr	r2, [r3, #24]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4013      	ands	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	40021000 	.word	0x40021000

08003d3c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b090      	sub	sp, #64	@ 0x40
 8003d40:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003d42:	f107 0318 	add.w	r3, r7, #24
 8003d46:	2228      	movs	r2, #40	@ 0x28
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 ff62 	bl	8004c14 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d50:	463b      	mov	r3, r7
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	609a      	str	r2, [r3, #8]
 8003d5a:	60da      	str	r2, [r3, #12]
 8003d5c:	611a      	str	r2, [r3, #16]
 8003d5e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003d60:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003d64:	f7ff ffd2 	bl	8003d0c <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003d68:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003d6c:	f7ff ffb6 	bl	8003cdc <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003d70:	23e0      	movs	r3, #224	@ 0xe0
 8003d72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003d74:	2302      	movs	r3, #2
 8003d76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003d84:	2305      	movs	r3, #5
 8003d86:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d88:	463b      	mov	r3, r7
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d90:	f000 fb03 	bl	800439a <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003d98:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003d9c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003d9e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003da2:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8003da4:	2300      	movs	r3, #0
 8003da6:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003dac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  // rychlost prenosu ovplyvnuje
  SPI_InitStruct.BaudRate =  LL_SPI_BAUDRATEPRESCALER_DIV2; //najrychlejsie
 8003db2:	2300      	movs	r3, #0
 8003db4:	633b      	str	r3, [r7, #48]	@ 0x30
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32; //250kBps povodne
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64; //125kBps
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128; //pomalsie
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV256; //najpomalsie
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003db6:	2300      	movs	r3, #0
 8003db8:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8003dbe:	2307      	movs	r3, #7
 8003dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  SPI1->CR2 |= 1 << 12;
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <MX_SPI1_Init+0xc0>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8003dfc <MX_SPI1_Init+0xc0>)
 8003dc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003dcc:	6053      	str	r3, [r2, #4]

  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003dce:	f107 0318 	add.w	r3, r7, #24
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4809      	ldr	r0, [pc, #36]	@ (8003dfc <MX_SPI1_Init+0xc0>)
 8003dd6:	f000 fb86 	bl	80044e6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003dda:	2100      	movs	r1, #0
 8003ddc:	4807      	ldr	r0, [pc, #28]	@ (8003dfc <MX_SPI1_Init+0xc0>)
 8003dde:	f7ff fee7 	bl	8003bb0 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8003de2:	4806      	ldr	r0, [pc, #24]	@ (8003dfc <MX_SPI1_Init+0xc0>)
 8003de4:	f7ff ff07 	bl	8003bf6 <LL_SPI_DisableNSSPulseMgt>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8003de8:	4804      	ldr	r0, [pc, #16]	@ (8003dfc <MX_SPI1_Init+0xc0>)
 8003dea:	f7ff fef4 	bl	8003bd6 <LL_SPI_EnableNSSPulseMgt>
  LL_SPI_Enable(SPI1);
 8003dee:	4803      	ldr	r0, [pc, #12]	@ (8003dfc <MX_SPI1_Init+0xc0>)
 8003df0:	f7ff fece 	bl	8003b90 <LL_SPI_Enable>

}
 8003df4:	bf00      	nop
 8003df6:	3740      	adds	r7, #64	@ 0x40
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40013000 	.word	0x40013000

08003e00 <readWriteSPI1>:


unsigned char readWriteSPI1(unsigned char txData)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	71fb      	strb	r3, [r7, #7]
	unsigned char  rxData;

	LL_SPI_TransmitData8(SPI1, (uint8_t)txData);
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	480d      	ldr	r0, [pc, #52]	@ (8003e44 <readWriteSPI1+0x44>)
 8003e10:	f7ff ff35 	bl	8003c7e <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_TXE(SPI1) != SET);
 8003e14:	bf00      	nop
 8003e16:	480b      	ldr	r0, [pc, #44]	@ (8003e44 <readWriteSPI1+0x44>)
 8003e18:	f7ff ff10 	bl	8003c3c <LL_SPI_IsActiveFlag_TXE>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d1f9      	bne.n	8003e16 <readWriteSPI1+0x16>

	// wait until RXNE = 1
	while(LL_SPI_IsActiveFlag_RXNE(SPI1) != SET);
 8003e22:	bf00      	nop
 8003e24:	4807      	ldr	r0, [pc, #28]	@ (8003e44 <readWriteSPI1+0x44>)
 8003e26:	f7ff fef6 	bl	8003c16 <LL_SPI_IsActiveFlag_RXNE>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d1f9      	bne.n	8003e24 <readWriteSPI1+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = LL_SPI_ReceiveData8(SPI1);
 8003e30:	4804      	ldr	r0, [pc, #16]	@ (8003e44 <readWriteSPI1+0x44>)
 8003e32:	f7ff ff16 	bl	8003c62 <LL_SPI_ReceiveData8>
 8003e36:	4603      	mov	r3, r0
 8003e38:	73fb      	strb	r3, [r7, #15]

	return rxData;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40013000 	.word	0x40013000

08003e48 <initCS_Pin>:

void initCS_Pin(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
	cs_set();
 8003e4c:	f000 f802 	bl	8003e54 <cs_set>
}
 8003e50:	bf00      	nop
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <cs_set>:

void cs_set(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8003e58:	2120      	movs	r1, #32
 8003e5a:	4802      	ldr	r0, [pc, #8]	@ (8003e64 <cs_set+0x10>)
 8003e5c:	f7ff ff21 	bl	8003ca2 <LL_GPIO_SetOutputPin>
}
 8003e60:	bf00      	nop
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	48000400 	.word	0x48000400

08003e68 <cs_reset>:

void cs_reset(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8003e6c:	2120      	movs	r1, #32
 8003e6e:	4802      	ldr	r0, [pc, #8]	@ (8003e78 <cs_reset+0x10>)
 8003e70:	f7ff ff25 	bl	8003cbe <LL_GPIO_ResetOutputPin>
}
 8003e74:	bf00      	nop
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	48000400 	.word	0x48000400

08003e7c <initCD_Pin>:

void initCD_Pin(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
}
 8003e80:	bf00      	nop
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <cd_set>:

void cd_set(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8003e90:	2140      	movs	r1, #64	@ 0x40
 8003e92:	4802      	ldr	r0, [pc, #8]	@ (8003e9c <cd_set+0x10>)
 8003e94:	f7ff ff05 	bl	8003ca2 <LL_GPIO_SetOutputPin>
}
 8003e98:	bf00      	nop
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	48000400 	.word	0x48000400

08003ea0 <cd_reset>:

void cd_reset(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8003ea4:	2140      	movs	r1, #64	@ 0x40
 8003ea6:	4802      	ldr	r0, [pc, #8]	@ (8003eb0 <cd_reset+0x10>)
 8003ea8:	f7ff ff09 	bl	8003cbe <LL_GPIO_ResetOutputPin>
}
 8003eac:	bf00      	nop
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	48000400 	.word	0x48000400

08003eb4 <initRES_Pin>:

void initRES_Pin(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	*/
}
 8003eb8:	bf00      	nop
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <res_set>:

void res_set(void)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8003ec6:	2108      	movs	r1, #8
 8003ec8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ecc:	f7ff fee9 	bl	8003ca2 <LL_GPIO_SetOutputPin>
}
 8003ed0:	bf00      	nop
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <res_reset>:

void res_reset(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8003ed8:	2108      	movs	r1, #8
 8003eda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ede:	f7ff feee 	bl	8003cbe <LL_GPIO_ResetOutputPin>
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003eea:	bf00      	nop
 8003eec:	e7fd      	b.n	8003eea <NMI_Handler+0x4>

08003eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ef2:	bf00      	nop
 8003ef4:	e7fd      	b.n	8003ef2 <HardFault_Handler+0x4>

08003ef6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003efa:	bf00      	nop
 8003efc:	e7fd      	b.n	8003efa <MemManage_Handler+0x4>

08003efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003efe:	b480      	push	{r7}
 8003f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f02:	bf00      	nop
 8003f04:	e7fd      	b.n	8003f02 <BusFault_Handler+0x4>

08003f06 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f06:	b480      	push	{r7}
 8003f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f0a:	bf00      	nop
 8003f0c:	e7fd      	b.n	8003f0a <UsageFault_Handler+0x4>

08003f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f3c:	f000 f8fc 	bl	8004138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f40:	bf00      	nop
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f4e:	f000 febf 	bl	8004cd0 <__errno>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2216      	movs	r2, #22
 8003f56:	601a      	str	r2, [r3, #0]
  return -1;
 8003f58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <_exit>:

void _exit (int status)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7ff ffe7 	bl	8003f44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f76:	bf00      	nop
 8003f78:	e7fd      	b.n	8003f76 <_exit+0x12>

08003f7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b086      	sub	sp, #24
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	e00a      	b.n	8003fa2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f8c:	f3af 8000 	nop.w
 8003f90:	4601      	mov	r1, r0
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	60ba      	str	r2, [r7, #8]
 8003f98:	b2ca      	uxtb	r2, r1
 8003f9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	dbf0      	blt.n	8003f8c <_read+0x12>
  }

  return len;
 8003faa:	687b      	ldr	r3, [r7, #4]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	e009      	b.n	8003fda <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	60ba      	str	r2, [r7, #8]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	dbf1      	blt.n	8003fc6 <_write+0x12>
  }
  return len;
 8003fe2:	687b      	ldr	r3, [r7, #4]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <_close>:

int _close(int file)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ff4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004014:	605a      	str	r2, [r3, #4]
  return 0;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <_isatty>:

int _isatty(int file)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800402c:	2301      	movs	r3, #1
}
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800403a:	b480      	push	{r7}
 800403c:	b085      	sub	sp, #20
 800403e:	af00      	add	r7, sp, #0
 8004040:	60f8      	str	r0, [r7, #12]
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800405c:	4a14      	ldr	r2, [pc, #80]	@ (80040b0 <_sbrk+0x5c>)
 800405e:	4b15      	ldr	r3, [pc, #84]	@ (80040b4 <_sbrk+0x60>)
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004068:	4b13      	ldr	r3, [pc, #76]	@ (80040b8 <_sbrk+0x64>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d102      	bne.n	8004076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004070:	4b11      	ldr	r3, [pc, #68]	@ (80040b8 <_sbrk+0x64>)
 8004072:	4a12      	ldr	r2, [pc, #72]	@ (80040bc <_sbrk+0x68>)
 8004074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004076:	4b10      	ldr	r3, [pc, #64]	@ (80040b8 <_sbrk+0x64>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	429a      	cmp	r2, r3
 8004082:	d207      	bcs.n	8004094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004084:	f000 fe24 	bl	8004cd0 <__errno>
 8004088:	4603      	mov	r3, r0
 800408a:	220c      	movs	r2, #12
 800408c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800408e:	f04f 33ff 	mov.w	r3, #4294967295
 8004092:	e009      	b.n	80040a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004094:	4b08      	ldr	r3, [pc, #32]	@ (80040b8 <_sbrk+0x64>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800409a:	4b07      	ldr	r3, [pc, #28]	@ (80040b8 <_sbrk+0x64>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4413      	add	r3, r2
 80040a2:	4a05      	ldr	r2, [pc, #20]	@ (80040b8 <_sbrk+0x64>)
 80040a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040a6:	68fb      	ldr	r3, [r7, #12]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20003000 	.word	0x20003000
 80040b4:	00000400 	.word	0x00000400
 80040b8:	200003d4 	.word	0x200003d4
 80040bc:	20000528 	.word	0x20000528

080040c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040c4:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <SystemInit+0x20>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ca:	4a05      	ldr	r2, [pc, #20]	@ (80040e0 <SystemInit+0x20>)
 80040cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	e000ed00 	.word	0xe000ed00

080040e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80040e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800411c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80040e8:	f7ff ffea 	bl	80040c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040ec:	480c      	ldr	r0, [pc, #48]	@ (8004120 <LoopForever+0x6>)
  ldr r1, =_edata
 80040ee:	490d      	ldr	r1, [pc, #52]	@ (8004124 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004128 <LoopForever+0xe>)
  movs r3, #0
 80040f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040f4:	e002      	b.n	80040fc <LoopCopyDataInit>

080040f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040fa:	3304      	adds	r3, #4

080040fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004100:	d3f9      	bcc.n	80040f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004102:	4a0a      	ldr	r2, [pc, #40]	@ (800412c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004104:	4c0a      	ldr	r4, [pc, #40]	@ (8004130 <LoopForever+0x16>)
  movs r3, #0
 8004106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004108:	e001      	b.n	800410e <LoopFillZerobss>

0800410a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800410a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800410c:	3204      	adds	r2, #4

0800410e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800410e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004110:	d3fb      	bcc.n	800410a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004112:	f000 fde3 	bl	8004cdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004116:	f7ff f8b7 	bl	8003288 <main>

0800411a <LoopForever>:

LoopForever:
    b LoopForever
 800411a:	e7fe      	b.n	800411a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800411c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8004120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004124:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8004128:	08007368 	.word	0x08007368
  ldr r2, =_sbss
 800412c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004130:	20000528 	.word	0x20000528

08004134 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004134:	e7fe      	b.n	8004134 <ADC1_2_IRQHandler>
	...

08004138 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800413c:	4b06      	ldr	r3, [pc, #24]	@ (8004158 <HAL_IncTick+0x20>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	4b06      	ldr	r3, [pc, #24]	@ (800415c <HAL_IncTick+0x24>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4413      	add	r3, r2
 8004148:	4a04      	ldr	r2, [pc, #16]	@ (800415c <HAL_IncTick+0x24>)
 800414a:	6013      	str	r3, [r2, #0]
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	2000000c 	.word	0x2000000c
 800415c:	200003d8 	.word	0x200003d8

08004160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	460b      	mov	r3, r1
 800416a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	887b      	ldrh	r3, [r7, #2]
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
 800417c:	e001      	b.n	8004182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <LL_GPIO_SetPinMode>:
{
 8004190:	b480      	push	{r7}
 8004192:	b089      	sub	sp, #36	@ 0x24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	fab3 f383 	clz	r3, r3
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	2103      	movs	r1, #3
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	401a      	ands	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	fa93 f3a3 	rbit	r3, r3
 80041ca:	61bb      	str	r3, [r7, #24]
  return result;
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	fab3 f383 	clz	r3, r3
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	6879      	ldr	r1, [r7, #4]
 80041d8:	fa01 f303 	lsl.w	r3, r1, r3
 80041dc:	431a      	orrs	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	601a      	str	r2, [r3, #0]
}
 80041e2:	bf00      	nop
 80041e4:	3724      	adds	r7, #36	@ 0x24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <LL_GPIO_SetPinOutputType>:
{
 80041ee:	b480      	push	{r7}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	43db      	mvns	r3, r3
 8004202:	401a      	ands	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	fb01 f303 	mul.w	r3, r1, r3
 800420c:	431a      	orrs	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	605a      	str	r2, [r3, #4]
}
 8004212:	bf00      	nop
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <LL_GPIO_SetPinSpeed>:
{
 800421e:	b480      	push	{r7}
 8004220:	b089      	sub	sp, #36	@ 0x24
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	fa93 f3a3 	rbit	r3, r3
 8004238:	613b      	str	r3, [r7, #16]
  return result;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	fab3 f383 	clz	r3, r3
 8004240:	b2db      	uxtb	r3, r3
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	2103      	movs	r1, #3
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	401a      	ands	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	fa93 f3a3 	rbit	r3, r3
 8004258:	61bb      	str	r3, [r7, #24]
  return result;
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	fab3 f383 	clz	r3, r3
 8004260:	b2db      	uxtb	r3, r3
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	fa01 f303 	lsl.w	r3, r1, r3
 800426a:	431a      	orrs	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	609a      	str	r2, [r3, #8]
}
 8004270:	bf00      	nop
 8004272:	3724      	adds	r7, #36	@ 0x24
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <LL_GPIO_SetPinPull>:
{
 800427c:	b480      	push	{r7}
 800427e:	b089      	sub	sp, #36	@ 0x24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	fa93 f3a3 	rbit	r3, r3
 8004296:	613b      	str	r3, [r7, #16]
  return result;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	fab3 f383 	clz	r3, r3
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	2103      	movs	r1, #3
 80042a4:	fa01 f303 	lsl.w	r3, r1, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	401a      	ands	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	fa93 f3a3 	rbit	r3, r3
 80042b6:	61bb      	str	r3, [r7, #24]
  return result;
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	fa01 f303 	lsl.w	r3, r1, r3
 80042c8:	431a      	orrs	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	60da      	str	r2, [r3, #12]
}
 80042ce:	bf00      	nop
 80042d0:	3724      	adds	r7, #36	@ 0x24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <LL_GPIO_SetAFPin_0_7>:
{
 80042da:	b480      	push	{r7}
 80042dc:	b089      	sub	sp, #36	@ 0x24
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a1a      	ldr	r2, [r3, #32]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	fa93 f3a3 	rbit	r3, r3
 80042f4:	613b      	str	r3, [r7, #16]
  return result;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	fab3 f383 	clz	r3, r3
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	210f      	movs	r1, #15
 8004302:	fa01 f303 	lsl.w	r3, r1, r3
 8004306:	43db      	mvns	r3, r3
 8004308:	401a      	ands	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	fa93 f3a3 	rbit	r3, r3
 8004314:	61bb      	str	r3, [r7, #24]
  return result;
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	fab3 f383 	clz	r3, r3
 800431c:	b2db      	uxtb	r3, r3
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	fa01 f303 	lsl.w	r3, r1, r3
 8004326:	431a      	orrs	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	621a      	str	r2, [r3, #32]
}
 800432c:	bf00      	nop
 800432e:	3724      	adds	r7, #36	@ 0x24
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <LL_GPIO_SetAFPin_8_15>:
{
 8004338:	b480      	push	{r7}
 800433a:	b089      	sub	sp, #36	@ 0x24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	0a1b      	lsrs	r3, r3, #8
 800434c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	fa93 f3a3 	rbit	r3, r3
 8004354:	613b      	str	r3, [r7, #16]
  return result;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	fab3 f383 	clz	r3, r3
 800435c:	b2db      	uxtb	r3, r3
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	210f      	movs	r1, #15
 8004362:	fa01 f303 	lsl.w	r3, r1, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	401a      	ands	r2, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	0a1b      	lsrs	r3, r3, #8
 800436e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	fa93 f3a3 	rbit	r3, r3
 8004376:	61bb      	str	r3, [r7, #24]
  return result;
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	fab3 f383 	clz	r3, r3
 800437e:	b2db      	uxtb	r3, r3
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	fa01 f303 	lsl.w	r3, r1, r3
 8004388:	431a      	orrs	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800438e:	bf00      	nop
 8004390:	3724      	adds	r7, #36	@ 0x24
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b088      	sub	sp, #32
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	fa93 f3a3 	rbit	r3, r3
 80043b0:	613b      	str	r3, [r7, #16]
  return result;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	fab3 f383 	clz	r3, r3
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80043bc:	e051      	b.n	8004462 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	2101      	movs	r1, #1
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ca:	4013      	ands	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d043      	beq.n	800445c <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d003      	beq.n	80043e4 <LL_GPIO_Init+0x4a>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d10e      	bne.n	8004402 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	461a      	mov	r2, r3
 80043ea:	69b9      	ldr	r1, [r7, #24]
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff ff16 	bl	800421e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6819      	ldr	r1, [r3, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	461a      	mov	r2, r3
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7ff fef6 	bl	80041ee <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	461a      	mov	r2, r3
 8004408:	69b9      	ldr	r1, [r7, #24]
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff ff36 	bl	800427c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d11a      	bne.n	800444e <LL_GPIO_Init+0xb4>
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	fa93 f3a3 	rbit	r3, r3
 8004422:	60bb      	str	r3, [r7, #8]
  return result;
 8004424:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004426:	fab3 f383 	clz	r3, r3
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b07      	cmp	r3, #7
 800442e:	d807      	bhi.n	8004440 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	461a      	mov	r2, r3
 8004436:	69b9      	ldr	r1, [r7, #24]
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f7ff ff4e 	bl	80042da <LL_GPIO_SetAFPin_0_7>
 800443e:	e006      	b.n	800444e <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	461a      	mov	r2, r3
 8004446:	69b9      	ldr	r1, [r7, #24]
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff ff75 	bl	8004338 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	461a      	mov	r2, r3
 8004454:	69b9      	ldr	r1, [r7, #24]
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff fe9a 	bl	8004190 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	3301      	adds	r3, #1
 8004460:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1a6      	bne.n	80043be <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3720      	adds	r7, #32
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <LL_SPI_IsEnabled>:
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448a:	2b40      	cmp	r3, #64	@ 0x40
 800448c:	d101      	bne.n	8004492 <LL_SPI_IsEnabled+0x18>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <LL_SPI_IsEnabled+0x1a>
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <LL_SPI_SetRxFIFOThreshold>:
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	605a      	str	r2, [r3, #4]
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <LL_SPI_SetCRCPolynomial>:
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	611a      	str	r2, [r3, #16]
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff ffc0 	bl	800447a <LL_SPI_IsEnabled>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d145      	bne.n	800458c <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004508:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	6811      	ldr	r1, [r2, #0]
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	6852      	ldr	r2, [r2, #4]
 8004514:	4311      	orrs	r1, r2
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	68d2      	ldr	r2, [r2, #12]
 800451a:	4311      	orrs	r1, r2
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	6912      	ldr	r2, [r2, #16]
 8004520:	4311      	orrs	r1, r2
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	6952      	ldr	r2, [r2, #20]
 8004526:	4311      	orrs	r1, r2
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	6992      	ldr	r2, [r2, #24]
 800452c:	4311      	orrs	r1, r2
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	69d2      	ldr	r2, [r2, #28]
 8004532:	4311      	orrs	r1, r2
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	6a12      	ldr	r2, [r2, #32]
 8004538:	430a      	orrs	r2, r1
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004548:	f023 0304 	bic.w	r3, r3, #4
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	6891      	ldr	r1, [r2, #8]
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	6952      	ldr	r2, [r2, #20]
 8004554:	0c12      	lsrs	r2, r2, #16
 8004556:	430a      	orrs	r2, r1
 8004558:	431a      	orrs	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004566:	d204      	bcs.n	8004572 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8004568:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7ff ff97 	bl	80044a0 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800457a:	d105      	bne.n	8004588 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004580:	4619      	mov	r1, r3
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff ff9f 	bl	80044c6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004588:	2300      	movs	r3, #0
 800458a:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 800458c:	7bfb      	ldrb	r3, [r7, #15]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045aa:	4a07      	ldr	r2, [pc, #28]	@ (80045c8 <LL_InitTick+0x30>)
 80045ac:	3b01      	subs	r3, #1
 80045ae:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80045b0:	4b05      	ldr	r3, [pc, #20]	@ (80045c8 <LL_InitTick+0x30>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045b6:	4b04      	ldr	r3, [pc, #16]	@ (80045c8 <LL_InitTick+0x30>)
 80045b8:	2205      	movs	r2, #5
 80045ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	e000e010 	.word	0xe000e010

080045cc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80045d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff ffdd 	bl	8004598 <LL_InitTick>
}
 80045de:	bf00      	nop
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80045f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004630 <LL_mDelay+0x48>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80045f6:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fe:	d00c      	beq.n	800461a <LL_mDelay+0x32>
  {
    Delay++;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3301      	adds	r3, #1
 8004604:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004606:	e008      	b.n	800461a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004608:	4b09      	ldr	r3, [pc, #36]	@ (8004630 <LL_mDelay+0x48>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <LL_mDelay+0x32>
    {
      Delay--;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3b01      	subs	r3, #1
 8004618:	607b      	str	r3, [r7, #4]
  while (Delay)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1f3      	bne.n	8004608 <LL_mDelay+0x20>
    }
  }
}
 8004620:	bf00      	nop
 8004622:	bf00      	nop
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	e000e010 	.word	0xe000e010

08004634 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800463c:	4a04      	ldr	r2, [pc, #16]	@ (8004650 <LL_SetSystemCoreClock+0x1c>)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6013      	str	r3, [r2, #0]
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	20000008 	.word	0x20000008

08004654 <exit>:
 8004654:	b508      	push	{r3, lr}
 8004656:	4b06      	ldr	r3, [pc, #24]	@ (8004670 <exit+0x1c>)
 8004658:	4604      	mov	r4, r0
 800465a:	b113      	cbz	r3, 8004662 <exit+0xe>
 800465c:	2100      	movs	r1, #0
 800465e:	f3af 8000 	nop.w
 8004662:	4b04      	ldr	r3, [pc, #16]	@ (8004674 <exit+0x20>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	b103      	cbz	r3, 800466a <exit+0x16>
 8004668:	4798      	blx	r3
 800466a:	4620      	mov	r0, r4
 800466c:	f7ff fc7a 	bl	8003f64 <_exit>
 8004670:	00000000 	.word	0x00000000
 8004674:	2000051c 	.word	0x2000051c

08004678 <malloc>:
 8004678:	4b02      	ldr	r3, [pc, #8]	@ (8004684 <malloc+0xc>)
 800467a:	4601      	mov	r1, r0
 800467c:	6818      	ldr	r0, [r3, #0]
 800467e:	f000 b825 	b.w	80046cc <_malloc_r>
 8004682:	bf00      	nop
 8004684:	2000001c 	.word	0x2000001c

08004688 <sbrk_aligned>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4e0f      	ldr	r6, [pc, #60]	@ (80046c8 <sbrk_aligned+0x40>)
 800468c:	460c      	mov	r4, r1
 800468e:	6831      	ldr	r1, [r6, #0]
 8004690:	4605      	mov	r5, r0
 8004692:	b911      	cbnz	r1, 800469a <sbrk_aligned+0x12>
 8004694:	f000 fafa 	bl	8004c8c <_sbrk_r>
 8004698:	6030      	str	r0, [r6, #0]
 800469a:	4621      	mov	r1, r4
 800469c:	4628      	mov	r0, r5
 800469e:	f000 faf5 	bl	8004c8c <_sbrk_r>
 80046a2:	1c43      	adds	r3, r0, #1
 80046a4:	d103      	bne.n	80046ae <sbrk_aligned+0x26>
 80046a6:	f04f 34ff 	mov.w	r4, #4294967295
 80046aa:	4620      	mov	r0, r4
 80046ac:	bd70      	pop	{r4, r5, r6, pc}
 80046ae:	1cc4      	adds	r4, r0, #3
 80046b0:	f024 0403 	bic.w	r4, r4, #3
 80046b4:	42a0      	cmp	r0, r4
 80046b6:	d0f8      	beq.n	80046aa <sbrk_aligned+0x22>
 80046b8:	1a21      	subs	r1, r4, r0
 80046ba:	4628      	mov	r0, r5
 80046bc:	f000 fae6 	bl	8004c8c <_sbrk_r>
 80046c0:	3001      	adds	r0, #1
 80046c2:	d1f2      	bne.n	80046aa <sbrk_aligned+0x22>
 80046c4:	e7ef      	b.n	80046a6 <sbrk_aligned+0x1e>
 80046c6:	bf00      	nop
 80046c8:	200003dc 	.word	0x200003dc

080046cc <_malloc_r>:
 80046cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d0:	1ccd      	adds	r5, r1, #3
 80046d2:	f025 0503 	bic.w	r5, r5, #3
 80046d6:	3508      	adds	r5, #8
 80046d8:	2d0c      	cmp	r5, #12
 80046da:	bf38      	it	cc
 80046dc:	250c      	movcc	r5, #12
 80046de:	2d00      	cmp	r5, #0
 80046e0:	4606      	mov	r6, r0
 80046e2:	db01      	blt.n	80046e8 <_malloc_r+0x1c>
 80046e4:	42a9      	cmp	r1, r5
 80046e6:	d904      	bls.n	80046f2 <_malloc_r+0x26>
 80046e8:	230c      	movs	r3, #12
 80046ea:	6033      	str	r3, [r6, #0]
 80046ec:	2000      	movs	r0, #0
 80046ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047c8 <_malloc_r+0xfc>
 80046f6:	f000 f869 	bl	80047cc <__malloc_lock>
 80046fa:	f8d8 3000 	ldr.w	r3, [r8]
 80046fe:	461c      	mov	r4, r3
 8004700:	bb44      	cbnz	r4, 8004754 <_malloc_r+0x88>
 8004702:	4629      	mov	r1, r5
 8004704:	4630      	mov	r0, r6
 8004706:	f7ff ffbf 	bl	8004688 <sbrk_aligned>
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	4604      	mov	r4, r0
 800470e:	d158      	bne.n	80047c2 <_malloc_r+0xf6>
 8004710:	f8d8 4000 	ldr.w	r4, [r8]
 8004714:	4627      	mov	r7, r4
 8004716:	2f00      	cmp	r7, #0
 8004718:	d143      	bne.n	80047a2 <_malloc_r+0xd6>
 800471a:	2c00      	cmp	r4, #0
 800471c:	d04b      	beq.n	80047b6 <_malloc_r+0xea>
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	4639      	mov	r1, r7
 8004722:	4630      	mov	r0, r6
 8004724:	eb04 0903 	add.w	r9, r4, r3
 8004728:	f000 fab0 	bl	8004c8c <_sbrk_r>
 800472c:	4581      	cmp	r9, r0
 800472e:	d142      	bne.n	80047b6 <_malloc_r+0xea>
 8004730:	6821      	ldr	r1, [r4, #0]
 8004732:	1a6d      	subs	r5, r5, r1
 8004734:	4629      	mov	r1, r5
 8004736:	4630      	mov	r0, r6
 8004738:	f7ff ffa6 	bl	8004688 <sbrk_aligned>
 800473c:	3001      	adds	r0, #1
 800473e:	d03a      	beq.n	80047b6 <_malloc_r+0xea>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	442b      	add	r3, r5
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	f8d8 3000 	ldr.w	r3, [r8]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	bb62      	cbnz	r2, 80047a8 <_malloc_r+0xdc>
 800474e:	f8c8 7000 	str.w	r7, [r8]
 8004752:	e00f      	b.n	8004774 <_malloc_r+0xa8>
 8004754:	6822      	ldr	r2, [r4, #0]
 8004756:	1b52      	subs	r2, r2, r5
 8004758:	d420      	bmi.n	800479c <_malloc_r+0xd0>
 800475a:	2a0b      	cmp	r2, #11
 800475c:	d917      	bls.n	800478e <_malloc_r+0xc2>
 800475e:	1961      	adds	r1, r4, r5
 8004760:	42a3      	cmp	r3, r4
 8004762:	6025      	str	r5, [r4, #0]
 8004764:	bf18      	it	ne
 8004766:	6059      	strne	r1, [r3, #4]
 8004768:	6863      	ldr	r3, [r4, #4]
 800476a:	bf08      	it	eq
 800476c:	f8c8 1000 	streq.w	r1, [r8]
 8004770:	5162      	str	r2, [r4, r5]
 8004772:	604b      	str	r3, [r1, #4]
 8004774:	4630      	mov	r0, r6
 8004776:	f000 f82f 	bl	80047d8 <__malloc_unlock>
 800477a:	f104 000b 	add.w	r0, r4, #11
 800477e:	1d23      	adds	r3, r4, #4
 8004780:	f020 0007 	bic.w	r0, r0, #7
 8004784:	1ac2      	subs	r2, r0, r3
 8004786:	bf1c      	itt	ne
 8004788:	1a1b      	subne	r3, r3, r0
 800478a:	50a3      	strne	r3, [r4, r2]
 800478c:	e7af      	b.n	80046ee <_malloc_r+0x22>
 800478e:	6862      	ldr	r2, [r4, #4]
 8004790:	42a3      	cmp	r3, r4
 8004792:	bf0c      	ite	eq
 8004794:	f8c8 2000 	streq.w	r2, [r8]
 8004798:	605a      	strne	r2, [r3, #4]
 800479a:	e7eb      	b.n	8004774 <_malloc_r+0xa8>
 800479c:	4623      	mov	r3, r4
 800479e:	6864      	ldr	r4, [r4, #4]
 80047a0:	e7ae      	b.n	8004700 <_malloc_r+0x34>
 80047a2:	463c      	mov	r4, r7
 80047a4:	687f      	ldr	r7, [r7, #4]
 80047a6:	e7b6      	b.n	8004716 <_malloc_r+0x4a>
 80047a8:	461a      	mov	r2, r3
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	42a3      	cmp	r3, r4
 80047ae:	d1fb      	bne.n	80047a8 <_malloc_r+0xdc>
 80047b0:	2300      	movs	r3, #0
 80047b2:	6053      	str	r3, [r2, #4]
 80047b4:	e7de      	b.n	8004774 <_malloc_r+0xa8>
 80047b6:	230c      	movs	r3, #12
 80047b8:	6033      	str	r3, [r6, #0]
 80047ba:	4630      	mov	r0, r6
 80047bc:	f000 f80c 	bl	80047d8 <__malloc_unlock>
 80047c0:	e794      	b.n	80046ec <_malloc_r+0x20>
 80047c2:	6005      	str	r5, [r0, #0]
 80047c4:	e7d6      	b.n	8004774 <_malloc_r+0xa8>
 80047c6:	bf00      	nop
 80047c8:	200003e0 	.word	0x200003e0

080047cc <__malloc_lock>:
 80047cc:	4801      	ldr	r0, [pc, #4]	@ (80047d4 <__malloc_lock+0x8>)
 80047ce:	f000 baaa 	b.w	8004d26 <__retarget_lock_acquire_recursive>
 80047d2:	bf00      	nop
 80047d4:	20000524 	.word	0x20000524

080047d8 <__malloc_unlock>:
 80047d8:	4801      	ldr	r0, [pc, #4]	@ (80047e0 <__malloc_unlock+0x8>)
 80047da:	f000 baa5 	b.w	8004d28 <__retarget_lock_release_recursive>
 80047de:	bf00      	nop
 80047e0:	20000524 	.word	0x20000524

080047e4 <std>:
 80047e4:	2300      	movs	r3, #0
 80047e6:	b510      	push	{r4, lr}
 80047e8:	4604      	mov	r4, r0
 80047ea:	e9c0 3300 	strd	r3, r3, [r0]
 80047ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047f2:	6083      	str	r3, [r0, #8]
 80047f4:	8181      	strh	r1, [r0, #12]
 80047f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80047f8:	81c2      	strh	r2, [r0, #14]
 80047fa:	6183      	str	r3, [r0, #24]
 80047fc:	4619      	mov	r1, r3
 80047fe:	2208      	movs	r2, #8
 8004800:	305c      	adds	r0, #92	@ 0x5c
 8004802:	f000 fa07 	bl	8004c14 <memset>
 8004806:	4b0d      	ldr	r3, [pc, #52]	@ (800483c <std+0x58>)
 8004808:	6263      	str	r3, [r4, #36]	@ 0x24
 800480a:	4b0d      	ldr	r3, [pc, #52]	@ (8004840 <std+0x5c>)
 800480c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800480e:	4b0d      	ldr	r3, [pc, #52]	@ (8004844 <std+0x60>)
 8004810:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004812:	4b0d      	ldr	r3, [pc, #52]	@ (8004848 <std+0x64>)
 8004814:	6323      	str	r3, [r4, #48]	@ 0x30
 8004816:	4b0d      	ldr	r3, [pc, #52]	@ (800484c <std+0x68>)
 8004818:	6224      	str	r4, [r4, #32]
 800481a:	429c      	cmp	r4, r3
 800481c:	d006      	beq.n	800482c <std+0x48>
 800481e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004822:	4294      	cmp	r4, r2
 8004824:	d002      	beq.n	800482c <std+0x48>
 8004826:	33d0      	adds	r3, #208	@ 0xd0
 8004828:	429c      	cmp	r4, r3
 800482a:	d105      	bne.n	8004838 <std+0x54>
 800482c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004834:	f000 ba76 	b.w	8004d24 <__retarget_lock_init_recursive>
 8004838:	bd10      	pop	{r4, pc}
 800483a:	bf00      	nop
 800483c:	08004a65 	.word	0x08004a65
 8004840:	08004a87 	.word	0x08004a87
 8004844:	08004abf 	.word	0x08004abf
 8004848:	08004ae3 	.word	0x08004ae3
 800484c:	200003e4 	.word	0x200003e4

08004850 <stdio_exit_handler>:
 8004850:	4a02      	ldr	r2, [pc, #8]	@ (800485c <stdio_exit_handler+0xc>)
 8004852:	4903      	ldr	r1, [pc, #12]	@ (8004860 <stdio_exit_handler+0x10>)
 8004854:	4803      	ldr	r0, [pc, #12]	@ (8004864 <stdio_exit_handler+0x14>)
 8004856:	f000 b869 	b.w	800492c <_fwalk_sglue>
 800485a:	bf00      	nop
 800485c:	20000010 	.word	0x20000010
 8004860:	08005495 	.word	0x08005495
 8004864:	20000020 	.word	0x20000020

08004868 <cleanup_stdio>:
 8004868:	6841      	ldr	r1, [r0, #4]
 800486a:	4b0c      	ldr	r3, [pc, #48]	@ (800489c <cleanup_stdio+0x34>)
 800486c:	4299      	cmp	r1, r3
 800486e:	b510      	push	{r4, lr}
 8004870:	4604      	mov	r4, r0
 8004872:	d001      	beq.n	8004878 <cleanup_stdio+0x10>
 8004874:	f000 fe0e 	bl	8005494 <_fflush_r>
 8004878:	68a1      	ldr	r1, [r4, #8]
 800487a:	4b09      	ldr	r3, [pc, #36]	@ (80048a0 <cleanup_stdio+0x38>)
 800487c:	4299      	cmp	r1, r3
 800487e:	d002      	beq.n	8004886 <cleanup_stdio+0x1e>
 8004880:	4620      	mov	r0, r4
 8004882:	f000 fe07 	bl	8005494 <_fflush_r>
 8004886:	68e1      	ldr	r1, [r4, #12]
 8004888:	4b06      	ldr	r3, [pc, #24]	@ (80048a4 <cleanup_stdio+0x3c>)
 800488a:	4299      	cmp	r1, r3
 800488c:	d004      	beq.n	8004898 <cleanup_stdio+0x30>
 800488e:	4620      	mov	r0, r4
 8004890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004894:	f000 bdfe 	b.w	8005494 <_fflush_r>
 8004898:	bd10      	pop	{r4, pc}
 800489a:	bf00      	nop
 800489c:	200003e4 	.word	0x200003e4
 80048a0:	2000044c 	.word	0x2000044c
 80048a4:	200004b4 	.word	0x200004b4

080048a8 <global_stdio_init.part.0>:
 80048a8:	b510      	push	{r4, lr}
 80048aa:	4b0b      	ldr	r3, [pc, #44]	@ (80048d8 <global_stdio_init.part.0+0x30>)
 80048ac:	4c0b      	ldr	r4, [pc, #44]	@ (80048dc <global_stdio_init.part.0+0x34>)
 80048ae:	4a0c      	ldr	r2, [pc, #48]	@ (80048e0 <global_stdio_init.part.0+0x38>)
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	4620      	mov	r0, r4
 80048b4:	2200      	movs	r2, #0
 80048b6:	2104      	movs	r1, #4
 80048b8:	f7ff ff94 	bl	80047e4 <std>
 80048bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048c0:	2201      	movs	r2, #1
 80048c2:	2109      	movs	r1, #9
 80048c4:	f7ff ff8e 	bl	80047e4 <std>
 80048c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80048cc:	2202      	movs	r2, #2
 80048ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d2:	2112      	movs	r1, #18
 80048d4:	f7ff bf86 	b.w	80047e4 <std>
 80048d8:	2000051c 	.word	0x2000051c
 80048dc:	200003e4 	.word	0x200003e4
 80048e0:	08004851 	.word	0x08004851

080048e4 <__sfp_lock_acquire>:
 80048e4:	4801      	ldr	r0, [pc, #4]	@ (80048ec <__sfp_lock_acquire+0x8>)
 80048e6:	f000 ba1e 	b.w	8004d26 <__retarget_lock_acquire_recursive>
 80048ea:	bf00      	nop
 80048ec:	20000525 	.word	0x20000525

080048f0 <__sfp_lock_release>:
 80048f0:	4801      	ldr	r0, [pc, #4]	@ (80048f8 <__sfp_lock_release+0x8>)
 80048f2:	f000 ba19 	b.w	8004d28 <__retarget_lock_release_recursive>
 80048f6:	bf00      	nop
 80048f8:	20000525 	.word	0x20000525

080048fc <__sinit>:
 80048fc:	b510      	push	{r4, lr}
 80048fe:	4604      	mov	r4, r0
 8004900:	f7ff fff0 	bl	80048e4 <__sfp_lock_acquire>
 8004904:	6a23      	ldr	r3, [r4, #32]
 8004906:	b11b      	cbz	r3, 8004910 <__sinit+0x14>
 8004908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800490c:	f7ff bff0 	b.w	80048f0 <__sfp_lock_release>
 8004910:	4b04      	ldr	r3, [pc, #16]	@ (8004924 <__sinit+0x28>)
 8004912:	6223      	str	r3, [r4, #32]
 8004914:	4b04      	ldr	r3, [pc, #16]	@ (8004928 <__sinit+0x2c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1f5      	bne.n	8004908 <__sinit+0xc>
 800491c:	f7ff ffc4 	bl	80048a8 <global_stdio_init.part.0>
 8004920:	e7f2      	b.n	8004908 <__sinit+0xc>
 8004922:	bf00      	nop
 8004924:	08004869 	.word	0x08004869
 8004928:	2000051c 	.word	0x2000051c

0800492c <_fwalk_sglue>:
 800492c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004930:	4607      	mov	r7, r0
 8004932:	4688      	mov	r8, r1
 8004934:	4614      	mov	r4, r2
 8004936:	2600      	movs	r6, #0
 8004938:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800493c:	f1b9 0901 	subs.w	r9, r9, #1
 8004940:	d505      	bpl.n	800494e <_fwalk_sglue+0x22>
 8004942:	6824      	ldr	r4, [r4, #0]
 8004944:	2c00      	cmp	r4, #0
 8004946:	d1f7      	bne.n	8004938 <_fwalk_sglue+0xc>
 8004948:	4630      	mov	r0, r6
 800494a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800494e:	89ab      	ldrh	r3, [r5, #12]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d907      	bls.n	8004964 <_fwalk_sglue+0x38>
 8004954:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004958:	3301      	adds	r3, #1
 800495a:	d003      	beq.n	8004964 <_fwalk_sglue+0x38>
 800495c:	4629      	mov	r1, r5
 800495e:	4638      	mov	r0, r7
 8004960:	47c0      	blx	r8
 8004962:	4306      	orrs	r6, r0
 8004964:	3568      	adds	r5, #104	@ 0x68
 8004966:	e7e9      	b.n	800493c <_fwalk_sglue+0x10>

08004968 <_puts_r>:
 8004968:	6a03      	ldr	r3, [r0, #32]
 800496a:	b570      	push	{r4, r5, r6, lr}
 800496c:	6884      	ldr	r4, [r0, #8]
 800496e:	4605      	mov	r5, r0
 8004970:	460e      	mov	r6, r1
 8004972:	b90b      	cbnz	r3, 8004978 <_puts_r+0x10>
 8004974:	f7ff ffc2 	bl	80048fc <__sinit>
 8004978:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800497a:	07db      	lsls	r3, r3, #31
 800497c:	d405      	bmi.n	800498a <_puts_r+0x22>
 800497e:	89a3      	ldrh	r3, [r4, #12]
 8004980:	0598      	lsls	r0, r3, #22
 8004982:	d402      	bmi.n	800498a <_puts_r+0x22>
 8004984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004986:	f000 f9ce 	bl	8004d26 <__retarget_lock_acquire_recursive>
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	0719      	lsls	r1, r3, #28
 800498e:	d502      	bpl.n	8004996 <_puts_r+0x2e>
 8004990:	6923      	ldr	r3, [r4, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d135      	bne.n	8004a02 <_puts_r+0x9a>
 8004996:	4621      	mov	r1, r4
 8004998:	4628      	mov	r0, r5
 800499a:	f000 f8e5 	bl	8004b68 <__swsetup_r>
 800499e:	b380      	cbz	r0, 8004a02 <_puts_r+0x9a>
 80049a0:	f04f 35ff 	mov.w	r5, #4294967295
 80049a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049a6:	07da      	lsls	r2, r3, #31
 80049a8:	d405      	bmi.n	80049b6 <_puts_r+0x4e>
 80049aa:	89a3      	ldrh	r3, [r4, #12]
 80049ac:	059b      	lsls	r3, r3, #22
 80049ae:	d402      	bmi.n	80049b6 <_puts_r+0x4e>
 80049b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049b2:	f000 f9b9 	bl	8004d28 <__retarget_lock_release_recursive>
 80049b6:	4628      	mov	r0, r5
 80049b8:	bd70      	pop	{r4, r5, r6, pc}
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	da04      	bge.n	80049c8 <_puts_r+0x60>
 80049be:	69a2      	ldr	r2, [r4, #24]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	dc17      	bgt.n	80049f4 <_puts_r+0x8c>
 80049c4:	290a      	cmp	r1, #10
 80049c6:	d015      	beq.n	80049f4 <_puts_r+0x8c>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	6022      	str	r2, [r4, #0]
 80049ce:	7019      	strb	r1, [r3, #0]
 80049d0:	68a3      	ldr	r3, [r4, #8]
 80049d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049d6:	3b01      	subs	r3, #1
 80049d8:	60a3      	str	r3, [r4, #8]
 80049da:	2900      	cmp	r1, #0
 80049dc:	d1ed      	bne.n	80049ba <_puts_r+0x52>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	da11      	bge.n	8004a06 <_puts_r+0x9e>
 80049e2:	4622      	mov	r2, r4
 80049e4:	210a      	movs	r1, #10
 80049e6:	4628      	mov	r0, r5
 80049e8:	f000 f87f 	bl	8004aea <__swbuf_r>
 80049ec:	3001      	adds	r0, #1
 80049ee:	d0d7      	beq.n	80049a0 <_puts_r+0x38>
 80049f0:	250a      	movs	r5, #10
 80049f2:	e7d7      	b.n	80049a4 <_puts_r+0x3c>
 80049f4:	4622      	mov	r2, r4
 80049f6:	4628      	mov	r0, r5
 80049f8:	f000 f877 	bl	8004aea <__swbuf_r>
 80049fc:	3001      	adds	r0, #1
 80049fe:	d1e7      	bne.n	80049d0 <_puts_r+0x68>
 8004a00:	e7ce      	b.n	80049a0 <_puts_r+0x38>
 8004a02:	3e01      	subs	r6, #1
 8004a04:	e7e4      	b.n	80049d0 <_puts_r+0x68>
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	6022      	str	r2, [r4, #0]
 8004a0c:	220a      	movs	r2, #10
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	e7ee      	b.n	80049f0 <_puts_r+0x88>
	...

08004a14 <puts>:
 8004a14:	4b02      	ldr	r3, [pc, #8]	@ (8004a20 <puts+0xc>)
 8004a16:	4601      	mov	r1, r0
 8004a18:	6818      	ldr	r0, [r3, #0]
 8004a1a:	f7ff bfa5 	b.w	8004968 <_puts_r>
 8004a1e:	bf00      	nop
 8004a20:	2000001c 	.word	0x2000001c

08004a24 <siprintf>:
 8004a24:	b40e      	push	{r1, r2, r3}
 8004a26:	b500      	push	{lr}
 8004a28:	b09c      	sub	sp, #112	@ 0x70
 8004a2a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004a2c:	9002      	str	r0, [sp, #8]
 8004a2e:	9006      	str	r0, [sp, #24]
 8004a30:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a34:	4809      	ldr	r0, [pc, #36]	@ (8004a5c <siprintf+0x38>)
 8004a36:	9107      	str	r1, [sp, #28]
 8004a38:	9104      	str	r1, [sp, #16]
 8004a3a:	4909      	ldr	r1, [pc, #36]	@ (8004a60 <siprintf+0x3c>)
 8004a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a40:	9105      	str	r1, [sp, #20]
 8004a42:	6800      	ldr	r0, [r0, #0]
 8004a44:	9301      	str	r3, [sp, #4]
 8004a46:	a902      	add	r1, sp, #8
 8004a48:	f000 fa16 	bl	8004e78 <_svfiprintf_r>
 8004a4c:	9b02      	ldr	r3, [sp, #8]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	b01c      	add	sp, #112	@ 0x70
 8004a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a58:	b003      	add	sp, #12
 8004a5a:	4770      	bx	lr
 8004a5c:	2000001c 	.word	0x2000001c
 8004a60:	ffff0208 	.word	0xffff0208

08004a64 <__sread>:
 8004a64:	b510      	push	{r4, lr}
 8004a66:	460c      	mov	r4, r1
 8004a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a6c:	f000 f8fc 	bl	8004c68 <_read_r>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	bfab      	itete	ge
 8004a74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a76:	89a3      	ldrhlt	r3, [r4, #12]
 8004a78:	181b      	addge	r3, r3, r0
 8004a7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a7e:	bfac      	ite	ge
 8004a80:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a82:	81a3      	strhlt	r3, [r4, #12]
 8004a84:	bd10      	pop	{r4, pc}

08004a86 <__swrite>:
 8004a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a8a:	461f      	mov	r7, r3
 8004a8c:	898b      	ldrh	r3, [r1, #12]
 8004a8e:	05db      	lsls	r3, r3, #23
 8004a90:	4605      	mov	r5, r0
 8004a92:	460c      	mov	r4, r1
 8004a94:	4616      	mov	r6, r2
 8004a96:	d505      	bpl.n	8004aa4 <__swrite+0x1e>
 8004a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f000 f8d0 	bl	8004c44 <_lseek_r>
 8004aa4:	89a3      	ldrh	r3, [r4, #12]
 8004aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aaa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004aae:	81a3      	strh	r3, [r4, #12]
 8004ab0:	4632      	mov	r2, r6
 8004ab2:	463b      	mov	r3, r7
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aba:	f000 b8f7 	b.w	8004cac <_write_r>

08004abe <__sseek>:
 8004abe:	b510      	push	{r4, lr}
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac6:	f000 f8bd 	bl	8004c44 <_lseek_r>
 8004aca:	1c43      	adds	r3, r0, #1
 8004acc:	89a3      	ldrh	r3, [r4, #12]
 8004ace:	bf15      	itete	ne
 8004ad0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004ad2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004ad6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ada:	81a3      	strheq	r3, [r4, #12]
 8004adc:	bf18      	it	ne
 8004ade:	81a3      	strhne	r3, [r4, #12]
 8004ae0:	bd10      	pop	{r4, pc}

08004ae2 <__sclose>:
 8004ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae6:	f000 b89d 	b.w	8004c24 <_close_r>

08004aea <__swbuf_r>:
 8004aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aec:	460e      	mov	r6, r1
 8004aee:	4614      	mov	r4, r2
 8004af0:	4605      	mov	r5, r0
 8004af2:	b118      	cbz	r0, 8004afc <__swbuf_r+0x12>
 8004af4:	6a03      	ldr	r3, [r0, #32]
 8004af6:	b90b      	cbnz	r3, 8004afc <__swbuf_r+0x12>
 8004af8:	f7ff ff00 	bl	80048fc <__sinit>
 8004afc:	69a3      	ldr	r3, [r4, #24]
 8004afe:	60a3      	str	r3, [r4, #8]
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	071a      	lsls	r2, r3, #28
 8004b04:	d501      	bpl.n	8004b0a <__swbuf_r+0x20>
 8004b06:	6923      	ldr	r3, [r4, #16]
 8004b08:	b943      	cbnz	r3, 8004b1c <__swbuf_r+0x32>
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	f000 f82b 	bl	8004b68 <__swsetup_r>
 8004b12:	b118      	cbz	r0, 8004b1c <__swbuf_r+0x32>
 8004b14:	f04f 37ff 	mov.w	r7, #4294967295
 8004b18:	4638      	mov	r0, r7
 8004b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	6922      	ldr	r2, [r4, #16]
 8004b20:	1a98      	subs	r0, r3, r2
 8004b22:	6963      	ldr	r3, [r4, #20]
 8004b24:	b2f6      	uxtb	r6, r6
 8004b26:	4283      	cmp	r3, r0
 8004b28:	4637      	mov	r7, r6
 8004b2a:	dc05      	bgt.n	8004b38 <__swbuf_r+0x4e>
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f000 fcb0 	bl	8005494 <_fflush_r>
 8004b34:	2800      	cmp	r0, #0
 8004b36:	d1ed      	bne.n	8004b14 <__swbuf_r+0x2a>
 8004b38:	68a3      	ldr	r3, [r4, #8]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	60a3      	str	r3, [r4, #8]
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	6022      	str	r2, [r4, #0]
 8004b44:	701e      	strb	r6, [r3, #0]
 8004b46:	6962      	ldr	r2, [r4, #20]
 8004b48:	1c43      	adds	r3, r0, #1
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d004      	beq.n	8004b58 <__swbuf_r+0x6e>
 8004b4e:	89a3      	ldrh	r3, [r4, #12]
 8004b50:	07db      	lsls	r3, r3, #31
 8004b52:	d5e1      	bpl.n	8004b18 <__swbuf_r+0x2e>
 8004b54:	2e0a      	cmp	r6, #10
 8004b56:	d1df      	bne.n	8004b18 <__swbuf_r+0x2e>
 8004b58:	4621      	mov	r1, r4
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	f000 fc9a 	bl	8005494 <_fflush_r>
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d0d9      	beq.n	8004b18 <__swbuf_r+0x2e>
 8004b64:	e7d6      	b.n	8004b14 <__swbuf_r+0x2a>
	...

08004b68 <__swsetup_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4b29      	ldr	r3, [pc, #164]	@ (8004c10 <__swsetup_r+0xa8>)
 8004b6c:	4605      	mov	r5, r0
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	460c      	mov	r4, r1
 8004b72:	b118      	cbz	r0, 8004b7c <__swsetup_r+0x14>
 8004b74:	6a03      	ldr	r3, [r0, #32]
 8004b76:	b90b      	cbnz	r3, 8004b7c <__swsetup_r+0x14>
 8004b78:	f7ff fec0 	bl	80048fc <__sinit>
 8004b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b80:	0719      	lsls	r1, r3, #28
 8004b82:	d422      	bmi.n	8004bca <__swsetup_r+0x62>
 8004b84:	06da      	lsls	r2, r3, #27
 8004b86:	d407      	bmi.n	8004b98 <__swsetup_r+0x30>
 8004b88:	2209      	movs	r2, #9
 8004b8a:	602a      	str	r2, [r5, #0]
 8004b8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b90:	81a3      	strh	r3, [r4, #12]
 8004b92:	f04f 30ff 	mov.w	r0, #4294967295
 8004b96:	e033      	b.n	8004c00 <__swsetup_r+0x98>
 8004b98:	0758      	lsls	r0, r3, #29
 8004b9a:	d512      	bpl.n	8004bc2 <__swsetup_r+0x5a>
 8004b9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b9e:	b141      	cbz	r1, 8004bb2 <__swsetup_r+0x4a>
 8004ba0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ba4:	4299      	cmp	r1, r3
 8004ba6:	d002      	beq.n	8004bae <__swsetup_r+0x46>
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f000 f8bf 	bl	8004d2c <_free_r>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bb2:	89a3      	ldrh	r3, [r4, #12]
 8004bb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004bb8:	81a3      	strh	r3, [r4, #12]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	6063      	str	r3, [r4, #4]
 8004bbe:	6923      	ldr	r3, [r4, #16]
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	89a3      	ldrh	r3, [r4, #12]
 8004bc4:	f043 0308 	orr.w	r3, r3, #8
 8004bc8:	81a3      	strh	r3, [r4, #12]
 8004bca:	6923      	ldr	r3, [r4, #16]
 8004bcc:	b94b      	cbnz	r3, 8004be2 <__swsetup_r+0x7a>
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bd8:	d003      	beq.n	8004be2 <__swsetup_r+0x7a>
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f000 fca7 	bl	8005530 <__smakebuf_r>
 8004be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004be6:	f013 0201 	ands.w	r2, r3, #1
 8004bea:	d00a      	beq.n	8004c02 <__swsetup_r+0x9a>
 8004bec:	2200      	movs	r2, #0
 8004bee:	60a2      	str	r2, [r4, #8]
 8004bf0:	6962      	ldr	r2, [r4, #20]
 8004bf2:	4252      	negs	r2, r2
 8004bf4:	61a2      	str	r2, [r4, #24]
 8004bf6:	6922      	ldr	r2, [r4, #16]
 8004bf8:	b942      	cbnz	r2, 8004c0c <__swsetup_r+0xa4>
 8004bfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004bfe:	d1c5      	bne.n	8004b8c <__swsetup_r+0x24>
 8004c00:	bd38      	pop	{r3, r4, r5, pc}
 8004c02:	0799      	lsls	r1, r3, #30
 8004c04:	bf58      	it	pl
 8004c06:	6962      	ldrpl	r2, [r4, #20]
 8004c08:	60a2      	str	r2, [r4, #8]
 8004c0a:	e7f4      	b.n	8004bf6 <__swsetup_r+0x8e>
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	e7f7      	b.n	8004c00 <__swsetup_r+0x98>
 8004c10:	2000001c 	.word	0x2000001c

08004c14 <memset>:
 8004c14:	4402      	add	r2, r0
 8004c16:	4603      	mov	r3, r0
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d100      	bne.n	8004c1e <memset+0xa>
 8004c1c:	4770      	bx	lr
 8004c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c22:	e7f9      	b.n	8004c18 <memset+0x4>

08004c24 <_close_r>:
 8004c24:	b538      	push	{r3, r4, r5, lr}
 8004c26:	4d06      	ldr	r5, [pc, #24]	@ (8004c40 <_close_r+0x1c>)
 8004c28:	2300      	movs	r3, #0
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	602b      	str	r3, [r5, #0]
 8004c30:	f7ff f9dc 	bl	8003fec <_close>
 8004c34:	1c43      	adds	r3, r0, #1
 8004c36:	d102      	bne.n	8004c3e <_close_r+0x1a>
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	b103      	cbz	r3, 8004c3e <_close_r+0x1a>
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	bd38      	pop	{r3, r4, r5, pc}
 8004c40:	20000520 	.word	0x20000520

08004c44 <_lseek_r>:
 8004c44:	b538      	push	{r3, r4, r5, lr}
 8004c46:	4d07      	ldr	r5, [pc, #28]	@ (8004c64 <_lseek_r+0x20>)
 8004c48:	4604      	mov	r4, r0
 8004c4a:	4608      	mov	r0, r1
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	2200      	movs	r2, #0
 8004c50:	602a      	str	r2, [r5, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f7ff f9f1 	bl	800403a <_lseek>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d102      	bne.n	8004c62 <_lseek_r+0x1e>
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	b103      	cbz	r3, 8004c62 <_lseek_r+0x1e>
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	20000520 	.word	0x20000520

08004c68 <_read_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4d07      	ldr	r5, [pc, #28]	@ (8004c88 <_read_r+0x20>)
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	4608      	mov	r0, r1
 8004c70:	4611      	mov	r1, r2
 8004c72:	2200      	movs	r2, #0
 8004c74:	602a      	str	r2, [r5, #0]
 8004c76:	461a      	mov	r2, r3
 8004c78:	f7ff f97f 	bl	8003f7a <_read>
 8004c7c:	1c43      	adds	r3, r0, #1
 8004c7e:	d102      	bne.n	8004c86 <_read_r+0x1e>
 8004c80:	682b      	ldr	r3, [r5, #0]
 8004c82:	b103      	cbz	r3, 8004c86 <_read_r+0x1e>
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	bd38      	pop	{r3, r4, r5, pc}
 8004c88:	20000520 	.word	0x20000520

08004c8c <_sbrk_r>:
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	4d06      	ldr	r5, [pc, #24]	@ (8004ca8 <_sbrk_r+0x1c>)
 8004c90:	2300      	movs	r3, #0
 8004c92:	4604      	mov	r4, r0
 8004c94:	4608      	mov	r0, r1
 8004c96:	602b      	str	r3, [r5, #0]
 8004c98:	f7ff f9dc 	bl	8004054 <_sbrk>
 8004c9c:	1c43      	adds	r3, r0, #1
 8004c9e:	d102      	bne.n	8004ca6 <_sbrk_r+0x1a>
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	b103      	cbz	r3, 8004ca6 <_sbrk_r+0x1a>
 8004ca4:	6023      	str	r3, [r4, #0]
 8004ca6:	bd38      	pop	{r3, r4, r5, pc}
 8004ca8:	20000520 	.word	0x20000520

08004cac <_write_r>:
 8004cac:	b538      	push	{r3, r4, r5, lr}
 8004cae:	4d07      	ldr	r5, [pc, #28]	@ (8004ccc <_write_r+0x20>)
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	4608      	mov	r0, r1
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	602a      	str	r2, [r5, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f7ff f97a 	bl	8003fb4 <_write>
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	d102      	bne.n	8004cca <_write_r+0x1e>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	b103      	cbz	r3, 8004cca <_write_r+0x1e>
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	bd38      	pop	{r3, r4, r5, pc}
 8004ccc:	20000520 	.word	0x20000520

08004cd0 <__errno>:
 8004cd0:	4b01      	ldr	r3, [pc, #4]	@ (8004cd8 <__errno+0x8>)
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	2000001c 	.word	0x2000001c

08004cdc <__libc_init_array>:
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	4d0d      	ldr	r5, [pc, #52]	@ (8004d14 <__libc_init_array+0x38>)
 8004ce0:	4c0d      	ldr	r4, [pc, #52]	@ (8004d18 <__libc_init_array+0x3c>)
 8004ce2:	1b64      	subs	r4, r4, r5
 8004ce4:	10a4      	asrs	r4, r4, #2
 8004ce6:	2600      	movs	r6, #0
 8004ce8:	42a6      	cmp	r6, r4
 8004cea:	d109      	bne.n	8004d00 <__libc_init_array+0x24>
 8004cec:	4d0b      	ldr	r5, [pc, #44]	@ (8004d1c <__libc_init_array+0x40>)
 8004cee:	4c0c      	ldr	r4, [pc, #48]	@ (8004d20 <__libc_init_array+0x44>)
 8004cf0:	f001 fffe 	bl	8006cf0 <_init>
 8004cf4:	1b64      	subs	r4, r4, r5
 8004cf6:	10a4      	asrs	r4, r4, #2
 8004cf8:	2600      	movs	r6, #0
 8004cfa:	42a6      	cmp	r6, r4
 8004cfc:	d105      	bne.n	8004d0a <__libc_init_array+0x2e>
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}
 8004d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d04:	4798      	blx	r3
 8004d06:	3601      	adds	r6, #1
 8004d08:	e7ee      	b.n	8004ce8 <__libc_init_array+0xc>
 8004d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d0e:	4798      	blx	r3
 8004d10:	3601      	adds	r6, #1
 8004d12:	e7f2      	b.n	8004cfa <__libc_init_array+0x1e>
 8004d14:	08007360 	.word	0x08007360
 8004d18:	08007360 	.word	0x08007360
 8004d1c:	08007360 	.word	0x08007360
 8004d20:	08007364 	.word	0x08007364

08004d24 <__retarget_lock_init_recursive>:
 8004d24:	4770      	bx	lr

08004d26 <__retarget_lock_acquire_recursive>:
 8004d26:	4770      	bx	lr

08004d28 <__retarget_lock_release_recursive>:
 8004d28:	4770      	bx	lr
	...

08004d2c <_free_r>:
 8004d2c:	b538      	push	{r3, r4, r5, lr}
 8004d2e:	4605      	mov	r5, r0
 8004d30:	2900      	cmp	r1, #0
 8004d32:	d041      	beq.n	8004db8 <_free_r+0x8c>
 8004d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d38:	1f0c      	subs	r4, r1, #4
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	bfb8      	it	lt
 8004d3e:	18e4      	addlt	r4, r4, r3
 8004d40:	f7ff fd44 	bl	80047cc <__malloc_lock>
 8004d44:	4a1d      	ldr	r2, [pc, #116]	@ (8004dbc <_free_r+0x90>)
 8004d46:	6813      	ldr	r3, [r2, #0]
 8004d48:	b933      	cbnz	r3, 8004d58 <_free_r+0x2c>
 8004d4a:	6063      	str	r3, [r4, #4]
 8004d4c:	6014      	str	r4, [r2, #0]
 8004d4e:	4628      	mov	r0, r5
 8004d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d54:	f7ff bd40 	b.w	80047d8 <__malloc_unlock>
 8004d58:	42a3      	cmp	r3, r4
 8004d5a:	d908      	bls.n	8004d6e <_free_r+0x42>
 8004d5c:	6820      	ldr	r0, [r4, #0]
 8004d5e:	1821      	adds	r1, r4, r0
 8004d60:	428b      	cmp	r3, r1
 8004d62:	bf01      	itttt	eq
 8004d64:	6819      	ldreq	r1, [r3, #0]
 8004d66:	685b      	ldreq	r3, [r3, #4]
 8004d68:	1809      	addeq	r1, r1, r0
 8004d6a:	6021      	streq	r1, [r4, #0]
 8004d6c:	e7ed      	b.n	8004d4a <_free_r+0x1e>
 8004d6e:	461a      	mov	r2, r3
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	b10b      	cbz	r3, 8004d78 <_free_r+0x4c>
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	d9fa      	bls.n	8004d6e <_free_r+0x42>
 8004d78:	6811      	ldr	r1, [r2, #0]
 8004d7a:	1850      	adds	r0, r2, r1
 8004d7c:	42a0      	cmp	r0, r4
 8004d7e:	d10b      	bne.n	8004d98 <_free_r+0x6c>
 8004d80:	6820      	ldr	r0, [r4, #0]
 8004d82:	4401      	add	r1, r0
 8004d84:	1850      	adds	r0, r2, r1
 8004d86:	4283      	cmp	r3, r0
 8004d88:	6011      	str	r1, [r2, #0]
 8004d8a:	d1e0      	bne.n	8004d4e <_free_r+0x22>
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	6053      	str	r3, [r2, #4]
 8004d92:	4408      	add	r0, r1
 8004d94:	6010      	str	r0, [r2, #0]
 8004d96:	e7da      	b.n	8004d4e <_free_r+0x22>
 8004d98:	d902      	bls.n	8004da0 <_free_r+0x74>
 8004d9a:	230c      	movs	r3, #12
 8004d9c:	602b      	str	r3, [r5, #0]
 8004d9e:	e7d6      	b.n	8004d4e <_free_r+0x22>
 8004da0:	6820      	ldr	r0, [r4, #0]
 8004da2:	1821      	adds	r1, r4, r0
 8004da4:	428b      	cmp	r3, r1
 8004da6:	bf04      	itt	eq
 8004da8:	6819      	ldreq	r1, [r3, #0]
 8004daa:	685b      	ldreq	r3, [r3, #4]
 8004dac:	6063      	str	r3, [r4, #4]
 8004dae:	bf04      	itt	eq
 8004db0:	1809      	addeq	r1, r1, r0
 8004db2:	6021      	streq	r1, [r4, #0]
 8004db4:	6054      	str	r4, [r2, #4]
 8004db6:	e7ca      	b.n	8004d4e <_free_r+0x22>
 8004db8:	bd38      	pop	{r3, r4, r5, pc}
 8004dba:	bf00      	nop
 8004dbc:	200003e0 	.word	0x200003e0

08004dc0 <__ssputs_r>:
 8004dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc4:	688e      	ldr	r6, [r1, #8]
 8004dc6:	461f      	mov	r7, r3
 8004dc8:	42be      	cmp	r6, r7
 8004dca:	680b      	ldr	r3, [r1, #0]
 8004dcc:	4682      	mov	sl, r0
 8004dce:	460c      	mov	r4, r1
 8004dd0:	4690      	mov	r8, r2
 8004dd2:	d82d      	bhi.n	8004e30 <__ssputs_r+0x70>
 8004dd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004dd8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ddc:	d026      	beq.n	8004e2c <__ssputs_r+0x6c>
 8004dde:	6965      	ldr	r5, [r4, #20]
 8004de0:	6909      	ldr	r1, [r1, #16]
 8004de2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004de6:	eba3 0901 	sub.w	r9, r3, r1
 8004dea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dee:	1c7b      	adds	r3, r7, #1
 8004df0:	444b      	add	r3, r9
 8004df2:	106d      	asrs	r5, r5, #1
 8004df4:	429d      	cmp	r5, r3
 8004df6:	bf38      	it	cc
 8004df8:	461d      	movcc	r5, r3
 8004dfa:	0553      	lsls	r3, r2, #21
 8004dfc:	d527      	bpl.n	8004e4e <__ssputs_r+0x8e>
 8004dfe:	4629      	mov	r1, r5
 8004e00:	f7ff fc64 	bl	80046cc <_malloc_r>
 8004e04:	4606      	mov	r6, r0
 8004e06:	b360      	cbz	r0, 8004e62 <__ssputs_r+0xa2>
 8004e08:	6921      	ldr	r1, [r4, #16]
 8004e0a:	464a      	mov	r2, r9
 8004e0c:	f000 fc08 	bl	8005620 <memcpy>
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	6126      	str	r6, [r4, #16]
 8004e1e:	6165      	str	r5, [r4, #20]
 8004e20:	444e      	add	r6, r9
 8004e22:	eba5 0509 	sub.w	r5, r5, r9
 8004e26:	6026      	str	r6, [r4, #0]
 8004e28:	60a5      	str	r5, [r4, #8]
 8004e2a:	463e      	mov	r6, r7
 8004e2c:	42be      	cmp	r6, r7
 8004e2e:	d900      	bls.n	8004e32 <__ssputs_r+0x72>
 8004e30:	463e      	mov	r6, r7
 8004e32:	6820      	ldr	r0, [r4, #0]
 8004e34:	4632      	mov	r2, r6
 8004e36:	4641      	mov	r1, r8
 8004e38:	f000 fbb6 	bl	80055a8 <memmove>
 8004e3c:	68a3      	ldr	r3, [r4, #8]
 8004e3e:	1b9b      	subs	r3, r3, r6
 8004e40:	60a3      	str	r3, [r4, #8]
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	4433      	add	r3, r6
 8004e46:	6023      	str	r3, [r4, #0]
 8004e48:	2000      	movs	r0, #0
 8004e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e4e:	462a      	mov	r2, r5
 8004e50:	f000 fbf4 	bl	800563c <_realloc_r>
 8004e54:	4606      	mov	r6, r0
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d1e0      	bne.n	8004e1c <__ssputs_r+0x5c>
 8004e5a:	6921      	ldr	r1, [r4, #16]
 8004e5c:	4650      	mov	r0, sl
 8004e5e:	f7ff ff65 	bl	8004d2c <_free_r>
 8004e62:	230c      	movs	r3, #12
 8004e64:	f8ca 3000 	str.w	r3, [sl]
 8004e68:	89a3      	ldrh	r3, [r4, #12]
 8004e6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e6e:	81a3      	strh	r3, [r4, #12]
 8004e70:	f04f 30ff 	mov.w	r0, #4294967295
 8004e74:	e7e9      	b.n	8004e4a <__ssputs_r+0x8a>
	...

08004e78 <_svfiprintf_r>:
 8004e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e7c:	4698      	mov	r8, r3
 8004e7e:	898b      	ldrh	r3, [r1, #12]
 8004e80:	061b      	lsls	r3, r3, #24
 8004e82:	b09d      	sub	sp, #116	@ 0x74
 8004e84:	4607      	mov	r7, r0
 8004e86:	460d      	mov	r5, r1
 8004e88:	4614      	mov	r4, r2
 8004e8a:	d510      	bpl.n	8004eae <_svfiprintf_r+0x36>
 8004e8c:	690b      	ldr	r3, [r1, #16]
 8004e8e:	b973      	cbnz	r3, 8004eae <_svfiprintf_r+0x36>
 8004e90:	2140      	movs	r1, #64	@ 0x40
 8004e92:	f7ff fc1b 	bl	80046cc <_malloc_r>
 8004e96:	6028      	str	r0, [r5, #0]
 8004e98:	6128      	str	r0, [r5, #16]
 8004e9a:	b930      	cbnz	r0, 8004eaa <_svfiprintf_r+0x32>
 8004e9c:	230c      	movs	r3, #12
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea4:	b01d      	add	sp, #116	@ 0x74
 8004ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eaa:	2340      	movs	r3, #64	@ 0x40
 8004eac:	616b      	str	r3, [r5, #20]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004eb2:	2320      	movs	r3, #32
 8004eb4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004eb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ebc:	2330      	movs	r3, #48	@ 0x30
 8004ebe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800505c <_svfiprintf_r+0x1e4>
 8004ec2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ec6:	f04f 0901 	mov.w	r9, #1
 8004eca:	4623      	mov	r3, r4
 8004ecc:	469a      	mov	sl, r3
 8004ece:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ed2:	b10a      	cbz	r2, 8004ed8 <_svfiprintf_r+0x60>
 8004ed4:	2a25      	cmp	r2, #37	@ 0x25
 8004ed6:	d1f9      	bne.n	8004ecc <_svfiprintf_r+0x54>
 8004ed8:	ebba 0b04 	subs.w	fp, sl, r4
 8004edc:	d00b      	beq.n	8004ef6 <_svfiprintf_r+0x7e>
 8004ede:	465b      	mov	r3, fp
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	f7ff ff6b 	bl	8004dc0 <__ssputs_r>
 8004eea:	3001      	adds	r0, #1
 8004eec:	f000 80a7 	beq.w	800503e <_svfiprintf_r+0x1c6>
 8004ef0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ef2:	445a      	add	r2, fp
 8004ef4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 809f 	beq.w	800503e <_svfiprintf_r+0x1c6>
 8004f00:	2300      	movs	r3, #0
 8004f02:	f04f 32ff 	mov.w	r2, #4294967295
 8004f06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f0a:	f10a 0a01 	add.w	sl, sl, #1
 8004f0e:	9304      	str	r3, [sp, #16]
 8004f10:	9307      	str	r3, [sp, #28]
 8004f12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f16:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f18:	4654      	mov	r4, sl
 8004f1a:	2205      	movs	r2, #5
 8004f1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f20:	484e      	ldr	r0, [pc, #312]	@ (800505c <_svfiprintf_r+0x1e4>)
 8004f22:	f7fb f95d 	bl	80001e0 <memchr>
 8004f26:	9a04      	ldr	r2, [sp, #16]
 8004f28:	b9d8      	cbnz	r0, 8004f62 <_svfiprintf_r+0xea>
 8004f2a:	06d0      	lsls	r0, r2, #27
 8004f2c:	bf44      	itt	mi
 8004f2e:	2320      	movmi	r3, #32
 8004f30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f34:	0711      	lsls	r1, r2, #28
 8004f36:	bf44      	itt	mi
 8004f38:	232b      	movmi	r3, #43	@ 0x2b
 8004f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f42:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f44:	d015      	beq.n	8004f72 <_svfiprintf_r+0xfa>
 8004f46:	9a07      	ldr	r2, [sp, #28]
 8004f48:	4654      	mov	r4, sl
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f04f 0c0a 	mov.w	ip, #10
 8004f50:	4621      	mov	r1, r4
 8004f52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f56:	3b30      	subs	r3, #48	@ 0x30
 8004f58:	2b09      	cmp	r3, #9
 8004f5a:	d94b      	bls.n	8004ff4 <_svfiprintf_r+0x17c>
 8004f5c:	b1b0      	cbz	r0, 8004f8c <_svfiprintf_r+0x114>
 8004f5e:	9207      	str	r2, [sp, #28]
 8004f60:	e014      	b.n	8004f8c <_svfiprintf_r+0x114>
 8004f62:	eba0 0308 	sub.w	r3, r0, r8
 8004f66:	fa09 f303 	lsl.w	r3, r9, r3
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	9304      	str	r3, [sp, #16]
 8004f6e:	46a2      	mov	sl, r4
 8004f70:	e7d2      	b.n	8004f18 <_svfiprintf_r+0xa0>
 8004f72:	9b03      	ldr	r3, [sp, #12]
 8004f74:	1d19      	adds	r1, r3, #4
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	9103      	str	r1, [sp, #12]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	bfbb      	ittet	lt
 8004f7e:	425b      	neglt	r3, r3
 8004f80:	f042 0202 	orrlt.w	r2, r2, #2
 8004f84:	9307      	strge	r3, [sp, #28]
 8004f86:	9307      	strlt	r3, [sp, #28]
 8004f88:	bfb8      	it	lt
 8004f8a:	9204      	strlt	r2, [sp, #16]
 8004f8c:	7823      	ldrb	r3, [r4, #0]
 8004f8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f90:	d10a      	bne.n	8004fa8 <_svfiprintf_r+0x130>
 8004f92:	7863      	ldrb	r3, [r4, #1]
 8004f94:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f96:	d132      	bne.n	8004ffe <_svfiprintf_r+0x186>
 8004f98:	9b03      	ldr	r3, [sp, #12]
 8004f9a:	1d1a      	adds	r2, r3, #4
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	9203      	str	r2, [sp, #12]
 8004fa0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004fa4:	3402      	adds	r4, #2
 8004fa6:	9305      	str	r3, [sp, #20]
 8004fa8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800506c <_svfiprintf_r+0x1f4>
 8004fac:	7821      	ldrb	r1, [r4, #0]
 8004fae:	2203      	movs	r2, #3
 8004fb0:	4650      	mov	r0, sl
 8004fb2:	f7fb f915 	bl	80001e0 <memchr>
 8004fb6:	b138      	cbz	r0, 8004fc8 <_svfiprintf_r+0x150>
 8004fb8:	9b04      	ldr	r3, [sp, #16]
 8004fba:	eba0 000a 	sub.w	r0, r0, sl
 8004fbe:	2240      	movs	r2, #64	@ 0x40
 8004fc0:	4082      	lsls	r2, r0
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	3401      	adds	r4, #1
 8004fc6:	9304      	str	r3, [sp, #16]
 8004fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fcc:	4824      	ldr	r0, [pc, #144]	@ (8005060 <_svfiprintf_r+0x1e8>)
 8004fce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004fd2:	2206      	movs	r2, #6
 8004fd4:	f7fb f904 	bl	80001e0 <memchr>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d036      	beq.n	800504a <_svfiprintf_r+0x1d2>
 8004fdc:	4b21      	ldr	r3, [pc, #132]	@ (8005064 <_svfiprintf_r+0x1ec>)
 8004fde:	bb1b      	cbnz	r3, 8005028 <_svfiprintf_r+0x1b0>
 8004fe0:	9b03      	ldr	r3, [sp, #12]
 8004fe2:	3307      	adds	r3, #7
 8004fe4:	f023 0307 	bic.w	r3, r3, #7
 8004fe8:	3308      	adds	r3, #8
 8004fea:	9303      	str	r3, [sp, #12]
 8004fec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fee:	4433      	add	r3, r6
 8004ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ff2:	e76a      	b.n	8004eca <_svfiprintf_r+0x52>
 8004ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	e7a8      	b.n	8004f50 <_svfiprintf_r+0xd8>
 8004ffe:	2300      	movs	r3, #0
 8005000:	3401      	adds	r4, #1
 8005002:	9305      	str	r3, [sp, #20]
 8005004:	4619      	mov	r1, r3
 8005006:	f04f 0c0a 	mov.w	ip, #10
 800500a:	4620      	mov	r0, r4
 800500c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005010:	3a30      	subs	r2, #48	@ 0x30
 8005012:	2a09      	cmp	r2, #9
 8005014:	d903      	bls.n	800501e <_svfiprintf_r+0x1a6>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0c6      	beq.n	8004fa8 <_svfiprintf_r+0x130>
 800501a:	9105      	str	r1, [sp, #20]
 800501c:	e7c4      	b.n	8004fa8 <_svfiprintf_r+0x130>
 800501e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005022:	4604      	mov	r4, r0
 8005024:	2301      	movs	r3, #1
 8005026:	e7f0      	b.n	800500a <_svfiprintf_r+0x192>
 8005028:	ab03      	add	r3, sp, #12
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	462a      	mov	r2, r5
 800502e:	4b0e      	ldr	r3, [pc, #56]	@ (8005068 <_svfiprintf_r+0x1f0>)
 8005030:	a904      	add	r1, sp, #16
 8005032:	4638      	mov	r0, r7
 8005034:	f3af 8000 	nop.w
 8005038:	1c42      	adds	r2, r0, #1
 800503a:	4606      	mov	r6, r0
 800503c:	d1d6      	bne.n	8004fec <_svfiprintf_r+0x174>
 800503e:	89ab      	ldrh	r3, [r5, #12]
 8005040:	065b      	lsls	r3, r3, #25
 8005042:	f53f af2d 	bmi.w	8004ea0 <_svfiprintf_r+0x28>
 8005046:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005048:	e72c      	b.n	8004ea4 <_svfiprintf_r+0x2c>
 800504a:	ab03      	add	r3, sp, #12
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	462a      	mov	r2, r5
 8005050:	4b05      	ldr	r3, [pc, #20]	@ (8005068 <_svfiprintf_r+0x1f0>)
 8005052:	a904      	add	r1, sp, #16
 8005054:	4638      	mov	r0, r7
 8005056:	f000 f879 	bl	800514c <_printf_i>
 800505a:	e7ed      	b.n	8005038 <_svfiprintf_r+0x1c0>
 800505c:	08007108 	.word	0x08007108
 8005060:	08007112 	.word	0x08007112
 8005064:	00000000 	.word	0x00000000
 8005068:	08004dc1 	.word	0x08004dc1
 800506c:	0800710e 	.word	0x0800710e

08005070 <_printf_common>:
 8005070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005074:	4616      	mov	r6, r2
 8005076:	4698      	mov	r8, r3
 8005078:	688a      	ldr	r2, [r1, #8]
 800507a:	690b      	ldr	r3, [r1, #16]
 800507c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005080:	4293      	cmp	r3, r2
 8005082:	bfb8      	it	lt
 8005084:	4613      	movlt	r3, r2
 8005086:	6033      	str	r3, [r6, #0]
 8005088:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800508c:	4607      	mov	r7, r0
 800508e:	460c      	mov	r4, r1
 8005090:	b10a      	cbz	r2, 8005096 <_printf_common+0x26>
 8005092:	3301      	adds	r3, #1
 8005094:	6033      	str	r3, [r6, #0]
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	0699      	lsls	r1, r3, #26
 800509a:	bf42      	ittt	mi
 800509c:	6833      	ldrmi	r3, [r6, #0]
 800509e:	3302      	addmi	r3, #2
 80050a0:	6033      	strmi	r3, [r6, #0]
 80050a2:	6825      	ldr	r5, [r4, #0]
 80050a4:	f015 0506 	ands.w	r5, r5, #6
 80050a8:	d106      	bne.n	80050b8 <_printf_common+0x48>
 80050aa:	f104 0a19 	add.w	sl, r4, #25
 80050ae:	68e3      	ldr	r3, [r4, #12]
 80050b0:	6832      	ldr	r2, [r6, #0]
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	42ab      	cmp	r3, r5
 80050b6:	dc26      	bgt.n	8005106 <_printf_common+0x96>
 80050b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050bc:	6822      	ldr	r2, [r4, #0]
 80050be:	3b00      	subs	r3, #0
 80050c0:	bf18      	it	ne
 80050c2:	2301      	movne	r3, #1
 80050c4:	0692      	lsls	r2, r2, #26
 80050c6:	d42b      	bmi.n	8005120 <_printf_common+0xb0>
 80050c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050cc:	4641      	mov	r1, r8
 80050ce:	4638      	mov	r0, r7
 80050d0:	47c8      	blx	r9
 80050d2:	3001      	adds	r0, #1
 80050d4:	d01e      	beq.n	8005114 <_printf_common+0xa4>
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	6922      	ldr	r2, [r4, #16]
 80050da:	f003 0306 	and.w	r3, r3, #6
 80050de:	2b04      	cmp	r3, #4
 80050e0:	bf02      	ittt	eq
 80050e2:	68e5      	ldreq	r5, [r4, #12]
 80050e4:	6833      	ldreq	r3, [r6, #0]
 80050e6:	1aed      	subeq	r5, r5, r3
 80050e8:	68a3      	ldr	r3, [r4, #8]
 80050ea:	bf0c      	ite	eq
 80050ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050f0:	2500      	movne	r5, #0
 80050f2:	4293      	cmp	r3, r2
 80050f4:	bfc4      	itt	gt
 80050f6:	1a9b      	subgt	r3, r3, r2
 80050f8:	18ed      	addgt	r5, r5, r3
 80050fa:	2600      	movs	r6, #0
 80050fc:	341a      	adds	r4, #26
 80050fe:	42b5      	cmp	r5, r6
 8005100:	d11a      	bne.n	8005138 <_printf_common+0xc8>
 8005102:	2000      	movs	r0, #0
 8005104:	e008      	b.n	8005118 <_printf_common+0xa8>
 8005106:	2301      	movs	r3, #1
 8005108:	4652      	mov	r2, sl
 800510a:	4641      	mov	r1, r8
 800510c:	4638      	mov	r0, r7
 800510e:	47c8      	blx	r9
 8005110:	3001      	adds	r0, #1
 8005112:	d103      	bne.n	800511c <_printf_common+0xac>
 8005114:	f04f 30ff 	mov.w	r0, #4294967295
 8005118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511c:	3501      	adds	r5, #1
 800511e:	e7c6      	b.n	80050ae <_printf_common+0x3e>
 8005120:	18e1      	adds	r1, r4, r3
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	2030      	movs	r0, #48	@ 0x30
 8005126:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800512a:	4422      	add	r2, r4
 800512c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005130:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005134:	3302      	adds	r3, #2
 8005136:	e7c7      	b.n	80050c8 <_printf_common+0x58>
 8005138:	2301      	movs	r3, #1
 800513a:	4622      	mov	r2, r4
 800513c:	4641      	mov	r1, r8
 800513e:	4638      	mov	r0, r7
 8005140:	47c8      	blx	r9
 8005142:	3001      	adds	r0, #1
 8005144:	d0e6      	beq.n	8005114 <_printf_common+0xa4>
 8005146:	3601      	adds	r6, #1
 8005148:	e7d9      	b.n	80050fe <_printf_common+0x8e>
	...

0800514c <_printf_i>:
 800514c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005150:	7e0f      	ldrb	r7, [r1, #24]
 8005152:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005154:	2f78      	cmp	r7, #120	@ 0x78
 8005156:	4691      	mov	r9, r2
 8005158:	4680      	mov	r8, r0
 800515a:	460c      	mov	r4, r1
 800515c:	469a      	mov	sl, r3
 800515e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005162:	d807      	bhi.n	8005174 <_printf_i+0x28>
 8005164:	2f62      	cmp	r7, #98	@ 0x62
 8005166:	d80a      	bhi.n	800517e <_printf_i+0x32>
 8005168:	2f00      	cmp	r7, #0
 800516a:	f000 80d2 	beq.w	8005312 <_printf_i+0x1c6>
 800516e:	2f58      	cmp	r7, #88	@ 0x58
 8005170:	f000 80b9 	beq.w	80052e6 <_printf_i+0x19a>
 8005174:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005178:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800517c:	e03a      	b.n	80051f4 <_printf_i+0xa8>
 800517e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005182:	2b15      	cmp	r3, #21
 8005184:	d8f6      	bhi.n	8005174 <_printf_i+0x28>
 8005186:	a101      	add	r1, pc, #4	@ (adr r1, 800518c <_printf_i+0x40>)
 8005188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800518c:	080051e5 	.word	0x080051e5
 8005190:	080051f9 	.word	0x080051f9
 8005194:	08005175 	.word	0x08005175
 8005198:	08005175 	.word	0x08005175
 800519c:	08005175 	.word	0x08005175
 80051a0:	08005175 	.word	0x08005175
 80051a4:	080051f9 	.word	0x080051f9
 80051a8:	08005175 	.word	0x08005175
 80051ac:	08005175 	.word	0x08005175
 80051b0:	08005175 	.word	0x08005175
 80051b4:	08005175 	.word	0x08005175
 80051b8:	080052f9 	.word	0x080052f9
 80051bc:	08005223 	.word	0x08005223
 80051c0:	080052b3 	.word	0x080052b3
 80051c4:	08005175 	.word	0x08005175
 80051c8:	08005175 	.word	0x08005175
 80051cc:	0800531b 	.word	0x0800531b
 80051d0:	08005175 	.word	0x08005175
 80051d4:	08005223 	.word	0x08005223
 80051d8:	08005175 	.word	0x08005175
 80051dc:	08005175 	.word	0x08005175
 80051e0:	080052bb 	.word	0x080052bb
 80051e4:	6833      	ldr	r3, [r6, #0]
 80051e6:	1d1a      	adds	r2, r3, #4
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6032      	str	r2, [r6, #0]
 80051ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051f4:	2301      	movs	r3, #1
 80051f6:	e09d      	b.n	8005334 <_printf_i+0x1e8>
 80051f8:	6833      	ldr	r3, [r6, #0]
 80051fa:	6820      	ldr	r0, [r4, #0]
 80051fc:	1d19      	adds	r1, r3, #4
 80051fe:	6031      	str	r1, [r6, #0]
 8005200:	0606      	lsls	r6, r0, #24
 8005202:	d501      	bpl.n	8005208 <_printf_i+0xbc>
 8005204:	681d      	ldr	r5, [r3, #0]
 8005206:	e003      	b.n	8005210 <_printf_i+0xc4>
 8005208:	0645      	lsls	r5, r0, #25
 800520a:	d5fb      	bpl.n	8005204 <_printf_i+0xb8>
 800520c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005210:	2d00      	cmp	r5, #0
 8005212:	da03      	bge.n	800521c <_printf_i+0xd0>
 8005214:	232d      	movs	r3, #45	@ 0x2d
 8005216:	426d      	negs	r5, r5
 8005218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800521c:	4859      	ldr	r0, [pc, #356]	@ (8005384 <_printf_i+0x238>)
 800521e:	230a      	movs	r3, #10
 8005220:	e011      	b.n	8005246 <_printf_i+0xfa>
 8005222:	6821      	ldr	r1, [r4, #0]
 8005224:	6833      	ldr	r3, [r6, #0]
 8005226:	0608      	lsls	r0, r1, #24
 8005228:	f853 5b04 	ldr.w	r5, [r3], #4
 800522c:	d402      	bmi.n	8005234 <_printf_i+0xe8>
 800522e:	0649      	lsls	r1, r1, #25
 8005230:	bf48      	it	mi
 8005232:	b2ad      	uxthmi	r5, r5
 8005234:	2f6f      	cmp	r7, #111	@ 0x6f
 8005236:	4853      	ldr	r0, [pc, #332]	@ (8005384 <_printf_i+0x238>)
 8005238:	6033      	str	r3, [r6, #0]
 800523a:	bf14      	ite	ne
 800523c:	230a      	movne	r3, #10
 800523e:	2308      	moveq	r3, #8
 8005240:	2100      	movs	r1, #0
 8005242:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005246:	6866      	ldr	r6, [r4, #4]
 8005248:	60a6      	str	r6, [r4, #8]
 800524a:	2e00      	cmp	r6, #0
 800524c:	bfa2      	ittt	ge
 800524e:	6821      	ldrge	r1, [r4, #0]
 8005250:	f021 0104 	bicge.w	r1, r1, #4
 8005254:	6021      	strge	r1, [r4, #0]
 8005256:	b90d      	cbnz	r5, 800525c <_printf_i+0x110>
 8005258:	2e00      	cmp	r6, #0
 800525a:	d04b      	beq.n	80052f4 <_printf_i+0x1a8>
 800525c:	4616      	mov	r6, r2
 800525e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005262:	fb03 5711 	mls	r7, r3, r1, r5
 8005266:	5dc7      	ldrb	r7, [r0, r7]
 8005268:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800526c:	462f      	mov	r7, r5
 800526e:	42bb      	cmp	r3, r7
 8005270:	460d      	mov	r5, r1
 8005272:	d9f4      	bls.n	800525e <_printf_i+0x112>
 8005274:	2b08      	cmp	r3, #8
 8005276:	d10b      	bne.n	8005290 <_printf_i+0x144>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	07df      	lsls	r7, r3, #31
 800527c:	d508      	bpl.n	8005290 <_printf_i+0x144>
 800527e:	6923      	ldr	r3, [r4, #16]
 8005280:	6861      	ldr	r1, [r4, #4]
 8005282:	4299      	cmp	r1, r3
 8005284:	bfde      	ittt	le
 8005286:	2330      	movle	r3, #48	@ 0x30
 8005288:	f806 3c01 	strble.w	r3, [r6, #-1]
 800528c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005290:	1b92      	subs	r2, r2, r6
 8005292:	6122      	str	r2, [r4, #16]
 8005294:	f8cd a000 	str.w	sl, [sp]
 8005298:	464b      	mov	r3, r9
 800529a:	aa03      	add	r2, sp, #12
 800529c:	4621      	mov	r1, r4
 800529e:	4640      	mov	r0, r8
 80052a0:	f7ff fee6 	bl	8005070 <_printf_common>
 80052a4:	3001      	adds	r0, #1
 80052a6:	d14a      	bne.n	800533e <_printf_i+0x1f2>
 80052a8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ac:	b004      	add	sp, #16
 80052ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b2:	6823      	ldr	r3, [r4, #0]
 80052b4:	f043 0320 	orr.w	r3, r3, #32
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	4833      	ldr	r0, [pc, #204]	@ (8005388 <_printf_i+0x23c>)
 80052bc:	2778      	movs	r7, #120	@ 0x78
 80052be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	6831      	ldr	r1, [r6, #0]
 80052c6:	061f      	lsls	r7, r3, #24
 80052c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80052cc:	d402      	bmi.n	80052d4 <_printf_i+0x188>
 80052ce:	065f      	lsls	r7, r3, #25
 80052d0:	bf48      	it	mi
 80052d2:	b2ad      	uxthmi	r5, r5
 80052d4:	6031      	str	r1, [r6, #0]
 80052d6:	07d9      	lsls	r1, r3, #31
 80052d8:	bf44      	itt	mi
 80052da:	f043 0320 	orrmi.w	r3, r3, #32
 80052de:	6023      	strmi	r3, [r4, #0]
 80052e0:	b11d      	cbz	r5, 80052ea <_printf_i+0x19e>
 80052e2:	2310      	movs	r3, #16
 80052e4:	e7ac      	b.n	8005240 <_printf_i+0xf4>
 80052e6:	4827      	ldr	r0, [pc, #156]	@ (8005384 <_printf_i+0x238>)
 80052e8:	e7e9      	b.n	80052be <_printf_i+0x172>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	f023 0320 	bic.w	r3, r3, #32
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	e7f6      	b.n	80052e2 <_printf_i+0x196>
 80052f4:	4616      	mov	r6, r2
 80052f6:	e7bd      	b.n	8005274 <_printf_i+0x128>
 80052f8:	6833      	ldr	r3, [r6, #0]
 80052fa:	6825      	ldr	r5, [r4, #0]
 80052fc:	6961      	ldr	r1, [r4, #20]
 80052fe:	1d18      	adds	r0, r3, #4
 8005300:	6030      	str	r0, [r6, #0]
 8005302:	062e      	lsls	r6, r5, #24
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	d501      	bpl.n	800530c <_printf_i+0x1c0>
 8005308:	6019      	str	r1, [r3, #0]
 800530a:	e002      	b.n	8005312 <_printf_i+0x1c6>
 800530c:	0668      	lsls	r0, r5, #25
 800530e:	d5fb      	bpl.n	8005308 <_printf_i+0x1bc>
 8005310:	8019      	strh	r1, [r3, #0]
 8005312:	2300      	movs	r3, #0
 8005314:	6123      	str	r3, [r4, #16]
 8005316:	4616      	mov	r6, r2
 8005318:	e7bc      	b.n	8005294 <_printf_i+0x148>
 800531a:	6833      	ldr	r3, [r6, #0]
 800531c:	1d1a      	adds	r2, r3, #4
 800531e:	6032      	str	r2, [r6, #0]
 8005320:	681e      	ldr	r6, [r3, #0]
 8005322:	6862      	ldr	r2, [r4, #4]
 8005324:	2100      	movs	r1, #0
 8005326:	4630      	mov	r0, r6
 8005328:	f7fa ff5a 	bl	80001e0 <memchr>
 800532c:	b108      	cbz	r0, 8005332 <_printf_i+0x1e6>
 800532e:	1b80      	subs	r0, r0, r6
 8005330:	6060      	str	r0, [r4, #4]
 8005332:	6863      	ldr	r3, [r4, #4]
 8005334:	6123      	str	r3, [r4, #16]
 8005336:	2300      	movs	r3, #0
 8005338:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800533c:	e7aa      	b.n	8005294 <_printf_i+0x148>
 800533e:	6923      	ldr	r3, [r4, #16]
 8005340:	4632      	mov	r2, r6
 8005342:	4649      	mov	r1, r9
 8005344:	4640      	mov	r0, r8
 8005346:	47d0      	blx	sl
 8005348:	3001      	adds	r0, #1
 800534a:	d0ad      	beq.n	80052a8 <_printf_i+0x15c>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	079b      	lsls	r3, r3, #30
 8005350:	d413      	bmi.n	800537a <_printf_i+0x22e>
 8005352:	68e0      	ldr	r0, [r4, #12]
 8005354:	9b03      	ldr	r3, [sp, #12]
 8005356:	4298      	cmp	r0, r3
 8005358:	bfb8      	it	lt
 800535a:	4618      	movlt	r0, r3
 800535c:	e7a6      	b.n	80052ac <_printf_i+0x160>
 800535e:	2301      	movs	r3, #1
 8005360:	4632      	mov	r2, r6
 8005362:	4649      	mov	r1, r9
 8005364:	4640      	mov	r0, r8
 8005366:	47d0      	blx	sl
 8005368:	3001      	adds	r0, #1
 800536a:	d09d      	beq.n	80052a8 <_printf_i+0x15c>
 800536c:	3501      	adds	r5, #1
 800536e:	68e3      	ldr	r3, [r4, #12]
 8005370:	9903      	ldr	r1, [sp, #12]
 8005372:	1a5b      	subs	r3, r3, r1
 8005374:	42ab      	cmp	r3, r5
 8005376:	dcf2      	bgt.n	800535e <_printf_i+0x212>
 8005378:	e7eb      	b.n	8005352 <_printf_i+0x206>
 800537a:	2500      	movs	r5, #0
 800537c:	f104 0619 	add.w	r6, r4, #25
 8005380:	e7f5      	b.n	800536e <_printf_i+0x222>
 8005382:	bf00      	nop
 8005384:	08007119 	.word	0x08007119
 8005388:	0800712a 	.word	0x0800712a

0800538c <__sflush_r>:
 800538c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005394:	0716      	lsls	r6, r2, #28
 8005396:	4605      	mov	r5, r0
 8005398:	460c      	mov	r4, r1
 800539a:	d454      	bmi.n	8005446 <__sflush_r+0xba>
 800539c:	684b      	ldr	r3, [r1, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	dc02      	bgt.n	80053a8 <__sflush_r+0x1c>
 80053a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	dd48      	ble.n	800543a <__sflush_r+0xae>
 80053a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053aa:	2e00      	cmp	r6, #0
 80053ac:	d045      	beq.n	800543a <__sflush_r+0xae>
 80053ae:	2300      	movs	r3, #0
 80053b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80053b4:	682f      	ldr	r7, [r5, #0]
 80053b6:	6a21      	ldr	r1, [r4, #32]
 80053b8:	602b      	str	r3, [r5, #0]
 80053ba:	d030      	beq.n	800541e <__sflush_r+0x92>
 80053bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053be:	89a3      	ldrh	r3, [r4, #12]
 80053c0:	0759      	lsls	r1, r3, #29
 80053c2:	d505      	bpl.n	80053d0 <__sflush_r+0x44>
 80053c4:	6863      	ldr	r3, [r4, #4]
 80053c6:	1ad2      	subs	r2, r2, r3
 80053c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053ca:	b10b      	cbz	r3, 80053d0 <__sflush_r+0x44>
 80053cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053ce:	1ad2      	subs	r2, r2, r3
 80053d0:	2300      	movs	r3, #0
 80053d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80053d4:	6a21      	ldr	r1, [r4, #32]
 80053d6:	4628      	mov	r0, r5
 80053d8:	47b0      	blx	r6
 80053da:	1c43      	adds	r3, r0, #1
 80053dc:	89a3      	ldrh	r3, [r4, #12]
 80053de:	d106      	bne.n	80053ee <__sflush_r+0x62>
 80053e0:	6829      	ldr	r1, [r5, #0]
 80053e2:	291d      	cmp	r1, #29
 80053e4:	d82b      	bhi.n	800543e <__sflush_r+0xb2>
 80053e6:	4a2a      	ldr	r2, [pc, #168]	@ (8005490 <__sflush_r+0x104>)
 80053e8:	410a      	asrs	r2, r1
 80053ea:	07d6      	lsls	r6, r2, #31
 80053ec:	d427      	bmi.n	800543e <__sflush_r+0xb2>
 80053ee:	2200      	movs	r2, #0
 80053f0:	6062      	str	r2, [r4, #4]
 80053f2:	04d9      	lsls	r1, r3, #19
 80053f4:	6922      	ldr	r2, [r4, #16]
 80053f6:	6022      	str	r2, [r4, #0]
 80053f8:	d504      	bpl.n	8005404 <__sflush_r+0x78>
 80053fa:	1c42      	adds	r2, r0, #1
 80053fc:	d101      	bne.n	8005402 <__sflush_r+0x76>
 80053fe:	682b      	ldr	r3, [r5, #0]
 8005400:	b903      	cbnz	r3, 8005404 <__sflush_r+0x78>
 8005402:	6560      	str	r0, [r4, #84]	@ 0x54
 8005404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005406:	602f      	str	r7, [r5, #0]
 8005408:	b1b9      	cbz	r1, 800543a <__sflush_r+0xae>
 800540a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800540e:	4299      	cmp	r1, r3
 8005410:	d002      	beq.n	8005418 <__sflush_r+0x8c>
 8005412:	4628      	mov	r0, r5
 8005414:	f7ff fc8a 	bl	8004d2c <_free_r>
 8005418:	2300      	movs	r3, #0
 800541a:	6363      	str	r3, [r4, #52]	@ 0x34
 800541c:	e00d      	b.n	800543a <__sflush_r+0xae>
 800541e:	2301      	movs	r3, #1
 8005420:	4628      	mov	r0, r5
 8005422:	47b0      	blx	r6
 8005424:	4602      	mov	r2, r0
 8005426:	1c50      	adds	r0, r2, #1
 8005428:	d1c9      	bne.n	80053be <__sflush_r+0x32>
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d0c6      	beq.n	80053be <__sflush_r+0x32>
 8005430:	2b1d      	cmp	r3, #29
 8005432:	d001      	beq.n	8005438 <__sflush_r+0xac>
 8005434:	2b16      	cmp	r3, #22
 8005436:	d11e      	bne.n	8005476 <__sflush_r+0xea>
 8005438:	602f      	str	r7, [r5, #0]
 800543a:	2000      	movs	r0, #0
 800543c:	e022      	b.n	8005484 <__sflush_r+0xf8>
 800543e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005442:	b21b      	sxth	r3, r3
 8005444:	e01b      	b.n	800547e <__sflush_r+0xf2>
 8005446:	690f      	ldr	r7, [r1, #16]
 8005448:	2f00      	cmp	r7, #0
 800544a:	d0f6      	beq.n	800543a <__sflush_r+0xae>
 800544c:	0793      	lsls	r3, r2, #30
 800544e:	680e      	ldr	r6, [r1, #0]
 8005450:	bf08      	it	eq
 8005452:	694b      	ldreq	r3, [r1, #20]
 8005454:	600f      	str	r7, [r1, #0]
 8005456:	bf18      	it	ne
 8005458:	2300      	movne	r3, #0
 800545a:	eba6 0807 	sub.w	r8, r6, r7
 800545e:	608b      	str	r3, [r1, #8]
 8005460:	f1b8 0f00 	cmp.w	r8, #0
 8005464:	dde9      	ble.n	800543a <__sflush_r+0xae>
 8005466:	6a21      	ldr	r1, [r4, #32]
 8005468:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800546a:	4643      	mov	r3, r8
 800546c:	463a      	mov	r2, r7
 800546e:	4628      	mov	r0, r5
 8005470:	47b0      	blx	r6
 8005472:	2800      	cmp	r0, #0
 8005474:	dc08      	bgt.n	8005488 <__sflush_r+0xfc>
 8005476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800547a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800547e:	81a3      	strh	r3, [r4, #12]
 8005480:	f04f 30ff 	mov.w	r0, #4294967295
 8005484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005488:	4407      	add	r7, r0
 800548a:	eba8 0800 	sub.w	r8, r8, r0
 800548e:	e7e7      	b.n	8005460 <__sflush_r+0xd4>
 8005490:	dfbffffe 	.word	0xdfbffffe

08005494 <_fflush_r>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	690b      	ldr	r3, [r1, #16]
 8005498:	4605      	mov	r5, r0
 800549a:	460c      	mov	r4, r1
 800549c:	b913      	cbnz	r3, 80054a4 <_fflush_r+0x10>
 800549e:	2500      	movs	r5, #0
 80054a0:	4628      	mov	r0, r5
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	b118      	cbz	r0, 80054ae <_fflush_r+0x1a>
 80054a6:	6a03      	ldr	r3, [r0, #32]
 80054a8:	b90b      	cbnz	r3, 80054ae <_fflush_r+0x1a>
 80054aa:	f7ff fa27 	bl	80048fc <__sinit>
 80054ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0f3      	beq.n	800549e <_fflush_r+0xa>
 80054b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054b8:	07d0      	lsls	r0, r2, #31
 80054ba:	d404      	bmi.n	80054c6 <_fflush_r+0x32>
 80054bc:	0599      	lsls	r1, r3, #22
 80054be:	d402      	bmi.n	80054c6 <_fflush_r+0x32>
 80054c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054c2:	f7ff fc30 	bl	8004d26 <__retarget_lock_acquire_recursive>
 80054c6:	4628      	mov	r0, r5
 80054c8:	4621      	mov	r1, r4
 80054ca:	f7ff ff5f 	bl	800538c <__sflush_r>
 80054ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054d0:	07da      	lsls	r2, r3, #31
 80054d2:	4605      	mov	r5, r0
 80054d4:	d4e4      	bmi.n	80054a0 <_fflush_r+0xc>
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	059b      	lsls	r3, r3, #22
 80054da:	d4e1      	bmi.n	80054a0 <_fflush_r+0xc>
 80054dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054de:	f7ff fc23 	bl	8004d28 <__retarget_lock_release_recursive>
 80054e2:	e7dd      	b.n	80054a0 <_fflush_r+0xc>

080054e4 <__swhatbuf_r>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	460c      	mov	r4, r1
 80054e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ec:	2900      	cmp	r1, #0
 80054ee:	b096      	sub	sp, #88	@ 0x58
 80054f0:	4615      	mov	r5, r2
 80054f2:	461e      	mov	r6, r3
 80054f4:	da0d      	bge.n	8005512 <__swhatbuf_r+0x2e>
 80054f6:	89a3      	ldrh	r3, [r4, #12]
 80054f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80054fc:	f04f 0100 	mov.w	r1, #0
 8005500:	bf14      	ite	ne
 8005502:	2340      	movne	r3, #64	@ 0x40
 8005504:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005508:	2000      	movs	r0, #0
 800550a:	6031      	str	r1, [r6, #0]
 800550c:	602b      	str	r3, [r5, #0]
 800550e:	b016      	add	sp, #88	@ 0x58
 8005510:	bd70      	pop	{r4, r5, r6, pc}
 8005512:	466a      	mov	r2, sp
 8005514:	f000 f862 	bl	80055dc <_fstat_r>
 8005518:	2800      	cmp	r0, #0
 800551a:	dbec      	blt.n	80054f6 <__swhatbuf_r+0x12>
 800551c:	9901      	ldr	r1, [sp, #4]
 800551e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005522:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005526:	4259      	negs	r1, r3
 8005528:	4159      	adcs	r1, r3
 800552a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800552e:	e7eb      	b.n	8005508 <__swhatbuf_r+0x24>

08005530 <__smakebuf_r>:
 8005530:	898b      	ldrh	r3, [r1, #12]
 8005532:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005534:	079d      	lsls	r5, r3, #30
 8005536:	4606      	mov	r6, r0
 8005538:	460c      	mov	r4, r1
 800553a:	d507      	bpl.n	800554c <__smakebuf_r+0x1c>
 800553c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	6123      	str	r3, [r4, #16]
 8005544:	2301      	movs	r3, #1
 8005546:	6163      	str	r3, [r4, #20]
 8005548:	b003      	add	sp, #12
 800554a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800554c:	ab01      	add	r3, sp, #4
 800554e:	466a      	mov	r2, sp
 8005550:	f7ff ffc8 	bl	80054e4 <__swhatbuf_r>
 8005554:	9f00      	ldr	r7, [sp, #0]
 8005556:	4605      	mov	r5, r0
 8005558:	4639      	mov	r1, r7
 800555a:	4630      	mov	r0, r6
 800555c:	f7ff f8b6 	bl	80046cc <_malloc_r>
 8005560:	b948      	cbnz	r0, 8005576 <__smakebuf_r+0x46>
 8005562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005566:	059a      	lsls	r2, r3, #22
 8005568:	d4ee      	bmi.n	8005548 <__smakebuf_r+0x18>
 800556a:	f023 0303 	bic.w	r3, r3, #3
 800556e:	f043 0302 	orr.w	r3, r3, #2
 8005572:	81a3      	strh	r3, [r4, #12]
 8005574:	e7e2      	b.n	800553c <__smakebuf_r+0xc>
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	6020      	str	r0, [r4, #0]
 800557a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800557e:	81a3      	strh	r3, [r4, #12]
 8005580:	9b01      	ldr	r3, [sp, #4]
 8005582:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005586:	b15b      	cbz	r3, 80055a0 <__smakebuf_r+0x70>
 8005588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800558c:	4630      	mov	r0, r6
 800558e:	f000 f837 	bl	8005600 <_isatty_r>
 8005592:	b128      	cbz	r0, 80055a0 <__smakebuf_r+0x70>
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	f023 0303 	bic.w	r3, r3, #3
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	81a3      	strh	r3, [r4, #12]
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	431d      	orrs	r5, r3
 80055a4:	81a5      	strh	r5, [r4, #12]
 80055a6:	e7cf      	b.n	8005548 <__smakebuf_r+0x18>

080055a8 <memmove>:
 80055a8:	4288      	cmp	r0, r1
 80055aa:	b510      	push	{r4, lr}
 80055ac:	eb01 0402 	add.w	r4, r1, r2
 80055b0:	d902      	bls.n	80055b8 <memmove+0x10>
 80055b2:	4284      	cmp	r4, r0
 80055b4:	4623      	mov	r3, r4
 80055b6:	d807      	bhi.n	80055c8 <memmove+0x20>
 80055b8:	1e43      	subs	r3, r0, #1
 80055ba:	42a1      	cmp	r1, r4
 80055bc:	d008      	beq.n	80055d0 <memmove+0x28>
 80055be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055c6:	e7f8      	b.n	80055ba <memmove+0x12>
 80055c8:	4402      	add	r2, r0
 80055ca:	4601      	mov	r1, r0
 80055cc:	428a      	cmp	r2, r1
 80055ce:	d100      	bne.n	80055d2 <memmove+0x2a>
 80055d0:	bd10      	pop	{r4, pc}
 80055d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055da:	e7f7      	b.n	80055cc <memmove+0x24>

080055dc <_fstat_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4d07      	ldr	r5, [pc, #28]	@ (80055fc <_fstat_r+0x20>)
 80055e0:	2300      	movs	r3, #0
 80055e2:	4604      	mov	r4, r0
 80055e4:	4608      	mov	r0, r1
 80055e6:	4611      	mov	r1, r2
 80055e8:	602b      	str	r3, [r5, #0]
 80055ea:	f7fe fd0b 	bl	8004004 <_fstat>
 80055ee:	1c43      	adds	r3, r0, #1
 80055f0:	d102      	bne.n	80055f8 <_fstat_r+0x1c>
 80055f2:	682b      	ldr	r3, [r5, #0]
 80055f4:	b103      	cbz	r3, 80055f8 <_fstat_r+0x1c>
 80055f6:	6023      	str	r3, [r4, #0]
 80055f8:	bd38      	pop	{r3, r4, r5, pc}
 80055fa:	bf00      	nop
 80055fc:	20000520 	.word	0x20000520

08005600 <_isatty_r>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	4d06      	ldr	r5, [pc, #24]	@ (800561c <_isatty_r+0x1c>)
 8005604:	2300      	movs	r3, #0
 8005606:	4604      	mov	r4, r0
 8005608:	4608      	mov	r0, r1
 800560a:	602b      	str	r3, [r5, #0]
 800560c:	f7fe fd0a 	bl	8004024 <_isatty>
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	d102      	bne.n	800561a <_isatty_r+0x1a>
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	b103      	cbz	r3, 800561a <_isatty_r+0x1a>
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	bd38      	pop	{r3, r4, r5, pc}
 800561c:	20000520 	.word	0x20000520

08005620 <memcpy>:
 8005620:	440a      	add	r2, r1
 8005622:	4291      	cmp	r1, r2
 8005624:	f100 33ff 	add.w	r3, r0, #4294967295
 8005628:	d100      	bne.n	800562c <memcpy+0xc>
 800562a:	4770      	bx	lr
 800562c:	b510      	push	{r4, lr}
 800562e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005632:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005636:	4291      	cmp	r1, r2
 8005638:	d1f9      	bne.n	800562e <memcpy+0xe>
 800563a:	bd10      	pop	{r4, pc}

0800563c <_realloc_r>:
 800563c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005640:	4680      	mov	r8, r0
 8005642:	4615      	mov	r5, r2
 8005644:	460c      	mov	r4, r1
 8005646:	b921      	cbnz	r1, 8005652 <_realloc_r+0x16>
 8005648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800564c:	4611      	mov	r1, r2
 800564e:	f7ff b83d 	b.w	80046cc <_malloc_r>
 8005652:	b92a      	cbnz	r2, 8005660 <_realloc_r+0x24>
 8005654:	f7ff fb6a 	bl	8004d2c <_free_r>
 8005658:	2400      	movs	r4, #0
 800565a:	4620      	mov	r0, r4
 800565c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005660:	f000 f81a 	bl	8005698 <_malloc_usable_size_r>
 8005664:	4285      	cmp	r5, r0
 8005666:	4606      	mov	r6, r0
 8005668:	d802      	bhi.n	8005670 <_realloc_r+0x34>
 800566a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800566e:	d8f4      	bhi.n	800565a <_realloc_r+0x1e>
 8005670:	4629      	mov	r1, r5
 8005672:	4640      	mov	r0, r8
 8005674:	f7ff f82a 	bl	80046cc <_malloc_r>
 8005678:	4607      	mov	r7, r0
 800567a:	2800      	cmp	r0, #0
 800567c:	d0ec      	beq.n	8005658 <_realloc_r+0x1c>
 800567e:	42b5      	cmp	r5, r6
 8005680:	462a      	mov	r2, r5
 8005682:	4621      	mov	r1, r4
 8005684:	bf28      	it	cs
 8005686:	4632      	movcs	r2, r6
 8005688:	f7ff ffca 	bl	8005620 <memcpy>
 800568c:	4621      	mov	r1, r4
 800568e:	4640      	mov	r0, r8
 8005690:	f7ff fb4c 	bl	8004d2c <_free_r>
 8005694:	463c      	mov	r4, r7
 8005696:	e7e0      	b.n	800565a <_realloc_r+0x1e>

08005698 <_malloc_usable_size_r>:
 8005698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800569c:	1f18      	subs	r0, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	bfbc      	itt	lt
 80056a2:	580b      	ldrlt	r3, [r1, r0]
 80056a4:	18c0      	addlt	r0, r0, r3
 80056a6:	4770      	bx	lr

080056a8 <sqrt>:
 80056a8:	b538      	push	{r3, r4, r5, lr}
 80056aa:	ed2d 8b02 	vpush	{d8}
 80056ae:	ec55 4b10 	vmov	r4, r5, d0
 80056b2:	f000 fa6d 	bl	8005b90 <__ieee754_sqrt>
 80056b6:	4622      	mov	r2, r4
 80056b8:	462b      	mov	r3, r5
 80056ba:	4620      	mov	r0, r4
 80056bc:	4629      	mov	r1, r5
 80056be:	eeb0 8a40 	vmov.f32	s16, s0
 80056c2:	eef0 8a60 	vmov.f32	s17, s1
 80056c6:	f7fb fa31 	bl	8000b2c <__aeabi_dcmpun>
 80056ca:	b990      	cbnz	r0, 80056f2 <sqrt+0x4a>
 80056cc:	2200      	movs	r2, #0
 80056ce:	2300      	movs	r3, #0
 80056d0:	4620      	mov	r0, r4
 80056d2:	4629      	mov	r1, r5
 80056d4:	f7fb fa02 	bl	8000adc <__aeabi_dcmplt>
 80056d8:	b158      	cbz	r0, 80056f2 <sqrt+0x4a>
 80056da:	f7ff faf9 	bl	8004cd0 <__errno>
 80056de:	2321      	movs	r3, #33	@ 0x21
 80056e0:	6003      	str	r3, [r0, #0]
 80056e2:	2200      	movs	r2, #0
 80056e4:	2300      	movs	r3, #0
 80056e6:	4610      	mov	r0, r2
 80056e8:	4619      	mov	r1, r3
 80056ea:	f7fb f8af 	bl	800084c <__aeabi_ddiv>
 80056ee:	ec41 0b18 	vmov	d8, r0, r1
 80056f2:	eeb0 0a48 	vmov.f32	s0, s16
 80056f6:	eef0 0a68 	vmov.f32	s1, s17
 80056fa:	ecbd 8b02 	vpop	{d8}
 80056fe:	bd38      	pop	{r3, r4, r5, pc}

08005700 <atan>:
 8005700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005704:	ec55 4b10 	vmov	r4, r5, d0
 8005708:	4bbf      	ldr	r3, [pc, #764]	@ (8005a08 <atan+0x308>)
 800570a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800570e:	429e      	cmp	r6, r3
 8005710:	46ab      	mov	fp, r5
 8005712:	d918      	bls.n	8005746 <atan+0x46>
 8005714:	4bbd      	ldr	r3, [pc, #756]	@ (8005a0c <atan+0x30c>)
 8005716:	429e      	cmp	r6, r3
 8005718:	d801      	bhi.n	800571e <atan+0x1e>
 800571a:	d109      	bne.n	8005730 <atan+0x30>
 800571c:	b144      	cbz	r4, 8005730 <atan+0x30>
 800571e:	4622      	mov	r2, r4
 8005720:	462b      	mov	r3, r5
 8005722:	4620      	mov	r0, r4
 8005724:	4629      	mov	r1, r5
 8005726:	f7fa fdb1 	bl	800028c <__adddf3>
 800572a:	4604      	mov	r4, r0
 800572c:	460d      	mov	r5, r1
 800572e:	e006      	b.n	800573e <atan+0x3e>
 8005730:	f1bb 0f00 	cmp.w	fp, #0
 8005734:	f340 812b 	ble.w	800598e <atan+0x28e>
 8005738:	a597      	add	r5, pc, #604	@ (adr r5, 8005998 <atan+0x298>)
 800573a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800573e:	ec45 4b10 	vmov	d0, r4, r5
 8005742:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005746:	4bb2      	ldr	r3, [pc, #712]	@ (8005a10 <atan+0x310>)
 8005748:	429e      	cmp	r6, r3
 800574a:	d813      	bhi.n	8005774 <atan+0x74>
 800574c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005750:	429e      	cmp	r6, r3
 8005752:	d80c      	bhi.n	800576e <atan+0x6e>
 8005754:	a392      	add	r3, pc, #584	@ (adr r3, 80059a0 <atan+0x2a0>)
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	4620      	mov	r0, r4
 800575c:	4629      	mov	r1, r5
 800575e:	f7fa fd95 	bl	800028c <__adddf3>
 8005762:	4bac      	ldr	r3, [pc, #688]	@ (8005a14 <atan+0x314>)
 8005764:	2200      	movs	r2, #0
 8005766:	f7fb f9d7 	bl	8000b18 <__aeabi_dcmpgt>
 800576a:	2800      	cmp	r0, #0
 800576c:	d1e7      	bne.n	800573e <atan+0x3e>
 800576e:	f04f 3aff 	mov.w	sl, #4294967295
 8005772:	e029      	b.n	80057c8 <atan+0xc8>
 8005774:	f000 f9b0 	bl	8005ad8 <fabs>
 8005778:	4ba7      	ldr	r3, [pc, #668]	@ (8005a18 <atan+0x318>)
 800577a:	429e      	cmp	r6, r3
 800577c:	ec55 4b10 	vmov	r4, r5, d0
 8005780:	f200 80bc 	bhi.w	80058fc <atan+0x1fc>
 8005784:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005788:	429e      	cmp	r6, r3
 800578a:	f200 809e 	bhi.w	80058ca <atan+0x1ca>
 800578e:	4622      	mov	r2, r4
 8005790:	462b      	mov	r3, r5
 8005792:	4620      	mov	r0, r4
 8005794:	4629      	mov	r1, r5
 8005796:	f7fa fd79 	bl	800028c <__adddf3>
 800579a:	4b9e      	ldr	r3, [pc, #632]	@ (8005a14 <atan+0x314>)
 800579c:	2200      	movs	r2, #0
 800579e:	f7fa fd73 	bl	8000288 <__aeabi_dsub>
 80057a2:	2200      	movs	r2, #0
 80057a4:	4606      	mov	r6, r0
 80057a6:	460f      	mov	r7, r1
 80057a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80057ac:	4620      	mov	r0, r4
 80057ae:	4629      	mov	r1, r5
 80057b0:	f7fa fd6c 	bl	800028c <__adddf3>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4630      	mov	r0, r6
 80057ba:	4639      	mov	r1, r7
 80057bc:	f7fb f846 	bl	800084c <__aeabi_ddiv>
 80057c0:	f04f 0a00 	mov.w	sl, #0
 80057c4:	4604      	mov	r4, r0
 80057c6:	460d      	mov	r5, r1
 80057c8:	4622      	mov	r2, r4
 80057ca:	462b      	mov	r3, r5
 80057cc:	4620      	mov	r0, r4
 80057ce:	4629      	mov	r1, r5
 80057d0:	f7fa ff12 	bl	80005f8 <__aeabi_dmul>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4680      	mov	r8, r0
 80057da:	4689      	mov	r9, r1
 80057dc:	f7fa ff0c 	bl	80005f8 <__aeabi_dmul>
 80057e0:	a371      	add	r3, pc, #452	@ (adr r3, 80059a8 <atan+0x2a8>)
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	4606      	mov	r6, r0
 80057e8:	460f      	mov	r7, r1
 80057ea:	f7fa ff05 	bl	80005f8 <__aeabi_dmul>
 80057ee:	a370      	add	r3, pc, #448	@ (adr r3, 80059b0 <atan+0x2b0>)
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f7fa fd4a 	bl	800028c <__adddf3>
 80057f8:	4632      	mov	r2, r6
 80057fa:	463b      	mov	r3, r7
 80057fc:	f7fa fefc 	bl	80005f8 <__aeabi_dmul>
 8005800:	a36d      	add	r3, pc, #436	@ (adr r3, 80059b8 <atan+0x2b8>)
 8005802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005806:	f7fa fd41 	bl	800028c <__adddf3>
 800580a:	4632      	mov	r2, r6
 800580c:	463b      	mov	r3, r7
 800580e:	f7fa fef3 	bl	80005f8 <__aeabi_dmul>
 8005812:	a36b      	add	r3, pc, #428	@ (adr r3, 80059c0 <atan+0x2c0>)
 8005814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005818:	f7fa fd38 	bl	800028c <__adddf3>
 800581c:	4632      	mov	r2, r6
 800581e:	463b      	mov	r3, r7
 8005820:	f7fa feea 	bl	80005f8 <__aeabi_dmul>
 8005824:	a368      	add	r3, pc, #416	@ (adr r3, 80059c8 <atan+0x2c8>)
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	f7fa fd2f 	bl	800028c <__adddf3>
 800582e:	4632      	mov	r2, r6
 8005830:	463b      	mov	r3, r7
 8005832:	f7fa fee1 	bl	80005f8 <__aeabi_dmul>
 8005836:	a366      	add	r3, pc, #408	@ (adr r3, 80059d0 <atan+0x2d0>)
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	f7fa fd26 	bl	800028c <__adddf3>
 8005840:	4642      	mov	r2, r8
 8005842:	464b      	mov	r3, r9
 8005844:	f7fa fed8 	bl	80005f8 <__aeabi_dmul>
 8005848:	a363      	add	r3, pc, #396	@ (adr r3, 80059d8 <atan+0x2d8>)
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	4680      	mov	r8, r0
 8005850:	4689      	mov	r9, r1
 8005852:	4630      	mov	r0, r6
 8005854:	4639      	mov	r1, r7
 8005856:	f7fa fecf 	bl	80005f8 <__aeabi_dmul>
 800585a:	a361      	add	r3, pc, #388	@ (adr r3, 80059e0 <atan+0x2e0>)
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f7fa fd12 	bl	8000288 <__aeabi_dsub>
 8005864:	4632      	mov	r2, r6
 8005866:	463b      	mov	r3, r7
 8005868:	f7fa fec6 	bl	80005f8 <__aeabi_dmul>
 800586c:	a35e      	add	r3, pc, #376	@ (adr r3, 80059e8 <atan+0x2e8>)
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	f7fa fd09 	bl	8000288 <__aeabi_dsub>
 8005876:	4632      	mov	r2, r6
 8005878:	463b      	mov	r3, r7
 800587a:	f7fa febd 	bl	80005f8 <__aeabi_dmul>
 800587e:	a35c      	add	r3, pc, #368	@ (adr r3, 80059f0 <atan+0x2f0>)
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	f7fa fd00 	bl	8000288 <__aeabi_dsub>
 8005888:	4632      	mov	r2, r6
 800588a:	463b      	mov	r3, r7
 800588c:	f7fa feb4 	bl	80005f8 <__aeabi_dmul>
 8005890:	a359      	add	r3, pc, #356	@ (adr r3, 80059f8 <atan+0x2f8>)
 8005892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005896:	f7fa fcf7 	bl	8000288 <__aeabi_dsub>
 800589a:	4632      	mov	r2, r6
 800589c:	463b      	mov	r3, r7
 800589e:	f7fa feab 	bl	80005f8 <__aeabi_dmul>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4640      	mov	r0, r8
 80058a8:	4649      	mov	r1, r9
 80058aa:	f7fa fcef 	bl	800028c <__adddf3>
 80058ae:	4622      	mov	r2, r4
 80058b0:	462b      	mov	r3, r5
 80058b2:	f7fa fea1 	bl	80005f8 <__aeabi_dmul>
 80058b6:	f1ba 3fff 	cmp.w	sl, #4294967295
 80058ba:	4602      	mov	r2, r0
 80058bc:	460b      	mov	r3, r1
 80058be:	d148      	bne.n	8005952 <atan+0x252>
 80058c0:	4620      	mov	r0, r4
 80058c2:	4629      	mov	r1, r5
 80058c4:	f7fa fce0 	bl	8000288 <__aeabi_dsub>
 80058c8:	e72f      	b.n	800572a <atan+0x2a>
 80058ca:	4b52      	ldr	r3, [pc, #328]	@ (8005a14 <atan+0x314>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	4620      	mov	r0, r4
 80058d0:	4629      	mov	r1, r5
 80058d2:	f7fa fcd9 	bl	8000288 <__aeabi_dsub>
 80058d6:	4b4f      	ldr	r3, [pc, #316]	@ (8005a14 <atan+0x314>)
 80058d8:	4606      	mov	r6, r0
 80058da:	460f      	mov	r7, r1
 80058dc:	2200      	movs	r2, #0
 80058de:	4620      	mov	r0, r4
 80058e0:	4629      	mov	r1, r5
 80058e2:	f7fa fcd3 	bl	800028c <__adddf3>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4630      	mov	r0, r6
 80058ec:	4639      	mov	r1, r7
 80058ee:	f7fa ffad 	bl	800084c <__aeabi_ddiv>
 80058f2:	f04f 0a01 	mov.w	sl, #1
 80058f6:	4604      	mov	r4, r0
 80058f8:	460d      	mov	r5, r1
 80058fa:	e765      	b.n	80057c8 <atan+0xc8>
 80058fc:	4b47      	ldr	r3, [pc, #284]	@ (8005a1c <atan+0x31c>)
 80058fe:	429e      	cmp	r6, r3
 8005900:	d21c      	bcs.n	800593c <atan+0x23c>
 8005902:	4b47      	ldr	r3, [pc, #284]	@ (8005a20 <atan+0x320>)
 8005904:	2200      	movs	r2, #0
 8005906:	4620      	mov	r0, r4
 8005908:	4629      	mov	r1, r5
 800590a:	f7fa fcbd 	bl	8000288 <__aeabi_dsub>
 800590e:	4b44      	ldr	r3, [pc, #272]	@ (8005a20 <atan+0x320>)
 8005910:	4606      	mov	r6, r0
 8005912:	460f      	mov	r7, r1
 8005914:	2200      	movs	r2, #0
 8005916:	4620      	mov	r0, r4
 8005918:	4629      	mov	r1, r5
 800591a:	f7fa fe6d 	bl	80005f8 <__aeabi_dmul>
 800591e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a14 <atan+0x314>)
 8005920:	2200      	movs	r2, #0
 8005922:	f7fa fcb3 	bl	800028c <__adddf3>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4630      	mov	r0, r6
 800592c:	4639      	mov	r1, r7
 800592e:	f7fa ff8d 	bl	800084c <__aeabi_ddiv>
 8005932:	f04f 0a02 	mov.w	sl, #2
 8005936:	4604      	mov	r4, r0
 8005938:	460d      	mov	r5, r1
 800593a:	e745      	b.n	80057c8 <atan+0xc8>
 800593c:	4622      	mov	r2, r4
 800593e:	462b      	mov	r3, r5
 8005940:	4938      	ldr	r1, [pc, #224]	@ (8005a24 <atan+0x324>)
 8005942:	2000      	movs	r0, #0
 8005944:	f7fa ff82 	bl	800084c <__aeabi_ddiv>
 8005948:	f04f 0a03 	mov.w	sl, #3
 800594c:	4604      	mov	r4, r0
 800594e:	460d      	mov	r5, r1
 8005950:	e73a      	b.n	80057c8 <atan+0xc8>
 8005952:	4b35      	ldr	r3, [pc, #212]	@ (8005a28 <atan+0x328>)
 8005954:	4e35      	ldr	r6, [pc, #212]	@ (8005a2c <atan+0x32c>)
 8005956:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	f7fa fc93 	bl	8000288 <__aeabi_dsub>
 8005962:	4622      	mov	r2, r4
 8005964:	462b      	mov	r3, r5
 8005966:	f7fa fc8f 	bl	8000288 <__aeabi_dsub>
 800596a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005976:	f7fa fc87 	bl	8000288 <__aeabi_dsub>
 800597a:	f1bb 0f00 	cmp.w	fp, #0
 800597e:	4604      	mov	r4, r0
 8005980:	460d      	mov	r5, r1
 8005982:	f6bf aedc 	bge.w	800573e <atan+0x3e>
 8005986:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800598a:	461d      	mov	r5, r3
 800598c:	e6d7      	b.n	800573e <atan+0x3e>
 800598e:	a51c      	add	r5, pc, #112	@ (adr r5, 8005a00 <atan+0x300>)
 8005990:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005994:	e6d3      	b.n	800573e <atan+0x3e>
 8005996:	bf00      	nop
 8005998:	54442d18 	.word	0x54442d18
 800599c:	3ff921fb 	.word	0x3ff921fb
 80059a0:	8800759c 	.word	0x8800759c
 80059a4:	7e37e43c 	.word	0x7e37e43c
 80059a8:	e322da11 	.word	0xe322da11
 80059ac:	3f90ad3a 	.word	0x3f90ad3a
 80059b0:	24760deb 	.word	0x24760deb
 80059b4:	3fa97b4b 	.word	0x3fa97b4b
 80059b8:	a0d03d51 	.word	0xa0d03d51
 80059bc:	3fb10d66 	.word	0x3fb10d66
 80059c0:	c54c206e 	.word	0xc54c206e
 80059c4:	3fb745cd 	.word	0x3fb745cd
 80059c8:	920083ff 	.word	0x920083ff
 80059cc:	3fc24924 	.word	0x3fc24924
 80059d0:	5555550d 	.word	0x5555550d
 80059d4:	3fd55555 	.word	0x3fd55555
 80059d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80059dc:	bfa2b444 	.word	0xbfa2b444
 80059e0:	52defd9a 	.word	0x52defd9a
 80059e4:	3fadde2d 	.word	0x3fadde2d
 80059e8:	af749a6d 	.word	0xaf749a6d
 80059ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80059f0:	fe231671 	.word	0xfe231671
 80059f4:	3fbc71c6 	.word	0x3fbc71c6
 80059f8:	9998ebc4 	.word	0x9998ebc4
 80059fc:	3fc99999 	.word	0x3fc99999
 8005a00:	54442d18 	.word	0x54442d18
 8005a04:	bff921fb 	.word	0xbff921fb
 8005a08:	440fffff 	.word	0x440fffff
 8005a0c:	7ff00000 	.word	0x7ff00000
 8005a10:	3fdbffff 	.word	0x3fdbffff
 8005a14:	3ff00000 	.word	0x3ff00000
 8005a18:	3ff2ffff 	.word	0x3ff2ffff
 8005a1c:	40038000 	.word	0x40038000
 8005a20:	3ff80000 	.word	0x3ff80000
 8005a24:	bff00000 	.word	0xbff00000
 8005a28:	08007140 	.word	0x08007140
 8005a2c:	08007160 	.word	0x08007160

08005a30 <cos>:
 8005a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a32:	ec53 2b10 	vmov	r2, r3, d0
 8005a36:	4826      	ldr	r0, [pc, #152]	@ (8005ad0 <cos+0xa0>)
 8005a38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005a3c:	4281      	cmp	r1, r0
 8005a3e:	d806      	bhi.n	8005a4e <cos+0x1e>
 8005a40:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005ac8 <cos+0x98>
 8005a44:	b005      	add	sp, #20
 8005a46:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a4a:	f000 b97d 	b.w	8005d48 <__kernel_cos>
 8005a4e:	4821      	ldr	r0, [pc, #132]	@ (8005ad4 <cos+0xa4>)
 8005a50:	4281      	cmp	r1, r0
 8005a52:	d908      	bls.n	8005a66 <cos+0x36>
 8005a54:	4610      	mov	r0, r2
 8005a56:	4619      	mov	r1, r3
 8005a58:	f7fa fc16 	bl	8000288 <__aeabi_dsub>
 8005a5c:	ec41 0b10 	vmov	d0, r0, r1
 8005a60:	b005      	add	sp, #20
 8005a62:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a66:	4668      	mov	r0, sp
 8005a68:	f000 faf2 	bl	8006050 <__ieee754_rem_pio2>
 8005a6c:	f000 0003 	and.w	r0, r0, #3
 8005a70:	2801      	cmp	r0, #1
 8005a72:	d00b      	beq.n	8005a8c <cos+0x5c>
 8005a74:	2802      	cmp	r0, #2
 8005a76:	d015      	beq.n	8005aa4 <cos+0x74>
 8005a78:	b9d8      	cbnz	r0, 8005ab2 <cos+0x82>
 8005a7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a7e:	ed9d 0b00 	vldr	d0, [sp]
 8005a82:	f000 f961 	bl	8005d48 <__kernel_cos>
 8005a86:	ec51 0b10 	vmov	r0, r1, d0
 8005a8a:	e7e7      	b.n	8005a5c <cos+0x2c>
 8005a8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005a90:	ed9d 0b00 	vldr	d0, [sp]
 8005a94:	f000 fa20 	bl	8005ed8 <__kernel_sin>
 8005a98:	ec53 2b10 	vmov	r2, r3, d0
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005aa2:	e7db      	b.n	8005a5c <cos+0x2c>
 8005aa4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005aa8:	ed9d 0b00 	vldr	d0, [sp]
 8005aac:	f000 f94c 	bl	8005d48 <__kernel_cos>
 8005ab0:	e7f2      	b.n	8005a98 <cos+0x68>
 8005ab2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005ab6:	ed9d 0b00 	vldr	d0, [sp]
 8005aba:	2001      	movs	r0, #1
 8005abc:	f000 fa0c 	bl	8005ed8 <__kernel_sin>
 8005ac0:	e7e1      	b.n	8005a86 <cos+0x56>
 8005ac2:	bf00      	nop
 8005ac4:	f3af 8000 	nop.w
	...
 8005ad0:	3fe921fb 	.word	0x3fe921fb
 8005ad4:	7fefffff 	.word	0x7fefffff

08005ad8 <fabs>:
 8005ad8:	ec51 0b10 	vmov	r0, r1, d0
 8005adc:	4602      	mov	r2, r0
 8005ade:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005ae2:	ec43 2b10 	vmov	d0, r2, r3
 8005ae6:	4770      	bx	lr

08005ae8 <sin>:
 8005ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005aea:	ec53 2b10 	vmov	r2, r3, d0
 8005aee:	4826      	ldr	r0, [pc, #152]	@ (8005b88 <sin+0xa0>)
 8005af0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005af4:	4281      	cmp	r1, r0
 8005af6:	d807      	bhi.n	8005b08 <sin+0x20>
 8005af8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005b80 <sin+0x98>
 8005afc:	2000      	movs	r0, #0
 8005afe:	b005      	add	sp, #20
 8005b00:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b04:	f000 b9e8 	b.w	8005ed8 <__kernel_sin>
 8005b08:	4820      	ldr	r0, [pc, #128]	@ (8005b8c <sin+0xa4>)
 8005b0a:	4281      	cmp	r1, r0
 8005b0c:	d908      	bls.n	8005b20 <sin+0x38>
 8005b0e:	4610      	mov	r0, r2
 8005b10:	4619      	mov	r1, r3
 8005b12:	f7fa fbb9 	bl	8000288 <__aeabi_dsub>
 8005b16:	ec41 0b10 	vmov	d0, r0, r1
 8005b1a:	b005      	add	sp, #20
 8005b1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b20:	4668      	mov	r0, sp
 8005b22:	f000 fa95 	bl	8006050 <__ieee754_rem_pio2>
 8005b26:	f000 0003 	and.w	r0, r0, #3
 8005b2a:	2801      	cmp	r0, #1
 8005b2c:	d00c      	beq.n	8005b48 <sin+0x60>
 8005b2e:	2802      	cmp	r0, #2
 8005b30:	d011      	beq.n	8005b56 <sin+0x6e>
 8005b32:	b9e8      	cbnz	r0, 8005b70 <sin+0x88>
 8005b34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b38:	ed9d 0b00 	vldr	d0, [sp]
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	f000 f9cb 	bl	8005ed8 <__kernel_sin>
 8005b42:	ec51 0b10 	vmov	r0, r1, d0
 8005b46:	e7e6      	b.n	8005b16 <sin+0x2e>
 8005b48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b4c:	ed9d 0b00 	vldr	d0, [sp]
 8005b50:	f000 f8fa 	bl	8005d48 <__kernel_cos>
 8005b54:	e7f5      	b.n	8005b42 <sin+0x5a>
 8005b56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b5a:	ed9d 0b00 	vldr	d0, [sp]
 8005b5e:	2001      	movs	r0, #1
 8005b60:	f000 f9ba 	bl	8005ed8 <__kernel_sin>
 8005b64:	ec53 2b10 	vmov	r2, r3, d0
 8005b68:	4610      	mov	r0, r2
 8005b6a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005b6e:	e7d2      	b.n	8005b16 <sin+0x2e>
 8005b70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005b74:	ed9d 0b00 	vldr	d0, [sp]
 8005b78:	f000 f8e6 	bl	8005d48 <__kernel_cos>
 8005b7c:	e7f2      	b.n	8005b64 <sin+0x7c>
 8005b7e:	bf00      	nop
	...
 8005b88:	3fe921fb 	.word	0x3fe921fb
 8005b8c:	7fefffff 	.word	0x7fefffff

08005b90 <__ieee754_sqrt>:
 8005b90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b94:	4a68      	ldr	r2, [pc, #416]	@ (8005d38 <__ieee754_sqrt+0x1a8>)
 8005b96:	ec55 4b10 	vmov	r4, r5, d0
 8005b9a:	43aa      	bics	r2, r5
 8005b9c:	462b      	mov	r3, r5
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	d110      	bne.n	8005bc4 <__ieee754_sqrt+0x34>
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	f7fa fd26 	bl	80005f8 <__aeabi_dmul>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	f7fa fb6a 	bl	800028c <__adddf3>
 8005bb8:	4604      	mov	r4, r0
 8005bba:	460d      	mov	r5, r1
 8005bbc:	ec45 4b10 	vmov	d0, r4, r5
 8005bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc4:	2d00      	cmp	r5, #0
 8005bc6:	dc0e      	bgt.n	8005be6 <__ieee754_sqrt+0x56>
 8005bc8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8005bcc:	4322      	orrs	r2, r4
 8005bce:	d0f5      	beq.n	8005bbc <__ieee754_sqrt+0x2c>
 8005bd0:	b19d      	cbz	r5, 8005bfa <__ieee754_sqrt+0x6a>
 8005bd2:	4622      	mov	r2, r4
 8005bd4:	4620      	mov	r0, r4
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	f7fa fb56 	bl	8000288 <__aeabi_dsub>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	f7fa fe34 	bl	800084c <__aeabi_ddiv>
 8005be4:	e7e8      	b.n	8005bb8 <__ieee754_sqrt+0x28>
 8005be6:	152a      	asrs	r2, r5, #20
 8005be8:	d115      	bne.n	8005c16 <__ieee754_sqrt+0x86>
 8005bea:	2000      	movs	r0, #0
 8005bec:	e009      	b.n	8005c02 <__ieee754_sqrt+0x72>
 8005bee:	0acb      	lsrs	r3, r1, #11
 8005bf0:	3a15      	subs	r2, #21
 8005bf2:	0549      	lsls	r1, r1, #21
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0fa      	beq.n	8005bee <__ieee754_sqrt+0x5e>
 8005bf8:	e7f7      	b.n	8005bea <__ieee754_sqrt+0x5a>
 8005bfa:	462a      	mov	r2, r5
 8005bfc:	e7fa      	b.n	8005bf4 <__ieee754_sqrt+0x64>
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	3001      	adds	r0, #1
 8005c02:	02dc      	lsls	r4, r3, #11
 8005c04:	d5fb      	bpl.n	8005bfe <__ieee754_sqrt+0x6e>
 8005c06:	1e44      	subs	r4, r0, #1
 8005c08:	1b12      	subs	r2, r2, r4
 8005c0a:	f1c0 0420 	rsb	r4, r0, #32
 8005c0e:	fa21 f404 	lsr.w	r4, r1, r4
 8005c12:	4323      	orrs	r3, r4
 8005c14:	4081      	lsls	r1, r0
 8005c16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c1a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8005c1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c22:	07d2      	lsls	r2, r2, #31
 8005c24:	bf5c      	itt	pl
 8005c26:	005b      	lslpl	r3, r3, #1
 8005c28:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8005c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005c30:	bf58      	it	pl
 8005c32:	0049      	lslpl	r1, r1, #1
 8005c34:	2600      	movs	r6, #0
 8005c36:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8005c3a:	106d      	asrs	r5, r5, #1
 8005c3c:	0049      	lsls	r1, r1, #1
 8005c3e:	2016      	movs	r0, #22
 8005c40:	4632      	mov	r2, r6
 8005c42:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005c46:	1917      	adds	r7, r2, r4
 8005c48:	429f      	cmp	r7, r3
 8005c4a:	bfde      	ittt	le
 8005c4c:	193a      	addle	r2, r7, r4
 8005c4e:	1bdb      	suble	r3, r3, r7
 8005c50:	1936      	addle	r6, r6, r4
 8005c52:	0fcf      	lsrs	r7, r1, #31
 8005c54:	3801      	subs	r0, #1
 8005c56:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8005c5a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005c5e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005c62:	d1f0      	bne.n	8005c46 <__ieee754_sqrt+0xb6>
 8005c64:	4604      	mov	r4, r0
 8005c66:	2720      	movs	r7, #32
 8005c68:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	eb00 0e0c 	add.w	lr, r0, ip
 8005c72:	db02      	blt.n	8005c7a <__ieee754_sqrt+0xea>
 8005c74:	d113      	bne.n	8005c9e <__ieee754_sqrt+0x10e>
 8005c76:	458e      	cmp	lr, r1
 8005c78:	d811      	bhi.n	8005c9e <__ieee754_sqrt+0x10e>
 8005c7a:	f1be 0f00 	cmp.w	lr, #0
 8005c7e:	eb0e 000c 	add.w	r0, lr, ip
 8005c82:	da42      	bge.n	8005d0a <__ieee754_sqrt+0x17a>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	db40      	blt.n	8005d0a <__ieee754_sqrt+0x17a>
 8005c88:	f102 0801 	add.w	r8, r2, #1
 8005c8c:	1a9b      	subs	r3, r3, r2
 8005c8e:	458e      	cmp	lr, r1
 8005c90:	bf88      	it	hi
 8005c92:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005c96:	eba1 010e 	sub.w	r1, r1, lr
 8005c9a:	4464      	add	r4, ip
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005ca2:	3f01      	subs	r7, #1
 8005ca4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005ca8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005cac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005cb0:	d1dc      	bne.n	8005c6c <__ieee754_sqrt+0xdc>
 8005cb2:	4319      	orrs	r1, r3
 8005cb4:	d01b      	beq.n	8005cee <__ieee754_sqrt+0x15e>
 8005cb6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8005d3c <__ieee754_sqrt+0x1ac>
 8005cba:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8005d40 <__ieee754_sqrt+0x1b0>
 8005cbe:	e9da 0100 	ldrd	r0, r1, [sl]
 8005cc2:	e9db 2300 	ldrd	r2, r3, [fp]
 8005cc6:	f7fa fadf 	bl	8000288 <__aeabi_dsub>
 8005cca:	e9da 8900 	ldrd	r8, r9, [sl]
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4640      	mov	r0, r8
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	f7fa ff0b 	bl	8000af0 <__aeabi_dcmple>
 8005cda:	b140      	cbz	r0, 8005cee <__ieee754_sqrt+0x15e>
 8005cdc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005ce0:	e9da 0100 	ldrd	r0, r1, [sl]
 8005ce4:	e9db 2300 	ldrd	r2, r3, [fp]
 8005ce8:	d111      	bne.n	8005d0e <__ieee754_sqrt+0x17e>
 8005cea:	3601      	adds	r6, #1
 8005cec:	463c      	mov	r4, r7
 8005cee:	1072      	asrs	r2, r6, #1
 8005cf0:	0863      	lsrs	r3, r4, #1
 8005cf2:	07f1      	lsls	r1, r6, #31
 8005cf4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005cf8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005cfc:	bf48      	it	mi
 8005cfe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005d02:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8005d06:	4618      	mov	r0, r3
 8005d08:	e756      	b.n	8005bb8 <__ieee754_sqrt+0x28>
 8005d0a:	4690      	mov	r8, r2
 8005d0c:	e7be      	b.n	8005c8c <__ieee754_sqrt+0xfc>
 8005d0e:	f7fa fabd 	bl	800028c <__adddf3>
 8005d12:	e9da 8900 	ldrd	r8, r9, [sl]
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4640      	mov	r0, r8
 8005d1c:	4649      	mov	r1, r9
 8005d1e:	f7fa fedd 	bl	8000adc <__aeabi_dcmplt>
 8005d22:	b120      	cbz	r0, 8005d2e <__ieee754_sqrt+0x19e>
 8005d24:	1ca0      	adds	r0, r4, #2
 8005d26:	bf08      	it	eq
 8005d28:	3601      	addeq	r6, #1
 8005d2a:	3402      	adds	r4, #2
 8005d2c:	e7df      	b.n	8005cee <__ieee754_sqrt+0x15e>
 8005d2e:	1c63      	adds	r3, r4, #1
 8005d30:	f023 0401 	bic.w	r4, r3, #1
 8005d34:	e7db      	b.n	8005cee <__ieee754_sqrt+0x15e>
 8005d36:	bf00      	nop
 8005d38:	7ff00000 	.word	0x7ff00000
 8005d3c:	20000078 	.word	0x20000078
 8005d40:	20000070 	.word	0x20000070
 8005d44:	00000000 	.word	0x00000000

08005d48 <__kernel_cos>:
 8005d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4c:	ec57 6b10 	vmov	r6, r7, d0
 8005d50:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005d54:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005d58:	ed8d 1b00 	vstr	d1, [sp]
 8005d5c:	d206      	bcs.n	8005d6c <__kernel_cos+0x24>
 8005d5e:	4630      	mov	r0, r6
 8005d60:	4639      	mov	r1, r7
 8005d62:	f7fa fef9 	bl	8000b58 <__aeabi_d2iz>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	f000 8088 	beq.w	8005e7c <__kernel_cos+0x134>
 8005d6c:	4632      	mov	r2, r6
 8005d6e:	463b      	mov	r3, r7
 8005d70:	4630      	mov	r0, r6
 8005d72:	4639      	mov	r1, r7
 8005d74:	f7fa fc40 	bl	80005f8 <__aeabi_dmul>
 8005d78:	4b51      	ldr	r3, [pc, #324]	@ (8005ec0 <__kernel_cos+0x178>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	460d      	mov	r5, r1
 8005d80:	f7fa fc3a 	bl	80005f8 <__aeabi_dmul>
 8005d84:	a340      	add	r3, pc, #256	@ (adr r3, 8005e88 <__kernel_cos+0x140>)
 8005d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8a:	4682      	mov	sl, r0
 8005d8c:	468b      	mov	fp, r1
 8005d8e:	4620      	mov	r0, r4
 8005d90:	4629      	mov	r1, r5
 8005d92:	f7fa fc31 	bl	80005f8 <__aeabi_dmul>
 8005d96:	a33e      	add	r3, pc, #248	@ (adr r3, 8005e90 <__kernel_cos+0x148>)
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	f7fa fa76 	bl	800028c <__adddf3>
 8005da0:	4622      	mov	r2, r4
 8005da2:	462b      	mov	r3, r5
 8005da4:	f7fa fc28 	bl	80005f8 <__aeabi_dmul>
 8005da8:	a33b      	add	r3, pc, #236	@ (adr r3, 8005e98 <__kernel_cos+0x150>)
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f7fa fa6b 	bl	8000288 <__aeabi_dsub>
 8005db2:	4622      	mov	r2, r4
 8005db4:	462b      	mov	r3, r5
 8005db6:	f7fa fc1f 	bl	80005f8 <__aeabi_dmul>
 8005dba:	a339      	add	r3, pc, #228	@ (adr r3, 8005ea0 <__kernel_cos+0x158>)
 8005dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc0:	f7fa fa64 	bl	800028c <__adddf3>
 8005dc4:	4622      	mov	r2, r4
 8005dc6:	462b      	mov	r3, r5
 8005dc8:	f7fa fc16 	bl	80005f8 <__aeabi_dmul>
 8005dcc:	a336      	add	r3, pc, #216	@ (adr r3, 8005ea8 <__kernel_cos+0x160>)
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	f7fa fa59 	bl	8000288 <__aeabi_dsub>
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	462b      	mov	r3, r5
 8005dda:	f7fa fc0d 	bl	80005f8 <__aeabi_dmul>
 8005dde:	a334      	add	r3, pc, #208	@ (adr r3, 8005eb0 <__kernel_cos+0x168>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f7fa fa52 	bl	800028c <__adddf3>
 8005de8:	4622      	mov	r2, r4
 8005dea:	462b      	mov	r3, r5
 8005dec:	f7fa fc04 	bl	80005f8 <__aeabi_dmul>
 8005df0:	4622      	mov	r2, r4
 8005df2:	462b      	mov	r3, r5
 8005df4:	f7fa fc00 	bl	80005f8 <__aeabi_dmul>
 8005df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	460d      	mov	r5, r1
 8005e00:	4630      	mov	r0, r6
 8005e02:	4639      	mov	r1, r7
 8005e04:	f7fa fbf8 	bl	80005f8 <__aeabi_dmul>
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f7fa fa3a 	bl	8000288 <__aeabi_dsub>
 8005e14:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec4 <__kernel_cos+0x17c>)
 8005e16:	4598      	cmp	r8, r3
 8005e18:	4606      	mov	r6, r0
 8005e1a:	460f      	mov	r7, r1
 8005e1c:	d810      	bhi.n	8005e40 <__kernel_cos+0xf8>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	4650      	mov	r0, sl
 8005e24:	4659      	mov	r1, fp
 8005e26:	f7fa fa2f 	bl	8000288 <__aeabi_dsub>
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4926      	ldr	r1, [pc, #152]	@ (8005ec8 <__kernel_cos+0x180>)
 8005e2e:	4602      	mov	r2, r0
 8005e30:	2000      	movs	r0, #0
 8005e32:	f7fa fa29 	bl	8000288 <__aeabi_dsub>
 8005e36:	ec41 0b10 	vmov	d0, r0, r1
 8005e3a:	b003      	add	sp, #12
 8005e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e40:	4b22      	ldr	r3, [pc, #136]	@ (8005ecc <__kernel_cos+0x184>)
 8005e42:	4921      	ldr	r1, [pc, #132]	@ (8005ec8 <__kernel_cos+0x180>)
 8005e44:	4598      	cmp	r8, r3
 8005e46:	bf8c      	ite	hi
 8005e48:	4d21      	ldrhi	r5, [pc, #132]	@ (8005ed0 <__kernel_cos+0x188>)
 8005e4a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8005e4e:	2400      	movs	r4, #0
 8005e50:	4622      	mov	r2, r4
 8005e52:	462b      	mov	r3, r5
 8005e54:	2000      	movs	r0, #0
 8005e56:	f7fa fa17 	bl	8000288 <__aeabi_dsub>
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	4680      	mov	r8, r0
 8005e5e:	4689      	mov	r9, r1
 8005e60:	462b      	mov	r3, r5
 8005e62:	4650      	mov	r0, sl
 8005e64:	4659      	mov	r1, fp
 8005e66:	f7fa fa0f 	bl	8000288 <__aeabi_dsub>
 8005e6a:	4632      	mov	r2, r6
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	f7fa fa0b 	bl	8000288 <__aeabi_dsub>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	4640      	mov	r0, r8
 8005e78:	4649      	mov	r1, r9
 8005e7a:	e7da      	b.n	8005e32 <__kernel_cos+0xea>
 8005e7c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005eb8 <__kernel_cos+0x170>
 8005e80:	e7db      	b.n	8005e3a <__kernel_cos+0xf2>
 8005e82:	bf00      	nop
 8005e84:	f3af 8000 	nop.w
 8005e88:	be8838d4 	.word	0xbe8838d4
 8005e8c:	bda8fae9 	.word	0xbda8fae9
 8005e90:	bdb4b1c4 	.word	0xbdb4b1c4
 8005e94:	3e21ee9e 	.word	0x3e21ee9e
 8005e98:	809c52ad 	.word	0x809c52ad
 8005e9c:	3e927e4f 	.word	0x3e927e4f
 8005ea0:	19cb1590 	.word	0x19cb1590
 8005ea4:	3efa01a0 	.word	0x3efa01a0
 8005ea8:	16c15177 	.word	0x16c15177
 8005eac:	3f56c16c 	.word	0x3f56c16c
 8005eb0:	5555554c 	.word	0x5555554c
 8005eb4:	3fa55555 	.word	0x3fa55555
 8005eb8:	00000000 	.word	0x00000000
 8005ebc:	3ff00000 	.word	0x3ff00000
 8005ec0:	3fe00000 	.word	0x3fe00000
 8005ec4:	3fd33332 	.word	0x3fd33332
 8005ec8:	3ff00000 	.word	0x3ff00000
 8005ecc:	3fe90000 	.word	0x3fe90000
 8005ed0:	3fd20000 	.word	0x3fd20000
 8005ed4:	00000000 	.word	0x00000000

08005ed8 <__kernel_sin>:
 8005ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005edc:	ec55 4b10 	vmov	r4, r5, d0
 8005ee0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005ee4:	b085      	sub	sp, #20
 8005ee6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005eea:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005eee:	4680      	mov	r8, r0
 8005ef0:	d205      	bcs.n	8005efe <__kernel_sin+0x26>
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	f7fa fe2f 	bl	8000b58 <__aeabi_d2iz>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d052      	beq.n	8005fa4 <__kernel_sin+0xcc>
 8005efe:	4622      	mov	r2, r4
 8005f00:	462b      	mov	r3, r5
 8005f02:	4620      	mov	r0, r4
 8005f04:	4629      	mov	r1, r5
 8005f06:	f7fa fb77 	bl	80005f8 <__aeabi_dmul>
 8005f0a:	4682      	mov	sl, r0
 8005f0c:	468b      	mov	fp, r1
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4620      	mov	r0, r4
 8005f14:	4629      	mov	r1, r5
 8005f16:	f7fa fb6f 	bl	80005f8 <__aeabi_dmul>
 8005f1a:	a342      	add	r3, pc, #264	@ (adr r3, 8006024 <__kernel_sin+0x14c>)
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	e9cd 0100 	strd	r0, r1, [sp]
 8005f24:	4650      	mov	r0, sl
 8005f26:	4659      	mov	r1, fp
 8005f28:	f7fa fb66 	bl	80005f8 <__aeabi_dmul>
 8005f2c:	a33f      	add	r3, pc, #252	@ (adr r3, 800602c <__kernel_sin+0x154>)
 8005f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f32:	f7fa f9a9 	bl	8000288 <__aeabi_dsub>
 8005f36:	4652      	mov	r2, sl
 8005f38:	465b      	mov	r3, fp
 8005f3a:	f7fa fb5d 	bl	80005f8 <__aeabi_dmul>
 8005f3e:	a33d      	add	r3, pc, #244	@ (adr r3, 8006034 <__kernel_sin+0x15c>)
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f7fa f9a2 	bl	800028c <__adddf3>
 8005f48:	4652      	mov	r2, sl
 8005f4a:	465b      	mov	r3, fp
 8005f4c:	f7fa fb54 	bl	80005f8 <__aeabi_dmul>
 8005f50:	a33a      	add	r3, pc, #232	@ (adr r3, 800603c <__kernel_sin+0x164>)
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	f7fa f997 	bl	8000288 <__aeabi_dsub>
 8005f5a:	4652      	mov	r2, sl
 8005f5c:	465b      	mov	r3, fp
 8005f5e:	f7fa fb4b 	bl	80005f8 <__aeabi_dmul>
 8005f62:	a338      	add	r3, pc, #224	@ (adr r3, 8006044 <__kernel_sin+0x16c>)
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	f7fa f990 	bl	800028c <__adddf3>
 8005f6c:	4606      	mov	r6, r0
 8005f6e:	460f      	mov	r7, r1
 8005f70:	f1b8 0f00 	cmp.w	r8, #0
 8005f74:	d11b      	bne.n	8005fae <__kernel_sin+0xd6>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	4650      	mov	r0, sl
 8005f7c:	4659      	mov	r1, fp
 8005f7e:	f7fa fb3b 	bl	80005f8 <__aeabi_dmul>
 8005f82:	a325      	add	r3, pc, #148	@ (adr r3, 8006018 <__kernel_sin+0x140>)
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f7fa f97e 	bl	8000288 <__aeabi_dsub>
 8005f8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f90:	f7fa fb32 	bl	80005f8 <__aeabi_dmul>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4620      	mov	r0, r4
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	f7fa f976 	bl	800028c <__adddf3>
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	460d      	mov	r5, r1
 8005fa4:	ec45 4b10 	vmov	d0, r4, r5
 8005fa8:	b005      	add	sp, #20
 8005faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006020 <__kernel_sin+0x148>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f7fa fb1f 	bl	80005f8 <__aeabi_dmul>
 8005fba:	4632      	mov	r2, r6
 8005fbc:	4680      	mov	r8, r0
 8005fbe:	4689      	mov	r9, r1
 8005fc0:	463b      	mov	r3, r7
 8005fc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fc6:	f7fa fb17 	bl	80005f8 <__aeabi_dmul>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4640      	mov	r0, r8
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	f7fa f959 	bl	8000288 <__aeabi_dsub>
 8005fd6:	4652      	mov	r2, sl
 8005fd8:	465b      	mov	r3, fp
 8005fda:	f7fa fb0d 	bl	80005f8 <__aeabi_dmul>
 8005fde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fe2:	f7fa f951 	bl	8000288 <__aeabi_dsub>
 8005fe6:	a30c      	add	r3, pc, #48	@ (adr r3, 8006018 <__kernel_sin+0x140>)
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	4606      	mov	r6, r0
 8005fee:	460f      	mov	r7, r1
 8005ff0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ff4:	f7fa fb00 	bl	80005f8 <__aeabi_dmul>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	4639      	mov	r1, r7
 8006000:	f7fa f944 	bl	800028c <__adddf3>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4620      	mov	r0, r4
 800600a:	4629      	mov	r1, r5
 800600c:	f7fa f93c 	bl	8000288 <__aeabi_dsub>
 8006010:	e7c6      	b.n	8005fa0 <__kernel_sin+0xc8>
 8006012:	bf00      	nop
 8006014:	f3af 8000 	nop.w
 8006018:	55555549 	.word	0x55555549
 800601c:	3fc55555 	.word	0x3fc55555
 8006020:	3fe00000 	.word	0x3fe00000
 8006024:	5acfd57c 	.word	0x5acfd57c
 8006028:	3de5d93a 	.word	0x3de5d93a
 800602c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006030:	3e5ae5e6 	.word	0x3e5ae5e6
 8006034:	57b1fe7d 	.word	0x57b1fe7d
 8006038:	3ec71de3 	.word	0x3ec71de3
 800603c:	19c161d5 	.word	0x19c161d5
 8006040:	3f2a01a0 	.word	0x3f2a01a0
 8006044:	1110f8a6 	.word	0x1110f8a6
 8006048:	3f811111 	.word	0x3f811111
 800604c:	00000000 	.word	0x00000000

08006050 <__ieee754_rem_pio2>:
 8006050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006054:	ec57 6b10 	vmov	r6, r7, d0
 8006058:	4bc5      	ldr	r3, [pc, #788]	@ (8006370 <__ieee754_rem_pio2+0x320>)
 800605a:	b08d      	sub	sp, #52	@ 0x34
 800605c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006060:	4598      	cmp	r8, r3
 8006062:	4604      	mov	r4, r0
 8006064:	9704      	str	r7, [sp, #16]
 8006066:	d807      	bhi.n	8006078 <__ieee754_rem_pio2+0x28>
 8006068:	2200      	movs	r2, #0
 800606a:	2300      	movs	r3, #0
 800606c:	ed80 0b00 	vstr	d0, [r0]
 8006070:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006074:	2500      	movs	r5, #0
 8006076:	e028      	b.n	80060ca <__ieee754_rem_pio2+0x7a>
 8006078:	4bbe      	ldr	r3, [pc, #760]	@ (8006374 <__ieee754_rem_pio2+0x324>)
 800607a:	4598      	cmp	r8, r3
 800607c:	d878      	bhi.n	8006170 <__ieee754_rem_pio2+0x120>
 800607e:	9b04      	ldr	r3, [sp, #16]
 8006080:	4dbd      	ldr	r5, [pc, #756]	@ (8006378 <__ieee754_rem_pio2+0x328>)
 8006082:	2b00      	cmp	r3, #0
 8006084:	4630      	mov	r0, r6
 8006086:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006338 <__ieee754_rem_pio2+0x2e8>)
 8006088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608c:	4639      	mov	r1, r7
 800608e:	dd38      	ble.n	8006102 <__ieee754_rem_pio2+0xb2>
 8006090:	f7fa f8fa 	bl	8000288 <__aeabi_dsub>
 8006094:	45a8      	cmp	r8, r5
 8006096:	4606      	mov	r6, r0
 8006098:	460f      	mov	r7, r1
 800609a:	d01a      	beq.n	80060d2 <__ieee754_rem_pio2+0x82>
 800609c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006340 <__ieee754_rem_pio2+0x2f0>)
 800609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a2:	f7fa f8f1 	bl	8000288 <__aeabi_dsub>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4680      	mov	r8, r0
 80060ac:	4689      	mov	r9, r1
 80060ae:	4630      	mov	r0, r6
 80060b0:	4639      	mov	r1, r7
 80060b2:	f7fa f8e9 	bl	8000288 <__aeabi_dsub>
 80060b6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006340 <__ieee754_rem_pio2+0x2f0>)
 80060b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060bc:	f7fa f8e4 	bl	8000288 <__aeabi_dsub>
 80060c0:	e9c4 8900 	strd	r8, r9, [r4]
 80060c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80060c8:	2501      	movs	r5, #1
 80060ca:	4628      	mov	r0, r5
 80060cc:	b00d      	add	sp, #52	@ 0x34
 80060ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d2:	a39d      	add	r3, pc, #628	@ (adr r3, 8006348 <__ieee754_rem_pio2+0x2f8>)
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	f7fa f8d6 	bl	8000288 <__aeabi_dsub>
 80060dc:	a39c      	add	r3, pc, #624	@ (adr r3, 8006350 <__ieee754_rem_pio2+0x300>)
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	4606      	mov	r6, r0
 80060e4:	460f      	mov	r7, r1
 80060e6:	f7fa f8cf 	bl	8000288 <__aeabi_dsub>
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	4680      	mov	r8, r0
 80060f0:	4689      	mov	r9, r1
 80060f2:	4630      	mov	r0, r6
 80060f4:	4639      	mov	r1, r7
 80060f6:	f7fa f8c7 	bl	8000288 <__aeabi_dsub>
 80060fa:	a395      	add	r3, pc, #596	@ (adr r3, 8006350 <__ieee754_rem_pio2+0x300>)
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006100:	e7dc      	b.n	80060bc <__ieee754_rem_pio2+0x6c>
 8006102:	f7fa f8c3 	bl	800028c <__adddf3>
 8006106:	45a8      	cmp	r8, r5
 8006108:	4606      	mov	r6, r0
 800610a:	460f      	mov	r7, r1
 800610c:	d018      	beq.n	8006140 <__ieee754_rem_pio2+0xf0>
 800610e:	a38c      	add	r3, pc, #560	@ (adr r3, 8006340 <__ieee754_rem_pio2+0x2f0>)
 8006110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006114:	f7fa f8ba 	bl	800028c <__adddf3>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4680      	mov	r8, r0
 800611e:	4689      	mov	r9, r1
 8006120:	4630      	mov	r0, r6
 8006122:	4639      	mov	r1, r7
 8006124:	f7fa f8b0 	bl	8000288 <__aeabi_dsub>
 8006128:	a385      	add	r3, pc, #532	@ (adr r3, 8006340 <__ieee754_rem_pio2+0x2f0>)
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	f7fa f8ad 	bl	800028c <__adddf3>
 8006132:	f04f 35ff 	mov.w	r5, #4294967295
 8006136:	e9c4 8900 	strd	r8, r9, [r4]
 800613a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800613e:	e7c4      	b.n	80060ca <__ieee754_rem_pio2+0x7a>
 8006140:	a381      	add	r3, pc, #516	@ (adr r3, 8006348 <__ieee754_rem_pio2+0x2f8>)
 8006142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006146:	f7fa f8a1 	bl	800028c <__adddf3>
 800614a:	a381      	add	r3, pc, #516	@ (adr r3, 8006350 <__ieee754_rem_pio2+0x300>)
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	4606      	mov	r6, r0
 8006152:	460f      	mov	r7, r1
 8006154:	f7fa f89a 	bl	800028c <__adddf3>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	4680      	mov	r8, r0
 800615e:	4689      	mov	r9, r1
 8006160:	4630      	mov	r0, r6
 8006162:	4639      	mov	r1, r7
 8006164:	f7fa f890 	bl	8000288 <__aeabi_dsub>
 8006168:	a379      	add	r3, pc, #484	@ (adr r3, 8006350 <__ieee754_rem_pio2+0x300>)
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	e7de      	b.n	800612e <__ieee754_rem_pio2+0xde>
 8006170:	4b82      	ldr	r3, [pc, #520]	@ (800637c <__ieee754_rem_pio2+0x32c>)
 8006172:	4598      	cmp	r8, r3
 8006174:	f200 80d1 	bhi.w	800631a <__ieee754_rem_pio2+0x2ca>
 8006178:	f7ff fcae 	bl	8005ad8 <fabs>
 800617c:	ec57 6b10 	vmov	r6, r7, d0
 8006180:	a375      	add	r3, pc, #468	@ (adr r3, 8006358 <__ieee754_rem_pio2+0x308>)
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	4630      	mov	r0, r6
 8006188:	4639      	mov	r1, r7
 800618a:	f7fa fa35 	bl	80005f8 <__aeabi_dmul>
 800618e:	4b7c      	ldr	r3, [pc, #496]	@ (8006380 <__ieee754_rem_pio2+0x330>)
 8006190:	2200      	movs	r2, #0
 8006192:	f7fa f87b 	bl	800028c <__adddf3>
 8006196:	f7fa fcdf 	bl	8000b58 <__aeabi_d2iz>
 800619a:	4605      	mov	r5, r0
 800619c:	f7fa f9c2 	bl	8000524 <__aeabi_i2d>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061a8:	a363      	add	r3, pc, #396	@ (adr r3, 8006338 <__ieee754_rem_pio2+0x2e8>)
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	f7fa fa23 	bl	80005f8 <__aeabi_dmul>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4630      	mov	r0, r6
 80061b8:	4639      	mov	r1, r7
 80061ba:	f7fa f865 	bl	8000288 <__aeabi_dsub>
 80061be:	a360      	add	r3, pc, #384	@ (adr r3, 8006340 <__ieee754_rem_pio2+0x2f0>)
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	4682      	mov	sl, r0
 80061c6:	468b      	mov	fp, r1
 80061c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061cc:	f7fa fa14 	bl	80005f8 <__aeabi_dmul>
 80061d0:	2d1f      	cmp	r5, #31
 80061d2:	4606      	mov	r6, r0
 80061d4:	460f      	mov	r7, r1
 80061d6:	dc0c      	bgt.n	80061f2 <__ieee754_rem_pio2+0x1a2>
 80061d8:	4b6a      	ldr	r3, [pc, #424]	@ (8006384 <__ieee754_rem_pio2+0x334>)
 80061da:	1e6a      	subs	r2, r5, #1
 80061dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e0:	4543      	cmp	r3, r8
 80061e2:	d006      	beq.n	80061f2 <__ieee754_rem_pio2+0x1a2>
 80061e4:	4632      	mov	r2, r6
 80061e6:	463b      	mov	r3, r7
 80061e8:	4650      	mov	r0, sl
 80061ea:	4659      	mov	r1, fp
 80061ec:	f7fa f84c 	bl	8000288 <__aeabi_dsub>
 80061f0:	e00e      	b.n	8006210 <__ieee754_rem_pio2+0x1c0>
 80061f2:	463b      	mov	r3, r7
 80061f4:	4632      	mov	r2, r6
 80061f6:	4650      	mov	r0, sl
 80061f8:	4659      	mov	r1, fp
 80061fa:	f7fa f845 	bl	8000288 <__aeabi_dsub>
 80061fe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006202:	9305      	str	r3, [sp, #20]
 8006204:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006208:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800620c:	2b10      	cmp	r3, #16
 800620e:	dc02      	bgt.n	8006216 <__ieee754_rem_pio2+0x1c6>
 8006210:	e9c4 0100 	strd	r0, r1, [r4]
 8006214:	e039      	b.n	800628a <__ieee754_rem_pio2+0x23a>
 8006216:	a34c      	add	r3, pc, #304	@ (adr r3, 8006348 <__ieee754_rem_pio2+0x2f8>)
 8006218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006220:	f7fa f9ea 	bl	80005f8 <__aeabi_dmul>
 8006224:	4606      	mov	r6, r0
 8006226:	460f      	mov	r7, r1
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4650      	mov	r0, sl
 800622e:	4659      	mov	r1, fp
 8006230:	f7fa f82a 	bl	8000288 <__aeabi_dsub>
 8006234:	4602      	mov	r2, r0
 8006236:	460b      	mov	r3, r1
 8006238:	4680      	mov	r8, r0
 800623a:	4689      	mov	r9, r1
 800623c:	4650      	mov	r0, sl
 800623e:	4659      	mov	r1, fp
 8006240:	f7fa f822 	bl	8000288 <__aeabi_dsub>
 8006244:	4632      	mov	r2, r6
 8006246:	463b      	mov	r3, r7
 8006248:	f7fa f81e 	bl	8000288 <__aeabi_dsub>
 800624c:	a340      	add	r3, pc, #256	@ (adr r3, 8006350 <__ieee754_rem_pio2+0x300>)
 800624e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006252:	4606      	mov	r6, r0
 8006254:	460f      	mov	r7, r1
 8006256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800625a:	f7fa f9cd 	bl	80005f8 <__aeabi_dmul>
 800625e:	4632      	mov	r2, r6
 8006260:	463b      	mov	r3, r7
 8006262:	f7fa f811 	bl	8000288 <__aeabi_dsub>
 8006266:	4602      	mov	r2, r0
 8006268:	460b      	mov	r3, r1
 800626a:	4606      	mov	r6, r0
 800626c:	460f      	mov	r7, r1
 800626e:	4640      	mov	r0, r8
 8006270:	4649      	mov	r1, r9
 8006272:	f7fa f809 	bl	8000288 <__aeabi_dsub>
 8006276:	9a05      	ldr	r2, [sp, #20]
 8006278:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b31      	cmp	r3, #49	@ 0x31
 8006280:	dc20      	bgt.n	80062c4 <__ieee754_rem_pio2+0x274>
 8006282:	e9c4 0100 	strd	r0, r1, [r4]
 8006286:	46c2      	mov	sl, r8
 8006288:	46cb      	mov	fp, r9
 800628a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800628e:	4650      	mov	r0, sl
 8006290:	4642      	mov	r2, r8
 8006292:	464b      	mov	r3, r9
 8006294:	4659      	mov	r1, fp
 8006296:	f7f9 fff7 	bl	8000288 <__aeabi_dsub>
 800629a:	463b      	mov	r3, r7
 800629c:	4632      	mov	r2, r6
 800629e:	f7f9 fff3 	bl	8000288 <__aeabi_dsub>
 80062a2:	9b04      	ldr	r3, [sp, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80062aa:	f6bf af0e 	bge.w	80060ca <__ieee754_rem_pio2+0x7a>
 80062ae:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80062b2:	6063      	str	r3, [r4, #4]
 80062b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80062b8:	f8c4 8000 	str.w	r8, [r4]
 80062bc:	60a0      	str	r0, [r4, #8]
 80062be:	60e3      	str	r3, [r4, #12]
 80062c0:	426d      	negs	r5, r5
 80062c2:	e702      	b.n	80060ca <__ieee754_rem_pio2+0x7a>
 80062c4:	a326      	add	r3, pc, #152	@ (adr r3, 8006360 <__ieee754_rem_pio2+0x310>)
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ce:	f7fa f993 	bl	80005f8 <__aeabi_dmul>
 80062d2:	4606      	mov	r6, r0
 80062d4:	460f      	mov	r7, r1
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4640      	mov	r0, r8
 80062dc:	4649      	mov	r1, r9
 80062de:	f7f9 ffd3 	bl	8000288 <__aeabi_dsub>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4682      	mov	sl, r0
 80062e8:	468b      	mov	fp, r1
 80062ea:	4640      	mov	r0, r8
 80062ec:	4649      	mov	r1, r9
 80062ee:	f7f9 ffcb 	bl	8000288 <__aeabi_dsub>
 80062f2:	4632      	mov	r2, r6
 80062f4:	463b      	mov	r3, r7
 80062f6:	f7f9 ffc7 	bl	8000288 <__aeabi_dsub>
 80062fa:	a31b      	add	r3, pc, #108	@ (adr r3, 8006368 <__ieee754_rem_pio2+0x318>)
 80062fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006300:	4606      	mov	r6, r0
 8006302:	460f      	mov	r7, r1
 8006304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006308:	f7fa f976 	bl	80005f8 <__aeabi_dmul>
 800630c:	4632      	mov	r2, r6
 800630e:	463b      	mov	r3, r7
 8006310:	f7f9 ffba 	bl	8000288 <__aeabi_dsub>
 8006314:	4606      	mov	r6, r0
 8006316:	460f      	mov	r7, r1
 8006318:	e764      	b.n	80061e4 <__ieee754_rem_pio2+0x194>
 800631a:	4b1b      	ldr	r3, [pc, #108]	@ (8006388 <__ieee754_rem_pio2+0x338>)
 800631c:	4598      	cmp	r8, r3
 800631e:	d935      	bls.n	800638c <__ieee754_rem_pio2+0x33c>
 8006320:	4632      	mov	r2, r6
 8006322:	463b      	mov	r3, r7
 8006324:	4630      	mov	r0, r6
 8006326:	4639      	mov	r1, r7
 8006328:	f7f9 ffae 	bl	8000288 <__aeabi_dsub>
 800632c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006330:	e9c4 0100 	strd	r0, r1, [r4]
 8006334:	e69e      	b.n	8006074 <__ieee754_rem_pio2+0x24>
 8006336:	bf00      	nop
 8006338:	54400000 	.word	0x54400000
 800633c:	3ff921fb 	.word	0x3ff921fb
 8006340:	1a626331 	.word	0x1a626331
 8006344:	3dd0b461 	.word	0x3dd0b461
 8006348:	1a600000 	.word	0x1a600000
 800634c:	3dd0b461 	.word	0x3dd0b461
 8006350:	2e037073 	.word	0x2e037073
 8006354:	3ba3198a 	.word	0x3ba3198a
 8006358:	6dc9c883 	.word	0x6dc9c883
 800635c:	3fe45f30 	.word	0x3fe45f30
 8006360:	2e000000 	.word	0x2e000000
 8006364:	3ba3198a 	.word	0x3ba3198a
 8006368:	252049c1 	.word	0x252049c1
 800636c:	397b839a 	.word	0x397b839a
 8006370:	3fe921fb 	.word	0x3fe921fb
 8006374:	4002d97b 	.word	0x4002d97b
 8006378:	3ff921fb 	.word	0x3ff921fb
 800637c:	413921fb 	.word	0x413921fb
 8006380:	3fe00000 	.word	0x3fe00000
 8006384:	08007180 	.word	0x08007180
 8006388:	7fefffff 	.word	0x7fefffff
 800638c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006390:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8006394:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006398:	4630      	mov	r0, r6
 800639a:	460f      	mov	r7, r1
 800639c:	f7fa fbdc 	bl	8000b58 <__aeabi_d2iz>
 80063a0:	f7fa f8c0 	bl	8000524 <__aeabi_i2d>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4630      	mov	r0, r6
 80063aa:	4639      	mov	r1, r7
 80063ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80063b0:	f7f9 ff6a 	bl	8000288 <__aeabi_dsub>
 80063b4:	4b22      	ldr	r3, [pc, #136]	@ (8006440 <__ieee754_rem_pio2+0x3f0>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	f7fa f91e 	bl	80005f8 <__aeabi_dmul>
 80063bc:	460f      	mov	r7, r1
 80063be:	4606      	mov	r6, r0
 80063c0:	f7fa fbca 	bl	8000b58 <__aeabi_d2iz>
 80063c4:	f7fa f8ae 	bl	8000524 <__aeabi_i2d>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4630      	mov	r0, r6
 80063ce:	4639      	mov	r1, r7
 80063d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80063d4:	f7f9 ff58 	bl	8000288 <__aeabi_dsub>
 80063d8:	4b19      	ldr	r3, [pc, #100]	@ (8006440 <__ieee754_rem_pio2+0x3f0>)
 80063da:	2200      	movs	r2, #0
 80063dc:	f7fa f90c 	bl	80005f8 <__aeabi_dmul>
 80063e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80063e4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80063e8:	f04f 0803 	mov.w	r8, #3
 80063ec:	2600      	movs	r6, #0
 80063ee:	2700      	movs	r7, #0
 80063f0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80063f4:	4632      	mov	r2, r6
 80063f6:	463b      	mov	r3, r7
 80063f8:	46c2      	mov	sl, r8
 80063fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80063fe:	f7fa fb63 	bl	8000ac8 <__aeabi_dcmpeq>
 8006402:	2800      	cmp	r0, #0
 8006404:	d1f4      	bne.n	80063f0 <__ieee754_rem_pio2+0x3a0>
 8006406:	4b0f      	ldr	r3, [pc, #60]	@ (8006444 <__ieee754_rem_pio2+0x3f4>)
 8006408:	9301      	str	r3, [sp, #4]
 800640a:	2302      	movs	r3, #2
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	462a      	mov	r2, r5
 8006410:	4653      	mov	r3, sl
 8006412:	4621      	mov	r1, r4
 8006414:	a806      	add	r0, sp, #24
 8006416:	f000 f817 	bl	8006448 <__kernel_rem_pio2>
 800641a:	9b04      	ldr	r3, [sp, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	4605      	mov	r5, r0
 8006420:	f6bf ae53 	bge.w	80060ca <__ieee754_rem_pio2+0x7a>
 8006424:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006428:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800642c:	e9c4 2300 	strd	r2, r3, [r4]
 8006430:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006434:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006438:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800643c:	e740      	b.n	80062c0 <__ieee754_rem_pio2+0x270>
 800643e:	bf00      	nop
 8006440:	41700000 	.word	0x41700000
 8006444:	08007200 	.word	0x08007200

08006448 <__kernel_rem_pio2>:
 8006448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644c:	ed2d 8b02 	vpush	{d8}
 8006450:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006454:	f112 0f14 	cmn.w	r2, #20
 8006458:	9306      	str	r3, [sp, #24]
 800645a:	9104      	str	r1, [sp, #16]
 800645c:	4bbe      	ldr	r3, [pc, #760]	@ (8006758 <__kernel_rem_pio2+0x310>)
 800645e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006460:	9008      	str	r0, [sp, #32]
 8006462:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	9b06      	ldr	r3, [sp, #24]
 800646a:	f103 33ff 	add.w	r3, r3, #4294967295
 800646e:	bfa8      	it	ge
 8006470:	1ed4      	subge	r4, r2, #3
 8006472:	9305      	str	r3, [sp, #20]
 8006474:	bfb2      	itee	lt
 8006476:	2400      	movlt	r4, #0
 8006478:	2318      	movge	r3, #24
 800647a:	fb94 f4f3 	sdivge	r4, r4, r3
 800647e:	f06f 0317 	mvn.w	r3, #23
 8006482:	fb04 3303 	mla	r3, r4, r3, r3
 8006486:	eb03 0b02 	add.w	fp, r3, r2
 800648a:	9b00      	ldr	r3, [sp, #0]
 800648c:	9a05      	ldr	r2, [sp, #20]
 800648e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006748 <__kernel_rem_pio2+0x300>
 8006492:	eb03 0802 	add.w	r8, r3, r2
 8006496:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006498:	1aa7      	subs	r7, r4, r2
 800649a:	ae20      	add	r6, sp, #128	@ 0x80
 800649c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80064a0:	2500      	movs	r5, #0
 80064a2:	4545      	cmp	r5, r8
 80064a4:	dd13      	ble.n	80064ce <__kernel_rem_pio2+0x86>
 80064a6:	9b06      	ldr	r3, [sp, #24]
 80064a8:	aa20      	add	r2, sp, #128	@ 0x80
 80064aa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80064ae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80064b2:	f04f 0800 	mov.w	r8, #0
 80064b6:	9b00      	ldr	r3, [sp, #0]
 80064b8:	4598      	cmp	r8, r3
 80064ba:	dc31      	bgt.n	8006520 <__kernel_rem_pio2+0xd8>
 80064bc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006748 <__kernel_rem_pio2+0x300>
 80064c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80064c8:	462f      	mov	r7, r5
 80064ca:	2600      	movs	r6, #0
 80064cc:	e01b      	b.n	8006506 <__kernel_rem_pio2+0xbe>
 80064ce:	42ef      	cmn	r7, r5
 80064d0:	d407      	bmi.n	80064e2 <__kernel_rem_pio2+0x9a>
 80064d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80064d6:	f7fa f825 	bl	8000524 <__aeabi_i2d>
 80064da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80064de:	3501      	adds	r5, #1
 80064e0:	e7df      	b.n	80064a2 <__kernel_rem_pio2+0x5a>
 80064e2:	ec51 0b18 	vmov	r0, r1, d8
 80064e6:	e7f8      	b.n	80064da <__kernel_rem_pio2+0x92>
 80064e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80064f0:	f7fa f882 	bl	80005f8 <__aeabi_dmul>
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064fc:	f7f9 fec6 	bl	800028c <__adddf3>
 8006500:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006504:	3601      	adds	r6, #1
 8006506:	9b05      	ldr	r3, [sp, #20]
 8006508:	429e      	cmp	r6, r3
 800650a:	f1a7 0708 	sub.w	r7, r7, #8
 800650e:	ddeb      	ble.n	80064e8 <__kernel_rem_pio2+0xa0>
 8006510:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006514:	f108 0801 	add.w	r8, r8, #1
 8006518:	ecaa 7b02 	vstmia	sl!, {d7}
 800651c:	3508      	adds	r5, #8
 800651e:	e7ca      	b.n	80064b6 <__kernel_rem_pio2+0x6e>
 8006520:	9b00      	ldr	r3, [sp, #0]
 8006522:	f8dd 8000 	ldr.w	r8, [sp]
 8006526:	aa0c      	add	r2, sp, #48	@ 0x30
 8006528:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800652c:	930a      	str	r3, [sp, #40]	@ 0x28
 800652e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006530:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006534:	9309      	str	r3, [sp, #36]	@ 0x24
 8006536:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800653a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800653c:	ab98      	add	r3, sp, #608	@ 0x260
 800653e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006542:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8006546:	ed8d 7b02 	vstr	d7, [sp, #8]
 800654a:	ac0c      	add	r4, sp, #48	@ 0x30
 800654c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800654e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8006552:	46a1      	mov	r9, r4
 8006554:	46c2      	mov	sl, r8
 8006556:	f1ba 0f00 	cmp.w	sl, #0
 800655a:	f1a5 0508 	sub.w	r5, r5, #8
 800655e:	dc77      	bgt.n	8006650 <__kernel_rem_pio2+0x208>
 8006560:	4658      	mov	r0, fp
 8006562:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006566:	f000 fac7 	bl	8006af8 <scalbn>
 800656a:	ec57 6b10 	vmov	r6, r7, d0
 800656e:	2200      	movs	r2, #0
 8006570:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006574:	4630      	mov	r0, r6
 8006576:	4639      	mov	r1, r7
 8006578:	f7fa f83e 	bl	80005f8 <__aeabi_dmul>
 800657c:	ec41 0b10 	vmov	d0, r0, r1
 8006580:	f000 fb3a 	bl	8006bf8 <floor>
 8006584:	4b75      	ldr	r3, [pc, #468]	@ (800675c <__kernel_rem_pio2+0x314>)
 8006586:	ec51 0b10 	vmov	r0, r1, d0
 800658a:	2200      	movs	r2, #0
 800658c:	f7fa f834 	bl	80005f8 <__aeabi_dmul>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4630      	mov	r0, r6
 8006596:	4639      	mov	r1, r7
 8006598:	f7f9 fe76 	bl	8000288 <__aeabi_dsub>
 800659c:	460f      	mov	r7, r1
 800659e:	4606      	mov	r6, r0
 80065a0:	f7fa fada 	bl	8000b58 <__aeabi_d2iz>
 80065a4:	9002      	str	r0, [sp, #8]
 80065a6:	f7f9 ffbd 	bl	8000524 <__aeabi_i2d>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4630      	mov	r0, r6
 80065b0:	4639      	mov	r1, r7
 80065b2:	f7f9 fe69 	bl	8000288 <__aeabi_dsub>
 80065b6:	f1bb 0f00 	cmp.w	fp, #0
 80065ba:	4606      	mov	r6, r0
 80065bc:	460f      	mov	r7, r1
 80065be:	dd6c      	ble.n	800669a <__kernel_rem_pio2+0x252>
 80065c0:	f108 31ff 	add.w	r1, r8, #4294967295
 80065c4:	ab0c      	add	r3, sp, #48	@ 0x30
 80065c6:	9d02      	ldr	r5, [sp, #8]
 80065c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80065cc:	f1cb 0018 	rsb	r0, fp, #24
 80065d0:	fa43 f200 	asr.w	r2, r3, r0
 80065d4:	4415      	add	r5, r2
 80065d6:	4082      	lsls	r2, r0
 80065d8:	1a9b      	subs	r3, r3, r2
 80065da:	aa0c      	add	r2, sp, #48	@ 0x30
 80065dc:	9502      	str	r5, [sp, #8]
 80065de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80065e2:	f1cb 0217 	rsb	r2, fp, #23
 80065e6:	fa43 f902 	asr.w	r9, r3, r2
 80065ea:	f1b9 0f00 	cmp.w	r9, #0
 80065ee:	dd64      	ble.n	80066ba <__kernel_rem_pio2+0x272>
 80065f0:	9b02      	ldr	r3, [sp, #8]
 80065f2:	2200      	movs	r2, #0
 80065f4:	3301      	adds	r3, #1
 80065f6:	9302      	str	r3, [sp, #8]
 80065f8:	4615      	mov	r5, r2
 80065fa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80065fe:	4590      	cmp	r8, r2
 8006600:	f300 80b8 	bgt.w	8006774 <__kernel_rem_pio2+0x32c>
 8006604:	f1bb 0f00 	cmp.w	fp, #0
 8006608:	dd07      	ble.n	800661a <__kernel_rem_pio2+0x1d2>
 800660a:	f1bb 0f01 	cmp.w	fp, #1
 800660e:	f000 80bf 	beq.w	8006790 <__kernel_rem_pio2+0x348>
 8006612:	f1bb 0f02 	cmp.w	fp, #2
 8006616:	f000 80c6 	beq.w	80067a6 <__kernel_rem_pio2+0x35e>
 800661a:	f1b9 0f02 	cmp.w	r9, #2
 800661e:	d14c      	bne.n	80066ba <__kernel_rem_pio2+0x272>
 8006620:	4632      	mov	r2, r6
 8006622:	463b      	mov	r3, r7
 8006624:	494e      	ldr	r1, [pc, #312]	@ (8006760 <__kernel_rem_pio2+0x318>)
 8006626:	2000      	movs	r0, #0
 8006628:	f7f9 fe2e 	bl	8000288 <__aeabi_dsub>
 800662c:	4606      	mov	r6, r0
 800662e:	460f      	mov	r7, r1
 8006630:	2d00      	cmp	r5, #0
 8006632:	d042      	beq.n	80066ba <__kernel_rem_pio2+0x272>
 8006634:	4658      	mov	r0, fp
 8006636:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006750 <__kernel_rem_pio2+0x308>
 800663a:	f000 fa5d 	bl	8006af8 <scalbn>
 800663e:	4630      	mov	r0, r6
 8006640:	4639      	mov	r1, r7
 8006642:	ec53 2b10 	vmov	r2, r3, d0
 8006646:	f7f9 fe1f 	bl	8000288 <__aeabi_dsub>
 800664a:	4606      	mov	r6, r0
 800664c:	460f      	mov	r7, r1
 800664e:	e034      	b.n	80066ba <__kernel_rem_pio2+0x272>
 8006650:	4b44      	ldr	r3, [pc, #272]	@ (8006764 <__kernel_rem_pio2+0x31c>)
 8006652:	2200      	movs	r2, #0
 8006654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006658:	f7f9 ffce 	bl	80005f8 <__aeabi_dmul>
 800665c:	f7fa fa7c 	bl	8000b58 <__aeabi_d2iz>
 8006660:	f7f9 ff60 	bl	8000524 <__aeabi_i2d>
 8006664:	4b40      	ldr	r3, [pc, #256]	@ (8006768 <__kernel_rem_pio2+0x320>)
 8006666:	2200      	movs	r2, #0
 8006668:	4606      	mov	r6, r0
 800666a:	460f      	mov	r7, r1
 800666c:	f7f9 ffc4 	bl	80005f8 <__aeabi_dmul>
 8006670:	4602      	mov	r2, r0
 8006672:	460b      	mov	r3, r1
 8006674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006678:	f7f9 fe06 	bl	8000288 <__aeabi_dsub>
 800667c:	f7fa fa6c 	bl	8000b58 <__aeabi_d2iz>
 8006680:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006684:	f849 0b04 	str.w	r0, [r9], #4
 8006688:	4639      	mov	r1, r7
 800668a:	4630      	mov	r0, r6
 800668c:	f7f9 fdfe 	bl	800028c <__adddf3>
 8006690:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006698:	e75d      	b.n	8006556 <__kernel_rem_pio2+0x10e>
 800669a:	d107      	bne.n	80066ac <__kernel_rem_pio2+0x264>
 800669c:	f108 33ff 	add.w	r3, r8, #4294967295
 80066a0:	aa0c      	add	r2, sp, #48	@ 0x30
 80066a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80066aa:	e79e      	b.n	80065ea <__kernel_rem_pio2+0x1a2>
 80066ac:	4b2f      	ldr	r3, [pc, #188]	@ (800676c <__kernel_rem_pio2+0x324>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	f7fa fa28 	bl	8000b04 <__aeabi_dcmpge>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d143      	bne.n	8006740 <__kernel_rem_pio2+0x2f8>
 80066b8:	4681      	mov	r9, r0
 80066ba:	2200      	movs	r2, #0
 80066bc:	2300      	movs	r3, #0
 80066be:	4630      	mov	r0, r6
 80066c0:	4639      	mov	r1, r7
 80066c2:	f7fa fa01 	bl	8000ac8 <__aeabi_dcmpeq>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	f000 80bf 	beq.w	800684a <__kernel_rem_pio2+0x402>
 80066cc:	f108 33ff 	add.w	r3, r8, #4294967295
 80066d0:	2200      	movs	r2, #0
 80066d2:	9900      	ldr	r1, [sp, #0]
 80066d4:	428b      	cmp	r3, r1
 80066d6:	da6e      	bge.n	80067b6 <__kernel_rem_pio2+0x36e>
 80066d8:	2a00      	cmp	r2, #0
 80066da:	f000 8089 	beq.w	80067f0 <__kernel_rem_pio2+0x3a8>
 80066de:	f108 38ff 	add.w	r8, r8, #4294967295
 80066e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80066e4:	f1ab 0b18 	sub.w	fp, fp, #24
 80066e8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d0f6      	beq.n	80066de <__kernel_rem_pio2+0x296>
 80066f0:	4658      	mov	r0, fp
 80066f2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006750 <__kernel_rem_pio2+0x308>
 80066f6:	f000 f9ff 	bl	8006af8 <scalbn>
 80066fa:	f108 0301 	add.w	r3, r8, #1
 80066fe:	00da      	lsls	r2, r3, #3
 8006700:	9205      	str	r2, [sp, #20]
 8006702:	ec55 4b10 	vmov	r4, r5, d0
 8006706:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006708:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8006764 <__kernel_rem_pio2+0x31c>
 800670c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006710:	4646      	mov	r6, r8
 8006712:	f04f 0a00 	mov.w	sl, #0
 8006716:	2e00      	cmp	r6, #0
 8006718:	f280 80cf 	bge.w	80068ba <__kernel_rem_pio2+0x472>
 800671c:	4644      	mov	r4, r8
 800671e:	2c00      	cmp	r4, #0
 8006720:	f2c0 80fd 	blt.w	800691e <__kernel_rem_pio2+0x4d6>
 8006724:	4b12      	ldr	r3, [pc, #72]	@ (8006770 <__kernel_rem_pio2+0x328>)
 8006726:	461f      	mov	r7, r3
 8006728:	ab70      	add	r3, sp, #448	@ 0x1c0
 800672a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800672e:	9306      	str	r3, [sp, #24]
 8006730:	f04f 0a00 	mov.w	sl, #0
 8006734:	f04f 0b00 	mov.w	fp, #0
 8006738:	2600      	movs	r6, #0
 800673a:	eba8 0504 	sub.w	r5, r8, r4
 800673e:	e0e2      	b.n	8006906 <__kernel_rem_pio2+0x4be>
 8006740:	f04f 0902 	mov.w	r9, #2
 8006744:	e754      	b.n	80065f0 <__kernel_rem_pio2+0x1a8>
 8006746:	bf00      	nop
	...
 8006754:	3ff00000 	.word	0x3ff00000
 8006758:	08007348 	.word	0x08007348
 800675c:	40200000 	.word	0x40200000
 8006760:	3ff00000 	.word	0x3ff00000
 8006764:	3e700000 	.word	0x3e700000
 8006768:	41700000 	.word	0x41700000
 800676c:	3fe00000 	.word	0x3fe00000
 8006770:	08007308 	.word	0x08007308
 8006774:	f854 3b04 	ldr.w	r3, [r4], #4
 8006778:	b945      	cbnz	r5, 800678c <__kernel_rem_pio2+0x344>
 800677a:	b123      	cbz	r3, 8006786 <__kernel_rem_pio2+0x33e>
 800677c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006780:	f844 3c04 	str.w	r3, [r4, #-4]
 8006784:	2301      	movs	r3, #1
 8006786:	3201      	adds	r2, #1
 8006788:	461d      	mov	r5, r3
 800678a:	e738      	b.n	80065fe <__kernel_rem_pio2+0x1b6>
 800678c:	1acb      	subs	r3, r1, r3
 800678e:	e7f7      	b.n	8006780 <__kernel_rem_pio2+0x338>
 8006790:	f108 32ff 	add.w	r2, r8, #4294967295
 8006794:	ab0c      	add	r3, sp, #48	@ 0x30
 8006796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800679e:	a90c      	add	r1, sp, #48	@ 0x30
 80067a0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80067a4:	e739      	b.n	800661a <__kernel_rem_pio2+0x1d2>
 80067a6:	f108 32ff 	add.w	r2, r8, #4294967295
 80067aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80067ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80067b4:	e7f3      	b.n	800679e <__kernel_rem_pio2+0x356>
 80067b6:	a90c      	add	r1, sp, #48	@ 0x30
 80067b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80067bc:	3b01      	subs	r3, #1
 80067be:	430a      	orrs	r2, r1
 80067c0:	e787      	b.n	80066d2 <__kernel_rem_pio2+0x28a>
 80067c2:	3401      	adds	r4, #1
 80067c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80067c8:	2a00      	cmp	r2, #0
 80067ca:	d0fa      	beq.n	80067c2 <__kernel_rem_pio2+0x37a>
 80067cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80067d2:	eb0d 0503 	add.w	r5, sp, r3
 80067d6:	9b06      	ldr	r3, [sp, #24]
 80067d8:	aa20      	add	r2, sp, #128	@ 0x80
 80067da:	4443      	add	r3, r8
 80067dc:	f108 0701 	add.w	r7, r8, #1
 80067e0:	3d98      	subs	r5, #152	@ 0x98
 80067e2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80067e6:	4444      	add	r4, r8
 80067e8:	42bc      	cmp	r4, r7
 80067ea:	da04      	bge.n	80067f6 <__kernel_rem_pio2+0x3ae>
 80067ec:	46a0      	mov	r8, r4
 80067ee:	e6a2      	b.n	8006536 <__kernel_rem_pio2+0xee>
 80067f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067f2:	2401      	movs	r4, #1
 80067f4:	e7e6      	b.n	80067c4 <__kernel_rem_pio2+0x37c>
 80067f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80067fc:	f7f9 fe92 	bl	8000524 <__aeabi_i2d>
 8006800:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006ac8 <__kernel_rem_pio2+0x680>
 8006804:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006808:	ed8d 7b02 	vstr	d7, [sp, #8]
 800680c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006810:	46b2      	mov	sl, r6
 8006812:	f04f 0800 	mov.w	r8, #0
 8006816:	9b05      	ldr	r3, [sp, #20]
 8006818:	4598      	cmp	r8, r3
 800681a:	dd05      	ble.n	8006828 <__kernel_rem_pio2+0x3e0>
 800681c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006820:	3701      	adds	r7, #1
 8006822:	eca5 7b02 	vstmia	r5!, {d7}
 8006826:	e7df      	b.n	80067e8 <__kernel_rem_pio2+0x3a0>
 8006828:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800682c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006830:	f7f9 fee2 	bl	80005f8 <__aeabi_dmul>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800683c:	f7f9 fd26 	bl	800028c <__adddf3>
 8006840:	f108 0801 	add.w	r8, r8, #1
 8006844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006848:	e7e5      	b.n	8006816 <__kernel_rem_pio2+0x3ce>
 800684a:	f1cb 0000 	rsb	r0, fp, #0
 800684e:	ec47 6b10 	vmov	d0, r6, r7
 8006852:	f000 f951 	bl	8006af8 <scalbn>
 8006856:	ec55 4b10 	vmov	r4, r5, d0
 800685a:	4b9d      	ldr	r3, [pc, #628]	@ (8006ad0 <__kernel_rem_pio2+0x688>)
 800685c:	2200      	movs	r2, #0
 800685e:	4620      	mov	r0, r4
 8006860:	4629      	mov	r1, r5
 8006862:	f7fa f94f 	bl	8000b04 <__aeabi_dcmpge>
 8006866:	b300      	cbz	r0, 80068aa <__kernel_rem_pio2+0x462>
 8006868:	4b9a      	ldr	r3, [pc, #616]	@ (8006ad4 <__kernel_rem_pio2+0x68c>)
 800686a:	2200      	movs	r2, #0
 800686c:	4620      	mov	r0, r4
 800686e:	4629      	mov	r1, r5
 8006870:	f7f9 fec2 	bl	80005f8 <__aeabi_dmul>
 8006874:	f7fa f970 	bl	8000b58 <__aeabi_d2iz>
 8006878:	4606      	mov	r6, r0
 800687a:	f7f9 fe53 	bl	8000524 <__aeabi_i2d>
 800687e:	4b94      	ldr	r3, [pc, #592]	@ (8006ad0 <__kernel_rem_pio2+0x688>)
 8006880:	2200      	movs	r2, #0
 8006882:	f7f9 feb9 	bl	80005f8 <__aeabi_dmul>
 8006886:	460b      	mov	r3, r1
 8006888:	4602      	mov	r2, r0
 800688a:	4629      	mov	r1, r5
 800688c:	4620      	mov	r0, r4
 800688e:	f7f9 fcfb 	bl	8000288 <__aeabi_dsub>
 8006892:	f7fa f961 	bl	8000b58 <__aeabi_d2iz>
 8006896:	ab0c      	add	r3, sp, #48	@ 0x30
 8006898:	f10b 0b18 	add.w	fp, fp, #24
 800689c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80068a0:	f108 0801 	add.w	r8, r8, #1
 80068a4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80068a8:	e722      	b.n	80066f0 <__kernel_rem_pio2+0x2a8>
 80068aa:	4620      	mov	r0, r4
 80068ac:	4629      	mov	r1, r5
 80068ae:	f7fa f953 	bl	8000b58 <__aeabi_d2iz>
 80068b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80068b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80068b8:	e71a      	b.n	80066f0 <__kernel_rem_pio2+0x2a8>
 80068ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80068bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80068c0:	f7f9 fe30 	bl	8000524 <__aeabi_i2d>
 80068c4:	4622      	mov	r2, r4
 80068c6:	462b      	mov	r3, r5
 80068c8:	f7f9 fe96 	bl	80005f8 <__aeabi_dmul>
 80068cc:	4652      	mov	r2, sl
 80068ce:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80068d2:	465b      	mov	r3, fp
 80068d4:	4620      	mov	r0, r4
 80068d6:	4629      	mov	r1, r5
 80068d8:	f7f9 fe8e 	bl	80005f8 <__aeabi_dmul>
 80068dc:	3e01      	subs	r6, #1
 80068de:	4604      	mov	r4, r0
 80068e0:	460d      	mov	r5, r1
 80068e2:	e718      	b.n	8006716 <__kernel_rem_pio2+0x2ce>
 80068e4:	9906      	ldr	r1, [sp, #24]
 80068e6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80068ea:	9106      	str	r1, [sp, #24]
 80068ec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80068f0:	f7f9 fe82 	bl	80005f8 <__aeabi_dmul>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4650      	mov	r0, sl
 80068fa:	4659      	mov	r1, fp
 80068fc:	f7f9 fcc6 	bl	800028c <__adddf3>
 8006900:	3601      	adds	r6, #1
 8006902:	4682      	mov	sl, r0
 8006904:	468b      	mov	fp, r1
 8006906:	9b00      	ldr	r3, [sp, #0]
 8006908:	429e      	cmp	r6, r3
 800690a:	dc01      	bgt.n	8006910 <__kernel_rem_pio2+0x4c8>
 800690c:	42b5      	cmp	r5, r6
 800690e:	dae9      	bge.n	80068e4 <__kernel_rem_pio2+0x49c>
 8006910:	ab48      	add	r3, sp, #288	@ 0x120
 8006912:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006916:	e9c5 ab00 	strd	sl, fp, [r5]
 800691a:	3c01      	subs	r4, #1
 800691c:	e6ff      	b.n	800671e <__kernel_rem_pio2+0x2d6>
 800691e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006920:	2b02      	cmp	r3, #2
 8006922:	dc0b      	bgt.n	800693c <__kernel_rem_pio2+0x4f4>
 8006924:	2b00      	cmp	r3, #0
 8006926:	dc39      	bgt.n	800699c <__kernel_rem_pio2+0x554>
 8006928:	d05d      	beq.n	80069e6 <__kernel_rem_pio2+0x59e>
 800692a:	9b02      	ldr	r3, [sp, #8]
 800692c:	f003 0007 	and.w	r0, r3, #7
 8006930:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006934:	ecbd 8b02 	vpop	{d8}
 8006938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800693e:	2b03      	cmp	r3, #3
 8006940:	d1f3      	bne.n	800692a <__kernel_rem_pio2+0x4e2>
 8006942:	9b05      	ldr	r3, [sp, #20]
 8006944:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006948:	eb0d 0403 	add.w	r4, sp, r3
 800694c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006950:	4625      	mov	r5, r4
 8006952:	46c2      	mov	sl, r8
 8006954:	f1ba 0f00 	cmp.w	sl, #0
 8006958:	f1a5 0508 	sub.w	r5, r5, #8
 800695c:	dc6b      	bgt.n	8006a36 <__kernel_rem_pio2+0x5ee>
 800695e:	4645      	mov	r5, r8
 8006960:	2d01      	cmp	r5, #1
 8006962:	f1a4 0408 	sub.w	r4, r4, #8
 8006966:	f300 8087 	bgt.w	8006a78 <__kernel_rem_pio2+0x630>
 800696a:	9c05      	ldr	r4, [sp, #20]
 800696c:	ab48      	add	r3, sp, #288	@ 0x120
 800696e:	441c      	add	r4, r3
 8006970:	2000      	movs	r0, #0
 8006972:	2100      	movs	r1, #0
 8006974:	f1b8 0f01 	cmp.w	r8, #1
 8006978:	f300 809c 	bgt.w	8006ab4 <__kernel_rem_pio2+0x66c>
 800697c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8006980:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8006984:	f1b9 0f00 	cmp.w	r9, #0
 8006988:	f040 80a6 	bne.w	8006ad8 <__kernel_rem_pio2+0x690>
 800698c:	9b04      	ldr	r3, [sp, #16]
 800698e:	e9c3 7800 	strd	r7, r8, [r3]
 8006992:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006996:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800699a:	e7c6      	b.n	800692a <__kernel_rem_pio2+0x4e2>
 800699c:	9d05      	ldr	r5, [sp, #20]
 800699e:	ab48      	add	r3, sp, #288	@ 0x120
 80069a0:	441d      	add	r5, r3
 80069a2:	4644      	mov	r4, r8
 80069a4:	2000      	movs	r0, #0
 80069a6:	2100      	movs	r1, #0
 80069a8:	2c00      	cmp	r4, #0
 80069aa:	da35      	bge.n	8006a18 <__kernel_rem_pio2+0x5d0>
 80069ac:	f1b9 0f00 	cmp.w	r9, #0
 80069b0:	d038      	beq.n	8006a24 <__kernel_rem_pio2+0x5dc>
 80069b2:	4602      	mov	r2, r0
 80069b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80069b8:	9c04      	ldr	r4, [sp, #16]
 80069ba:	e9c4 2300 	strd	r2, r3, [r4]
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80069c6:	f7f9 fc5f 	bl	8000288 <__aeabi_dsub>
 80069ca:	ad4a      	add	r5, sp, #296	@ 0x128
 80069cc:	2401      	movs	r4, #1
 80069ce:	45a0      	cmp	r8, r4
 80069d0:	da2b      	bge.n	8006a2a <__kernel_rem_pio2+0x5e2>
 80069d2:	f1b9 0f00 	cmp.w	r9, #0
 80069d6:	d002      	beq.n	80069de <__kernel_rem_pio2+0x596>
 80069d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80069dc:	4619      	mov	r1, r3
 80069de:	9b04      	ldr	r3, [sp, #16]
 80069e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80069e4:	e7a1      	b.n	800692a <__kernel_rem_pio2+0x4e2>
 80069e6:	9c05      	ldr	r4, [sp, #20]
 80069e8:	ab48      	add	r3, sp, #288	@ 0x120
 80069ea:	441c      	add	r4, r3
 80069ec:	2000      	movs	r0, #0
 80069ee:	2100      	movs	r1, #0
 80069f0:	f1b8 0f00 	cmp.w	r8, #0
 80069f4:	da09      	bge.n	8006a0a <__kernel_rem_pio2+0x5c2>
 80069f6:	f1b9 0f00 	cmp.w	r9, #0
 80069fa:	d002      	beq.n	8006a02 <__kernel_rem_pio2+0x5ba>
 80069fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006a00:	4619      	mov	r1, r3
 8006a02:	9b04      	ldr	r3, [sp, #16]
 8006a04:	e9c3 0100 	strd	r0, r1, [r3]
 8006a08:	e78f      	b.n	800692a <__kernel_rem_pio2+0x4e2>
 8006a0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006a0e:	f7f9 fc3d 	bl	800028c <__adddf3>
 8006a12:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a16:	e7eb      	b.n	80069f0 <__kernel_rem_pio2+0x5a8>
 8006a18:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006a1c:	f7f9 fc36 	bl	800028c <__adddf3>
 8006a20:	3c01      	subs	r4, #1
 8006a22:	e7c1      	b.n	80069a8 <__kernel_rem_pio2+0x560>
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	e7c6      	b.n	80069b8 <__kernel_rem_pio2+0x570>
 8006a2a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006a2e:	f7f9 fc2d 	bl	800028c <__adddf3>
 8006a32:	3401      	adds	r4, #1
 8006a34:	e7cb      	b.n	80069ce <__kernel_rem_pio2+0x586>
 8006a36:	ed95 7b00 	vldr	d7, [r5]
 8006a3a:	ed8d 7b00 	vstr	d7, [sp]
 8006a3e:	ed95 7b02 	vldr	d7, [r5, #8]
 8006a42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a46:	ec53 2b17 	vmov	r2, r3, d7
 8006a4a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006a4e:	f7f9 fc1d 	bl	800028c <__adddf3>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4606      	mov	r6, r0
 8006a58:	460f      	mov	r7, r1
 8006a5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a5e:	f7f9 fc13 	bl	8000288 <__aeabi_dsub>
 8006a62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a66:	f7f9 fc11 	bl	800028c <__adddf3>
 8006a6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a6e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006a72:	e9c5 6700 	strd	r6, r7, [r5]
 8006a76:	e76d      	b.n	8006954 <__kernel_rem_pio2+0x50c>
 8006a78:	ed94 7b00 	vldr	d7, [r4]
 8006a7c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006a80:	ec51 0b17 	vmov	r0, r1, d7
 8006a84:	4652      	mov	r2, sl
 8006a86:	465b      	mov	r3, fp
 8006a88:	ed8d 7b00 	vstr	d7, [sp]
 8006a8c:	f7f9 fbfe 	bl	800028c <__adddf3>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4606      	mov	r6, r0
 8006a96:	460f      	mov	r7, r1
 8006a98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a9c:	f7f9 fbf4 	bl	8000288 <__aeabi_dsub>
 8006aa0:	4652      	mov	r2, sl
 8006aa2:	465b      	mov	r3, fp
 8006aa4:	f7f9 fbf2 	bl	800028c <__adddf3>
 8006aa8:	3d01      	subs	r5, #1
 8006aaa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006aae:	e9c4 6700 	strd	r6, r7, [r4]
 8006ab2:	e755      	b.n	8006960 <__kernel_rem_pio2+0x518>
 8006ab4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006ab8:	f7f9 fbe8 	bl	800028c <__adddf3>
 8006abc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ac0:	e758      	b.n	8006974 <__kernel_rem_pio2+0x52c>
 8006ac2:	bf00      	nop
 8006ac4:	f3af 8000 	nop.w
	...
 8006ad0:	41700000 	.word	0x41700000
 8006ad4:	3e700000 	.word	0x3e700000
 8006ad8:	9b04      	ldr	r3, [sp, #16]
 8006ada:	9a04      	ldr	r2, [sp, #16]
 8006adc:	601f      	str	r7, [r3, #0]
 8006ade:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006ae2:	605c      	str	r4, [r3, #4]
 8006ae4:	609d      	str	r5, [r3, #8]
 8006ae6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006aea:	60d3      	str	r3, [r2, #12]
 8006aec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006af0:	6110      	str	r0, [r2, #16]
 8006af2:	6153      	str	r3, [r2, #20]
 8006af4:	e719      	b.n	800692a <__kernel_rem_pio2+0x4e2>
 8006af6:	bf00      	nop

08006af8 <scalbn>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	ec55 4b10 	vmov	r4, r5, d0
 8006afe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006b02:	4606      	mov	r6, r0
 8006b04:	462b      	mov	r3, r5
 8006b06:	b991      	cbnz	r1, 8006b2e <scalbn+0x36>
 8006b08:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006b0c:	4323      	orrs	r3, r4
 8006b0e:	d03d      	beq.n	8006b8c <scalbn+0x94>
 8006b10:	4b35      	ldr	r3, [pc, #212]	@ (8006be8 <scalbn+0xf0>)
 8006b12:	4620      	mov	r0, r4
 8006b14:	4629      	mov	r1, r5
 8006b16:	2200      	movs	r2, #0
 8006b18:	f7f9 fd6e 	bl	80005f8 <__aeabi_dmul>
 8006b1c:	4b33      	ldr	r3, [pc, #204]	@ (8006bec <scalbn+0xf4>)
 8006b1e:	429e      	cmp	r6, r3
 8006b20:	4604      	mov	r4, r0
 8006b22:	460d      	mov	r5, r1
 8006b24:	da0f      	bge.n	8006b46 <scalbn+0x4e>
 8006b26:	a328      	add	r3, pc, #160	@ (adr r3, 8006bc8 <scalbn+0xd0>)
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	e01e      	b.n	8006b6c <scalbn+0x74>
 8006b2e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006b32:	4291      	cmp	r1, r2
 8006b34:	d10b      	bne.n	8006b4e <scalbn+0x56>
 8006b36:	4622      	mov	r2, r4
 8006b38:	4620      	mov	r0, r4
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	f7f9 fba6 	bl	800028c <__adddf3>
 8006b40:	4604      	mov	r4, r0
 8006b42:	460d      	mov	r5, r1
 8006b44:	e022      	b.n	8006b8c <scalbn+0x94>
 8006b46:	460b      	mov	r3, r1
 8006b48:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006b4c:	3936      	subs	r1, #54	@ 0x36
 8006b4e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006b52:	4296      	cmp	r6, r2
 8006b54:	dd0d      	ble.n	8006b72 <scalbn+0x7a>
 8006b56:	2d00      	cmp	r5, #0
 8006b58:	a11d      	add	r1, pc, #116	@ (adr r1, 8006bd0 <scalbn+0xd8>)
 8006b5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b5e:	da02      	bge.n	8006b66 <scalbn+0x6e>
 8006b60:	a11d      	add	r1, pc, #116	@ (adr r1, 8006bd8 <scalbn+0xe0>)
 8006b62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b66:	a31a      	add	r3, pc, #104	@ (adr r3, 8006bd0 <scalbn+0xd8>)
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f7f9 fd44 	bl	80005f8 <__aeabi_dmul>
 8006b70:	e7e6      	b.n	8006b40 <scalbn+0x48>
 8006b72:	1872      	adds	r2, r6, r1
 8006b74:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006b78:	428a      	cmp	r2, r1
 8006b7a:	dcec      	bgt.n	8006b56 <scalbn+0x5e>
 8006b7c:	2a00      	cmp	r2, #0
 8006b7e:	dd08      	ble.n	8006b92 <scalbn+0x9a>
 8006b80:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006b84:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006b88:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006b8c:	ec45 4b10 	vmov	d0, r4, r5
 8006b90:	bd70      	pop	{r4, r5, r6, pc}
 8006b92:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006b96:	da08      	bge.n	8006baa <scalbn+0xb2>
 8006b98:	2d00      	cmp	r5, #0
 8006b9a:	a10b      	add	r1, pc, #44	@ (adr r1, 8006bc8 <scalbn+0xd0>)
 8006b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ba0:	dac1      	bge.n	8006b26 <scalbn+0x2e>
 8006ba2:	a10f      	add	r1, pc, #60	@ (adr r1, 8006be0 <scalbn+0xe8>)
 8006ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ba8:	e7bd      	b.n	8006b26 <scalbn+0x2e>
 8006baa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006bae:	3236      	adds	r2, #54	@ 0x36
 8006bb0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006bb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006bb8:	4620      	mov	r0, r4
 8006bba:	4b0d      	ldr	r3, [pc, #52]	@ (8006bf0 <scalbn+0xf8>)
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	e7d4      	b.n	8006b6c <scalbn+0x74>
 8006bc2:	bf00      	nop
 8006bc4:	f3af 8000 	nop.w
 8006bc8:	c2f8f359 	.word	0xc2f8f359
 8006bcc:	01a56e1f 	.word	0x01a56e1f
 8006bd0:	8800759c 	.word	0x8800759c
 8006bd4:	7e37e43c 	.word	0x7e37e43c
 8006bd8:	8800759c 	.word	0x8800759c
 8006bdc:	fe37e43c 	.word	0xfe37e43c
 8006be0:	c2f8f359 	.word	0xc2f8f359
 8006be4:	81a56e1f 	.word	0x81a56e1f
 8006be8:	43500000 	.word	0x43500000
 8006bec:	ffff3cb0 	.word	0xffff3cb0
 8006bf0:	3c900000 	.word	0x3c900000
 8006bf4:	00000000 	.word	0x00000000

08006bf8 <floor>:
 8006bf8:	ec51 0b10 	vmov	r0, r1, d0
 8006bfc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c04:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006c08:	2e13      	cmp	r6, #19
 8006c0a:	460c      	mov	r4, r1
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	4680      	mov	r8, r0
 8006c10:	dc34      	bgt.n	8006c7c <floor+0x84>
 8006c12:	2e00      	cmp	r6, #0
 8006c14:	da17      	bge.n	8006c46 <floor+0x4e>
 8006c16:	a332      	add	r3, pc, #200	@ (adr r3, 8006ce0 <floor+0xe8>)
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	f7f9 fb36 	bl	800028c <__adddf3>
 8006c20:	2200      	movs	r2, #0
 8006c22:	2300      	movs	r3, #0
 8006c24:	f7f9 ff78 	bl	8000b18 <__aeabi_dcmpgt>
 8006c28:	b150      	cbz	r0, 8006c40 <floor+0x48>
 8006c2a:	2c00      	cmp	r4, #0
 8006c2c:	da55      	bge.n	8006cda <floor+0xe2>
 8006c2e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006c32:	432c      	orrs	r4, r5
 8006c34:	2500      	movs	r5, #0
 8006c36:	42ac      	cmp	r4, r5
 8006c38:	4c2b      	ldr	r4, [pc, #172]	@ (8006ce8 <floor+0xf0>)
 8006c3a:	bf08      	it	eq
 8006c3c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006c40:	4621      	mov	r1, r4
 8006c42:	4628      	mov	r0, r5
 8006c44:	e023      	b.n	8006c8e <floor+0x96>
 8006c46:	4f29      	ldr	r7, [pc, #164]	@ (8006cec <floor+0xf4>)
 8006c48:	4137      	asrs	r7, r6
 8006c4a:	ea01 0307 	and.w	r3, r1, r7
 8006c4e:	4303      	orrs	r3, r0
 8006c50:	d01d      	beq.n	8006c8e <floor+0x96>
 8006c52:	a323      	add	r3, pc, #140	@ (adr r3, 8006ce0 <floor+0xe8>)
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	f7f9 fb18 	bl	800028c <__adddf3>
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f7f9 ff5a 	bl	8000b18 <__aeabi_dcmpgt>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d0eb      	beq.n	8006c40 <floor+0x48>
 8006c68:	2c00      	cmp	r4, #0
 8006c6a:	bfbe      	ittt	lt
 8006c6c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006c70:	4133      	asrlt	r3, r6
 8006c72:	18e4      	addlt	r4, r4, r3
 8006c74:	ea24 0407 	bic.w	r4, r4, r7
 8006c78:	2500      	movs	r5, #0
 8006c7a:	e7e1      	b.n	8006c40 <floor+0x48>
 8006c7c:	2e33      	cmp	r6, #51	@ 0x33
 8006c7e:	dd0a      	ble.n	8006c96 <floor+0x9e>
 8006c80:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006c84:	d103      	bne.n	8006c8e <floor+0x96>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	f7f9 faff 	bl	800028c <__adddf3>
 8006c8e:	ec41 0b10 	vmov	d0, r0, r1
 8006c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c96:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006c9a:	f04f 37ff 	mov.w	r7, #4294967295
 8006c9e:	40df      	lsrs	r7, r3
 8006ca0:	4207      	tst	r7, r0
 8006ca2:	d0f4      	beq.n	8006c8e <floor+0x96>
 8006ca4:	a30e      	add	r3, pc, #56	@ (adr r3, 8006ce0 <floor+0xe8>)
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	f7f9 faef 	bl	800028c <__adddf3>
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f7f9 ff31 	bl	8000b18 <__aeabi_dcmpgt>
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d0c2      	beq.n	8006c40 <floor+0x48>
 8006cba:	2c00      	cmp	r4, #0
 8006cbc:	da0a      	bge.n	8006cd4 <floor+0xdc>
 8006cbe:	2e14      	cmp	r6, #20
 8006cc0:	d101      	bne.n	8006cc6 <floor+0xce>
 8006cc2:	3401      	adds	r4, #1
 8006cc4:	e006      	b.n	8006cd4 <floor+0xdc>
 8006cc6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006cca:	2301      	movs	r3, #1
 8006ccc:	40b3      	lsls	r3, r6
 8006cce:	441d      	add	r5, r3
 8006cd0:	4545      	cmp	r5, r8
 8006cd2:	d3f6      	bcc.n	8006cc2 <floor+0xca>
 8006cd4:	ea25 0507 	bic.w	r5, r5, r7
 8006cd8:	e7b2      	b.n	8006c40 <floor+0x48>
 8006cda:	2500      	movs	r5, #0
 8006cdc:	462c      	mov	r4, r5
 8006cde:	e7af      	b.n	8006c40 <floor+0x48>
 8006ce0:	8800759c 	.word	0x8800759c
 8006ce4:	7e37e43c 	.word	0x7e37e43c
 8006ce8:	bff00000 	.word	0xbff00000
 8006cec:	000fffff 	.word	0x000fffff

08006cf0 <_init>:
 8006cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf2:	bf00      	nop
 8006cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cf6:	bc08      	pop	{r3}
 8006cf8:	469e      	mov	lr, r3
 8006cfa:	4770      	bx	lr

08006cfc <_fini>:
 8006cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfe:	bf00      	nop
 8006d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d02:	bc08      	pop	{r3}
 8006d04:	469e      	mov	lr, r3
 8006d06:	4770      	bx	lr
