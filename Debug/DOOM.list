
DOOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004010  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  080041a0  080041a0  000051a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045b8  080045b8  00006058  2**0
                  CONTENTS
  4 .ARM          00000008  080045b8  080045b8  000055b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045c0  080045c0  00006058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045c0  080045c0  000055c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045c4  080045c4  000055c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  080045c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006058  2**0
                  CONTENTS
 10 .bss          0000016c  20000058  20000058  00006058  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001c4  200001c4  00006058  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006058  2**0
                  CONTENTS, READONLY
 13 .debug_info   000044e3  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012de  00000000  00000000  0000a56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000618  00000000  00000000  0000b850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000474  00000000  00000000  0000be68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3fa  00000000  00000000  0000c2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000076d4  00000000  00000000  000276d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f933  00000000  00000000  0002edaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ce6dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c28  00000000  00000000  000ce720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  000d0348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000058 	.word	0x20000058
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004188 	.word	0x08004188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	08004188 	.word	0x08004188

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000288:	4b08      	ldr	r3, [pc, #32]	@ (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800028a:	695a      	ldr	r2, [r3, #20]
 800028c:	4907      	ldr	r1, [pc, #28]	@ (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4313      	orrs	r3, r2
 8000292:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000294:	4b05      	ldr	r3, [pc, #20]	@ (80002ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000296:	695a      	ldr	r2, [r3, #20]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4013      	ands	r3, r2
 800029c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800029e:	68fb      	ldr	r3, [r7, #12]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	40021000 	.word	0x40021000

080002b0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	683a      	ldr	r2, [r7, #0]
 80002be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	463b      	mov	r3, r7
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
 80002e0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80002e2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80002e6:	f7ff ffcb 	bl	8000280 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80002ea:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80002ee:	f7ff ffc7 	bl	8000280 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4);
 80002f2:	2118      	movs	r1, #24
 80002f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002f8:	f7ff ffda 	bl	80002b0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7);
 80002fc:	21f0      	movs	r1, #240	@ 0xf0
 80002fe:	4813      	ldr	r0, [pc, #76]	@ (800034c <MX_GPIO_Init+0x80>)
 8000300:	f7ff ffd6 	bl	80002b0 <LL_GPIO_ResetOutputPin>

  /**/

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 8000304:	2318      	movs	r3, #24
 8000306:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000308:	2301      	movs	r3, #1
 800030a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800030c:	2303      	movs	r3, #3
 800030e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000314:	2300      	movs	r3, #0
 8000316:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000318:	463b      	mov	r3, r7
 800031a:	4619      	mov	r1, r3
 800031c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000320:	f003 f935 	bl	800358e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000324:	23f0      	movs	r3, #240	@ 0xf0
 8000326:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000328:	2301      	movs	r3, #1
 800032a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800032c:	2303      	movs	r3, #3
 800032e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000334:	2300      	movs	r3, #0
 8000336:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000338:	463b      	mov	r3, r7
 800033a:	4619      	mov	r1, r3
 800033c:	4803      	ldr	r0, [pc, #12]	@ (800034c <MX_GPIO_Init+0x80>)
 800033e:	f003 f926 	bl	800358e <LL_GPIO_Init>

}
 8000342:	bf00      	nop
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	48000400 	.word	0x48000400

08000350 <lcdReset>:

// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	res_reset();
 8000354:	f002 ff58 	bl	8003208 <res_reset>
	LL_mDelay(100);
 8000358:	2064      	movs	r0, #100	@ 0x64
 800035a:	f003 fa3f 	bl	80037dc <LL_mDelay>

	res_set();
 800035e:	f002 ff4a 	bl	80031f6 <res_set>
	LL_mDelay(100);
 8000362:	2064      	movs	r0, #100	@ 0x64
 8000364:	f003 fa3a 	bl	80037dc <LL_mDelay>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}

0800036c <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address) //urcuje obsah nasledujucich write data/parameter
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
	cd_reset();
 8000376:	f002 ff2d 	bl	80031d4 <cd_reset>
	cs_reset();
 800037a:	f002 ff0f 	bl	800319c <cs_reset>
	readWriteSPI1(address);
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	4618      	mov	r0, r3
 8000382:	f002 fed7 	bl	8003134 <readWriteSPI1>
	cs_set();
 8000386:	f002 feff 	bl	8003188 <cs_set>
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}

08000392 <lcdWriteParameter>:

void lcdWriteParameter(int16_t parameter) //tymto sa zapisuju rozne veci
{
 8000392:	b580      	push	{r7, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	af00      	add	r7, sp, #0
 8000398:	4603      	mov	r3, r0
 800039a:	80fb      	strh	r3, [r7, #6]
	cd_set();
 800039c:	f002 ff10 	bl	80031c0 <cd_set>
	cs_reset();
 80003a0:	f002 fefc 	bl	800319c <cs_reset>
	readWriteSPI1(parameter); //original
 80003a4:	88fb      	ldrh	r3, [r7, #6]
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	4618      	mov	r0, r3
 80003aa:	f002 fec3 	bl	8003134 <readWriteSPI1>
	}
	else {
		 //If parameter is 8 bits or less, send it directly
		readWriteSPI1((uint8_t)(parameter & 0xFF));
	}*/
	cs_set();
 80003ae:	f002 feeb 	bl	8003188 <cs_set>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2)  //tymto sa zapisuje farba
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
 80003c0:	4603      	mov	r3, r0
 80003c2:	460a      	mov	r2, r1
 80003c4:	71fb      	strb	r3, [r7, #7]
 80003c6:	4613      	mov	r3, r2
 80003c8:	71bb      	strb	r3, [r7, #6]
	cd_set();
 80003ca:	f002 fef9 	bl	80031c0 <cd_set>
	cs_reset();
 80003ce:	f002 fee5 	bl	800319c <cs_reset>
	readWriteSPI1(dataByte1); //posielame samostatne dva bajty o farbe
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	4618      	mov	r0, r3
 80003d6:	f002 fead 	bl	8003134 <readWriteSPI1>
	readWriteSPI1(dataByte2);
 80003da:	79bb      	ldrb	r3, [r7, #6]
 80003dc:	4618      	mov	r0, r3
 80003de:	f002 fea9 	bl	8003134 <readWriteSPI1>
	cs_set();
 80003e2:	f002 fed1 	bl	8003188 <cs_set>
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <lcdInitialise>:

void lcdInitialise(uint8_t orientation)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	4603      	mov	r3, r0
 80003f6:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD


	// Hardware reset the LCD
	lcdReset();
 80003f8:	f7ff ffaa 	bl	8000350 <lcdReset>

    lcdWriteCommand(EXIT_SLEEP_MODE);
 80003fc:	2011      	movs	r0, #17
 80003fe:	f7ff ffb5 	bl	800036c <lcdWriteCommand>
    LL_mDelay(100); //Delay(10000); // Wait for the screen to wake up
 8000402:	2064      	movs	r0, #100	@ 0x64
 8000404:	f003 f9ea 	bl	80037dc <LL_mDelay>

    lcdWriteCommand(SET_PIXEL_FORMAT);
 8000408:	203a      	movs	r0, #58	@ 0x3a
 800040a:	f7ff ffaf 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x05); // 16 bits per pixel
 800040e:	2005      	movs	r0, #5
 8000410:	f7ff ffbf 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(SET_GAMMA_CURVE);
 8000414:	2026      	movs	r0, #38	@ 0x26
 8000416:	f7ff ffa9 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x04); // Select gamma curve 3
 800041a:	2004      	movs	r0, #4
 800041c:	f7ff ffb9 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(GAM_R_SEL);
 8000420:	20f2      	movs	r0, #242	@ 0xf2
 8000422:	f7ff ffa3 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x01); // Gamma adjustment enabled
 8000426:	2001      	movs	r0, #1
 8000428:	f7ff ffb3 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 800042c:	20e0      	movs	r0, #224	@ 0xe0
 800042e:	f7ff ff9d 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x3f); // 1st Parameter
 8000432:	203f      	movs	r0, #63	@ 0x3f
 8000434:	f7ff ffad 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x25); // 2nd Parameter
 8000438:	2025      	movs	r0, #37	@ 0x25
 800043a:	f7ff ffaa 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x1c); // 3rd Parameter
 800043e:	201c      	movs	r0, #28
 8000440:	f7ff ffa7 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x1e); // 4th Parameter
 8000444:	201e      	movs	r0, #30
 8000446:	f7ff ffa4 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 5th Parameter
 800044a:	2020      	movs	r0, #32
 800044c:	f7ff ffa1 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x12); // 6th Parameter
 8000450:	2012      	movs	r0, #18
 8000452:	f7ff ff9e 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 7th Parameter
 8000456:	202a      	movs	r0, #42	@ 0x2a
 8000458:	f7ff ff9b 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x90); // 8th Parameter
 800045c:	2090      	movs	r0, #144	@ 0x90
 800045e:	f7ff ff98 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x24); // 9th Parameter
 8000462:	2024      	movs	r0, #36	@ 0x24
 8000464:	f7ff ff95 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x11); // 10th Parameter
 8000468:	2011      	movs	r0, #17
 800046a:	f7ff ff92 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 11th Parameter
 800046e:	2000      	movs	r0, #0
 8000470:	f7ff ff8f 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 12th Parameter
 8000474:	2000      	movs	r0, #0
 8000476:	f7ff ff8c 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 13th Parameter
 800047a:	2000      	movs	r0, #0
 800047c:	f7ff ff89 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 14th Parameter
 8000480:	2000      	movs	r0, #0
 8000482:	f7ff ff86 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 15th Parameter
 8000486:	2000      	movs	r0, #0
 8000488:	f7ff ff83 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 800048c:	20e1      	movs	r0, #225	@ 0xe1
 800048e:	f7ff ff6d 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x20); // 1st Parameter
 8000492:	2020      	movs	r0, #32
 8000494:	f7ff ff7d 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 2nd Parameter
 8000498:	2020      	movs	r0, #32
 800049a:	f7ff ff7a 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 3rd Parameter
 800049e:	2020      	movs	r0, #32
 80004a0:	f7ff ff77 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x20); // 4th Parameter
 80004a4:	2020      	movs	r0, #32
 80004a6:	f7ff ff74 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x05); // 5th Parameter
 80004aa:	2005      	movs	r0, #5
 80004ac:	f7ff ff71 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00); // 6th Parameter
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff ff6e 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x15); // 7th Parameter
 80004b6:	2015      	movs	r0, #21
 80004b8:	f7ff ff6b 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0xa7); // 8th Parameter
 80004bc:	20a7      	movs	r0, #167	@ 0xa7
 80004be:	f7ff ff68 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x3d); // 9th Parameter
 80004c2:	203d      	movs	r0, #61	@ 0x3d
 80004c4:	f7ff ff65 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x18); // 10th Parameter
 80004c8:	2018      	movs	r0, #24
 80004ca:	f7ff ff62 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x25); // 11th Parameter
 80004ce:	2025      	movs	r0, #37	@ 0x25
 80004d0:	f7ff ff5f 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 12th Parameter
 80004d4:	202a      	movs	r0, #42	@ 0x2a
 80004d6:	f7ff ff5c 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 13th Parameter
 80004da:	202b      	movs	r0, #43	@ 0x2b
 80004dc:	f7ff ff59 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 14th Parameter
 80004e0:	202b      	movs	r0, #43	@ 0x2b
 80004e2:	f7ff ff56 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x3a); // 15th Parameter
 80004e6:	203a      	movs	r0, #58	@ 0x3a
 80004e8:	f7ff ff53 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(FRAME_RATE_CONTROL1);
 80004ec:	20b1      	movs	r0, #177	@ 0xb1
 80004ee:	f7ff ff3d 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x08); // DIVA = 8
 80004f2:	2008      	movs	r0, #8
 80004f4:	f7ff ff4d 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x08); // VPA = 8
 80004f8:	2008      	movs	r0, #8
 80004fa:	f7ff ff4a 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(DISPLAY_INVERSION);
 80004fe:	20b4      	movs	r0, #180	@ 0xb4
 8000500:	f7ff ff34 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8000504:	2007      	movs	r0, #7
 8000506:	f7ff ff44 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL1);
 800050a:	20c0      	movs	r0, #192	@ 0xc0
 800050c:	f7ff ff2e 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 8000510:	200a      	movs	r0, #10
 8000512:	f7ff ff3e 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 8000516:	2002      	movs	r0, #2
 8000518:	f7ff ff3b 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL2);
 800051c:	20c1      	movs	r0, #193	@ 0xc1
 800051e:	f7ff ff25 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 8000522:	2002      	movs	r0, #2
 8000524:	f7ff ff35 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(VCOM_CONTROL1);
 8000528:	20c5      	movs	r0, #197	@ 0xc5
 800052a:	f7ff ff1f 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 800052e:	2050      	movs	r0, #80	@ 0x50
 8000530:	f7ff ff2f 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 8000534:	205b      	movs	r0, #91	@ 0x5b
 8000536:	f7ff ff2c 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(VCOM_OFFSET_CONTROL);
 800053a:	20c7      	movs	r0, #199	@ 0xc7
 800053c:	f7ff ff16 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 8000540:	2040      	movs	r0, #64	@ 0x40
 8000542:	f7ff ff26 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(SET_COLUMN_ADDRESS);
 8000546:	202a      	movs	r0, #42	@ 0x2a
 8000548:	f7ff ff10 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x00); // XSH
 800054c:	2000      	movs	r0, #0
 800054e:	f7ff ff20 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00); // XSL
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ff1d 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x01); // End Column High Byte
 8000558:	2001      	movs	r0, #1
 800055a:	f7ff ff1a 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x3F); // End Column Low Byte 319
 800055e:	203f      	movs	r0, #63	@ 0x3f
 8000560:	f7ff ff17 	bl	8000392 <lcdWriteParameter>

    lcdWriteCommand(SET_PAGE_ADDRESS);
 8000564:	202b      	movs	r0, #43	@ 0x2b
 8000566:	f7ff ff01 	bl	800036c <lcdWriteCommand>
    lcdWriteParameter(0x00);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff ff11 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff ff0e 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0x00); // End Page High Byte
 8000576:	2000      	movs	r0, #0
 8000578:	f7ff ff0b 	bl	8000392 <lcdWriteParameter>
    lcdWriteParameter(0xEF); // End Page Low Byte (239, 0x00EF in hex)
 800057c:	20ef      	movs	r0, #239	@ 0xef
 800057e:	f7ff ff08 	bl	8000392 <lcdWriteParameter>

	// Select display orientation
    lcdWriteCommand(SET_ADDRESS_MODE);
 8000582:	2036      	movs	r0, #54	@ 0x36
 8000584:	f7ff fef2 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(orientation);
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	b21b      	sxth	r3, r3
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ff00 	bl	8000392 <lcdWriteParameter>

	// Set the display to on
    lcdWriteCommand(SET_DISPLAY_ON);
 8000592:	2029      	movs	r0, #41	@ 0x29
 8000594:	f7ff feea 	bl	800036c <lcdWriteCommand>
    lcdWriteCommand(WRITE_MEMORY_START);
 8000598:	202c      	movs	r0, #44	@ 0x2c
 800059a:	f7ff fee7 	bl	800036c <lcdWriteCommand>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <lcdPlot>:
	}
}

// changing a single pixel on display
void lcdPlot(int16_t x, int16_t y, uint16_t colour)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	4603      	mov	r3, r0
 80005ae:	80fb      	strh	r3, [r7, #6]
 80005b0:	460b      	mov	r3, r1
 80005b2:	80bb      	strh	r3, [r7, #4]
 80005b4:	4613      	mov	r3, r2
 80005b6:	807b      	strh	r3, [r7, #2]
	// Horizontal Address Start Position
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 80005b8:	202a      	movs	r0, #42	@ 0x2a
 80005ba:	f7ff fed7 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80005be:	2000      	movs	r0, #0
 80005c0:	f7ff fee7 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(x);
 80005c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fee2 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f7ff fedf 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x013F);//319
 80005d4:	f240 103f 	movw	r0, #319	@ 0x13f
 80005d8:	f7ff fedb 	bl	8000392 <lcdWriteParameter>

	// Vertical Address end Position
	lcdWriteCommand(SET_PAGE_ADDRESS);
 80005dc:	202b      	movs	r0, #43	@ 0x2b
 80005de:	f7ff fec5 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff fed5 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(y);
 80005e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fed0 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f7ff fecd 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0xEF);//239
 80005f8:	20ef      	movs	r0, #239	@ 0xef
 80005fa:	f7ff feca 	bl	8000392 <lcdWriteParameter>

	// Plot the point
	lcdWriteCommand(WRITE_MEMORY_START);
 80005fe:	202c      	movs	r0, #44	@ 0x2c
 8000600:	f7ff feb4 	bl	800036c <lcdWriteCommand>
	if((x>=0)&&(x<256)&&(y>=0)&&(y<240)) //check if pixel is inside the bounds
 8000604:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000608:	2b00      	cmp	r3, #0
 800060a:	db15      	blt.n	8000638 <lcdPlot+0x92>
 800060c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000610:	2bff      	cmp	r3, #255	@ 0xff
 8000612:	dc11      	bgt.n	8000638 <lcdPlot+0x92>
 8000614:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000618:	2b00      	cmp	r3, #0
 800061a:	db0d      	blt.n	8000638 <lcdPlot+0x92>
 800061c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000620:	2bef      	cmp	r3, #239	@ 0xef
 8000622:	dc09      	bgt.n	8000638 <lcdPlot+0x92>
		lcdWriteData(colour >> 8, colour);
 8000624:	887b      	ldrh	r3, [r7, #2]
 8000626:	0a1b      	lsrs	r3, r3, #8
 8000628:	b29b      	uxth	r3, r3
 800062a:	b2db      	uxtb	r3, r3
 800062c:	887a      	ldrh	r2, [r7, #2]
 800062e:	b2d2      	uxtb	r2, r2
 8000630:	4611      	mov	r1, r2
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fec1 	bl	80003ba <lcdWriteData>
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <lcdLine>:

void lcdLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b08b      	sub	sp, #44	@ 0x2c
 8000644:	af02      	add	r7, sp, #8
 8000646:	4604      	mov	r4, r0
 8000648:	4608      	mov	r0, r1
 800064a:	4611      	mov	r1, r2
 800064c:	461a      	mov	r2, r3
 800064e:	4623      	mov	r3, r4
 8000650:	80fb      	strh	r3, [r7, #6]
 8000652:	4603      	mov	r3, r0
 8000654:	80bb      	strh	r3, [r7, #4]
 8000656:	460b      	mov	r3, r1
 8000658:	807b      	strh	r3, [r7, #2]
 800065a:	4613      	mov	r3, r2
 800065c:	803b      	strh	r3, [r7, #0]
	if(x0 == x1){ //vodorovna ciara optimalizovane
 800065e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000662:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000666:	429a      	cmp	r2, r3
 8000668:	d10d      	bne.n	8000686 <lcdLine+0x46>
		lcdFilledRectangle(x0, y0, x1, y1, colour);
 800066a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800066e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000672:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000676:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800067a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	4623      	mov	r3, r4
 8000680:	f000 fa4f 	bl	8000b22 <lcdFilledRectangle>
		return;
 8000684:	e0e4      	b.n	8000850 <lcdLine+0x210>
	}
	else if(y0 == y1){ //zvisla ciara optimalizovane
 8000686:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800068a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800068e:	429a      	cmp	r2, r3
 8000690:	d10d      	bne.n	80006ae <lcdLine+0x6e>
		lcdFilledRectangle(x0, y0, x1, y1, colour);
 8000692:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000696:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800069a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800069e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80006a2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	4623      	mov	r3, r4
 80006a8:	f000 fa3b 	bl	8000b22 <lcdFilledRectangle>
		return;
 80006ac:	e0d0      	b.n	8000850 <lcdLine+0x210>
	}

	int16_t dy = y1 - y0;
 80006ae:	883a      	ldrh	r2, [r7, #0]
 80006b0:	88bb      	ldrh	r3, [r7, #4]
 80006b2:	1ad3      	subs	r3, r2, r3
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	83fb      	strh	r3, [r7, #30]
	int16_t dx = x1 - x0;
 80006b8:	887a      	ldrh	r2, [r7, #2]
 80006ba:	88fb      	ldrh	r3, [r7, #6]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	b29b      	uxth	r3, r3
 80006c0:	83bb      	strh	r3, [r7, #28]
	int16_t stepx, stepy;

	if (dy < 0) //derivacie musia byt kladne
 80006c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	da07      	bge.n	80006da <lcdLine+0x9a>
	{
		dy = -dy; stepy = -1;
 80006ca:	8bfb      	ldrh	r3, [r7, #30]
 80006cc:	425b      	negs	r3, r3
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	83fb      	strh	r3, [r7, #30]
 80006d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006d6:	833b      	strh	r3, [r7, #24]
 80006d8:	e001      	b.n	80006de <lcdLine+0x9e>
	}
	else stepy = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	833b      	strh	r3, [r7, #24]

	if (dx < 0) //derivacie musia byt kladne
 80006de:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	da07      	bge.n	80006f6 <lcdLine+0xb6>
	{
		dx = -dx; stepx = -1;
 80006e6:	8bbb      	ldrh	r3, [r7, #28]
 80006e8:	425b      	negs	r3, r3
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	83bb      	strh	r3, [r7, #28]
 80006ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006f2:	837b      	strh	r3, [r7, #26]
 80006f4:	e001      	b.n	80006fa <lcdLine+0xba>
	}
	else stepx = 1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	837b      	strh	r3, [r7, #26]

	dy <<= 1;	//dy*2
 80006fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	83fb      	strh	r3, [r7, #30]
	dx <<= 1;	//dx*2
 8000702:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	83bb      	strh	r3, [r7, #28]

	lcdPlot(x0, y0, colour);	//zaciatocny pixel
 800070a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800070c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff46 	bl	80005a6 <lcdPlot>
	uint16_t partialLineStartCoord = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	82fb      	strh	r3, [r7, #22]

	if (dx > dy) {  //menej nez 45 stupnov
 800071e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000722:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000726:	429a      	cmp	r2, r3
 8000728:	dd49      	ble.n	80007be <lcdLine+0x17e>
		partialLineStartCoord = x0-1;
 800072a:	88fb      	ldrh	r3, [r7, #6]
 800072c:	3b01      	subs	r3, #1
 800072e:	82fb      	strh	r3, [r7, #22]
		int fraction = dy - (dx >> 1);	//dy-(dx/2)
 8000730:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000734:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000738:	1052      	asrs	r2, r2, #1
 800073a:	b212      	sxth	r2, r2
 800073c:	1a9b      	subs	r3, r3, r2
 800073e:	613b      	str	r3, [r7, #16]
		while (x0 != x1)
 8000740:	e027      	b.n	8000792 <lcdLine+0x152>
		{

			if (fraction >= 0) //when we move up 1 pixel on Y axis
 8000742:	693b      	ldr	r3, [r7, #16]
 8000744:	2b00      	cmp	r3, #0
 8000746:	db1a      	blt.n	800077e <lcdLine+0x13e>
			{
				lcdFilledRectangle(partialLineStartCoord+1, y0, x0, y0, colour);
 8000748:	8afb      	ldrh	r3, [r7, #22]
 800074a:	3301      	adds	r3, #1
 800074c:	b29b      	uxth	r3, r3
 800074e:	b218      	sxth	r0, r3
 8000750:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000754:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000758:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800075c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	4623      	mov	r3, r4
 8000762:	f000 f9de 	bl	8000b22 <lcdFilledRectangle>
				partialLineStartCoord = x0;
 8000766:	88fb      	ldrh	r3, [r7, #6]
 8000768:	82fb      	strh	r3, [r7, #22]
				y0 += stepy;
 800076a:	88ba      	ldrh	r2, [r7, #4]
 800076c:	8b3b      	ldrh	r3, [r7, #24]
 800076e:	4413      	add	r3, r2
 8000770:	b29b      	uxth	r3, r3
 8000772:	80bb      	strh	r3, [r7, #4]
				fraction -= dx;
 8000774:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000778:	693a      	ldr	r2, [r7, #16]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	613b      	str	r3, [r7, #16]
			}

			x0 += stepx;
 800077e:	88fa      	ldrh	r2, [r7, #6]
 8000780:	8b7b      	ldrh	r3, [r7, #26]
 8000782:	4413      	add	r3, r2
 8000784:	b29b      	uxth	r3, r3
 8000786:	80fb      	strh	r3, [r7, #6]
			fraction += dy;
 8000788:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	4413      	add	r3, r2
 8000790:	613b      	str	r3, [r7, #16]
		while (x0 != x1)
 8000792:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000796:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800079a:	429a      	cmp	r2, r3
 800079c:	d1d1      	bne.n	8000742 <lcdLine+0x102>
		}
		lcdFilledRectangle(partialLineStartCoord+1, y0, x0, y0, colour);
 800079e:	8afb      	ldrh	r3, [r7, #22]
 80007a0:	3301      	adds	r3, #1
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	b218      	sxth	r0, r3
 80007a6:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80007aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80007b2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	4623      	mov	r3, r4
 80007b8:	f000 f9b3 	bl	8000b22 <lcdFilledRectangle>
 80007bc:	e048      	b.n	8000850 <lcdLine+0x210>
	}
	else			//viac nez 45 stupnov
	{
		partialLineStartCoord = y0-1;
 80007be:	88bb      	ldrh	r3, [r7, #4]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	82fb      	strh	r3, [r7, #22]
		int fraction = dx - (dy >> 1);
 80007c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80007c8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80007cc:	1052      	asrs	r2, r2, #1
 80007ce:	b212      	sxth	r2, r2
 80007d0:	1a9b      	subs	r3, r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]
		while (y0 != y1)
 80007d4:	e027      	b.n	8000826 <lcdLine+0x1e6>
		{
			if (fraction >= 0)	//when we move up 1 pixel on X axis
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	db1a      	blt.n	8000812 <lcdLine+0x1d2>
			{
				lcdFilledRectangle(x0, partialLineStartCoord+1, x0, y0, colour);
 80007dc:	8afb      	ldrh	r3, [r7, #22]
 80007de:	3301      	adds	r3, #1
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	b219      	sxth	r1, r3
 80007e4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80007e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007ec:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80007f0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	4623      	mov	r3, r4
 80007f6:	f000 f994 	bl	8000b22 <lcdFilledRectangle>
				partialLineStartCoord = y0;
 80007fa:	88bb      	ldrh	r3, [r7, #4]
 80007fc:	82fb      	strh	r3, [r7, #22]
				x0 += stepx;
 80007fe:	88fa      	ldrh	r2, [r7, #6]
 8000800:	8b7b      	ldrh	r3, [r7, #26]
 8000802:	4413      	add	r3, r2
 8000804:	b29b      	uxth	r3, r3
 8000806:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 8000808:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	1ad3      	subs	r3, r2, r3
 8000810:	60fb      	str	r3, [r7, #12]
			}

			y0 += stepy;
 8000812:	88ba      	ldrh	r2, [r7, #4]
 8000814:	8b3b      	ldrh	r3, [r7, #24]
 8000816:	4413      	add	r3, r2
 8000818:	b29b      	uxth	r3, r3
 800081a:	80bb      	strh	r3, [r7, #4]
			fraction += dx;
 800081c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
		while (y0 != y1)
 8000826:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800082a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800082e:	429a      	cmp	r2, r3
 8000830:	d1d1      	bne.n	80007d6 <lcdLine+0x196>
		}
		lcdFilledRectangle(x0, partialLineStartCoord+1, x0, y0, colour);
 8000832:	8afb      	ldrh	r3, [r7, #22]
 8000834:	3301      	adds	r3, #1
 8000836:	b29b      	uxth	r3, r3
 8000838:	b219      	sxth	r1, r3
 800083a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800083e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000842:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000846:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	4623      	mov	r3, r4
 800084c:	f000 f969 	bl	8000b22 <lcdFilledRectangle>
	}
}
 8000850:	3724      	adds	r7, #36	@ 0x24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd90      	pop	{r4, r7, pc}

08000856 <lcdDottedLine>:

void lcdDottedLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour, uint16_t step)
{
 8000856:	b590      	push	{r4, r7, lr}
 8000858:	b089      	sub	sp, #36	@ 0x24
 800085a:	af00      	add	r7, sp, #0
 800085c:	4604      	mov	r4, r0
 800085e:	4608      	mov	r0, r1
 8000860:	4611      	mov	r1, r2
 8000862:	461a      	mov	r2, r3
 8000864:	4623      	mov	r3, r4
 8000866:	80fb      	strh	r3, [r7, #6]
 8000868:	4603      	mov	r3, r0
 800086a:	80bb      	strh	r3, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	807b      	strh	r3, [r7, #2]
 8000870:	4613      	mov	r3, r2
 8000872:	803b      	strh	r3, [r7, #0]
	int16_t dy = y1 - y0;
 8000874:	883a      	ldrh	r2, [r7, #0]
 8000876:	88bb      	ldrh	r3, [r7, #4]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	b29b      	uxth	r3, r3
 800087c:	83fb      	strh	r3, [r7, #30]
	int16_t dx = x1 - x0;
 800087e:	887a      	ldrh	r2, [r7, #2]
 8000880:	88fb      	ldrh	r3, [r7, #6]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	b29b      	uxth	r3, r3
 8000886:	83bb      	strh	r3, [r7, #28]
	int16_t stepx, stepy;
	int16_t delta = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	82fb      	strh	r3, [r7, #22]
	int16_t astep = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	817b      	strh	r3, [r7, #10]

	if (dy < 0)
 8000890:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000894:	2b00      	cmp	r3, #0
 8000896:	da08      	bge.n	80008aa <lcdDottedLine+0x54>
	{
		dy = -dy; stepy = -step;
 8000898:	8bfb      	ldrh	r3, [r7, #30]
 800089a:	425b      	negs	r3, r3
 800089c:	b29b      	uxth	r3, r3
 800089e:	83fb      	strh	r3, [r7, #30]
 80008a0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80008a2:	425b      	negs	r3, r3
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	833b      	strh	r3, [r7, #24]
 80008a8:	e001      	b.n	80008ae <lcdDottedLine+0x58>
	}
	else stepy = step;
 80008aa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80008ac:	833b      	strh	r3, [r7, #24]

 	if (dx < 0)
 80008ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	da08      	bge.n	80008c8 <lcdDottedLine+0x72>
	{
		dx = -dx; stepx = -step;
 80008b6:	8bbb      	ldrh	r3, [r7, #28]
 80008b8:	425b      	negs	r3, r3
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	83bb      	strh	r3, [r7, #28]
 80008be:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80008c0:	425b      	negs	r3, r3
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	837b      	strh	r3, [r7, #26]
 80008c6:	e001      	b.n	80008cc <lcdDottedLine+0x76>
	}
	else stepx = step;
 80008c8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80008ca:	837b      	strh	r3, [r7, #26]

	dy <<= 1;
 80008cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	83fb      	strh	r3, [r7, #30]
	dx <<= 1;
 80008d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	83bb      	strh	r3, [r7, #28]

	if (dx > dy) {
 80008dc:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80008e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dd41      	ble.n	800096c <lcdDottedLine+0x116>
		int fraction = dy - (dx >> 1);
 80008e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008ec:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80008f0:	1052      	asrs	r2, r2, #1
 80008f2:	b212      	sxth	r2, r2
 80008f4:	1a9b      	subs	r3, r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
		delta = abs(x0 - x1);
 80008f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	2b00      	cmp	r3, #0
 8000904:	bfb8      	it	lt
 8000906:	425b      	neglt	r3, r3
 8000908:	82fb      	strh	r3, [r7, #22]
		astep = abs(stepx);
 800090a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800090e:	2b00      	cmp	r3, #0
 8000910:	bfb8      	it	lt
 8000912:	425b      	neglt	r3, r3
 8000914:	b29b      	uxth	r3, r3
 8000916:	817b      	strh	r3, [r7, #10]
		while (delta > 0)
 8000918:	e023      	b.n	8000962 <lcdDottedLine+0x10c>
		{
			if (fraction >= 0)
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db09      	blt.n	8000934 <lcdDottedLine+0xde>
			{
				y0 += stepy;
 8000920:	88ba      	ldrh	r2, [r7, #4]
 8000922:	8b3b      	ldrh	r3, [r7, #24]
 8000924:	4413      	add	r3, r2
 8000926:	b29b      	uxth	r3, r3
 8000928:	80bb      	strh	r3, [r7, #4]
				fraction -= dx;
 800092a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	613b      	str	r3, [r7, #16]
			}

			lcdPlot(x0, y0, colour);
 8000934:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000936:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800093a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fe31 	bl	80005a6 <lcdPlot>
   			x0 += stepx;
 8000944:	88fa      	ldrh	r2, [r7, #6]
 8000946:	8b7b      	ldrh	r3, [r7, #26]
 8000948:	4413      	add	r3, r2
 800094a:	b29b      	uxth	r3, r3
 800094c:	80fb      	strh	r3, [r7, #6]
   			delta = delta - astep;
 800094e:	8afa      	ldrh	r2, [r7, #22]
 8000950:	897b      	ldrh	r3, [r7, #10]
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	b29b      	uxth	r3, r3
 8000956:	82fb      	strh	r3, [r7, #22]
   			fraction += dy;
 8000958:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4413      	add	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
		while (delta > 0)
 8000962:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000966:	2b00      	cmp	r3, #0
 8000968:	dcd7      	bgt.n	800091a <lcdDottedLine+0xc4>
			delta = delta - astep;
			fraction += dx;

		}
	}
}
 800096a:	e040      	b.n	80009ee <lcdDottedLine+0x198>
		int fraction = dx - (dy >> 1);
 800096c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000970:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000974:	1052      	asrs	r2, r2, #1
 8000976:	b212      	sxth	r2, r2
 8000978:	1a9b      	subs	r3, r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
		delta = abs(y0 - y1);
 800097c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000980:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	bfb8      	it	lt
 800098a:	425b      	neglt	r3, r3
 800098c:	82fb      	strh	r3, [r7, #22]
		astep = abs(stepy);
 800098e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000992:	2b00      	cmp	r3, #0
 8000994:	bfb8      	it	lt
 8000996:	425b      	neglt	r3, r3
 8000998:	b29b      	uxth	r3, r3
 800099a:	817b      	strh	r3, [r7, #10]
		while (delta > 0)
 800099c:	e023      	b.n	80009e6 <lcdDottedLine+0x190>
			if (fraction >= 0)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	db09      	blt.n	80009b8 <lcdDottedLine+0x162>
				x0 += stepx;
 80009a4:	88fa      	ldrh	r2, [r7, #6]
 80009a6:	8b7b      	ldrh	r3, [r7, #26]
 80009a8:	4413      	add	r3, r2
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 80009ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	60fb      	str	r3, [r7, #12]
			lcdPlot(x0, y0, colour);
 80009b8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80009ba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80009be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fdef 	bl	80005a6 <lcdPlot>
			y0 += stepy;
 80009c8:	88ba      	ldrh	r2, [r7, #4]
 80009ca:	8b3b      	ldrh	r3, [r7, #24]
 80009cc:	4413      	add	r3, r2
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	80bb      	strh	r3, [r7, #4]
			delta = delta - astep;
 80009d2:	8afa      	ldrh	r2, [r7, #22]
 80009d4:	897b      	ldrh	r3, [r7, #10]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	b29b      	uxth	r3, r3
 80009da:	82fb      	strh	r3, [r7, #22]
			fraction += dx;
 80009dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]
		while (delta > 0)
 80009e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	dcd7      	bgt.n	800099e <lcdDottedLine+0x148>
}
 80009ee:	bf00      	nop
 80009f0:	3724      	adds	r7, #36	@ 0x24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd90      	pop	{r4, r7, pc}

080009f6 <lcdRectangle>:

// Draw a rectangle between x0, y0 and x1, y1
void lcdRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 80009f6:	b590      	push	{r4, r7, lr}
 80009f8:	b085      	sub	sp, #20
 80009fa:	af02      	add	r7, sp, #8
 80009fc:	4604      	mov	r4, r0
 80009fe:	4608      	mov	r0, r1
 8000a00:	4611      	mov	r1, r2
 8000a02:	461a      	mov	r2, r3
 8000a04:	4623      	mov	r3, r4
 8000a06:	80fb      	strh	r3, [r7, #6]
 8000a08:	4603      	mov	r3, r0
 8000a0a:	80bb      	strh	r3, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	807b      	strh	r3, [r7, #2]
 8000a10:	4613      	mov	r3, r2
 8000a12:	803b      	strh	r3, [r7, #0]
	lcdLine(x0, y0, x0, y1, colour);
 8000a14:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000a18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a1c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a20:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a24:	8b3b      	ldrh	r3, [r7, #24]
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	4623      	mov	r3, r4
 8000a2a:	f7ff fe09 	bl	8000640 <lcdLine>
	lcdLine(x0, y1, x1, y1, colour);
 8000a2e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000a32:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000a36:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000a3a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a3e:	8b3b      	ldrh	r3, [r7, #24]
 8000a40:	9300      	str	r3, [sp, #0]
 8000a42:	4623      	mov	r3, r4
 8000a44:	f7ff fdfc 	bl	8000640 <lcdLine>
	lcdLine(x1, y0, x1, y1, colour);
 8000a48:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000a4c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000a50:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a54:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000a58:	8b3b      	ldrh	r3, [r7, #24]
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	4623      	mov	r3, r4
 8000a5e:	f7ff fdef 	bl	8000640 <lcdLine>
	lcdLine(x0, y0, x1, y0, colour);
 8000a62:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000a66:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000a6a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000a6e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000a72:	8b3b      	ldrh	r3, [r7, #24]
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	4623      	mov	r3, r4
 8000a78:	f7ff fde2 	bl	8000640 <lcdLine>
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd90      	pop	{r4, r7, pc}

08000a84 <lcdDottedRectangle>:

// Draw a dotted rectangle between x0, y0 and x1, y1
void lcdDottedRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour, uint16_t step)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af02      	add	r7, sp, #8
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	4611      	mov	r1, r2
 8000a90:	461a      	mov	r2, r3
 8000a92:	4623      	mov	r3, r4
 8000a94:	80fb      	strh	r3, [r7, #6]
 8000a96:	4603      	mov	r3, r0
 8000a98:	80bb      	strh	r3, [r7, #4]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	807b      	strh	r3, [r7, #2]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	803b      	strh	r3, [r7, #0]
	lcdDottedLine(x0, y0, x0, y1, colour, step);
 8000aa2:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000aa6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000aaa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000aae:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000ab2:	8bbb      	ldrh	r3, [r7, #28]
 8000ab4:	9301      	str	r3, [sp, #4]
 8000ab6:	8b3b      	ldrh	r3, [r7, #24]
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	4623      	mov	r3, r4
 8000abc:	f7ff fecb 	bl	8000856 <lcdDottedLine>
	lcdDottedLine(x0, y1, x1, y1, colour, step);
 8000ac0:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000ac4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000ac8:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000acc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000ad0:	8bbb      	ldrh	r3, [r7, #28]
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	8b3b      	ldrh	r3, [r7, #24]
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	4623      	mov	r3, r4
 8000ada:	f7ff febc 	bl	8000856 <lcdDottedLine>
	lcdDottedLine(x1, y0, x1, y1, colour, step);
 8000ade:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000ae2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000ae6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000aea:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000aee:	8bbb      	ldrh	r3, [r7, #28]
 8000af0:	9301      	str	r3, [sp, #4]
 8000af2:	8b3b      	ldrh	r3, [r7, #24]
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	4623      	mov	r3, r4
 8000af8:	f7ff fead 	bl	8000856 <lcdDottedLine>
	lcdDottedLine(x0, y0, x1, y0, colour, step);
 8000afc:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000b00:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000b04:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b08:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b0c:	8bbb      	ldrh	r3, [r7, #28]
 8000b0e:	9301      	str	r3, [sp, #4]
 8000b10:	8b3b      	ldrh	r3, [r7, #24]
 8000b12:	9300      	str	r3, [sp, #0]
 8000b14:	4623      	mov	r3, r4
 8000b16:	f7ff fe9e 	bl	8000856 <lcdDottedLine>
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd90      	pop	{r4, r7, pc}

08000b22 <lcdFilledRectangle>:

// Draw a filled rectangle
void lcdFilledRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8000b22:	b590      	push	{r4, r7, lr}
 8000b24:	b085      	sub	sp, #20
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4604      	mov	r4, r0
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	461a      	mov	r2, r3
 8000b30:	4623      	mov	r3, r4
 8000b32:	80fb      	strh	r3, [r7, #6]
 8000b34:	4603      	mov	r3, r0
 8000b36:	80bb      	strh	r3, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	803b      	strh	r3, [r7, #0]
	uint16_t pixels;
	int16_t pom = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	81bb      	strh	r3, [r7, #12]
	if (x0>x1){	//x1 must be greater than x0
 8000b44:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dd05      	ble.n	8000b5c <lcdFilledRectangle+0x3a>
		pom = x0;
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	81bb      	strh	r3, [r7, #12]
		x0 = x1;
 8000b54:	887b      	ldrh	r3, [r7, #2]
 8000b56:	80fb      	strh	r3, [r7, #6]
		x1 = pom;
 8000b58:	89bb      	ldrh	r3, [r7, #12]
 8000b5a:	807b      	strh	r3, [r7, #2]
	}
	if (y0>y1){	//y1 must be greater than y0
 8000b5c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b60:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dd05      	ble.n	8000b74 <lcdFilledRectangle+0x52>
		pom = y0;
 8000b68:	88bb      	ldrh	r3, [r7, #4]
 8000b6a:	81bb      	strh	r3, [r7, #12]
		y0 = y1;
 8000b6c:	883b      	ldrh	r3, [r7, #0]
 8000b6e:	80bb      	strh	r3, [r7, #4]
		y1 = pom;
 8000b70:	89bb      	ldrh	r3, [r7, #12]
 8000b72:	803b      	strh	r3, [r7, #0]
	}

	// To speed up plotting we define a x window with the width of the
	// rectangle and then just output the required number of bytes to
	// fill down to the end point
	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8000b74:	202a      	movs	r0, #42	@ 0x2a
 8000b76:	f7ff fbf9 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff fc09 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(x0);
 8000b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fc04 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff fc01 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(x1);
 8000b90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fbfc 	bl	8000392 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8000b9a:	202b      	movs	r0, #43	@ 0x2b
 8000b9c:	f7ff fbe6 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff fbf6 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(y0);
 8000ba6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fbf1 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f7ff fbee 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(y1);
 8000bb6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fbe9 	bl	8000392 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8000bc0:	202c      	movs	r0, #44	@ 0x2c
 8000bc2:	f7ff fbd3 	bl	800036c <lcdWriteCommand>
	for (pixels = 0; pixels < (((x1+1) - x0) * ((y1+1) - y0)); pixels++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	81fb      	strh	r3, [r7, #14]
 8000bca:	e00c      	b.n	8000be6 <lcdFilledRectangle+0xc4>
			lcdWriteData(colour >> 8, colour);
 8000bcc:	8c3b      	ldrh	r3, [r7, #32]
 8000bce:	0a1b      	lsrs	r3, r3, #8
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	8c3a      	ldrh	r2, [r7, #32]
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff fbed 	bl	80003ba <lcdWriteData>
	for (pixels = 0; pixels < (((x1+1) - x0) * ((y1+1) - y0)); pixels++)
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	3301      	adds	r3, #1
 8000be4:	81fb      	strh	r3, [r7, #14]
 8000be6:	89fa      	ldrh	r2, [r7, #14]
 8000be8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bec:	1c59      	adds	r1, r3, #1
 8000bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bf2:	1acb      	subs	r3, r1, r3
 8000bf4:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000bf8:	1c48      	adds	r0, r1, #1
 8000bfa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000bfe:	1a41      	subs	r1, r0, r1
 8000c00:	fb01 f303 	mul.w	r3, r1, r3
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbe1      	blt.n	8000bcc <lcdFilledRectangle+0xaa>
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd90      	pop	{r4, r7, pc}

08000c12 <lcdFilledDottedRectangle>:

void lcdFilledDottedRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour, uint16_t step)
{
 8000c12:	b590      	push	{r4, r7, lr}
 8000c14:	b085      	sub	sp, #20
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4604      	mov	r4, r0
 8000c1a:	4608      	mov	r0, r1
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4623      	mov	r3, r4
 8000c22:	80fb      	strh	r3, [r7, #6]
 8000c24:	4603      	mov	r3, r0
 8000c26:	80bb      	strh	r3, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	803b      	strh	r3, [r7, #0]
	for (int16_t y = y0; y < y1; y += step) { // Skip every n rows
 8000c30:	88bb      	ldrh	r3, [r7, #4]
 8000c32:	81fb      	strh	r3, [r7, #14]
 8000c34:	e01a      	b.n	8000c6c <lcdFilledDottedRectangle+0x5a>
		for (int16_t x = x0; x < x1; x += step) { // Skip every n columns
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	81bb      	strh	r3, [r7, #12]
 8000c3a:	e00c      	b.n	8000c56 <lcdFilledDottedRectangle+0x44>
			lcdPlot(x, y, colour);
 8000c3c:	8c3a      	ldrh	r2, [r7, #32]
 8000c3e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000c42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fcad 	bl	80005a6 <lcdPlot>
		for (int16_t x = x0; x < x1; x += step) { // Skip every n columns
 8000c4c:	89ba      	ldrh	r2, [r7, #12]
 8000c4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c50:	4413      	add	r3, r2
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	81bb      	strh	r3, [r7, #12]
 8000c56:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	dbec      	blt.n	8000c3c <lcdFilledDottedRectangle+0x2a>
	for (int16_t y = y0; y < y1; y += step) { // Skip every n rows
 8000c62:	89fa      	ldrh	r2, [r7, #14]
 8000c64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c66:	4413      	add	r3, r2
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	81fb      	strh	r3, [r7, #14]
 8000c6c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c70:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	dbde      	blt.n	8000c36 <lcdFilledDottedRectangle+0x24>
		}
	}
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd90      	pop	{r4, r7, pc}

08000c82 <lcdPolygon>:

void lcdPolygon(int16_t *points, int16_t sides, uint16_t colour)
{
 8000c82:	b590      	push	{r4, r7, lr}
 8000c84:	b089      	sub	sp, #36	@ 0x24
 8000c86:	af02      	add	r7, sp, #8
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	807b      	strh	r3, [r7, #2]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	803b      	strh	r3, [r7, #0]
	for(int16_t i = 0; i<sides; i++){
 8000c92:	2300      	movs	r3, #0
 8000c94:	82fb      	strh	r3, [r7, #22]
 8000c96:	e040      	b.n	8000d1a <lcdPolygon+0x98>
		int16_t x0 = points[(2*i)];
 8000c98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	82bb      	strh	r3, [r7, #20]
		int16_t y0 = points[(2*i + 1)];
 8000ca6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	3302      	adds	r3, #2
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	827b      	strh	r3, [r7, #18]
		int16_t x1 = points[(2*((i+1)%sides))];
 8000cb6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000cc0:	fb93 f1f2 	sdiv	r1, r3, r2
 8000cc4:	fb01 f202 	mul.w	r2, r1, r2
 8000cc8:	1a9b      	subs	r3, r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	4413      	add	r3, r2
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	823b      	strh	r3, [r7, #16]
		int16_t y1 = points[(2*((i+1)%sides) + 1)];
 8000cd4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000cde:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ce2:	fb01 f202 	mul.w	r2, r1, r2
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	3302      	adds	r3, #2
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	4413      	add	r3, r2
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	81fb      	strh	r3, [r7, #14]
		lcdLine(x0, y0, x1, y1, colour);
 8000cf4:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8000cf8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000cfc:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8000d00:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8000d04:	883b      	ldrh	r3, [r7, #0]
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	4623      	mov	r3, r4
 8000d0a:	f7ff fc99 	bl	8000640 <lcdLine>
	for(int16_t i = 0; i<sides; i++){
 8000d0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	3301      	adds	r3, #1
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	82fb      	strh	r3, [r7, #22]
 8000d1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000d1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	dbb8      	blt.n	8000c98 <lcdPolygon+0x16>
	}
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	371c      	adds	r7, #28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd90      	pop	{r4, r7, pc}

08000d30 <lcdDottedPolygon>:

void lcdDottedPolygon(int16_t *points, int16_t sides, uint16_t colour, uint16_t step)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b08b      	sub	sp, #44	@ 0x2c
 8000d34:	af02      	add	r7, sp, #8
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	4608      	mov	r0, r1
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4603      	mov	r3, r0
 8000d40:	817b      	strh	r3, [r7, #10]
 8000d42:	460b      	mov	r3, r1
 8000d44:	813b      	strh	r3, [r7, #8]
 8000d46:	4613      	mov	r3, r2
 8000d48:	80fb      	strh	r3, [r7, #6]
	for(int16_t i = 0; i<sides; i++){
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	83fb      	strh	r3, [r7, #30]
 8000d4e:	e042      	b.n	8000dd6 <lcdDottedPolygon+0xa6>
		int16_t x0 = points[(2*i)];
 8000d50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	4413      	add	r3, r2
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	83bb      	strh	r3, [r7, #28]
		int16_t y0 = points[(2*i + 1)];
 8000d5e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	3302      	adds	r3, #2
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	4413      	add	r3, r2
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	837b      	strh	r3, [r7, #26]
		int16_t x1 = points[(2*((i+1)%sides))];
 8000d6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d72:	3301      	adds	r3, #1
 8000d74:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000d78:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d7c:	fb01 f202 	mul.w	r2, r1, r2
 8000d80:	1a9b      	subs	r3, r3, r2
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	833b      	strh	r3, [r7, #24]
		int16_t y1 = points[(2*((i+1)%sides) + 1)];
 8000d8c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d90:	3301      	adds	r3, #1
 8000d92:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000d96:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d9a:	fb01 f202 	mul.w	r2, r1, r2
 8000d9e:	1a9b      	subs	r3, r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	3302      	adds	r3, #2
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	82fb      	strh	r3, [r7, #22]
		lcdDottedLine(x0, y0, x1, y1, colour, step);
 8000dac:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8000db0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000db4:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8000db8:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	893b      	ldrh	r3, [r7, #8]
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	4623      	mov	r3, r4
 8000dc6:	f7ff fd46 	bl	8000856 <lcdDottedLine>
	for(int16_t i = 0; i<sides; i++){
 8000dca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	83fb      	strh	r3, [r7, #30]
 8000dd6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000dda:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	dbb6      	blt.n	8000d50 <lcdDottedPolygon+0x20>
	}
}
 8000de2:	bf00      	nop
 8000de4:	bf00      	nop
 8000de6:	3724      	adds	r7, #36	@ 0x24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd90      	pop	{r4, r7, pc}

08000dec <lcdFilledTriangle>:

void lcdFilledTriangle(int16_t *points, uint16_t colour)
{
 8000dec:	b590      	push	{r4, r7, lr}
 8000dee:	b08d      	sub	sp, #52	@ 0x34
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	807b      	strh	r3, [r7, #2]
	// zoradim body od vzostupne podla osi X
	for(int16_t i = 2; i>=0; i--){
 8000df8:	2302      	movs	r3, #2
 8000dfa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000dfc:	e067      	b.n	8000ece <lcdFilledTriangle+0xe2>
		int16_t max = -30000;
 8000dfe:	f648 23d0 	movw	r3, #35536	@ 0x8ad0
 8000e02:	84bb      	strh	r3, [r7, #36]	@ 0x24
		int16_t maxInd = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	847b      	strh	r3, [r7, #34]	@ 0x22
		for(int16_t k = 0; k<=i; k++){
 8000e08:	2300      	movs	r3, #0
 8000e0a:	843b      	strh	r3, [r7, #32]
 8000e0c:	e019      	b.n	8000e42 <lcdFilledTriangle+0x56>
			if (points[k*2]>=max){
 8000e0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	4413      	add	r3, r2
 8000e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8000e20:	429a      	cmp	r2, r3
 8000e22:	dc08      	bgt.n	8000e36 <lcdFilledTriangle+0x4a>
				max = points[k*2];
 8000e24:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	84bb      	strh	r3, [r7, #36]	@ 0x24
				maxInd = k;
 8000e32:	8c3b      	ldrh	r3, [r7, #32]
 8000e34:	847b      	strh	r3, [r7, #34]	@ 0x22
		for(int16_t k = 0; k<=i; k++){
 8000e36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	843b      	strh	r3, [r7, #32]
 8000e42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000e46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	dddf      	ble.n	8000e0e <lcdFilledTriangle+0x22>
			}
		}
		int16_t pomX = points[maxInd*2]; //ulozim si maximum
 8000e4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	4413      	add	r3, r2
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	83bb      	strh	r3, [r7, #28]
		int16_t pomY = points[maxInd*2+1];
 8000e5c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	3302      	adds	r3, #2
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	4413      	add	r3, r2
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	837b      	strh	r3, [r7, #26]
		points[maxInd*2] = points[i*2]; //na jeho poziciu premiestnim data z konca
 8000e6c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	441a      	add	r2, r3
 8000e76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	440b      	add	r3, r1
 8000e80:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e84:	801a      	strh	r2, [r3, #0]
		points[maxInd*2+1] = points[i*2+1];
 8000e86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	441a      	add	r2, r3
 8000e92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	3302      	adds	r3, #2
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	440b      	add	r3, r1
 8000e9e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ea2:	801a      	strh	r2, [r3, #0]
		points[i*2] = pomX; //na jeho koniec dat dam maximum
 8000ea4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	8bba      	ldrh	r2, [r7, #28]
 8000eb0:	801a      	strh	r2, [r3, #0]
		points[i*2+1] = pomY;
 8000eb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	3302      	adds	r3, #2
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	8b7a      	ldrh	r2, [r7, #26]
 8000ec0:	801a      	strh	r2, [r3, #0]
	for(int16_t i = 2; i>=0; i--){
 8000ec2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000ece:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	da93      	bge.n	8000dfe <lcdFilledTriangle+0x12>
	}

	float_t der[3];

	//treba osetrit delenie nulou pri vypocte strmosti priamky
	if((points[2] - points[0]) != 0){ //medzi bodmi 1 a 2
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d01e      	beq.n	8000f26 <lcdFilledTriangle+0x13a>
		der[0] = (float_t)(points[3] - points[1]) / (float_t)(points[2] - points[0]);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3306      	adds	r3, #6
 8000eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	ee07 3a90 	vmov	s15, r3
 8000f00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3304      	adds	r3, #4
 8000f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	ee07 3a90 	vmov	s15, r3
 8000f1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f22:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	if((points[4] - points[2]) != 0){ //medzi bodmi 2 a 3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3308      	adds	r3, #8
 8000f2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3304      	adds	r3, #4
 8000f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d01f      	beq.n	8000f7a <lcdFilledTriangle+0x18e>
		der[1] = (float_t)(points[5] - points[3]) / (float_t)(points[4] - points[2]);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	330a      	adds	r3, #10
 8000f3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f42:	461a      	mov	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3306      	adds	r3, #6
 8000f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3308      	adds	r3, #8
 8000f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3304      	adds	r3, #4
 8000f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f76:	edc7 7a04 	vstr	s15, [r7, #16]
	}
	if((points[4] - points[0]) != 0){ //medzi bodmi 1 a 3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3308      	adds	r3, #8
 8000f7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d01e      	beq.n	8000fca <lcdFilledTriangle+0x1de>
		der[2] = (float_t)(points[5] - points[1]) / (float_t)(points[4] - points[0]);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	330a      	adds	r3, #10
 8000f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f94:	461a      	mov	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3302      	adds	r3, #2
 8000f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3308      	adds	r3, #8
 8000fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc6:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	for (int16_t x = points[0]; x <= points[4]; x++) {	// vykreslit trojuholnik
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	83fb      	strh	r3, [r7, #30]
 8000fd0:	e095      	b.n	80010fe <lcdFilledTriangle+0x312>
		if (x < points[2]) {
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fda:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	da43      	bge.n	800106a <lcdFilledTriangle+0x27e>
			lcdLine(x, (int16_t)(der[0] * (x-points[0]) + points[1]), x, (int16_t)(der[2] * (x-points[0]) + points[1]), colour);
 8000fe2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fe6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ff0:	1a9b      	subs	r3, r3, r2
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3302      	adds	r3, #2
 8001002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800100e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001012:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001016:	ee17 3a90 	vmov	r3, s15
 800101a:	b219      	sxth	r1, r3
 800101c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001020:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	f9b2 2000 	ldrsh.w	r2, [r2]
 800102a:	1a9b      	subs	r3, r3, r2
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3302      	adds	r3, #2
 800103c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001050:	ee17 3a90 	vmov	r3, s15
 8001054:	b21c      	sxth	r4, r3
 8001056:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800105a:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	4623      	mov	r3, r4
 8001064:	f7ff faec 	bl	8000640 <lcdLine>
 8001068:	e043      	b.n	80010f2 <lcdFilledTriangle+0x306>
		} else {
			lcdLine(x, (int16_t)(der[1] * (x-points[2]) + points[3]), x, (int16_t)(der[2] * (x-points[0]) + points[1]), colour);
 800106a:	ed97 7a04 	vldr	s14, [r7, #16]
 800106e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	3204      	adds	r2, #4
 8001076:	f9b2 2000 	ldrsh.w	r2, [r2]
 800107a:	1a9b      	subs	r3, r3, r2
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001084:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3306      	adds	r3, #6
 800108c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001090:	ee07 3a90 	vmov	s15, r3
 8001094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a0:	ee17 3a90 	vmov	r3, s15
 80010a4:	b219      	sxth	r1, r3
 80010a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80010aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3302      	adds	r3, #2
 80010c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010da:	ee17 3a90 	vmov	r3, s15
 80010de:	b21c      	sxth	r4, r3
 80010e0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80010e4:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 80010e8:	887b      	ldrh	r3, [r7, #2]
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	4623      	mov	r3, r4
 80010ee:	f7ff faa7 	bl	8000640 <lcdLine>
	for (int16_t x = points[0]; x <= points[4]; x++) {	// vykreslit trojuholnik
 80010f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	3301      	adds	r3, #1
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	83fb      	strh	r3, [r7, #30]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3308      	adds	r3, #8
 8001102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001106:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800110a:	429a      	cmp	r2, r3
 800110c:	f77f af61 	ble.w	8000fd2 <lcdFilledTriangle+0x1e6>
		}
	}

}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	372c      	adds	r7, #44	@ 0x2c
 8001116:	46bd      	mov	sp, r7
 8001118:	bd90      	pop	{r4, r7, pc}

0800111a <lcdFilledDottedTriangle>:

void lcdFilledDottedTriangle(int16_t *points, uint16_t colour, uint16_t step)
{
 800111a:	b590      	push	{r4, r7, lr}
 800111c:	b08d      	sub	sp, #52	@ 0x34
 800111e:	af02      	add	r7, sp, #8
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	460b      	mov	r3, r1
 8001124:	807b      	strh	r3, [r7, #2]
 8001126:	4613      	mov	r3, r2
 8001128:	803b      	strh	r3, [r7, #0]
	// zoradim body od vzostupne podla osi X
	for(int16_t i = 2; i>=0; i--){
 800112a:	2302      	movs	r3, #2
 800112c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800112e:	e067      	b.n	8001200 <lcdFilledDottedTriangle+0xe6>
		int16_t max = -30000;
 8001130:	f648 23d0 	movw	r3, #35536	@ 0x8ad0
 8001134:	84bb      	strh	r3, [r7, #36]	@ 0x24
		int16_t maxInd = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	847b      	strh	r3, [r7, #34]	@ 0x22
		for(int16_t k = 0; k<=i; k++){
 800113a:	2300      	movs	r3, #0
 800113c:	843b      	strh	r3, [r7, #32]
 800113e:	e019      	b.n	8001174 <lcdFilledDottedTriangle+0x5a>
			if (points[k*2]>=max){
 8001140:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001152:	429a      	cmp	r2, r3
 8001154:	dc08      	bgt.n	8001168 <lcdFilledDottedTriangle+0x4e>
				max = points[k*2];
 8001156:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	84bb      	strh	r3, [r7, #36]	@ 0x24
				maxInd = k;
 8001164:	8c3b      	ldrh	r3, [r7, #32]
 8001166:	847b      	strh	r3, [r7, #34]	@ 0x22
		for(int16_t k = 0; k<=i; k++){
 8001168:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800116c:	b29b      	uxth	r3, r3
 800116e:	3301      	adds	r3, #1
 8001170:	b29b      	uxth	r3, r3
 8001172:	843b      	strh	r3, [r7, #32]
 8001174:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001178:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800117c:	429a      	cmp	r2, r3
 800117e:	dddf      	ble.n	8001140 <lcdFilledDottedTriangle+0x26>
			}
		}
		int16_t pomX = points[maxInd*2]; //ulozim si maximum
 8001180:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	83bb      	strh	r3, [r7, #28]
		int16_t pomY = points[maxInd*2+1];
 800118e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	837b      	strh	r3, [r7, #26]
		points[maxInd*2] = points[i*2]; //na jeho poziciu premiestnim data z konca
 800119e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	441a      	add	r2, r3
 80011a8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	440b      	add	r3, r1
 80011b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011b6:	801a      	strh	r2, [r3, #0]
		points[maxInd*2+1] = points[i*2+1];
 80011b8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	3302      	adds	r3, #2
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	441a      	add	r2, r3
 80011c4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	3302      	adds	r3, #2
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	440b      	add	r3, r1
 80011d0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011d4:	801a      	strh	r2, [r3, #0]
		points[i*2] = pomX; //na jeho koniec dat dam maximum
 80011d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	4413      	add	r3, r2
 80011e0:	8bba      	ldrh	r2, [r7, #28]
 80011e2:	801a      	strh	r2, [r3, #0]
		points[i*2+1] = pomY;
 80011e4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	8b7a      	ldrh	r2, [r7, #26]
 80011f2:	801a      	strh	r2, [r3, #0]
	for(int16_t i = 2; i>=0; i--){
 80011f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	3b01      	subs	r3, #1
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001200:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001204:	2b00      	cmp	r3, #0
 8001206:	da93      	bge.n	8001130 <lcdFilledDottedTriangle+0x16>
	}

	float_t der[3];

	//treba osetrit delenie nulou pri vypocte strmosti priamky
	if((points[2] - points[0]) != 0){ //medzi bodmi 1 a 2
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3304      	adds	r3, #4
 800120c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	429a      	cmp	r2, r3
 8001218:	d01e      	beq.n	8001258 <lcdFilledDottedTriangle+0x13e>
		der[0] = (float_t)(points[3] - points[1]) / (float_t)(points[2] - points[0]);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3306      	adds	r3, #6
 800121e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001222:	461a      	mov	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3302      	adds	r3, #2
 8001228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	ee07 3a90 	vmov	s15, r3
 8001232:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3304      	adds	r3, #4
 800123a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800123e:	461a      	mov	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001254:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	if((points[4] - points[2]) != 0){ //medzi bodmi 2 a 3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3308      	adds	r3, #8
 800125c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3304      	adds	r3, #4
 8001264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001268:	429a      	cmp	r2, r3
 800126a:	d01f      	beq.n	80012ac <lcdFilledDottedTriangle+0x192>
		der[1] = (float_t)(points[5] - points[3]) / (float_t)(points[4] - points[2]);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	330a      	adds	r3, #10
 8001270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001274:	461a      	mov	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3306      	adds	r3, #6
 800127a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3308      	adds	r3, #8
 800128c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001290:	461a      	mov	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3304      	adds	r3, #4
 8001296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	ee07 3a90 	vmov	s15, r3
 80012a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a8:	edc7 7a04 	vstr	s15, [r7, #16]
	}
	if((points[4] - points[0]) != 0){ //medzi bodmi 1 a 3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3308      	adds	r3, #8
 80012b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d01e      	beq.n	80012fc <lcdFilledDottedTriangle+0x1e2>
		der[2] = (float_t)(points[5] - points[1]) / (float_t)(points[4] - points[0]);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	330a      	adds	r3, #10
 80012c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c6:	461a      	mov	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3302      	adds	r3, #2
 80012cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	3308      	adds	r3, #8
 80012de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e2:	461a      	mov	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f8:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	for (int16_t x = points[0]; x <= points[4]; x+=step) {	// vykreslit trojuholnik
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	83fb      	strh	r3, [r7, #30]
 8001302:	e098      	b.n	8001436 <lcdFilledDottedTriangle+0x31c>
		if (x < points[2]) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3304      	adds	r3, #4
 8001308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001310:	429a      	cmp	r2, r3
 8001312:	da45      	bge.n	80013a0 <lcdFilledDottedTriangle+0x286>
			lcdDottedLine(x, (int16_t)(der[0] * (x-points[0]) + points[1]), x, (int16_t)(der[2] * (x-points[0]) + points[1]), colour, step);
 8001314:	ed97 7a03 	vldr	s14, [r7, #12]
 8001318:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001322:	1a9b      	subs	r3, r3, r2
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3302      	adds	r3, #2
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001348:	ee17 3a90 	vmov	r3, s15
 800134c:	b219      	sxth	r1, r3
 800134e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001352:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	f9b2 2000 	ldrsh.w	r2, [r2]
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001366:	ee27 7a27 	vmul.f32	s14, s14, s15
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3302      	adds	r3, #2
 800136e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800137a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001382:	ee17 3a90 	vmov	r3, s15
 8001386:	b21c      	sxth	r4, r3
 8001388:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800138c:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 8001390:	883b      	ldrh	r3, [r7, #0]
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	4623      	mov	r3, r4
 800139a:	f7ff fa5c 	bl	8000856 <lcdDottedLine>
 800139e:	e045      	b.n	800142c <lcdFilledDottedTriangle+0x312>
		} else {
			lcdDottedLine(x, (int16_t)(der[1] * (x-points[2]) + points[3]), x, (int16_t)(der[2] * (x-points[0]) + points[1]), colour, step);
 80013a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80013a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	3204      	adds	r2, #4
 80013ac:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3306      	adds	r3, #6
 80013c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d6:	ee17 3a90 	vmov	r3, s15
 80013da:	b219      	sxth	r1, r3
 80013dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80013e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80013ea:	1a9b      	subs	r3, r3, r2
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3302      	adds	r3, #2
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001410:	ee17 3a90 	vmov	r3, s15
 8001414:	b21c      	sxth	r4, r3
 8001416:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800141a:	f9b7 001e 	ldrsh.w	r0, [r7, #30]
 800141e:	883b      	ldrh	r3, [r7, #0]
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	887b      	ldrh	r3, [r7, #2]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	4623      	mov	r3, r4
 8001428:	f7ff fa15 	bl	8000856 <lcdDottedLine>
	for (int16_t x = points[0]; x <= points[4]; x+=step) {	// vykreslit trojuholnik
 800142c:	8bfa      	ldrh	r2, [r7, #30]
 800142e:	883b      	ldrh	r3, [r7, #0]
 8001430:	4413      	add	r3, r2
 8001432:	b29b      	uxth	r3, r3
 8001434:	83fb      	strh	r3, [r7, #30]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3308      	adds	r3, #8
 800143a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800143e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001442:	429a      	cmp	r2, r3
 8001444:	f77f af5e 	ble.w	8001304 <lcdFilledDottedTriangle+0x1ea>
		}
	}

}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	372c      	adds	r7, #44	@ 0x2c
 800144e:	46bd      	mov	sp, r7
 8001450:	bd90      	pop	{r4, r7, pc}

08001452 <lcdFilledPolygon>:

// nesmie mat stred mimo svojej plochy
void lcdFilledPolygon(int16_t *points, int16_t sides, uint16_t colour){
 8001452:	b580      	push	{r7, lr}
 8001454:	b088      	sub	sp, #32
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	807b      	strh	r3, [r7, #2]
 800145e:	4613      	mov	r3, r2
 8001460:	803b      	strh	r3, [r7, #0]
	float_t avgX = 0;
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
	float_t avgY = 0;
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
	for(int8_t i=0; i<sides; i++){
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
 8001472:	e028      	b.n	80014c6 <lcdFilledPolygon+0x74>
		avgX += (float_t)(points[i*2]);
 8001474:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148a:	ed97 7a07 	vldr	s14, [r7, #28]
 800148e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001492:	edc7 7a07 	vstr	s15, [r7, #28]
		avgY += (float_t)(points[i*2+1]);
 8001496:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80014b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b6:	edc7 7a06 	vstr	s15, [r7, #24]
	for(int8_t i=0; i<sides; i++){
 80014ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	3301      	adds	r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	75fb      	strb	r3, [r7, #23]
 80014c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dccf      	bgt.n	8001474 <lcdFilledPolygon+0x22>
	}
	avgX = (float_t)(avgX)/(float_t)(sides);
 80014d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014d8:	ee07 3a90 	vmov	s15, r3
 80014dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80014e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014e8:	edc7 7a07 	vstr	s15, [r7, #28]
	avgY = (float_t)(avgY)/(float_t)(sides);
 80014ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f8:	edd7 6a06 	vldr	s13, [r7, #24]
 80014fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001500:	edc7 7a06 	vstr	s15, [r7, #24]

	for(int8_t i=0; i<sides; i++){
 8001504:	2300      	movs	r3, #0
 8001506:	75bb      	strb	r3, [r7, #22]
 8001508:	e04e      	b.n	80015a8 <lcdFilledPolygon+0x156>
		int16_t pointsT[] = {points[i*2], points[i*2+1], points[(2*((i+1)%sides))], points[(2*((i+1)%sides) + 1)], (int16_t)(avgX), (int16_t)(avgY)};
 800150a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001518:	813b      	strh	r3, [r7, #8]
 800151a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	3302      	adds	r3, #2
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152a:	817b      	strh	r3, [r7, #10]
 800152c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001530:	3301      	adds	r3, #1
 8001532:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001536:	fb93 f1f2 	sdiv	r1, r3, r2
 800153a:	fb01 f202 	mul.w	r2, r1, r2
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154a:	81bb      	strh	r3, [r7, #12]
 800154c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001550:	3301      	adds	r3, #1
 8001552:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001556:	fb93 f1f2 	sdiv	r1, r3, r2
 800155a:	fb01 f202 	mul.w	r2, r1, r2
 800155e:	1a9b      	subs	r3, r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	3302      	adds	r3, #2
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	4413      	add	r3, r2
 8001568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156c:	81fb      	strh	r3, [r7, #14]
 800156e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001572:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001576:	ee17 3a90 	vmov	r3, s15
 800157a:	b21b      	sxth	r3, r3
 800157c:	823b      	strh	r3, [r7, #16]
 800157e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001582:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001586:	ee17 3a90 	vmov	r3, s15
 800158a:	b21b      	sxth	r3, r3
 800158c:	827b      	strh	r3, [r7, #18]
		lcdFilledTriangle( pointsT, colour );
 800158e:	883a      	ldrh	r2, [r7, #0]
 8001590:	f107 0308 	add.w	r3, r7, #8
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fc28 	bl	8000dec <lcdFilledTriangle>
	for(int8_t i=0; i<sides; i++){
 800159c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	75bb      	strb	r3, [r7, #22]
 80015a8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	dca9      	bgt.n	800150a <lcdFilledPolygon+0xb8>
	}
}
 80015b6:	bf00      	nop
 80015b8:	bf00      	nop
 80015ba:	3720      	adds	r7, #32
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <lcdFilledDottedPolygon>:

void lcdFilledDottedPolygon(int16_t *points, int16_t sides, uint16_t colour, uint16_t step){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	@ 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4603      	mov	r3, r0
 80015d0:	817b      	strh	r3, [r7, #10]
 80015d2:	460b      	mov	r3, r1
 80015d4:	813b      	strh	r3, [r7, #8]
 80015d6:	4613      	mov	r3, r2
 80015d8:	80fb      	strh	r3, [r7, #6]
	float_t avgX = 0;
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
	float_t avgY = 0;
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
	for(int8_t i=0; i<sides; i++){
 80015e6:	2300      	movs	r3, #0
 80015e8:	77fb      	strb	r3, [r7, #31]
 80015ea:	e028      	b.n	800163e <lcdFilledDottedPolygon+0x7e>
		avgX += (float_t)(points[i*2]);
 80015ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001602:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800160a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		avgY += (float_t)(points[i*2+1]);
 800160e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4413      	add	r3, r2
 800161a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001626:	ed97 7a08 	vldr	s14, [r7, #32]
 800162a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162e:	edc7 7a08 	vstr	s15, [r7, #32]
	for(int8_t i=0; i<sides; i++){
 8001632:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	3301      	adds	r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	77fb      	strb	r3, [r7, #31]
 800163e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001642:	b21b      	sxth	r3, r3
 8001644:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001648:	429a      	cmp	r2, r3
 800164a:	dccf      	bgt.n	80015ec <lcdFilledDottedPolygon+0x2c>
	}
	avgX = (float_t)(avgX)/(float_t)(sides);
 800164c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001658:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800165c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001660:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	avgY = (float_t)(avgY)/(float_t)(sides);
 8001664:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001670:	edd7 6a08 	vldr	s13, [r7, #32]
 8001674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001678:	edc7 7a08 	vstr	s15, [r7, #32]

	for(int8_t i=0; i<sides; i++){
 800167c:	2300      	movs	r3, #0
 800167e:	77bb      	strb	r3, [r7, #30]
 8001680:	e04e      	b.n	8001720 <lcdFilledDottedPolygon+0x160>
		int16_t pointsT[] = {points[i*2], points[i*2+1], points[(2*((i+1)%sides))], points[(2*((i+1)%sides) + 1)], (int16_t)(avgX), (int16_t)(avgY)};
 8001682:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001690:	823b      	strh	r3, [r7, #16]
 8001692:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	3302      	adds	r3, #2
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4413      	add	r3, r2
 800169e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a2:	827b      	strh	r3, [r7, #18]
 80016a4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80016a8:	3301      	adds	r3, #1
 80016aa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80016ae:	fb93 f1f2 	sdiv	r1, r3, r2
 80016b2:	fb01 f202 	mul.w	r2, r1, r2
 80016b6:	1a9b      	subs	r3, r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4413      	add	r3, r2
 80016be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c2:	82bb      	strh	r3, [r7, #20]
 80016c4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80016c8:	3301      	adds	r3, #1
 80016ca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80016ce:	fb93 f1f2 	sdiv	r1, r3, r2
 80016d2:	fb01 f202 	mul.w	r2, r1, r2
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	3302      	adds	r3, #2
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	82fb      	strh	r3, [r7, #22]
 80016e6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80016ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ee:	ee17 3a90 	vmov	r3, s15
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	833b      	strh	r3, [r7, #24]
 80016f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80016fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016fe:	ee17 3a90 	vmov	r3, s15
 8001702:	b21b      	sxth	r3, r3
 8001704:	837b      	strh	r3, [r7, #26]
		lcdFilledDottedTriangle( pointsT, colour, step );
 8001706:	88fa      	ldrh	r2, [r7, #6]
 8001708:	8939      	ldrh	r1, [r7, #8]
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fd03 	bl	800111a <lcdFilledDottedTriangle>
	for(int8_t i=0; i<sides; i++){
 8001714:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	3301      	adds	r3, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	77bb      	strb	r3, [r7, #30]
 8001720:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001724:	b21b      	sxth	r3, r3
 8001726:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800172a:	429a      	cmp	r2, r3
 800172c:	dca9      	bgt.n	8001682 <lcdFilledDottedPolygon+0xc2>
	}
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	@ 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <lcdCircle>:

void lcdCircle(int16_t xCentre, int16_t yCentre, int16_t radius, uint16_t colour)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	4604      	mov	r4, r0
 8001740:	4608      	mov	r0, r1
 8001742:	4611      	mov	r1, r2
 8001744:	461a      	mov	r2, r3
 8001746:	4623      	mov	r3, r4
 8001748:	80fb      	strh	r3, [r7, #6]
 800174a:	4603      	mov	r3, r0
 800174c:	80bb      	strh	r3, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	807b      	strh	r3, [r7, #2]
 8001752:	4613      	mov	r3, r2
 8001754:	803b      	strh	r3, [r7, #0]
	int16_t x = 0, y = radius;
 8001756:	2300      	movs	r3, #0
 8001758:	81fb      	strh	r3, [r7, #14]
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	81bb      	strh	r3, [r7, #12]
	int16_t d = 3 - (2 * radius);
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	b29b      	uxth	r3, r3
 8001764:	f1c3 0303 	rsb	r3, r3, #3
 8001768:	b29b      	uxth	r3, r3
 800176a:	817b      	strh	r3, [r7, #10]

    while(x <= y)
 800176c:	e095      	b.n	800189a <lcdCircle+0x162>
	{
		lcdPlot(xCentre + x, yCentre + y, colour);
 800176e:	88fa      	ldrh	r2, [r7, #6]
 8001770:	89fb      	ldrh	r3, [r7, #14]
 8001772:	4413      	add	r3, r2
 8001774:	b29b      	uxth	r3, r3
 8001776:	b218      	sxth	r0, r3
 8001778:	88ba      	ldrh	r2, [r7, #4]
 800177a:	89bb      	ldrh	r3, [r7, #12]
 800177c:	4413      	add	r3, r2
 800177e:	b29b      	uxth	r3, r3
 8001780:	b21b      	sxth	r3, r3
 8001782:	883a      	ldrh	r2, [r7, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	f7fe ff0e 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre + y, yCentre + x, colour);
 800178a:	88fa      	ldrh	r2, [r7, #6]
 800178c:	89bb      	ldrh	r3, [r7, #12]
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	b218      	sxth	r0, r3
 8001794:	88ba      	ldrh	r2, [r7, #4]
 8001796:	89fb      	ldrh	r3, [r7, #14]
 8001798:	4413      	add	r3, r2
 800179a:	b29b      	uxth	r3, r3
 800179c:	b21b      	sxth	r3, r3
 800179e:	883a      	ldrh	r2, [r7, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	f7fe ff00 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre - x, yCentre + y, colour);
 80017a6:	88fa      	ldrh	r2, [r7, #6]
 80017a8:	89fb      	ldrh	r3, [r7, #14]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	b218      	sxth	r0, r3
 80017b0:	88ba      	ldrh	r2, [r7, #4]
 80017b2:	89bb      	ldrh	r3, [r7, #12]
 80017b4:	4413      	add	r3, r2
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	883a      	ldrh	r2, [r7, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	f7fe fef2 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre + y, yCentre - x, colour);
 80017c2:	88fa      	ldrh	r2, [r7, #6]
 80017c4:	89bb      	ldrh	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	b218      	sxth	r0, r3
 80017cc:	88ba      	ldrh	r2, [r7, #4]
 80017ce:	89fb      	ldrh	r3, [r7, #14]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	883a      	ldrh	r2, [r7, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	f7fe fee4 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre - x, yCentre - y, colour);
 80017de:	88fa      	ldrh	r2, [r7, #6]
 80017e0:	89fb      	ldrh	r3, [r7, #14]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	b218      	sxth	r0, r3
 80017e8:	88ba      	ldrh	r2, [r7, #4]
 80017ea:	89bb      	ldrh	r3, [r7, #12]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	b21b      	sxth	r3, r3
 80017f2:	883a      	ldrh	r2, [r7, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7fe fed6 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre - y, yCentre - x, colour);
 80017fa:	88fa      	ldrh	r2, [r7, #6]
 80017fc:	89bb      	ldrh	r3, [r7, #12]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	b29b      	uxth	r3, r3
 8001802:	b218      	sxth	r0, r3
 8001804:	88ba      	ldrh	r2, [r7, #4]
 8001806:	89fb      	ldrh	r3, [r7, #14]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	b29b      	uxth	r3, r3
 800180c:	b21b      	sxth	r3, r3
 800180e:	883a      	ldrh	r2, [r7, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	f7fe fec8 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre + x, yCentre - y, colour);
 8001816:	88fa      	ldrh	r2, [r7, #6]
 8001818:	89fb      	ldrh	r3, [r7, #14]
 800181a:	4413      	add	r3, r2
 800181c:	b29b      	uxth	r3, r3
 800181e:	b218      	sxth	r0, r3
 8001820:	88ba      	ldrh	r2, [r7, #4]
 8001822:	89bb      	ldrh	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	b29b      	uxth	r3, r3
 8001828:	b21b      	sxth	r3, r3
 800182a:	883a      	ldrh	r2, [r7, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f7fe feba 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre - y, yCentre + x, colour);
 8001832:	88fa      	ldrh	r2, [r7, #6]
 8001834:	89bb      	ldrh	r3, [r7, #12]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	b29b      	uxth	r3, r3
 800183a:	b218      	sxth	r0, r3
 800183c:	88ba      	ldrh	r2, [r7, #4]
 800183e:	89fb      	ldrh	r3, [r7, #14]
 8001840:	4413      	add	r3, r2
 8001842:	b29b      	uxth	r3, r3
 8001844:	b21b      	sxth	r3, r3
 8001846:	883a      	ldrh	r2, [r7, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	f7fe feac 	bl	80005a6 <lcdPlot>

		if (d < 0) d += (4 * x) + 6;
 800184e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001852:	2b00      	cmp	r3, #0
 8001854:	da09      	bge.n	800186a <lcdCircle+0x132>
 8001856:	89fb      	ldrh	r3, [r7, #14]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	b29a      	uxth	r2, r3
 800185c:	897b      	ldrh	r3, [r7, #10]
 800185e:	4413      	add	r3, r2
 8001860:	b29b      	uxth	r3, r3
 8001862:	3306      	adds	r3, #6
 8001864:	b29b      	uxth	r3, r3
 8001866:	817b      	strh	r3, [r7, #10]
 8001868:	e011      	b.n	800188e <lcdCircle+0x156>
		else
		{
			d += (4 * (x - y)) + 10;
 800186a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800186e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	b29b      	uxth	r3, r3
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	b29a      	uxth	r2, r3
 800187a:	897b      	ldrh	r3, [r7, #10]
 800187c:	4413      	add	r3, r2
 800187e:	b29b      	uxth	r3, r3
 8001880:	330a      	adds	r3, #10
 8001882:	b29b      	uxth	r3, r3
 8001884:	817b      	strh	r3, [r7, #10]
			y -= 1;
 8001886:	89bb      	ldrh	r3, [r7, #12]
 8001888:	3b01      	subs	r3, #1
 800188a:	b29b      	uxth	r3, r3
 800188c:	81bb      	strh	r3, [r7, #12]
		}

		x++;
 800188e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001892:	b29b      	uxth	r3, r3
 8001894:	3301      	adds	r3, #1
 8001896:	b29b      	uxth	r3, r3
 8001898:	81fb      	strh	r3, [r7, #14]
    while(x <= y)
 800189a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800189e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	f77f af63 	ble.w	800176e <lcdCircle+0x36>
	}
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd90      	pop	{r4, r7, pc}

080018b2 <lcdDottedCircle>:

void lcdDottedCircle(int16_t xCentre, int16_t yCentre, int16_t radius, uint16_t colour, uint16_t step)
{
 80018b2:	b590      	push	{r4, r7, lr}
 80018b4:	b085      	sub	sp, #20
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4604      	mov	r4, r0
 80018ba:	4608      	mov	r0, r1
 80018bc:	4611      	mov	r1, r2
 80018be:	461a      	mov	r2, r3
 80018c0:	4623      	mov	r3, r4
 80018c2:	80fb      	strh	r3, [r7, #6]
 80018c4:	4603      	mov	r3, r0
 80018c6:	80bb      	strh	r3, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
 80018cc:	4613      	mov	r3, r2
 80018ce:	803b      	strh	r3, [r7, #0]
	int16_t x = 0, y = radius;
 80018d0:	2300      	movs	r3, #0
 80018d2:	81fb      	strh	r3, [r7, #14]
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	81bb      	strh	r3, [r7, #12]
	int16_t d = 3 - (2 * radius);
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	b29b      	uxth	r3, r3
 80018de:	f1c3 0303 	rsb	r3, r3, #3
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	817b      	strh	r3, [r7, #10]

    while(x <= y)
 80018e6:	e095      	b.n	8001a14 <lcdDottedCircle+0x162>
	{
		lcdPlot(xCentre + x, yCentre + y, colour);
 80018e8:	88fa      	ldrh	r2, [r7, #6]
 80018ea:	89fb      	ldrh	r3, [r7, #14]
 80018ec:	4413      	add	r3, r2
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	b218      	sxth	r0, r3
 80018f2:	88ba      	ldrh	r2, [r7, #4]
 80018f4:	89bb      	ldrh	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	883a      	ldrh	r2, [r7, #0]
 80018fe:	4619      	mov	r1, r3
 8001900:	f7fe fe51 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre + y, yCentre + x, colour);
 8001904:	88fa      	ldrh	r2, [r7, #6]
 8001906:	89bb      	ldrh	r3, [r7, #12]
 8001908:	4413      	add	r3, r2
 800190a:	b29b      	uxth	r3, r3
 800190c:	b218      	sxth	r0, r3
 800190e:	88ba      	ldrh	r2, [r7, #4]
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	4413      	add	r3, r2
 8001914:	b29b      	uxth	r3, r3
 8001916:	b21b      	sxth	r3, r3
 8001918:	883a      	ldrh	r2, [r7, #0]
 800191a:	4619      	mov	r1, r3
 800191c:	f7fe fe43 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre - x, yCentre + y, colour);
 8001920:	88fa      	ldrh	r2, [r7, #6]
 8001922:	89fb      	ldrh	r3, [r7, #14]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	b29b      	uxth	r3, r3
 8001928:	b218      	sxth	r0, r3
 800192a:	88ba      	ldrh	r2, [r7, #4]
 800192c:	89bb      	ldrh	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	b29b      	uxth	r3, r3
 8001932:	b21b      	sxth	r3, r3
 8001934:	883a      	ldrh	r2, [r7, #0]
 8001936:	4619      	mov	r1, r3
 8001938:	f7fe fe35 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre + y, yCentre - x, colour);
 800193c:	88fa      	ldrh	r2, [r7, #6]
 800193e:	89bb      	ldrh	r3, [r7, #12]
 8001940:	4413      	add	r3, r2
 8001942:	b29b      	uxth	r3, r3
 8001944:	b218      	sxth	r0, r3
 8001946:	88ba      	ldrh	r2, [r7, #4]
 8001948:	89fb      	ldrh	r3, [r7, #14]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b29b      	uxth	r3, r3
 800194e:	b21b      	sxth	r3, r3
 8001950:	883a      	ldrh	r2, [r7, #0]
 8001952:	4619      	mov	r1, r3
 8001954:	f7fe fe27 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre - x, yCentre - y, colour);
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	89fb      	ldrh	r3, [r7, #14]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	b29b      	uxth	r3, r3
 8001960:	b218      	sxth	r0, r3
 8001962:	88ba      	ldrh	r2, [r7, #4]
 8001964:	89bb      	ldrh	r3, [r7, #12]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	b29b      	uxth	r3, r3
 800196a:	b21b      	sxth	r3, r3
 800196c:	883a      	ldrh	r2, [r7, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	f7fe fe19 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre - y, yCentre - x, colour);
 8001974:	88fa      	ldrh	r2, [r7, #6]
 8001976:	89bb      	ldrh	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	b29b      	uxth	r3, r3
 800197c:	b218      	sxth	r0, r3
 800197e:	88ba      	ldrh	r2, [r7, #4]
 8001980:	89fb      	ldrh	r3, [r7, #14]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	b29b      	uxth	r3, r3
 8001986:	b21b      	sxth	r3, r3
 8001988:	883a      	ldrh	r2, [r7, #0]
 800198a:	4619      	mov	r1, r3
 800198c:	f7fe fe0b 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre + x, yCentre - y, colour);
 8001990:	88fa      	ldrh	r2, [r7, #6]
 8001992:	89fb      	ldrh	r3, [r7, #14]
 8001994:	4413      	add	r3, r2
 8001996:	b29b      	uxth	r3, r3
 8001998:	b218      	sxth	r0, r3
 800199a:	88ba      	ldrh	r2, [r7, #4]
 800199c:	89bb      	ldrh	r3, [r7, #12]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	883a      	ldrh	r2, [r7, #0]
 80019a6:	4619      	mov	r1, r3
 80019a8:	f7fe fdfd 	bl	80005a6 <lcdPlot>
		lcdPlot(xCentre - y, yCentre + x, colour);
 80019ac:	88fa      	ldrh	r2, [r7, #6]
 80019ae:	89bb      	ldrh	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	b218      	sxth	r0, r3
 80019b6:	88ba      	ldrh	r2, [r7, #4]
 80019b8:	89fb      	ldrh	r3, [r7, #14]
 80019ba:	4413      	add	r3, r2
 80019bc:	b29b      	uxth	r3, r3
 80019be:	b21b      	sxth	r3, r3
 80019c0:	883a      	ldrh	r2, [r7, #0]
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7fe fdef 	bl	80005a6 <lcdPlot>

		if (d < 0) d += (4 * x) + 6;
 80019c8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	da09      	bge.n	80019e4 <lcdDottedCircle+0x132>
 80019d0:	89fb      	ldrh	r3, [r7, #14]
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	897b      	ldrh	r3, [r7, #10]
 80019d8:	4413      	add	r3, r2
 80019da:	b29b      	uxth	r3, r3
 80019dc:	3306      	adds	r3, #6
 80019de:	b29b      	uxth	r3, r3
 80019e0:	817b      	strh	r3, [r7, #10]
 80019e2:	e012      	b.n	8001a0a <lcdDottedCircle+0x158>
		else
		{
			d += (4 * (x - y)) + 10;
 80019e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	897b      	ldrh	r3, [r7, #10]
 80019f6:	4413      	add	r3, r2
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	330a      	adds	r3, #10
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	817b      	strh	r3, [r7, #10]
			y -= step;
 8001a00:	89ba      	ldrh	r2, [r7, #12]
 8001a02:	8c3b      	ldrh	r3, [r7, #32]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	81bb      	strh	r3, [r7, #12]
		}

		x+= step;
 8001a0a:	89fa      	ldrh	r2, [r7, #14]
 8001a0c:	8c3b      	ldrh	r3, [r7, #32]
 8001a0e:	4413      	add	r3, r2
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	81fb      	strh	r3, [r7, #14]
    while(x <= y)
 8001a14:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	f77f af63 	ble.w	80018e8 <lcdDottedCircle+0x36>
	}
}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd90      	pop	{r4, r7, pc}

08001a2c <lcdFilledCircle>:

void lcdFilledCircle(int16_t xCentre, int16_t yCentre, int16_t radius, uint16_t colour)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	4604      	mov	r4, r0
 8001a34:	4608      	mov	r0, r1
 8001a36:	4611      	mov	r1, r2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	80fb      	strh	r3, [r7, #6]
 8001a3e:	4603      	mov	r3, r0
 8001a40:	80bb      	strh	r3, [r7, #4]
 8001a42:	460b      	mov	r3, r1
 8001a44:	807b      	strh	r3, [r7, #2]
 8001a46:	4613      	mov	r3, r2
 8001a48:	803b      	strh	r3, [r7, #0]
	int16_t x = 0, y = radius;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	81fb      	strh	r3, [r7, #14]
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	81bb      	strh	r3, [r7, #12]
	int16_t d = 3 - (2 * radius);
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	f1c3 0303 	rsb	r3, r3, #3
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	817b      	strh	r3, [r7, #10]

	while(x <= y)
 8001a60:	e08b      	b.n	8001b7a <lcdFilledCircle+0x14e>
	{
		lcdLine(xCentre + x, yCentre + y, xCentre + x, yCentre -y, colour);
 8001a62:	88fa      	ldrh	r2, [r7, #6]
 8001a64:	89fb      	ldrh	r3, [r7, #14]
 8001a66:	4413      	add	r3, r2
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	b218      	sxth	r0, r3
 8001a6c:	88ba      	ldrh	r2, [r7, #4]
 8001a6e:	89bb      	ldrh	r3, [r7, #12]
 8001a70:	4413      	add	r3, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	b219      	sxth	r1, r3
 8001a76:	88fa      	ldrh	r2, [r7, #6]
 8001a78:	89fb      	ldrh	r3, [r7, #14]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	b21c      	sxth	r4, r3
 8001a80:	88ba      	ldrh	r2, [r7, #4]
 8001a82:	89bb      	ldrh	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	883b      	ldrh	r3, [r7, #0]
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	4622      	mov	r2, r4
 8001a92:	f7fe fdd5 	bl	8000640 <lcdLine>
		lcdLine(xCentre -x, yCentre + y, xCentre - x, yCentre -y, colour);
 8001a96:	88fa      	ldrh	r2, [r7, #6]
 8001a98:	89fb      	ldrh	r3, [r7, #14]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	b218      	sxth	r0, r3
 8001aa0:	88ba      	ldrh	r2, [r7, #4]
 8001aa2:	89bb      	ldrh	r3, [r7, #12]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	b219      	sxth	r1, r3
 8001aaa:	88fa      	ldrh	r2, [r7, #6]
 8001aac:	89fb      	ldrh	r3, [r7, #14]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	b21c      	sxth	r4, r3
 8001ab4:	88ba      	ldrh	r2, [r7, #4]
 8001ab6:	89bb      	ldrh	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	883b      	ldrh	r3, [r7, #0]
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	4622      	mov	r2, r4
 8001ac6:	f7fe fdbb 	bl	8000640 <lcdLine>
		lcdLine(xCentre + y, yCentre + x, xCentre + y, yCentre -x, colour);
 8001aca:	88fa      	ldrh	r2, [r7, #6]
 8001acc:	89bb      	ldrh	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	b218      	sxth	r0, r3
 8001ad4:	88ba      	ldrh	r2, [r7, #4]
 8001ad6:	89fb      	ldrh	r3, [r7, #14]
 8001ad8:	4413      	add	r3, r2
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	b219      	sxth	r1, r3
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	89bb      	ldrh	r3, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	b21c      	sxth	r4, r3
 8001ae8:	88ba      	ldrh	r2, [r7, #4]
 8001aea:	89fb      	ldrh	r3, [r7, #14]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	883b      	ldrh	r3, [r7, #0]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	4613      	mov	r3, r2
 8001af8:	4622      	mov	r2, r4
 8001afa:	f7fe fda1 	bl	8000640 <lcdLine>
		lcdLine(xCentre -y, yCentre + x, xCentre -y, yCentre -x, colour);
 8001afe:	88fa      	ldrh	r2, [r7, #6]
 8001b00:	89bb      	ldrh	r3, [r7, #12]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	b218      	sxth	r0, r3
 8001b08:	88ba      	ldrh	r2, [r7, #4]
 8001b0a:	89fb      	ldrh	r3, [r7, #14]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	b219      	sxth	r1, r3
 8001b12:	88fa      	ldrh	r2, [r7, #6]
 8001b14:	89bb      	ldrh	r3, [r7, #12]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	b21c      	sxth	r4, r3
 8001b1c:	88ba      	ldrh	r2, [r7, #4]
 8001b1e:	89fb      	ldrh	r3, [r7, #14]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	883b      	ldrh	r3, [r7, #0]
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	4622      	mov	r2, r4
 8001b2e:	f7fe fd87 	bl	8000640 <lcdLine>

		if (d < 0) d += (4 * x) + 6;
 8001b32:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	da09      	bge.n	8001b4e <lcdFilledCircle+0x122>
 8001b3a:	89fb      	ldrh	r3, [r7, #14]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	897b      	ldrh	r3, [r7, #10]
 8001b42:	4413      	add	r3, r2
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3306      	adds	r3, #6
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	817b      	strh	r3, [r7, #10]
 8001b4c:	e011      	b.n	8001b72 <lcdFilledCircle+0x146>
		else
		{
			d += (4 * (x - y)) + 10;
 8001b4e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b52:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	897b      	ldrh	r3, [r7, #10]
 8001b60:	4413      	add	r3, r2
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	330a      	adds	r3, #10
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	817b      	strh	r3, [r7, #10]
			y -= 1;
 8001b6a:	89bb      	ldrh	r3, [r7, #12]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	81bb      	strh	r3, [r7, #12]
		}

		x+= 1;
 8001b72:	89fb      	ldrh	r3, [r7, #14]
 8001b74:	3301      	adds	r3, #1
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	81fb      	strh	r3, [r7, #14]
	while(x <= y)
 8001b7a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	f77f af6d 	ble.w	8001a62 <lcdFilledCircle+0x36>
	}
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd90      	pop	{r4, r7, pc}

08001b92 <lcdFilledDottedCircle>:

void lcdFilledDottedCircle(int16_t xCentre, int16_t yCentre, int16_t radius, uint16_t colour, uint16_t step)
{
 8001b92:	b590      	push	{r4, r7, lr}
 8001b94:	b087      	sub	sp, #28
 8001b96:	af02      	add	r7, sp, #8
 8001b98:	4604      	mov	r4, r0
 8001b9a:	4608      	mov	r0, r1
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4623      	mov	r3, r4
 8001ba2:	80fb      	strh	r3, [r7, #6]
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	80bb      	strh	r3, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	803b      	strh	r3, [r7, #0]
	int16_t x = 0, y = radius;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	81fb      	strh	r3, [r7, #14]
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	81bb      	strh	r3, [r7, #12]
	int16_t d = 3 - (2 * radius);
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	f1c3 0303 	rsb	r3, r3, #3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	817b      	strh	r3, [r7, #10]

	while(x <= y)
 8001bc6:	e095      	b.n	8001cf4 <lcdFilledDottedCircle+0x162>
	{
		lcdDottedLine(xCentre + x, yCentre + y, xCentre + x, yCentre -y, colour, step);
 8001bc8:	88fa      	ldrh	r2, [r7, #6]
 8001bca:	89fb      	ldrh	r3, [r7, #14]
 8001bcc:	4413      	add	r3, r2
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	b218      	sxth	r0, r3
 8001bd2:	88ba      	ldrh	r2, [r7, #4]
 8001bd4:	89bb      	ldrh	r3, [r7, #12]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	b219      	sxth	r1, r3
 8001bdc:	88fa      	ldrh	r2, [r7, #6]
 8001bde:	89fb      	ldrh	r3, [r7, #14]
 8001be0:	4413      	add	r3, r2
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	b21c      	sxth	r4, r3
 8001be6:	88ba      	ldrh	r2, [r7, #4]
 8001be8:	89bb      	ldrh	r3, [r7, #12]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b21a      	sxth	r2, r3
 8001bf0:	8c3b      	ldrh	r3, [r7, #32]
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	883b      	ldrh	r3, [r7, #0]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	4622      	mov	r2, r4
 8001bfc:	f7fe fe2b 	bl	8000856 <lcdDottedLine>
		lcdDottedLine(xCentre -x, yCentre + y, xCentre - x, yCentre -y, colour, step);
 8001c00:	88fa      	ldrh	r2, [r7, #6]
 8001c02:	89fb      	ldrh	r3, [r7, #14]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	b218      	sxth	r0, r3
 8001c0a:	88ba      	ldrh	r2, [r7, #4]
 8001c0c:	89bb      	ldrh	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	b219      	sxth	r1, r3
 8001c14:	88fa      	ldrh	r2, [r7, #6]
 8001c16:	89fb      	ldrh	r3, [r7, #14]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	b21c      	sxth	r4, r3
 8001c1e:	88ba      	ldrh	r2, [r7, #4]
 8001c20:	89bb      	ldrh	r3, [r7, #12]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	b21a      	sxth	r2, r3
 8001c28:	8c3b      	ldrh	r3, [r7, #32]
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	883b      	ldrh	r3, [r7, #0]
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	4622      	mov	r2, r4
 8001c34:	f7fe fe0f 	bl	8000856 <lcdDottedLine>
		lcdDottedLine(xCentre + y, yCentre + x, xCentre + y, yCentre -x, colour, step);
 8001c38:	88fa      	ldrh	r2, [r7, #6]
 8001c3a:	89bb      	ldrh	r3, [r7, #12]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	b218      	sxth	r0, r3
 8001c42:	88ba      	ldrh	r2, [r7, #4]
 8001c44:	89fb      	ldrh	r3, [r7, #14]
 8001c46:	4413      	add	r3, r2
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b219      	sxth	r1, r3
 8001c4c:	88fa      	ldrh	r2, [r7, #6]
 8001c4e:	89bb      	ldrh	r3, [r7, #12]
 8001c50:	4413      	add	r3, r2
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	b21c      	sxth	r4, r3
 8001c56:	88ba      	ldrh	r2, [r7, #4]
 8001c58:	89fb      	ldrh	r3, [r7, #14]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	b21a      	sxth	r2, r3
 8001c60:	8c3b      	ldrh	r3, [r7, #32]
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	883b      	ldrh	r3, [r7, #0]
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	4622      	mov	r2, r4
 8001c6c:	f7fe fdf3 	bl	8000856 <lcdDottedLine>
		lcdDottedLine(xCentre -y, yCentre + x, xCentre -y, yCentre -x, colour, step);
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	89bb      	ldrh	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	b218      	sxth	r0, r3
 8001c7a:	88ba      	ldrh	r2, [r7, #4]
 8001c7c:	89fb      	ldrh	r3, [r7, #14]
 8001c7e:	4413      	add	r3, r2
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b219      	sxth	r1, r3
 8001c84:	88fa      	ldrh	r2, [r7, #6]
 8001c86:	89bb      	ldrh	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b21c      	sxth	r4, r3
 8001c8e:	88ba      	ldrh	r2, [r7, #4]
 8001c90:	89fb      	ldrh	r3, [r7, #14]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b21a      	sxth	r2, r3
 8001c98:	8c3b      	ldrh	r3, [r7, #32]
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	883b      	ldrh	r3, [r7, #0]
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	f7fe fdd7 	bl	8000856 <lcdDottedLine>

		if (d < 0) d += (4 * x) + 6;
 8001ca8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	da09      	bge.n	8001cc4 <lcdFilledDottedCircle+0x132>
 8001cb0:	89fb      	ldrh	r3, [r7, #14]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	897b      	ldrh	r3, [r7, #10]
 8001cb8:	4413      	add	r3, r2
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	3306      	adds	r3, #6
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	817b      	strh	r3, [r7, #10]
 8001cc2:	e012      	b.n	8001cea <lcdFilledDottedCircle+0x158>
		else
		{
			d += (4 * (x - y)) + 10;
 8001cc4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001cc8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	897b      	ldrh	r3, [r7, #10]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	330a      	adds	r3, #10
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	817b      	strh	r3, [r7, #10]
			y -= step;
 8001ce0:	89ba      	ldrh	r2, [r7, #12]
 8001ce2:	8c3b      	ldrh	r3, [r7, #32]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	81bb      	strh	r3, [r7, #12]
		}

		x+= step;
 8001cea:	89fa      	ldrh	r2, [r7, #14]
 8001cec:	8c3b      	ldrh	r3, [r7, #32]
 8001cee:	4413      	add	r3, r2
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	81fb      	strh	r3, [r7, #14]
	while(x <= y)
 8001cf4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001cf8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	f77f af63 	ble.w	8001bc8 <lcdFilledDottedCircle+0x36>
	}
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd90      	pop	{r4, r7, pc}

08001d0c <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4604      	mov	r4, r0
 8001d14:	4608      	mov	r0, r1
 8001d16:	4611      	mov	r1, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4623      	mov	r3, r4
 8001d1c:	71fb      	strb	r3, [r7, #7]
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71bb      	strb	r3, [r7, #6]
 8001d22:	460b      	mov	r3, r1
 8001d24:	717b      	strb	r3, [r7, #5]
 8001d26:	4613      	mov	r3, r2
 8001d28:	807b      	strh	r3, [r7, #2]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8001d2a:	202a      	movs	r0, #42	@ 0x2a
 8001d2c:	f7fe fb1e 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7fe fb2e 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(x);
 8001d36:	79bb      	ldrb	r3, [r7, #6]
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fb29 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001d40:	2000      	movs	r0, #0
 8001d42:	f7fe fb26 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(x+5);
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	3305      	adds	r3, #5
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	b21b      	sxth	r3, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fb1e 	bl	8000392 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8001d56:	202b      	movs	r0, #43	@ 0x2b
 8001d58:	f7fe fb08 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7fe fb18 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(y);
 8001d62:	797b      	ldrb	r3, [r7, #5]
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fb13 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7fe fb10 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8001d72:	207f      	movs	r0, #127	@ 0x7f
 8001d74:	f7fe fb0d 	bl	8000392 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8001d78:	202c      	movs	r0, #44	@ 0x2c
 8001d7a:	f7fe faf7 	bl	800036c <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	73fb      	strb	r3, [r7, #15]
 8001d82:	e036      	b.n	8001df2 <lcdPutCh+0xe6>
	{
		for (column = 0; column < 6; column++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	73bb      	strb	r3, [r7, #14]
 8001d88:	e02d      	b.n	8001de6 <lcdPutCh+0xda>
		{
			// Calculate the mirrored column index
			uint8_t mirroredColumn = 5 - column;
 8001d8a:	7bbb      	ldrb	r3, [r7, #14]
 8001d8c:	f1c3 0305 	rsb	r3, r3, #5
 8001d90:	737b      	strb	r3, [r7, #13]
			// Check the bit corresponding to the current row in the mirrored column
			if ((fontus[character][mirroredColumn]) & (1 << row))
 8001d92:	79fa      	ldrb	r2, [r7, #7]
 8001d94:	7b79      	ldrb	r1, [r7, #13]
 8001d96:	481b      	ldr	r0, [pc, #108]	@ (8001e04 <lcdPutCh+0xf8>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4403      	add	r3, r0
 8001da2:	440b      	add	r3, r1
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	fa42 f303 	asr.w	r3, r2, r3
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <lcdPutCh+0xc0>
				lcdWriteData(fgColour >> 8, fgColour);
 8001db6:	887b      	ldrh	r3, [r7, #2]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	887a      	ldrh	r2, [r7, #2]
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe faf8 	bl	80003ba <lcdWriteData>
 8001dca:	e009      	b.n	8001de0 <lcdPutCh+0xd4>
			else
				lcdWriteData(bgColour >> 8, bgColour);
 8001dcc:	8c3b      	ldrh	r3, [r7, #32]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	8c3a      	ldrh	r2, [r7, #32]
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe faed 	bl	80003ba <lcdWriteData>
		for (column = 0; column < 6; column++)
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	3301      	adds	r3, #1
 8001de4:	73bb      	strb	r3, [r7, #14]
 8001de6:	7bbb      	ldrb	r3, [r7, #14]
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	d9ce      	bls.n	8001d8a <lcdPutCh+0x7e>
	for (row = 0; row < 8; row++)
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	3301      	adds	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	2b07      	cmp	r3, #7
 8001df6:	d9c5      	bls.n	8001d84 <lcdPutCh+0x78>
		}
	}
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd90      	pop	{r4, r7, pc}
 8001e02:	bf00      	nop
 8001e04:	08004284 	.word	0x08004284

08001e08 <lcdPutChSized>:

void lcdPutChSized(unsigned char character, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour, uint8_t size)
{
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af02      	add	r7, sp, #8
 8001e0e:	4604      	mov	r4, r0
 8001e10:	4608      	mov	r0, r1
 8001e12:	4611      	mov	r1, r2
 8001e14:	461a      	mov	r2, r3
 8001e16:	4623      	mov	r3, r4
 8001e18:	71fb      	strb	r3, [r7, #7]
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71bb      	strb	r3, [r7, #6]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	717b      	strb	r3, [r7, #5]
 8001e22:	4613      	mov	r3, r2
 8001e24:	807b      	strh	r3, [r7, #2]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8001e26:	202a      	movs	r0, #42	@ 0x2a
 8001e28:	f7fe faa0 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7fe fab0 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(x);
 8001e32:	79bb      	ldrb	r3, [r7, #6]
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe faab 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7fe faa8 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(x+5*size);
 8001e42:	79bb      	ldrb	r3, [r7, #6]
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	0089      	lsls	r1, r1, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fa99 	bl	8000392 <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8001e60:	202b      	movs	r0, #43	@ 0x2b
 8001e62:	f7fe fa83 	bl	800036c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7fe fa93 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(y);
 8001e6c:	797b      	ldrb	r3, [r7, #5]
 8001e6e:	b21b      	sxth	r3, r3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fa8e 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001e76:	2000      	movs	r0, #0
 8001e78:	f7fe fa8b 	bl	8000392 <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8001e7c:	207f      	movs	r0, #127	@ 0x7f
 8001e7e:	f7fe fa88 	bl	8000392 <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8001e82:	202c      	movs	r0, #44	@ 0x2c
 8001e84:	f7fe fa72 	bl	800036c <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8*size; row+=size)
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	e06b      	b.n	8001f66 <lcdPutChSized+0x15e>
	{
		for (column = 0; column < 6*size; column+=size)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73bb      	strb	r3, [r7, #14]
 8001e92:	e05a      	b.n	8001f4a <lcdPutChSized+0x142>
		{
			uint8_t mirroredColumn = 5*size - column;
 8001e94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e98:	461a      	mov	r2, r3
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	737b      	strb	r3, [r7, #13]
			if ((fontus[character][(uint8_t)(mirroredColumn/size)]) & (1 << (uint8_t)(row/size)))
 8001ea6:	79fa      	ldrb	r2, [r7, #7]
 8001ea8:	7b79      	ldrb	r1, [r7, #13]
 8001eaa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001eae:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	4931      	ldr	r1, [pc, #196]	@ (8001f7c <lcdPutChSized+0x174>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	440b      	add	r3, r1
 8001ec2:	4403      	add	r3, r0
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	fa41 f303 	asr.w	r3, r1, r3
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d02f      	beq.n	8001f40 <lcdPutChSized+0x138>
				lcdFilledRectangle(x+column, y+row, x+column+size-1, y+row+size-1, fgColour);
 8001ee0:	79bb      	ldrb	r3, [r7, #6]
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	7bbb      	ldrb	r3, [r7, #14]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	4413      	add	r3, r2
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	b218      	sxth	r0, r3
 8001eee:	797b      	ldrb	r3, [r7, #5]
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	b219      	sxth	r1, r3
 8001efc:	79bb      	ldrb	r3, [r7, #6]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	7bbb      	ldrb	r3, [r7, #14]
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	b21c      	sxth	r4, r3
 8001f18:	797b      	ldrb	r3, [r7, #5]
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	b21a      	sxth	r2, r3
 8001f34:	887b      	ldrh	r3, [r7, #2]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	4622      	mov	r2, r4
 8001f3c:	f7fe fdf1 	bl	8000b22 <lcdFilledRectangle>
		for (column = 0; column < 6*size; column+=size)
 8001f40:	7bba      	ldrb	r2, [r7, #14]
 8001f42:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f46:	4413      	add	r3, r2
 8001f48:	73bb      	strb	r3, [r7, #14]
 8001f4a:	7bb9      	ldrb	r1, [r7, #14]
 8001f4c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4299      	cmp	r1, r3
 8001f5a:	db9b      	blt.n	8001e94 <lcdPutChSized+0x8c>
	for (row = 0; row < 8*size; row+=size)
 8001f5c:	7bfa      	ldrb	r2, [r7, #15]
 8001f5e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f62:	4413      	add	r3, r2
 8001f64:	73fb      	strb	r3, [r7, #15]
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	db8d      	blt.n	8001e8e <lcdPutChSized+0x86>
		}
	}
}
 8001f72:	bf00      	nop
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd90      	pop	{r4, r7, pc}
 8001f7c:	08004284 	.word	0x08004284

08001f80 <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	71bb      	strb	r3, [r7, #6]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 8001f92:	797b      	ldrb	r3, [r7, #5]
 8001f94:	02db      	lsls	r3, r3, #11
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	79bb      	ldrb	r3, [r7, #6]
 8001f9a:	019b      	lsls	r3, r3, #6
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	b21a      	sxth	r2, r3
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	b29b      	uxth	r3, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <lcdPutS>:
// it easy to place text
uint8_t lcdTextY(uint8_t y) { return y*8; }

// Plot a string of characters to the LCD
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	4608      	mov	r0, r1
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	70fb      	strb	r3, [r7, #3]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	70bb      	strb	r3, [r7, #2]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	803b      	strh	r3, [r7, #0]
	uint8_t origin = x;
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	73bb      	strb	r3, [r7, #14]
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	73fb      	strb	r3, [r7, #15]
 8001fda:	e01c      	b.n	8002016 <lcdPutS+0x5e>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x < 10)
 8001fdc:	78fb      	ldrb	r3, [r7, #3]
 8001fde:	2b09      	cmp	r3, #9
 8001fe0:	d804      	bhi.n	8001fec <lcdPutS+0x34>
		{
			x = origin;
 8001fe2:	7bbb      	ldrb	r3, [r7, #14]
 8001fe4:	70fb      	strb	r3, [r7, #3]
			y += 8;
 8001fe6:	78bb      	ldrb	r3, [r7, #2]
 8001fe8:	3308      	adds	r3, #8
 8001fea:	70bb      	strb	r3, [r7, #2]
		}

		// If we move past the bottom of the screen just exit
		if (y > 230) break;
 8001fec:	78bb      	ldrb	r3, [r7, #2]
 8001fee:	2be6      	cmp	r3, #230	@ 0xe6
 8001ff0:	d819      	bhi.n	8002026 <lcdPutS+0x6e>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	7818      	ldrb	r0, [r3, #0]
 8001ffa:	883c      	ldrh	r4, [r7, #0]
 8001ffc:	78ba      	ldrb	r2, [r7, #2]
 8001ffe:	78f9      	ldrb	r1, [r7, #3]
 8002000:	8c3b      	ldrh	r3, [r7, #32]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	4623      	mov	r3, r4
 8002006:	f7ff fe81 	bl	8001d0c <lcdPutCh>
		x -= 6;
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	3b06      	subs	r3, #6
 800200e:	70fb      	strb	r3, [r7, #3]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	3301      	adds	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
 8002016:	7bfc      	ldrb	r4, [r7, #15]
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7fe f8d9 	bl	80001d0 <strlen>
 800201e:	4603      	mov	r3, r0
 8002020:	429c      	cmp	r4, r3
 8002022:	d3db      	bcc.n	8001fdc <lcdPutS+0x24>
	}
}
 8002024:	e000      	b.n	8002028 <lcdPutS+0x70>
		if (y > 230) break;
 8002026:	bf00      	nop
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bd90      	pop	{r4, r7, pc}

08002030 <lcdPutSSized>:

// Plot a string of characters to the LCD
void lcdPutSSized(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour, uint8_t size)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b087      	sub	sp, #28
 8002034:	af02      	add	r7, sp, #8
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	4608      	mov	r0, r1
 800203a:	4611      	mov	r1, r2
 800203c:	461a      	mov	r2, r3
 800203e:	4603      	mov	r3, r0
 8002040:	70fb      	strb	r3, [r7, #3]
 8002042:	460b      	mov	r3, r1
 8002044:	70bb      	strb	r3, [r7, #2]
 8002046:	4613      	mov	r3, r2
 8002048:	803b      	strh	r3, [r7, #0]
	x = x-size*6;
 800204a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800204e:	461a      	mov	r2, r3
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	b2da      	uxtb	r2, r3
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	4413      	add	r3, r2
 800205c:	70fb      	strb	r3, [r7, #3]
	uint8_t origin = x;
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	73bb      	strb	r3, [r7, #14]
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	e047      	b.n	80020f8 <lcdPutSSized+0xc8>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x < 1*size)
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800206e:	429a      	cmp	r2, r3
 8002070:	d208      	bcs.n	8002084 <lcdPutSSized+0x54>
		{
			x = origin;
 8002072:	7bbb      	ldrb	r3, [r7, #14]
 8002074:	70fb      	strb	r3, [r7, #3]
			y += 8*size;
 8002076:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	b2da      	uxtb	r2, r3
 800207e:	78bb      	ldrb	r3, [r7, #2]
 8002080:	4413      	add	r3, r2
 8002082:	70bb      	strb	r3, [r7, #2]
		}

		// If we move past the bottom of the screen just exit
		if (y > (239-6*size)) break;
 8002084:	78b9      	ldrb	r1, [r7, #2]
 8002086:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800208a:	4613      	mov	r3, r2
 800208c:	0092      	lsls	r2, r2, #2
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	33ef      	adds	r3, #239	@ 0xef
 8002094:	4299      	cmp	r1, r3
 8002096:	dc37      	bgt.n	8002108 <lcdPutSSized+0xd8>

		// Plot the current character
		lcdPutChSized(string[characterNumber], x, y, fgColour, bgColour, size);
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	7818      	ldrb	r0, [r3, #0]
 80020a0:	883c      	ldrh	r4, [r7, #0]
 80020a2:	78ba      	ldrb	r2, [r7, #2]
 80020a4:	78f9      	ldrb	r1, [r7, #3]
 80020a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020aa:	9301      	str	r3, [sp, #4]
 80020ac:	8c3b      	ldrh	r3, [r7, #32]
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	4623      	mov	r3, r4
 80020b2:	f7ff fea9 	bl	8001e08 <lcdPutChSized>
		if ((x-6*size)>0) x -= 6*size;
 80020b6:	78f9      	ldrb	r1, [r7, #3]
 80020b8:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80020bc:	4613      	mov	r3, r2
 80020be:	0092      	lsls	r2, r2, #2
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	440b      	add	r3, r1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	dd0a      	ble.n	80020e0 <lcdPutSSized+0xb0>
 80020ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020ce:	461a      	mov	r2, r3
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	4413      	add	r3, r2
 80020dc:	70fb      	strb	r3, [r7, #3]
 80020de:	e008      	b.n	80020f2 <lcdPutSSized+0xc2>
		else
		{
			x = origin;
 80020e0:	7bbb      	ldrb	r3, [r7, #14]
 80020e2:	70fb      	strb	r3, [r7, #3]
			y += 8*size;
 80020e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	78bb      	ldrb	r3, [r7, #2]
 80020ee:	4413      	add	r3, r2
 80020f0:	70bb      	strb	r3, [r7, #2]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	3301      	adds	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	7bfc      	ldrb	r4, [r7, #15]
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe f868 	bl	80001d0 <strlen>
 8002100:	4603      	mov	r3, r0
 8002102:	429c      	cmp	r4, r3
 8002104:	d3b0      	bcc.n	8002068 <lcdPutSSized+0x38>
		}
	}
}
 8002106:	e000      	b.n	800210a <lcdPutSSized+0xda>
		if (y > (239-6*size)) break;
 8002108:	bf00      	nop
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bd90      	pop	{r4, r7, pc}
	...

08002114 <demoPlot>:

void demoPlot(){
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	b0a2      	sub	sp, #136	@ 0x88
 8002118:	af02      	add	r7, sp, #8
	int16_t Triangle[] = {20, 170, 230, 150, 140, 40};
 800211a:	4ab6      	ldr	r2, [pc, #728]	@ (80023f4 <demoPlot+0x2e0>)
 800211c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002120:	ca07      	ldmia	r2, {r0, r1, r2}
 8002122:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t Square[] = {30, 30, 170, 30, 170, 170, 30, 170};
 8002126:	4bb4      	ldr	r3, [pc, #720]	@ (80023f8 <demoPlot+0x2e4>)
 8002128:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800212c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800212e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int16_t Pentagon[] = {50, 20, 150, 20, 180, 120, 100, 180, 10, 120};
 8002132:	4bb2      	ldr	r3, [pc, #712]	@ (80023fc <demoPlot+0x2e8>)
 8002134:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 8002138:	461d      	mov	r5, r3
 800213a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800213c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213e:	682b      	ldr	r3, [r5, #0]
 8002140:	6023      	str	r3, [r4, #0]

	lcdPutS("opakovany vypis:", 220, 10, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8002142:	221f      	movs	r2, #31
 8002144:	211f      	movs	r1, #31
 8002146:	201f      	movs	r0, #31
 8002148:	f7ff ff1a 	bl	8001f80 <decodeRgbValue>
 800214c:	4603      	mov	r3, r0
 800214e:	461c      	mov	r4, r3
 8002150:	2200      	movs	r2, #0
 8002152:	2100      	movs	r1, #0
 8002154:	2000      	movs	r0, #0
 8002156:	f7ff ff13 	bl	8001f80 <decodeRgbValue>
 800215a:	4603      	mov	r3, r0
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	4623      	mov	r3, r4
 8002160:	220a      	movs	r2, #10
 8002162:	21dc      	movs	r1, #220	@ 0xdc
 8002164:	48a6      	ldr	r0, [pc, #664]	@ (8002400 <demoPlot+0x2ec>)
 8002166:	f7ff ff27 	bl	8001fb8 <lcdPutS>
	lcdRectangle(15, 225, 240, 250, decodeRgbValue(255, 255, 255)); //dolny status bar
 800216a:	22ff      	movs	r2, #255	@ 0xff
 800216c:	21ff      	movs	r1, #255	@ 0xff
 800216e:	20ff      	movs	r0, #255	@ 0xff
 8002170:	f7ff ff06 	bl	8001f80 <decodeRgbValue>
 8002174:	4603      	mov	r3, r0
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	23fa      	movs	r3, #250	@ 0xfa
 800217a:	22f0      	movs	r2, #240	@ 0xf0
 800217c:	21e1      	movs	r1, #225	@ 0xe1
 800217e:	200f      	movs	r0, #15
 8002180:	f7fe fc39 	bl	80009f6 <lcdRectangle>
	lcdCircle(127,232,5,decodeRgbValue(255, 255, 255)); //akysi kruh, v povodnej doom je tam hlava hraca
 8002184:	22ff      	movs	r2, #255	@ 0xff
 8002186:	21ff      	movs	r1, #255	@ 0xff
 8002188:	20ff      	movs	r0, #255	@ 0xff
 800218a:	f7ff fef9 	bl	8001f80 <decodeRgbValue>
 800218e:	4603      	mov	r3, r0
 8002190:	2205      	movs	r2, #5
 8002192:	21e8      	movs	r1, #232	@ 0xe8
 8002194:	207f      	movs	r0, #127	@ 0x7f
 8002196:	f7ff facf 	bl	8001738 <lcdCircle>
	//test printing text (normal, sized, with numbers)
	lcdPutS("HELLO WORLD", 220, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 800219a:	221f      	movs	r2, #31
 800219c:	211f      	movs	r1, #31
 800219e:	201f      	movs	r0, #31
 80021a0:	f7ff feee 	bl	8001f80 <decodeRgbValue>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461c      	mov	r4, r3
 80021a8:	2200      	movs	r2, #0
 80021aa:	2100      	movs	r1, #0
 80021ac:	2000      	movs	r0, #0
 80021ae:	f7ff fee7 	bl	8001f80 <decodeRgbValue>
 80021b2:	4603      	mov	r3, r0
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	4623      	mov	r3, r4
 80021b8:	22e6      	movs	r2, #230	@ 0xe6
 80021ba:	21dc      	movs	r1, #220	@ 0xdc
 80021bc:	4891      	ldr	r0, [pc, #580]	@ (8002404 <demoPlot+0x2f0>)
 80021be:	f7ff fefb 	bl	8001fb8 <lcdPutS>
	lcdPutSSized("DOOM-vrs", 230, 190, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),4);
 80021c2:	221f      	movs	r2, #31
 80021c4:	211f      	movs	r1, #31
 80021c6:	201f      	movs	r0, #31
 80021c8:	f7ff feda 	bl	8001f80 <decodeRgbValue>
 80021cc:	4603      	mov	r3, r0
 80021ce:	461c      	mov	r4, r3
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7ff fed3 	bl	8001f80 <decodeRgbValue>
 80021da:	4603      	mov	r3, r0
 80021dc:	461a      	mov	r2, r3
 80021de:	2304      	movs	r3, #4
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	9200      	str	r2, [sp, #0]
 80021e4:	4623      	mov	r3, r4
 80021e6:	22be      	movs	r2, #190	@ 0xbe
 80021e8:	21e6      	movs	r1, #230	@ 0xe6
 80021ea:	4887      	ldr	r0, [pc, #540]	@ (8002408 <demoPlot+0x2f4>)
 80021ec:	f7ff ff20 	bl	8002030 <lcdPutSSized>
	int16_t score = 56;
 80021f0:	2338      	movs	r3, #56	@ 0x38
 80021f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	char scoreText[16];
	sprintf(scoreText, "SCORE = %d", score);
 80021f6:	f9b7 2076 	ldrsh.w	r2, [r7, #118]	@ 0x76
 80021fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021fe:	4983      	ldr	r1, [pc, #524]	@ (800240c <demoPlot+0x2f8>)
 8002200:	4618      	mov	r0, r3
 8002202:	f001 fb21 	bl	8003848 <siprintf>
	lcdPutS(scoreText, 100, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8002206:	221f      	movs	r2, #31
 8002208:	211f      	movs	r1, #31
 800220a:	201f      	movs	r0, #31
 800220c:	f7ff feb8 	bl	8001f80 <decodeRgbValue>
 8002210:	4603      	mov	r3, r0
 8002212:	461c      	mov	r4, r3
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	2000      	movs	r0, #0
 800221a:	f7ff feb1 	bl	8001f80 <decodeRgbValue>
 800221e:	4603      	mov	r3, r0
 8002220:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	4623      	mov	r3, r4
 8002228:	22e6      	movs	r2, #230	@ 0xe6
 800222a:	2164      	movs	r1, #100	@ 0x64
 800222c:	f7ff fec4 	bl	8001fb8 <lcdPutS>
	lcdPutS("opakovany vypis:", 220, 10, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8002230:	2200      	movs	r2, #0
 8002232:	2100      	movs	r1, #0
 8002234:	2000      	movs	r0, #0
 8002236:	f7ff fea3 	bl	8001f80 <decodeRgbValue>
 800223a:	4603      	mov	r3, r0
 800223c:	461c      	mov	r4, r3
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	2000      	movs	r0, #0
 8002244:	f7ff fe9c 	bl	8001f80 <decodeRgbValue>
 8002248:	4603      	mov	r3, r0
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	4623      	mov	r3, r4
 800224e:	220a      	movs	r2, #10
 8002250:	21dc      	movs	r1, #220	@ 0xdc
 8002252:	486b      	ldr	r0, [pc, #428]	@ (8002400 <demoPlot+0x2ec>)
 8002254:	f7ff feb0 	bl	8001fb8 <lcdPutS>

	lcdPutS("TEXT velkosti 3:", 220, 10, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8002258:	221f      	movs	r2, #31
 800225a:	211f      	movs	r1, #31
 800225c:	201f      	movs	r0, #31
 800225e:	f7ff fe8f 	bl	8001f80 <decodeRgbValue>
 8002262:	4603      	mov	r3, r0
 8002264:	461c      	mov	r4, r3
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	2000      	movs	r0, #0
 800226c:	f7ff fe88 	bl	8001f80 <decodeRgbValue>
 8002270:	4603      	mov	r3, r0
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	4623      	mov	r3, r4
 8002276:	220a      	movs	r2, #10
 8002278:	21dc      	movs	r1, #220	@ 0xdc
 800227a:	4865      	ldr	r0, [pc, #404]	@ (8002410 <demoPlot+0x2fc>)
 800227c:	f7ff fe9c 	bl	8001fb8 <lcdPutS>
	char demoText[] = "abcdefghijklmnopqrstuvwxyz0123456789,.!?()+-_*/=%";
 8002280:	4b64      	ldr	r3, [pc, #400]	@ (8002414 <demoPlot+0x300>)
 8002282:	463c      	mov	r4, r7
 8002284:	461d      	mov	r5, r3
 8002286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800228a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800228c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800228e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002292:	682b      	ldr	r3, [r5, #0]
 8002294:	8023      	strh	r3, [r4, #0]
	lcdPutSSized(demoText, 220, 20, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0), 3);
 8002296:	221f      	movs	r2, #31
 8002298:	211f      	movs	r1, #31
 800229a:	201f      	movs	r0, #31
 800229c:	f7ff fe70 	bl	8001f80 <decodeRgbValue>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461c      	mov	r4, r3
 80022a4:	2200      	movs	r2, #0
 80022a6:	2100      	movs	r1, #0
 80022a8:	2000      	movs	r0, #0
 80022aa:	f7ff fe69 	bl	8001f80 <decodeRgbValue>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	4638      	mov	r0, r7
 80022b4:	2303      	movs	r3, #3
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	9200      	str	r2, [sp, #0]
 80022ba:	4623      	mov	r3, r4
 80022bc:	2214      	movs	r2, #20
 80022be:	21dc      	movs	r1, #220	@ 0xdc
 80022c0:	f7ff feb6 	bl	8002030 <lcdPutSSized>
	LL_mDelay(2000);
 80022c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80022c8:	f001 fa88 	bl	80037dc <LL_mDelay>
	lcdPutSSized(demoText, 220, 20, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0), 3);
 80022cc:	2200      	movs	r2, #0
 80022ce:	2100      	movs	r1, #0
 80022d0:	2000      	movs	r0, #0
 80022d2:	f7ff fe55 	bl	8001f80 <decodeRgbValue>
 80022d6:	4603      	mov	r3, r0
 80022d8:	461c      	mov	r4, r3
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2000      	movs	r0, #0
 80022e0:	f7ff fe4e 	bl	8001f80 <decodeRgbValue>
 80022e4:	4603      	mov	r3, r0
 80022e6:	461a      	mov	r2, r3
 80022e8:	4638      	mov	r0, r7
 80022ea:	2303      	movs	r3, #3
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	9200      	str	r2, [sp, #0]
 80022f0:	4623      	mov	r3, r4
 80022f2:	2214      	movs	r2, #20
 80022f4:	21dc      	movs	r1, #220	@ 0xdc
 80022f6:	f7ff fe9b 	bl	8002030 <lcdPutSSized>
	lcdPutS("TEXT velkosti 3:", 220, 10, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	2000      	movs	r0, #0
 8002300:	f7ff fe3e 	bl	8001f80 <decodeRgbValue>
 8002304:	4603      	mov	r3, r0
 8002306:	461c      	mov	r4, r3
 8002308:	2200      	movs	r2, #0
 800230a:	2100      	movs	r1, #0
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff fe37 	bl	8001f80 <decodeRgbValue>
 8002312:	4603      	mov	r3, r0
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	4623      	mov	r3, r4
 8002318:	220a      	movs	r2, #10
 800231a:	21dc      	movs	r1, #220	@ 0xdc
 800231c:	483c      	ldr	r0, [pc, #240]	@ (8002410 <demoPlot+0x2fc>)
 800231e:	f7ff fe4b 	bl	8001fb8 <lcdPutS>
	lcdPutS("ANIMACIE:", 220, 10, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8002322:	221f      	movs	r2, #31
 8002324:	211f      	movs	r1, #31
 8002326:	201f      	movs	r0, #31
 8002328:	f7ff fe2a 	bl	8001f80 <decodeRgbValue>
 800232c:	4603      	mov	r3, r0
 800232e:	461c      	mov	r4, r3
 8002330:	2200      	movs	r2, #0
 8002332:	2100      	movs	r1, #0
 8002334:	2000      	movs	r0, #0
 8002336:	f7ff fe23 	bl	8001f80 <decodeRgbValue>
 800233a:	4603      	mov	r3, r0
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	4623      	mov	r3, r4
 8002340:	220a      	movs	r2, #10
 8002342:	21dc      	movs	r1, #220	@ 0xdc
 8002344:	4834      	ldr	r0, [pc, #208]	@ (8002418 <demoPlot+0x304>)
 8002346:	f7ff fe37 	bl	8001fb8 <lcdPutS>
	// animovane stvorce
	for (int16_t i = 0; i<20; i++){
 800234a:	2300      	movs	r3, #0
 800234c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 8002350:	e048      	b.n	80023e4 <demoPlot+0x2d0>
	  lcdRectangle(20+i*10, 50, 100+i*10, 130, decodeRgbValue(255, 255, 255));
 8002352:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8002356:	461a      	mov	r2, r3
 8002358:	0092      	lsls	r2, r2, #2
 800235a:	4413      	add	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	b29b      	uxth	r3, r3
 8002360:	3314      	adds	r3, #20
 8002362:	b29b      	uxth	r3, r3
 8002364:	b21c      	sxth	r4, r3
 8002366:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800236a:	461a      	mov	r2, r3
 800236c:	0092      	lsls	r2, r2, #2
 800236e:	4413      	add	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	b29b      	uxth	r3, r3
 8002374:	3364      	adds	r3, #100	@ 0x64
 8002376:	b29b      	uxth	r3, r3
 8002378:	b21d      	sxth	r5, r3
 800237a:	22ff      	movs	r2, #255	@ 0xff
 800237c:	21ff      	movs	r1, #255	@ 0xff
 800237e:	20ff      	movs	r0, #255	@ 0xff
 8002380:	f7ff fdfe 	bl	8001f80 <decodeRgbValue>
 8002384:	4603      	mov	r3, r0
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	2382      	movs	r3, #130	@ 0x82
 800238a:	462a      	mov	r2, r5
 800238c:	2132      	movs	r1, #50	@ 0x32
 800238e:	4620      	mov	r0, r4
 8002390:	f7fe fb31 	bl	80009f6 <lcdRectangle>
	  lcdRectangle(20+i*10, 50, 100+i*10, 130, decodeRgbValue(0, 0, 0));
 8002394:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8002398:	461a      	mov	r2, r3
 800239a:	0092      	lsls	r2, r2, #2
 800239c:	4413      	add	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3314      	adds	r3, #20
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	b21c      	sxth	r4, r3
 80023a8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 80023ac:	461a      	mov	r2, r3
 80023ae:	0092      	lsls	r2, r2, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3364      	adds	r3, #100	@ 0x64
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	b21d      	sxth	r5, r3
 80023bc:	2200      	movs	r2, #0
 80023be:	2100      	movs	r1, #0
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7ff fddd 	bl	8001f80 <decodeRgbValue>
 80023c6:	4603      	mov	r3, r0
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2382      	movs	r3, #130	@ 0x82
 80023cc:	462a      	mov	r2, r5
 80023ce:	2132      	movs	r1, #50	@ 0x32
 80023d0:	4620      	mov	r0, r4
 80023d2:	f7fe fb10 	bl	80009f6 <lcdRectangle>
	for (int16_t i = 0; i<20; i++){
 80023d6:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
 80023e4:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 80023e8:	2b13      	cmp	r3, #19
 80023ea:	ddb2      	ble.n	8002352 <demoPlot+0x23e>
	}
	for (int16_t i = 0; i<20; i++){
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 80023f2:	e062      	b.n	80024ba <demoPlot+0x3a6>
 80023f4:	08004220 	.word	0x08004220
 80023f8:	0800422c 	.word	0x0800422c
 80023fc:	0800423c 	.word	0x0800423c
 8002400:	080041a0 	.word	0x080041a0
 8002404:	080041b4 	.word	0x080041b4
 8002408:	080041c0 	.word	0x080041c0
 800240c:	080041cc 	.word	0x080041cc
 8002410:	080041d8 	.word	0x080041d8
 8002414:	08004250 	.word	0x08004250
 8002418:	080041ec 	.word	0x080041ec
	  lcdDottedRectangle(20+i*10, 50, 100+i*10, 130, decodeRgbValue(255, 255, 255), 3);
 800241c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8002420:	461a      	mov	r2, r3
 8002422:	0092      	lsls	r2, r2, #2
 8002424:	4413      	add	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	b29b      	uxth	r3, r3
 800242a:	3314      	adds	r3, #20
 800242c:	b29b      	uxth	r3, r3
 800242e:	b21c      	sxth	r4, r3
 8002430:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8002434:	461a      	mov	r2, r3
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	4413      	add	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	b29b      	uxth	r3, r3
 800243e:	3364      	adds	r3, #100	@ 0x64
 8002440:	b29b      	uxth	r3, r3
 8002442:	b21d      	sxth	r5, r3
 8002444:	22ff      	movs	r2, #255	@ 0xff
 8002446:	21ff      	movs	r1, #255	@ 0xff
 8002448:	20ff      	movs	r0, #255	@ 0xff
 800244a:	f7ff fd99 	bl	8001f80 <decodeRgbValue>
 800244e:	4603      	mov	r3, r0
 8002450:	461a      	mov	r2, r3
 8002452:	2303      	movs	r3, #3
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	9200      	str	r2, [sp, #0]
 8002458:	2382      	movs	r3, #130	@ 0x82
 800245a:	462a      	mov	r2, r5
 800245c:	2132      	movs	r1, #50	@ 0x32
 800245e:	4620      	mov	r0, r4
 8002460:	f7fe fb10 	bl	8000a84 <lcdDottedRectangle>
	  lcdDottedRectangle(20+i*10, 50, 100+i*10, 130, decodeRgbValue(0, 0, 0), 3);
 8002464:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8002468:	461a      	mov	r2, r3
 800246a:	0092      	lsls	r2, r2, #2
 800246c:	4413      	add	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	b29b      	uxth	r3, r3
 8002472:	3314      	adds	r3, #20
 8002474:	b29b      	uxth	r3, r3
 8002476:	b21c      	sxth	r4, r3
 8002478:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 800247c:	461a      	mov	r2, r3
 800247e:	0092      	lsls	r2, r2, #2
 8002480:	4413      	add	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	b29b      	uxth	r3, r3
 8002486:	3364      	adds	r3, #100	@ 0x64
 8002488:	b29b      	uxth	r3, r3
 800248a:	b21d      	sxth	r5, r3
 800248c:	2200      	movs	r2, #0
 800248e:	2100      	movs	r1, #0
 8002490:	2000      	movs	r0, #0
 8002492:	f7ff fd75 	bl	8001f80 <decodeRgbValue>
 8002496:	4603      	mov	r3, r0
 8002498:	461a      	mov	r2, r3
 800249a:	2303      	movs	r3, #3
 800249c:	9301      	str	r3, [sp, #4]
 800249e:	9200      	str	r2, [sp, #0]
 80024a0:	2382      	movs	r3, #130	@ 0x82
 80024a2:	462a      	mov	r2, r5
 80024a4:	2132      	movs	r1, #50	@ 0x32
 80024a6:	4620      	mov	r0, r4
 80024a8:	f7fe faec 	bl	8000a84 <lcdDottedRectangle>
	for (int16_t i = 0; i<20; i++){
 80024ac:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	@ 0x7c
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3301      	adds	r3, #1
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 80024ba:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	@ 0x7c
 80024be:	2b13      	cmp	r3, #19
 80024c0:	ddac      	ble.n	800241c <demoPlot+0x308>
	}
	for (int16_t i = 0; i<20; i++){
 80024c2:	2300      	movs	r3, #0
 80024c4:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80024c8:	e04e      	b.n	8002568 <demoPlot+0x454>
	  lcdDottedRectangle(20+i*10, 50, 100+i*10, 130, decodeRgbValue(255, 255, 255), 5);
 80024ca:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80024ce:	461a      	mov	r2, r3
 80024d0:	0092      	lsls	r2, r2, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3314      	adds	r3, #20
 80024da:	b29b      	uxth	r3, r3
 80024dc:	b21c      	sxth	r4, r3
 80024de:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80024e2:	461a      	mov	r2, r3
 80024e4:	0092      	lsls	r2, r2, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3364      	adds	r3, #100	@ 0x64
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	b21d      	sxth	r5, r3
 80024f2:	22ff      	movs	r2, #255	@ 0xff
 80024f4:	21ff      	movs	r1, #255	@ 0xff
 80024f6:	20ff      	movs	r0, #255	@ 0xff
 80024f8:	f7ff fd42 	bl	8001f80 <decodeRgbValue>
 80024fc:	4603      	mov	r3, r0
 80024fe:	461a      	mov	r2, r3
 8002500:	2305      	movs	r3, #5
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	9200      	str	r2, [sp, #0]
 8002506:	2382      	movs	r3, #130	@ 0x82
 8002508:	462a      	mov	r2, r5
 800250a:	2132      	movs	r1, #50	@ 0x32
 800250c:	4620      	mov	r0, r4
 800250e:	f7fe fab9 	bl	8000a84 <lcdDottedRectangle>
	  lcdDottedRectangle(20+i*10, 50, 100+i*10, 130, decodeRgbValue(0, 0, 0), 5);
 8002512:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8002516:	461a      	mov	r2, r3
 8002518:	0092      	lsls	r2, r2, #2
 800251a:	4413      	add	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	b29b      	uxth	r3, r3
 8002520:	3314      	adds	r3, #20
 8002522:	b29b      	uxth	r3, r3
 8002524:	b21c      	sxth	r4, r3
 8002526:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800252a:	461a      	mov	r2, r3
 800252c:	0092      	lsls	r2, r2, #2
 800252e:	4413      	add	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	b29b      	uxth	r3, r3
 8002534:	3364      	adds	r3, #100	@ 0x64
 8002536:	b29b      	uxth	r3, r3
 8002538:	b21d      	sxth	r5, r3
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	2000      	movs	r0, #0
 8002540:	f7ff fd1e 	bl	8001f80 <decodeRgbValue>
 8002544:	4603      	mov	r3, r0
 8002546:	461a      	mov	r2, r3
 8002548:	2305      	movs	r3, #5
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	9200      	str	r2, [sp, #0]
 800254e:	2382      	movs	r3, #130	@ 0x82
 8002550:	462a      	mov	r2, r5
 8002552:	2132      	movs	r1, #50	@ 0x32
 8002554:	4620      	mov	r0, r4
 8002556:	f7fe fa95 	bl	8000a84 <lcdDottedRectangle>
	for (int16_t i = 0; i<20; i++){
 800255a:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	@ 0x7a
 800255e:	b29b      	uxth	r3, r3
 8002560:	3301      	adds	r3, #1
 8002562:	b29b      	uxth	r3, r3
 8002564:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8002568:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	@ 0x7a
 800256c:	2b13      	cmp	r3, #19
 800256e:	ddac      	ble.n	80024ca <demoPlot+0x3b6>
	}
	// animovany kruh
	for (int16_t i = 0; i<10; i++){
 8002570:	2300      	movs	r3, #0
 8002572:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8002576:	e038      	b.n	80025ea <demoPlot+0x4d6>
	  lcdDottedCircle(60+i*10, 100, 50, decodeRgbValue(255, 255, 255), 3);
 8002578:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 800257c:	461a      	mov	r2, r3
 800257e:	0092      	lsls	r2, r2, #2
 8002580:	4413      	add	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	b29b      	uxth	r3, r3
 8002586:	333c      	adds	r3, #60	@ 0x3c
 8002588:	b29b      	uxth	r3, r3
 800258a:	b21c      	sxth	r4, r3
 800258c:	22ff      	movs	r2, #255	@ 0xff
 800258e:	21ff      	movs	r1, #255	@ 0xff
 8002590:	20ff      	movs	r0, #255	@ 0xff
 8002592:	f7ff fcf5 	bl	8001f80 <decodeRgbValue>
 8002596:	4603      	mov	r3, r0
 8002598:	461a      	mov	r2, r3
 800259a:	2303      	movs	r3, #3
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	4613      	mov	r3, r2
 80025a0:	2232      	movs	r2, #50	@ 0x32
 80025a2:	2164      	movs	r1, #100	@ 0x64
 80025a4:	4620      	mov	r0, r4
 80025a6:	f7ff f984 	bl	80018b2 <lcdDottedCircle>
	  lcdDottedCircle(60+i*10, 100, 50, decodeRgbValue(0, 0, 0), 3);
 80025aa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 80025ae:	461a      	mov	r2, r3
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	333c      	adds	r3, #60	@ 0x3c
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	b21c      	sxth	r4, r3
 80025be:	2200      	movs	r2, #0
 80025c0:	2100      	movs	r1, #0
 80025c2:	2000      	movs	r0, #0
 80025c4:	f7ff fcdc 	bl	8001f80 <decodeRgbValue>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461a      	mov	r2, r3
 80025cc:	2303      	movs	r3, #3
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	4613      	mov	r3, r2
 80025d2:	2232      	movs	r2, #50	@ 0x32
 80025d4:	2164      	movs	r1, #100	@ 0x64
 80025d6:	4620      	mov	r0, r4
 80025d8:	f7ff f96b 	bl	80018b2 <lcdDottedCircle>
	for (int16_t i = 0; i<10; i++){
 80025dc:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 80025ea:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	@ 0x78
 80025ee:	2b09      	cmp	r3, #9
 80025f0:	ddc2      	ble.n	8002578 <demoPlot+0x464>
	}
	lcdPutS("ANIMACIE:", 220, 10, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7ff fcc2 	bl	8001f80 <decodeRgbValue>
 80025fc:	4603      	mov	r3, r0
 80025fe:	461c      	mov	r4, r3
 8002600:	2200      	movs	r2, #0
 8002602:	2100      	movs	r1, #0
 8002604:	2000      	movs	r0, #0
 8002606:	f7ff fcbb 	bl	8001f80 <decodeRgbValue>
 800260a:	4603      	mov	r3, r0
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	4623      	mov	r3, r4
 8002610:	220a      	movs	r2, #10
 8002612:	21dc      	movs	r1, #220	@ 0xdc
 8002614:	48f0      	ldr	r0, [pc, #960]	@ (80029d8 <demoPlot+0x8c4>)
 8002616:	f7ff fccf 	bl	8001fb8 <lcdPutS>
	lcdPutS("POLYGONY:", 220, 10, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 800261a:	221f      	movs	r2, #31
 800261c:	211f      	movs	r1, #31
 800261e:	201f      	movs	r0, #31
 8002620:	f7ff fcae 	bl	8001f80 <decodeRgbValue>
 8002624:	4603      	mov	r3, r0
 8002626:	461c      	mov	r4, r3
 8002628:	2200      	movs	r2, #0
 800262a:	2100      	movs	r1, #0
 800262c:	2000      	movs	r0, #0
 800262e:	f7ff fca7 	bl	8001f80 <decodeRgbValue>
 8002632:	4603      	mov	r3, r0
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	4623      	mov	r3, r4
 8002638:	220a      	movs	r2, #10
 800263a:	21dc      	movs	r1, #220	@ 0xdc
 800263c:	48e7      	ldr	r0, [pc, #924]	@ (80029dc <demoPlot+0x8c8>)
 800263e:	f7ff fcbb 	bl	8001fb8 <lcdPutS>
	//testujem polygon
	lcdPolygon( Pentagon, sizeof(Pentagon) / (2 * sizeof(Pentagon[0])), decodeRgbValue(255, 255, 255));
 8002642:	22ff      	movs	r2, #255	@ 0xff
 8002644:	21ff      	movs	r1, #255	@ 0xff
 8002646:	20ff      	movs	r0, #255	@ 0xff
 8002648:	f7ff fc9a 	bl	8001f80 <decodeRgbValue>
 800264c:	4603      	mov	r3, r0
 800264e:	461a      	mov	r2, r3
 8002650:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002654:	2105      	movs	r1, #5
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe fb13 	bl	8000c82 <lcdPolygon>
	LL_mDelay(200);
 800265c:	20c8      	movs	r0, #200	@ 0xc8
 800265e:	f001 f8bd 	bl	80037dc <LL_mDelay>
	lcdPolygon( Pentagon, sizeof(Pentagon) / (2 * sizeof(Pentagon[0])), decodeRgbValue(0, 0, 0));
 8002662:	2200      	movs	r2, #0
 8002664:	2100      	movs	r1, #0
 8002666:	2000      	movs	r0, #0
 8002668:	f7ff fc8a 	bl	8001f80 <decodeRgbValue>
 800266c:	4603      	mov	r3, r0
 800266e:	461a      	mov	r2, r3
 8002670:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002674:	2105      	movs	r1, #5
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fb03 	bl	8000c82 <lcdPolygon>
	lcdDottedPolygon( Pentagon, sizeof(Pentagon) / (2 * sizeof(Pentagon[0])), decodeRgbValue(255, 255, 255), 3);
 800267c:	22ff      	movs	r2, #255	@ 0xff
 800267e:	21ff      	movs	r1, #255	@ 0xff
 8002680:	20ff      	movs	r0, #255	@ 0xff
 8002682:	f7ff fc7d 	bl	8001f80 <decodeRgbValue>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800268e:	2303      	movs	r3, #3
 8002690:	2105      	movs	r1, #5
 8002692:	f7fe fb4d 	bl	8000d30 <lcdDottedPolygon>
	LL_mDelay(200);
 8002696:	20c8      	movs	r0, #200	@ 0xc8
 8002698:	f001 f8a0 	bl	80037dc <LL_mDelay>
	lcdDottedPolygon( Pentagon, sizeof(Pentagon) / (2 * sizeof(Pentagon[0])), decodeRgbValue(0, 0, 0), 3);
 800269c:	2200      	movs	r2, #0
 800269e:	2100      	movs	r1, #0
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7ff fc6d 	bl	8001f80 <decodeRgbValue>
 80026a6:	4603      	mov	r3, r0
 80026a8:	461a      	mov	r2, r3
 80026aa:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80026ae:	2303      	movs	r3, #3
 80026b0:	2105      	movs	r1, #5
 80026b2:	f7fe fb3d 	bl	8000d30 <lcdDottedPolygon>
	//testujem plneny trojuholnik a taktiez plneny polygon
	lcdFilledTriangle( Triangle, decodeRgbValue(255, 255, 255) );
 80026b6:	22ff      	movs	r2, #255	@ 0xff
 80026b8:	21ff      	movs	r1, #255	@ 0xff
 80026ba:	20ff      	movs	r0, #255	@ 0xff
 80026bc:	f7ff fc60 	bl	8001f80 <decodeRgbValue>
 80026c0:	4603      	mov	r3, r0
 80026c2:	461a      	mov	r2, r3
 80026c4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fb8e 	bl	8000dec <lcdFilledTriangle>
	LL_mDelay(200);
 80026d0:	20c8      	movs	r0, #200	@ 0xc8
 80026d2:	f001 f883 	bl	80037dc <LL_mDelay>
	lcdFilledTriangle( Triangle, decodeRgbValue(0, 0, 0) );
 80026d6:	2200      	movs	r2, #0
 80026d8:	2100      	movs	r1, #0
 80026da:	2000      	movs	r0, #0
 80026dc:	f7ff fc50 	bl	8001f80 <decodeRgbValue>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80026e8:	4611      	mov	r1, r2
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fb7e 	bl	8000dec <lcdFilledTriangle>
	lcdFilledPolygon( Square, sizeof(Square) / (2 * sizeof(Square[0])), decodeRgbValue(255, 255, 255) );
 80026f0:	22ff      	movs	r2, #255	@ 0xff
 80026f2:	21ff      	movs	r1, #255	@ 0xff
 80026f4:	20ff      	movs	r0, #255	@ 0xff
 80026f6:	f7ff fc43 	bl	8001f80 <decodeRgbValue>
 80026fa:	4603      	mov	r3, r0
 80026fc:	461a      	mov	r2, r3
 80026fe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002702:	2104      	movs	r1, #4
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fea4 	bl	8001452 <lcdFilledPolygon>
	LL_mDelay(200);
 800270a:	20c8      	movs	r0, #200	@ 0xc8
 800270c:	f001 f866 	bl	80037dc <LL_mDelay>
	lcdFilledPolygon( Square, sizeof(Square) / (2 * sizeof(Square[0])), decodeRgbValue(0, 0, 0) );
 8002710:	2200      	movs	r2, #0
 8002712:	2100      	movs	r1, #0
 8002714:	2000      	movs	r0, #0
 8002716:	f7ff fc33 	bl	8001f80 <decodeRgbValue>
 800271a:	4603      	mov	r3, r0
 800271c:	461a      	mov	r2, r3
 800271e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002722:	2104      	movs	r1, #4
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fe94 	bl	8001452 <lcdFilledPolygon>
	lcdFilledPolygon( Pentagon, sizeof(Pentagon) / (2 * sizeof(Pentagon[0])), decodeRgbValue(255, 255, 255) );
 800272a:	22ff      	movs	r2, #255	@ 0xff
 800272c:	21ff      	movs	r1, #255	@ 0xff
 800272e:	20ff      	movs	r0, #255	@ 0xff
 8002730:	f7ff fc26 	bl	8001f80 <decodeRgbValue>
 8002734:	4603      	mov	r3, r0
 8002736:	461a      	mov	r2, r3
 8002738:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800273c:	2105      	movs	r1, #5
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe fe87 	bl	8001452 <lcdFilledPolygon>
	LL_mDelay(200);
 8002744:	20c8      	movs	r0, #200	@ 0xc8
 8002746:	f001 f849 	bl	80037dc <LL_mDelay>
	lcdFilledPolygon( Pentagon, sizeof(Pentagon) / (2 * sizeof(Pentagon[0])), decodeRgbValue(0, 0, 0) );
 800274a:	2200      	movs	r2, #0
 800274c:	2100      	movs	r1, #0
 800274e:	2000      	movs	r0, #0
 8002750:	f7ff fc16 	bl	8001f80 <decodeRgbValue>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800275c:	2105      	movs	r1, #5
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fe77 	bl	8001452 <lcdFilledPolygon>
	lcdFilledDottedPolygon( Pentagon, sizeof(Pentagon) / (2 * sizeof(Pentagon[0])), decodeRgbValue(255, 255, 255), 3 );
 8002764:	22ff      	movs	r2, #255	@ 0xff
 8002766:	21ff      	movs	r1, #255	@ 0xff
 8002768:	20ff      	movs	r0, #255	@ 0xff
 800276a:	f7ff fc09 	bl	8001f80 <decodeRgbValue>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002776:	2303      	movs	r3, #3
 8002778:	2105      	movs	r1, #5
 800277a:	f7fe ff21 	bl	80015c0 <lcdFilledDottedPolygon>
	LL_mDelay(200);
 800277e:	20c8      	movs	r0, #200	@ 0xc8
 8002780:	f001 f82c 	bl	80037dc <LL_mDelay>
	lcdFilledDottedPolygon( Pentagon, sizeof(Pentagon) / (2 * sizeof(Pentagon[0])), decodeRgbValue(0, 0, 0), 3 );
 8002784:	2200      	movs	r2, #0
 8002786:	2100      	movs	r1, #0
 8002788:	2000      	movs	r0, #0
 800278a:	f7ff fbf9 	bl	8001f80 <decodeRgbValue>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002796:	2303      	movs	r3, #3
 8002798:	2105      	movs	r1, #5
 800279a:	f7fe ff11 	bl	80015c0 <lcdFilledDottedPolygon>
	lcdPutS("POLYGONY:", 220, 10, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 800279e:	2200      	movs	r2, #0
 80027a0:	2100      	movs	r1, #0
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7ff fbec 	bl	8001f80 <decodeRgbValue>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461c      	mov	r4, r3
 80027ac:	2200      	movs	r2, #0
 80027ae:	2100      	movs	r1, #0
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7ff fbe5 	bl	8001f80 <decodeRgbValue>
 80027b6:	4603      	mov	r3, r0
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	4623      	mov	r3, r4
 80027bc:	220a      	movs	r2, #10
 80027be:	21dc      	movs	r1, #220	@ 0xdc
 80027c0:	4886      	ldr	r0, [pc, #536]	@ (80029dc <demoPlot+0x8c8>)
 80027c2:	f7ff fbf9 	bl	8001fb8 <lcdPutS>
	lcdPutS("STVORCE:", 220, 10, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 80027c6:	221f      	movs	r2, #31
 80027c8:	211f      	movs	r1, #31
 80027ca:	201f      	movs	r0, #31
 80027cc:	f7ff fbd8 	bl	8001f80 <decodeRgbValue>
 80027d0:	4603      	mov	r3, r0
 80027d2:	461c      	mov	r4, r3
 80027d4:	2200      	movs	r2, #0
 80027d6:	2100      	movs	r1, #0
 80027d8:	2000      	movs	r0, #0
 80027da:	f7ff fbd1 	bl	8001f80 <decodeRgbValue>
 80027de:	4603      	mov	r3, r0
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	4623      	mov	r3, r4
 80027e4:	220a      	movs	r2, #10
 80027e6:	21dc      	movs	r1, #220	@ 0xdc
 80027e8:	487d      	ldr	r0, [pc, #500]	@ (80029e0 <demoPlot+0x8cc>)
 80027ea:	f7ff fbe5 	bl	8001fb8 <lcdPutS>
	//TESTUJEM VYKRESLENIE STVORCOV
	lcdRectangle(30, 30, 170, 170, decodeRgbValue(255, 255, 255));
 80027ee:	22ff      	movs	r2, #255	@ 0xff
 80027f0:	21ff      	movs	r1, #255	@ 0xff
 80027f2:	20ff      	movs	r0, #255	@ 0xff
 80027f4:	f7ff fbc4 	bl	8001f80 <decodeRgbValue>
 80027f8:	4603      	mov	r3, r0
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	23aa      	movs	r3, #170	@ 0xaa
 80027fe:	22aa      	movs	r2, #170	@ 0xaa
 8002800:	211e      	movs	r1, #30
 8002802:	201e      	movs	r0, #30
 8002804:	f7fe f8f7 	bl	80009f6 <lcdRectangle>
	LL_mDelay(200);
 8002808:	20c8      	movs	r0, #200	@ 0xc8
 800280a:	f000 ffe7 	bl	80037dc <LL_mDelay>
	lcdRectangle(30, 30, 170, 170, decodeRgbValue(0, 0, 0));
 800280e:	2200      	movs	r2, #0
 8002810:	2100      	movs	r1, #0
 8002812:	2000      	movs	r0, #0
 8002814:	f7ff fbb4 	bl	8001f80 <decodeRgbValue>
 8002818:	4603      	mov	r3, r0
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	23aa      	movs	r3, #170	@ 0xaa
 800281e:	22aa      	movs	r2, #170	@ 0xaa
 8002820:	211e      	movs	r1, #30
 8002822:	201e      	movs	r0, #30
 8002824:	f7fe f8e7 	bl	80009f6 <lcdRectangle>
	lcdDottedRectangle(30, 30, 170, 170, decodeRgbValue(255, 255, 255), 3);
 8002828:	22ff      	movs	r2, #255	@ 0xff
 800282a:	21ff      	movs	r1, #255	@ 0xff
 800282c:	20ff      	movs	r0, #255	@ 0xff
 800282e:	f7ff fba7 	bl	8001f80 <decodeRgbValue>
 8002832:	4603      	mov	r3, r0
 8002834:	461a      	mov	r2, r3
 8002836:	2303      	movs	r3, #3
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	9200      	str	r2, [sp, #0]
 800283c:	23aa      	movs	r3, #170	@ 0xaa
 800283e:	22aa      	movs	r2, #170	@ 0xaa
 8002840:	211e      	movs	r1, #30
 8002842:	201e      	movs	r0, #30
 8002844:	f7fe f91e 	bl	8000a84 <lcdDottedRectangle>
	LL_mDelay(200);
 8002848:	20c8      	movs	r0, #200	@ 0xc8
 800284a:	f000 ffc7 	bl	80037dc <LL_mDelay>
	lcdDottedRectangle(30, 30, 170, 170, decodeRgbValue(0, 0, 0), 3);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	2000      	movs	r0, #0
 8002854:	f7ff fb94 	bl	8001f80 <decodeRgbValue>
 8002858:	4603      	mov	r3, r0
 800285a:	461a      	mov	r2, r3
 800285c:	2303      	movs	r3, #3
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	9200      	str	r2, [sp, #0]
 8002862:	23aa      	movs	r3, #170	@ 0xaa
 8002864:	22aa      	movs	r2, #170	@ 0xaa
 8002866:	211e      	movs	r1, #30
 8002868:	201e      	movs	r0, #30
 800286a:	f7fe f90b 	bl	8000a84 <lcdDottedRectangle>
	// testujem vykreslenie plneneho stvorca
	lcdFilledRectangle(30, 30, 170, 170, decodeRgbValue(255, 255, 255));
 800286e:	22ff      	movs	r2, #255	@ 0xff
 8002870:	21ff      	movs	r1, #255	@ 0xff
 8002872:	20ff      	movs	r0, #255	@ 0xff
 8002874:	f7ff fb84 	bl	8001f80 <decodeRgbValue>
 8002878:	4603      	mov	r3, r0
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	23aa      	movs	r3, #170	@ 0xaa
 800287e:	22aa      	movs	r2, #170	@ 0xaa
 8002880:	211e      	movs	r1, #30
 8002882:	201e      	movs	r0, #30
 8002884:	f7fe f94d 	bl	8000b22 <lcdFilledRectangle>
	LL_mDelay(200);
 8002888:	20c8      	movs	r0, #200	@ 0xc8
 800288a:	f000 ffa7 	bl	80037dc <LL_mDelay>
	lcdFilledRectangle(30, 30, 170, 170, decodeRgbValue(0, 0, 0));
 800288e:	2200      	movs	r2, #0
 8002890:	2100      	movs	r1, #0
 8002892:	2000      	movs	r0, #0
 8002894:	f7ff fb74 	bl	8001f80 <decodeRgbValue>
 8002898:	4603      	mov	r3, r0
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	23aa      	movs	r3, #170	@ 0xaa
 800289e:	22aa      	movs	r2, #170	@ 0xaa
 80028a0:	211e      	movs	r1, #30
 80028a2:	201e      	movs	r0, #30
 80028a4:	f7fe f93d 	bl	8000b22 <lcdFilledRectangle>
	//testujem vykreslenie bodkovaneho stvorca
	lcdFilledDottedRectangle(30, 30, 170, 170, decodeRgbValue(255, 255, 255), 5);
 80028a8:	22ff      	movs	r2, #255	@ 0xff
 80028aa:	21ff      	movs	r1, #255	@ 0xff
 80028ac:	20ff      	movs	r0, #255	@ 0xff
 80028ae:	f7ff fb67 	bl	8001f80 <decodeRgbValue>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461a      	mov	r2, r3
 80028b6:	2305      	movs	r3, #5
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	9200      	str	r2, [sp, #0]
 80028bc:	23aa      	movs	r3, #170	@ 0xaa
 80028be:	22aa      	movs	r2, #170	@ 0xaa
 80028c0:	211e      	movs	r1, #30
 80028c2:	201e      	movs	r0, #30
 80028c4:	f7fe f9a5 	bl	8000c12 <lcdFilledDottedRectangle>
	LL_mDelay(200);
 80028c8:	20c8      	movs	r0, #200	@ 0xc8
 80028ca:	f000 ff87 	bl	80037dc <LL_mDelay>
	lcdFilledDottedRectangle(30, 30, 170, 170, decodeRgbValue(0, 0, 0), 5);
 80028ce:	2200      	movs	r2, #0
 80028d0:	2100      	movs	r1, #0
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7ff fb54 	bl	8001f80 <decodeRgbValue>
 80028d8:	4603      	mov	r3, r0
 80028da:	461a      	mov	r2, r3
 80028dc:	2305      	movs	r3, #5
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	9200      	str	r2, [sp, #0]
 80028e2:	23aa      	movs	r3, #170	@ 0xaa
 80028e4:	22aa      	movs	r2, #170	@ 0xaa
 80028e6:	211e      	movs	r1, #30
 80028e8:	201e      	movs	r0, #30
 80028ea:	f7fe f992 	bl	8000c12 <lcdFilledDottedRectangle>
	lcdPutS("STVORCE:", 220, 10, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 80028ee:	2200      	movs	r2, #0
 80028f0:	2100      	movs	r1, #0
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7ff fb44 	bl	8001f80 <decodeRgbValue>
 80028f8:	4603      	mov	r3, r0
 80028fa:	461c      	mov	r4, r3
 80028fc:	2200      	movs	r2, #0
 80028fe:	2100      	movs	r1, #0
 8002900:	2000      	movs	r0, #0
 8002902:	f7ff fb3d 	bl	8001f80 <decodeRgbValue>
 8002906:	4603      	mov	r3, r0
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	4623      	mov	r3, r4
 800290c:	220a      	movs	r2, #10
 800290e:	21dc      	movs	r1, #220	@ 0xdc
 8002910:	4833      	ldr	r0, [pc, #204]	@ (80029e0 <demoPlot+0x8cc>)
 8002912:	f7ff fb51 	bl	8001fb8 <lcdPutS>
	lcdPutS("CIARY:", 220, 10, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8002916:	221f      	movs	r2, #31
 8002918:	211f      	movs	r1, #31
 800291a:	201f      	movs	r0, #31
 800291c:	f7ff fb30 	bl	8001f80 <decodeRgbValue>
 8002920:	4603      	mov	r3, r0
 8002922:	461c      	mov	r4, r3
 8002924:	2200      	movs	r2, #0
 8002926:	2100      	movs	r1, #0
 8002928:	2000      	movs	r0, #0
 800292a:	f7ff fb29 	bl	8001f80 <decodeRgbValue>
 800292e:	4603      	mov	r3, r0
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	4623      	mov	r3, r4
 8002934:	220a      	movs	r2, #10
 8002936:	21dc      	movs	r1, #220	@ 0xdc
 8002938:	482a      	ldr	r0, [pc, #168]	@ (80029e4 <demoPlot+0x8d0>)
 800293a:	f7ff fb3d 	bl	8001fb8 <lcdPutS>
	// testujem vykreslenie ciary v oboch smeroch
	lcdLine(10, 10, 190, 300, decodeRgbValue(255, 255, 255));
 800293e:	22ff      	movs	r2, #255	@ 0xff
 8002940:	21ff      	movs	r1, #255	@ 0xff
 8002942:	20ff      	movs	r0, #255	@ 0xff
 8002944:	f7ff fb1c 	bl	8001f80 <decodeRgbValue>
 8002948:	4603      	mov	r3, r0
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002950:	22be      	movs	r2, #190	@ 0xbe
 8002952:	210a      	movs	r1, #10
 8002954:	200a      	movs	r0, #10
 8002956:	f7fd fe73 	bl	8000640 <lcdLine>
	LL_mDelay(200);
 800295a:	20c8      	movs	r0, #200	@ 0xc8
 800295c:	f000 ff3e 	bl	80037dc <LL_mDelay>
	lcdLine(10, 10, 190, 300, decodeRgbValue(0, 0, 0));
 8002960:	2200      	movs	r2, #0
 8002962:	2100      	movs	r1, #0
 8002964:	2000      	movs	r0, #0
 8002966:	f7ff fb0b 	bl	8001f80 <decodeRgbValue>
 800296a:	4603      	mov	r3, r0
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002972:	22be      	movs	r2, #190	@ 0xbe
 8002974:	210a      	movs	r1, #10
 8002976:	200a      	movs	r0, #10
 8002978:	f7fd fe62 	bl	8000640 <lcdLine>
	lcdLine(10, 10, 300, 150, decodeRgbValue(255, 255, 255));
 800297c:	22ff      	movs	r2, #255	@ 0xff
 800297e:	21ff      	movs	r1, #255	@ 0xff
 8002980:	20ff      	movs	r0, #255	@ 0xff
 8002982:	f7ff fafd 	bl	8001f80 <decodeRgbValue>
 8002986:	4603      	mov	r3, r0
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	2396      	movs	r3, #150	@ 0x96
 800298c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002990:	210a      	movs	r1, #10
 8002992:	200a      	movs	r0, #10
 8002994:	f7fd fe54 	bl	8000640 <lcdLine>
	LL_mDelay(200);
 8002998:	20c8      	movs	r0, #200	@ 0xc8
 800299a:	f000 ff1f 	bl	80037dc <LL_mDelay>
	lcdLine(10, 10, 300, 150, decodeRgbValue(0, 0, 0));
 800299e:	2200      	movs	r2, #0
 80029a0:	2100      	movs	r1, #0
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7ff faec 	bl	8001f80 <decodeRgbValue>
 80029a8:	4603      	mov	r3, r0
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2396      	movs	r3, #150	@ 0x96
 80029ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029b2:	210a      	movs	r1, #10
 80029b4:	200a      	movs	r0, #10
 80029b6:	f7fd fe43 	bl	8000640 <lcdLine>
	lcdPutS("CIARY:", 220, 10, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 80029ba:	2200      	movs	r2, #0
 80029bc:	2100      	movs	r1, #0
 80029be:	2000      	movs	r0, #0
 80029c0:	f7ff fade 	bl	8001f80 <decodeRgbValue>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461c      	mov	r4, r3
 80029c8:	2200      	movs	r2, #0
 80029ca:	2100      	movs	r1, #0
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7ff fad7 	bl	8001f80 <decodeRgbValue>
 80029d2:	4603      	mov	r3, r0
 80029d4:	e008      	b.n	80029e8 <demoPlot+0x8d4>
 80029d6:	bf00      	nop
 80029d8:	080041ec 	.word	0x080041ec
 80029dc:	080041f8 	.word	0x080041f8
 80029e0:	08004204 	.word	0x08004204
 80029e4:	08004210 	.word	0x08004210
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	4623      	mov	r3, r4
 80029ec:	220a      	movs	r2, #10
 80029ee:	21dc      	movs	r1, #220	@ 0xdc
 80029f0:	4851      	ldr	r0, [pc, #324]	@ (8002b38 <demoPlot+0xa24>)
 80029f2:	f7ff fae1 	bl	8001fb8 <lcdPutS>
	lcdPutS("KRUHY:", 220, 10, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 80029f6:	221f      	movs	r2, #31
 80029f8:	211f      	movs	r1, #31
 80029fa:	201f      	movs	r0, #31
 80029fc:	f7ff fac0 	bl	8001f80 <decodeRgbValue>
 8002a00:	4603      	mov	r3, r0
 8002a02:	461c      	mov	r4, r3
 8002a04:	2200      	movs	r2, #0
 8002a06:	2100      	movs	r1, #0
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7ff fab9 	bl	8001f80 <decodeRgbValue>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	4623      	mov	r3, r4
 8002a14:	220a      	movs	r2, #10
 8002a16:	21dc      	movs	r1, #220	@ 0xdc
 8002a18:	4848      	ldr	r0, [pc, #288]	@ (8002b3c <demoPlot+0xa28>)
 8002a1a:	f7ff facd 	bl	8001fb8 <lcdPutS>
	// testujem vykreslenie kruhu
	lcdCircle(100, 100, 80, decodeRgbValue(255, 255, 255));
 8002a1e:	22ff      	movs	r2, #255	@ 0xff
 8002a20:	21ff      	movs	r1, #255	@ 0xff
 8002a22:	20ff      	movs	r0, #255	@ 0xff
 8002a24:	f7ff faac 	bl	8001f80 <decodeRgbValue>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2250      	movs	r2, #80	@ 0x50
 8002a2c:	2164      	movs	r1, #100	@ 0x64
 8002a2e:	2064      	movs	r0, #100	@ 0x64
 8002a30:	f7fe fe82 	bl	8001738 <lcdCircle>
	LL_mDelay(200);
 8002a34:	20c8      	movs	r0, #200	@ 0xc8
 8002a36:	f000 fed1 	bl	80037dc <LL_mDelay>
	lcdCircle(100, 100, 80, decodeRgbValue(0, 0, 0));
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f7ff fa9e 	bl	8001f80 <decodeRgbValue>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2250      	movs	r2, #80	@ 0x50
 8002a48:	2164      	movs	r1, #100	@ 0x64
 8002a4a:	2064      	movs	r0, #100	@ 0x64
 8002a4c:	f7fe fe74 	bl	8001738 <lcdCircle>
	lcdDottedCircle(100, 100, 80, decodeRgbValue(255, 255, 255), 3);
 8002a50:	22ff      	movs	r2, #255	@ 0xff
 8002a52:	21ff      	movs	r1, #255	@ 0xff
 8002a54:	20ff      	movs	r0, #255	@ 0xff
 8002a56:	f7ff fa93 	bl	8001f80 <decodeRgbValue>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2303      	movs	r3, #3
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	4613      	mov	r3, r2
 8002a64:	2250      	movs	r2, #80	@ 0x50
 8002a66:	2164      	movs	r1, #100	@ 0x64
 8002a68:	2064      	movs	r0, #100	@ 0x64
 8002a6a:	f7fe ff22 	bl	80018b2 <lcdDottedCircle>
	LL_mDelay(200);
 8002a6e:	20c8      	movs	r0, #200	@ 0xc8
 8002a70:	f000 feb4 	bl	80037dc <LL_mDelay>
	lcdDottedCircle(100, 100, 80, decodeRgbValue(0, 0, 0), 3);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2100      	movs	r1, #0
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7ff fa81 	bl	8001f80 <decodeRgbValue>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	461a      	mov	r2, r3
 8002a82:	2303      	movs	r3, #3
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	4613      	mov	r3, r2
 8002a88:	2250      	movs	r2, #80	@ 0x50
 8002a8a:	2164      	movs	r1, #100	@ 0x64
 8002a8c:	2064      	movs	r0, #100	@ 0x64
 8002a8e:	f7fe ff10 	bl	80018b2 <lcdDottedCircle>
	//testujem vykreslenie plneho kruhu
	lcdFilledCircle(100, 100, 80, decodeRgbValue(255, 255, 255));
 8002a92:	22ff      	movs	r2, #255	@ 0xff
 8002a94:	21ff      	movs	r1, #255	@ 0xff
 8002a96:	20ff      	movs	r0, #255	@ 0xff
 8002a98:	f7ff fa72 	bl	8001f80 <decodeRgbValue>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2250      	movs	r2, #80	@ 0x50
 8002aa0:	2164      	movs	r1, #100	@ 0x64
 8002aa2:	2064      	movs	r0, #100	@ 0x64
 8002aa4:	f7fe ffc2 	bl	8001a2c <lcdFilledCircle>
	LL_mDelay(200);
 8002aa8:	20c8      	movs	r0, #200	@ 0xc8
 8002aaa:	f000 fe97 	bl	80037dc <LL_mDelay>
	lcdFilledCircle(100, 100, 80, decodeRgbValue(0, 0, 0));
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7ff fa64 	bl	8001f80 <decodeRgbValue>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2250      	movs	r2, #80	@ 0x50
 8002abc:	2164      	movs	r1, #100	@ 0x64
 8002abe:	2064      	movs	r0, #100	@ 0x64
 8002ac0:	f7fe ffb4 	bl	8001a2c <lcdFilledCircle>
	lcdFilledDottedCircle(100, 100, 80, decodeRgbValue(255, 255, 255), 5);
 8002ac4:	22ff      	movs	r2, #255	@ 0xff
 8002ac6:	21ff      	movs	r1, #255	@ 0xff
 8002ac8:	20ff      	movs	r0, #255	@ 0xff
 8002aca:	f7ff fa59 	bl	8001f80 <decodeRgbValue>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2305      	movs	r3, #5
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	2250      	movs	r2, #80	@ 0x50
 8002ada:	2164      	movs	r1, #100	@ 0x64
 8002adc:	2064      	movs	r0, #100	@ 0x64
 8002ade:	f7ff f858 	bl	8001b92 <lcdFilledDottedCircle>
	LL_mDelay(500);
 8002ae2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ae6:	f000 fe79 	bl	80037dc <LL_mDelay>
	lcdFilledDottedCircle(100, 100, 80, decodeRgbValue(0, 0, 0), 5);
 8002aea:	2200      	movs	r2, #0
 8002aec:	2100      	movs	r1, #0
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7ff fa46 	bl	8001f80 <decodeRgbValue>
 8002af4:	4603      	mov	r3, r0
 8002af6:	461a      	mov	r2, r3
 8002af8:	2305      	movs	r3, #5
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	4613      	mov	r3, r2
 8002afe:	2250      	movs	r2, #80	@ 0x50
 8002b00:	2164      	movs	r1, #100	@ 0x64
 8002b02:	2064      	movs	r0, #100	@ 0x64
 8002b04:	f7ff f845 	bl	8001b92 <lcdFilledDottedCircle>
	lcdPutS("KRUHY:", 220, 10, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7ff fa37 	bl	8001f80 <decodeRgbValue>
 8002b12:	4603      	mov	r3, r0
 8002b14:	461c      	mov	r4, r3
 8002b16:	2200      	movs	r2, #0
 8002b18:	2100      	movs	r1, #0
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f7ff fa30 	bl	8001f80 <decodeRgbValue>
 8002b20:	4603      	mov	r3, r0
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	4623      	mov	r3, r4
 8002b26:	220a      	movs	r2, #10
 8002b28:	21dc      	movs	r1, #220	@ 0xdc
 8002b2a:	4804      	ldr	r0, [pc, #16]	@ (8002b3c <demoPlot+0xa28>)
 8002b2c:	f7ff fa44 	bl	8001fb8 <lcdPutS>
}
 8002b30:	bf00      	nop
 8002b32:	3780      	adds	r7, #128	@ 0x80
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bdb0      	pop	{r4, r5, r7, pc}
 8002b38:	08004210 	.word	0x08004210
 8002b3c:	08004218 	.word	0x08004218

08002b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b50:	4b0c      	ldr	r3, [pc, #48]	@ (8002b84 <__NVIC_SetPriorityGrouping+0x44>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b72:	4a04      	ldr	r2, [pc, #16]	@ (8002b84 <__NVIC_SetPriorityGrouping+0x44>)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	60d3      	str	r3, [r2, #12]
}
 8002b78:	bf00      	nop
 8002b7a:	3714      	adds	r7, #20
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <LL_RCC_HSI_Enable+0x1c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a04      	ldr	r2, [pc, #16]	@ (8002ba4 <LL_RCC_HSI_Enable+0x1c>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6013      	str	r3, [r2, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000

08002ba8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002bac:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <LL_RCC_HSI_IsReady+0x20>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	40021000 	.word	0x40021000

08002bcc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002bd4:	4b07      	ldr	r3, [pc, #28]	@ (8002bf4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4904      	ldr	r1, [pc, #16]	@ (8002bf4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002c00:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <LL_RCC_SetSysClkSource+0x24>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f023 0203 	bic.w	r2, r3, #3
 8002c08:	4904      	ldr	r1, [pc, #16]	@ (8002c1c <LL_RCC_SetSysClkSource+0x24>)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	40021000 	.word	0x40021000

08002c20 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002c24:	4b04      	ldr	r3, [pc, #16]	@ (8002c38 <LL_RCC_GetSysClkSource+0x18>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 030c 	and.w	r3, r3, #12
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40021000 	.word	0x40021000

08002c3c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002c44:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <LL_RCC_SetAHBPrescaler+0x24>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c4c:	4904      	ldr	r1, [pc, #16]	@ (8002c60 <LL_RCC_SetAHBPrescaler+0x24>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	40021000 	.word	0x40021000

08002c64 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002c6c:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c74:	4904      	ldr	r1, [pc, #16]	@ (8002c88 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	604b      	str	r3, [r1, #4]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	40021000 	.word	0x40021000

08002c8c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002c94:	4b06      	ldr	r3, [pc, #24]	@ (8002cb0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c9c:	4904      	ldr	r1, [pc, #16]	@ (8002cb0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	604b      	str	r3, [r1, #4]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	40021000 	.word	0x40021000

08002cb4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002cbc:	4b08      	ldr	r3, [pc, #32]	@ (8002ce0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002cbe:	69da      	ldr	r2, [r3, #28]
 8002cc0:	4907      	ldr	r1, [pc, #28]	@ (8002ce0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002cc8:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40021000 	.word	0x40021000

08002ce4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002cec:	4b08      	ldr	r3, [pc, #32]	@ (8002d10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002cee:	699a      	ldr	r2, [r3, #24]
 8002cf0:	4907      	ldr	r1, [pc, #28]	@ (8002d10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002cf8:	4b05      	ldr	r3, [pc, #20]	@ (8002d10 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002cfa:	699a      	ldr	r2, [r3, #24]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d02:	68fb      	ldr	r3, [r7, #12]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	40021000 	.word	0x40021000

08002d14 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002d1c:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <LL_FLASH_SetLatency+0x24>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 0207 	bic.w	r2, r3, #7
 8002d24:	4904      	ldr	r1, [pc, #16]	@ (8002d38 <LL_FLASH_SetLatency+0x24>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	40022000 	.word	0x40022000

08002d3c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002d40:	4b04      	ldr	r3, [pc, #16]	@ (8002d54 <LL_FLASH_GetLatency+0x18>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0307 	and.w	r3, r3, #7
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40022000 	.word	0x40022000

08002d58 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d106      	bne.n	8002d74 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002d66:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <LL_SYSTICK_SetClkSource+0x34>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a08      	ldr	r2, [pc, #32]	@ (8002d8c <LL_SYSTICK_SetClkSource+0x34>)
 8002d6c:	f043 0304 	orr.w	r3, r3, #4
 8002d70:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8002d72:	e005      	b.n	8002d80 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002d74:	4b05      	ldr	r3, [pc, #20]	@ (8002d8c <LL_SYSTICK_SetClkSource+0x34>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a04      	ldr	r2, [pc, #16]	@ (8002d8c <LL_SYSTICK_SetClkSource+0x34>)
 8002d7a:	f023 0304 	bic.w	r3, r3, #4
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000e010 	.word	0xe000e010

08002d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002d96:	2001      	movs	r0, #1
 8002d98:	f7ff ffa4 	bl	8002ce4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002d9c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002da0:	f7ff ff88 	bl	8002cb4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da4:	2003      	movs	r0, #3
 8002da6:	f7ff fecb 	bl	8002b40 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002daa:	f000 f84d 	bl	8002e48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dae:	f7fd fa8d 	bl	80002cc <MX_GPIO_Init>
  MX_SPI1_Init();
 8002db2:	f000 f95d 	bl	8003070 <MX_SPI1_Init>

  initCD_Pin();
 8002db6:	f000 f9fb 	bl	80031b0 <initCD_Pin>
  initCS_Pin();
 8002dba:	f000 f9df 	bl	800317c <initCS_Pin>
  initRES_Pin();
 8002dbe:	f000 fa13 	bl	80031e8 <initRES_Pin>

  LL_mDelay(1);
 8002dc2:	2001      	movs	r0, #1
 8002dc4:	f000 fd0a 	bl	80037dc <LL_mDelay>

  lcdInitialise(LCD_ORIENTATION3);
 8002dc8:	20c0      	movs	r0, #192	@ 0xc0
 8002dca:	f7fd fb10 	bl	80003ee <lcdInitialise>
  //lcdClearDisplay(decodeRgbValue(80, 0, 0));

  //vycistit dostupne pixely
  lcdFilledRectangle(0, 0, 255, 239, decodeRgbValue(0, 0, 0));
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f7ff f8d4 	bl	8001f80 <decodeRgbValue>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	23ef      	movs	r3, #239	@ 0xef
 8002dde:	22ff      	movs	r2, #255	@ 0xff
 8002de0:	2100      	movs	r1, #0
 8002de2:	2000      	movs	r0, #0
 8002de4:	f7fd fe9d 	bl	8000b22 <lcdFilledRectangle>
  //vycistit nedostupne pixely
  lcdFilledRectangle(255, 0, 512, 239, decodeRgbValue(10, 10, 10));
 8002de8:	220a      	movs	r2, #10
 8002dea:	210a      	movs	r1, #10
 8002dec:	200a      	movs	r0, #10
 8002dee:	f7ff f8c7 	bl	8001f80 <decodeRgbValue>
 8002df2:	4603      	mov	r3, r0
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	23ef      	movs	r3, #239	@ 0xef
 8002df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	20ff      	movs	r0, #255	@ 0xff
 8002e00:	f7fd fe8f 	bl	8000b22 <lcdFilledRectangle>
  lcdLine(0, 0, 0, 239, decodeRgbValue(0, 0, 0));
 8002e04:	2200      	movs	r2, #0
 8002e06:	2100      	movs	r1, #0
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7ff f8b9 	bl	8001f80 <decodeRgbValue>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	23ef      	movs	r3, #239	@ 0xef
 8002e14:	2200      	movs	r2, #0
 8002e16:	2100      	movs	r1, #0
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7fd fc11 	bl	8000640 <lcdLine>
  lcdLine(255, 0, 255, 239, decodeRgbValue(0, 0, 0));
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2100      	movs	r1, #0
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7ff f8ac 	bl	8001f80 <decodeRgbValue>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	23ef      	movs	r3, #239	@ 0xef
 8002e2e:	22ff      	movs	r2, #255	@ 0xff
 8002e30:	2100      	movs	r1, #0
 8002e32:	20ff      	movs	r0, #255	@ 0xff
 8002e34:	f7fd fc04 	bl	8000640 <lcdLine>


	// demo cyklus, kde testujem vykreslovanie a animaciu, potom tu bude game logic a menu asi
	while (1)
	{
		demoPlot();
 8002e38:	f7ff f96c 	bl	8002114 <demoPlot>
		LL_mDelay(300);
 8002e3c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002e40:	f000 fccc 	bl	80037dc <LL_mDelay>
		demoPlot();
 8002e44:	bf00      	nop
 8002e46:	e7f7      	b.n	8002e38 <main+0xa8>

08002e48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f7ff ff61 	bl	8002d14 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8002e52:	f7ff ff73 	bl	8002d3c <LL_FLASH_GetLatency>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <SystemClock_Config+0x18>
  {
  Error_Handler();
 8002e5c:	f000 f82a 	bl	8002eb4 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8002e60:	f7ff fe92 	bl	8002b88 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002e64:	bf00      	nop
 8002e66:	f7ff fe9f 	bl	8002ba8 <LL_RCC_HSI_IsReady>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d1fa      	bne.n	8002e66 <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8002e70:	2010      	movs	r0, #16
 8002e72:	f7ff feab 	bl	8002bcc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7ff fee0 	bl	8002c3c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f7ff fef1 	bl	8002c64 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f7ff ff02 	bl	8002c8c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7ff feb5 	bl	8002bf8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8002e8e:	bf00      	nop
 8002e90:	f7ff fec6 	bl	8002c20 <LL_RCC_GetSysClkSource>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1fa      	bne.n	8002e90 <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 8002e9a:	4805      	ldr	r0, [pc, #20]	@ (8002eb0 <SystemClock_Config+0x68>)
 8002e9c:	f000 fc90 	bl	80037c0 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8002ea0:	2004      	movs	r0, #4
 8002ea2:	f7ff ff59 	bl	8002d58 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8002ea6:	4802      	ldr	r0, [pc, #8]	@ (8002eb0 <SystemClock_Config+0x68>)
 8002ea8:	f000 fcbe 	bl	8003828 <LL_SetSystemCoreClock>
}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	007a1200 	.word	0x007a1200

08002eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002eb8:	bf00      	nop
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <LL_AHB1_GRP1_EnableClock>:
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002ecc:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	4907      	ldr	r1, [pc, #28]	@ (8002ef0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002ed8:	4b05      	ldr	r3, [pc, #20]	@ (8002ef0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002eda:	695a      	ldr	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	40021000 	.word	0x40021000

08002ef4 <LL_APB2_GRP1_EnableClock>:
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002efc:	4b08      	ldr	r3, [pc, #32]	@ (8002f20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	4907      	ldr	r1, [pc, #28]	@ (8002f20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002f0a:	699a      	ldr	r2, [r3, #24]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	40021000 	.word	0x40021000

08002f24 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	601a      	str	r2, [r3, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f023 0210 	bic.w	r2, r3, #16
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	605a      	str	r2, [r3, #4]
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f043 0208 	orr.w	r2, r3, #8
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	605a      	str	r2, [r3, #4]
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f023 0208 	bic.w	r2, r3, #8
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	605a      	str	r2, [r3, #4]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d101      	bne.n	8002fe8 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	330c      	adds	r3, #12
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	b2db      	uxtb	r3, r3
}
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8003012:	b480      	push	{r7}
 8003014:	b085      	sub	sp, #20
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	460b      	mov	r3, r1
 800301c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	330c      	adds	r3, #12
 8003022:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_GPIO_SetOutputPin>:
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	619a      	str	r2, [r3, #24]
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <LL_GPIO_ResetOutputPin>:
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b090      	sub	sp, #64	@ 0x40
 8003074:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003076:	f107 0318 	add.w	r3, r7, #24
 800307a:	2228      	movs	r2, #40	@ 0x28
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fc02 	bl	8003888 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003084:	463b      	mov	r3, r7
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	60da      	str	r2, [r3, #12]
 8003090:	611a      	str	r2, [r3, #16]
 8003092:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003094:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003098:	f7ff ff2c 	bl	8002ef4 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800309c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80030a0:	f7ff ff10 	bl	8002ec4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80030a4:	23e0      	movs	r3, #224	@ 0xe0
 80030a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80030a8:	2302      	movs	r3, #2
 80030aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80030ac:	2303      	movs	r3, #3
 80030ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80030b4:	2300      	movs	r3, #0
 80030b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80030b8:	2305      	movs	r3, #5
 80030ba:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030bc:	463b      	mov	r3, r7
 80030be:	4619      	mov	r1, r3
 80030c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030c4:	f000 fa63 	bl	800358e <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80030cc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80030d0:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80030d2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80030d6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80030d8:	2300      	movs	r3, #0
 80030da:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80030dc:	2300      	movs	r3, #0
 80030de:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80030e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  // rychlost prenosu ovplyvnuje
  SPI_InitStruct.BaudRate =  LL_SPI_BAUDRATEPRESCALER_DIV2; //najrychlejsie
 80030e6:	2300      	movs	r3, #0
 80030e8:	633b      	str	r3, [r7, #48]	@ 0x30
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32; //250kBps povodne
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64; //125kBps
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128; //pomalsie
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV256; //najpomalsie
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80030ea:	2300      	movs	r3, #0
 80030ec:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 80030f2:	2307      	movs	r3, #7
 80030f4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  SPI1->CR2 |= 1 << 12;
 80030f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003130 <MX_SPI1_Init+0xc0>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003130 <MX_SPI1_Init+0xc0>)
 80030fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003100:	6053      	str	r3, [r2, #4]

  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003102:	f107 0318 	add.w	r3, r7, #24
 8003106:	4619      	mov	r1, r3
 8003108:	4809      	ldr	r0, [pc, #36]	@ (8003130 <MX_SPI1_Init+0xc0>)
 800310a:	f000 fae6 	bl	80036da <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800310e:	2100      	movs	r1, #0
 8003110:	4807      	ldr	r0, [pc, #28]	@ (8003130 <MX_SPI1_Init+0xc0>)
 8003112:	f7ff ff17 	bl	8002f44 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8003116:	4806      	ldr	r0, [pc, #24]	@ (8003130 <MX_SPI1_Init+0xc0>)
 8003118:	f7ff ff37 	bl	8002f8a <LL_SPI_DisableNSSPulseMgt>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 800311c:	4804      	ldr	r0, [pc, #16]	@ (8003130 <MX_SPI1_Init+0xc0>)
 800311e:	f7ff ff24 	bl	8002f6a <LL_SPI_EnableNSSPulseMgt>
  LL_SPI_Enable(SPI1);
 8003122:	4803      	ldr	r0, [pc, #12]	@ (8003130 <MX_SPI1_Init+0xc0>)
 8003124:	f7ff fefe 	bl	8002f24 <LL_SPI_Enable>

}
 8003128:	bf00      	nop
 800312a:	3740      	adds	r7, #64	@ 0x40
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40013000 	.word	0x40013000

08003134 <readWriteSPI1>:


unsigned char readWriteSPI1(unsigned char txData)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
	unsigned char  rxData;

	LL_SPI_TransmitData8(SPI1, (uint8_t)txData);
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	4619      	mov	r1, r3
 8003142:	480d      	ldr	r0, [pc, #52]	@ (8003178 <readWriteSPI1+0x44>)
 8003144:	f7ff ff65 	bl	8003012 <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_TXE(SPI1) != SET);
 8003148:	bf00      	nop
 800314a:	480b      	ldr	r0, [pc, #44]	@ (8003178 <readWriteSPI1+0x44>)
 800314c:	f7ff ff40 	bl	8002fd0 <LL_SPI_IsActiveFlag_TXE>
 8003150:	4603      	mov	r3, r0
 8003152:	2b01      	cmp	r3, #1
 8003154:	d1f9      	bne.n	800314a <readWriteSPI1+0x16>

	// wait until RXNE = 1
	while(LL_SPI_IsActiveFlag_RXNE(SPI1) != SET);
 8003156:	bf00      	nop
 8003158:	4807      	ldr	r0, [pc, #28]	@ (8003178 <readWriteSPI1+0x44>)
 800315a:	f7ff ff26 	bl	8002faa <LL_SPI_IsActiveFlag_RXNE>
 800315e:	4603      	mov	r3, r0
 8003160:	2b01      	cmp	r3, #1
 8003162:	d1f9      	bne.n	8003158 <readWriteSPI1+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = LL_SPI_ReceiveData8(SPI1);
 8003164:	4804      	ldr	r0, [pc, #16]	@ (8003178 <readWriteSPI1+0x44>)
 8003166:	f7ff ff46 	bl	8002ff6 <LL_SPI_ReceiveData8>
 800316a:	4603      	mov	r3, r0
 800316c:	73fb      	strb	r3, [r7, #15]

	return rxData;
 800316e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40013000 	.word	0x40013000

0800317c <initCS_Pin>:

void initCS_Pin(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
	cs_set();
 8003180:	f000 f802 	bl	8003188 <cs_set>
}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}

08003188 <cs_set>:

void cs_set(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 800318c:	2120      	movs	r1, #32
 800318e:	4802      	ldr	r0, [pc, #8]	@ (8003198 <cs_set+0x10>)
 8003190:	f7ff ff51 	bl	8003036 <LL_GPIO_SetOutputPin>
}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}
 8003198:	48000400 	.word	0x48000400

0800319c <cs_reset>:

void cs_reset(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 80031a0:	2120      	movs	r1, #32
 80031a2:	4802      	ldr	r0, [pc, #8]	@ (80031ac <cs_reset+0x10>)
 80031a4:	f7ff ff55 	bl	8003052 <LL_GPIO_ResetOutputPin>
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	48000400 	.word	0x48000400

080031b0 <initCD_Pin>:

void initCD_Pin(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
}
 80031b4:	bf00      	nop
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <cd_set>:

void cd_set(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 80031c4:	2140      	movs	r1, #64	@ 0x40
 80031c6:	4802      	ldr	r0, [pc, #8]	@ (80031d0 <cd_set+0x10>)
 80031c8:	f7ff ff35 	bl	8003036 <LL_GPIO_SetOutputPin>
}
 80031cc:	bf00      	nop
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	48000400 	.word	0x48000400

080031d4 <cd_reset>:

void cd_reset(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 80031d8:	2140      	movs	r1, #64	@ 0x40
 80031da:	4802      	ldr	r0, [pc, #8]	@ (80031e4 <cd_reset+0x10>)
 80031dc:	f7ff ff39 	bl	8003052 <LL_GPIO_ResetOutputPin>
}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	48000400 	.word	0x48000400

080031e8 <initRES_Pin>:

void initRES_Pin(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	*/
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <res_set>:

void res_set(void)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 80031fa:	2108      	movs	r1, #8
 80031fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003200:	f7ff ff19 	bl	8003036 <LL_GPIO_SetOutputPin>
}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}

08003208 <res_reset>:

void res_reset(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 800320c:	2108      	movs	r1, #8
 800320e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003212:	f7ff ff1e 	bl	8003052 <LL_GPIO_ResetOutputPin>
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}

0800321a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800321a:	b480      	push	{r7}
 800321c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800321e:	bf00      	nop
 8003220:	e7fd      	b.n	800321e <NMI_Handler+0x4>

08003222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003226:	bf00      	nop
 8003228:	e7fd      	b.n	8003226 <HardFault_Handler+0x4>

0800322a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800322e:	bf00      	nop
 8003230:	e7fd      	b.n	800322e <MemManage_Handler+0x4>

08003232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003232:	b480      	push	{r7}
 8003234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003236:	bf00      	nop
 8003238:	e7fd      	b.n	8003236 <BusFault_Handler+0x4>

0800323a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800323a:	b480      	push	{r7}
 800323c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800323e:	bf00      	nop
 8003240:	e7fd      	b.n	800323e <UsageFault_Handler+0x4>

08003242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003242:	b480      	push	{r7}
 8003244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800325e:	b480      	push	{r7}
 8003260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003270:	f000 f874 	bl	800335c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003274:	bf00      	nop
 8003276:	bd80      	pop	{r7, pc}

08003278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003280:	4a14      	ldr	r2, [pc, #80]	@ (80032d4 <_sbrk+0x5c>)
 8003282:	4b15      	ldr	r3, [pc, #84]	@ (80032d8 <_sbrk+0x60>)
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800328c:	4b13      	ldr	r3, [pc, #76]	@ (80032dc <_sbrk+0x64>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d102      	bne.n	800329a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003294:	4b11      	ldr	r3, [pc, #68]	@ (80032dc <_sbrk+0x64>)
 8003296:	4a12      	ldr	r2, [pc, #72]	@ (80032e0 <_sbrk+0x68>)
 8003298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800329a:	4b10      	ldr	r3, [pc, #64]	@ (80032dc <_sbrk+0x64>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4413      	add	r3, r2
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d207      	bcs.n	80032b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032a8:	f000 faf6 	bl	8003898 <__errno>
 80032ac:	4603      	mov	r3, r0
 80032ae:	220c      	movs	r2, #12
 80032b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032b2:	f04f 33ff 	mov.w	r3, #4294967295
 80032b6:	e009      	b.n	80032cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032b8:	4b08      	ldr	r3, [pc, #32]	@ (80032dc <_sbrk+0x64>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032be:	4b07      	ldr	r3, [pc, #28]	@ (80032dc <_sbrk+0x64>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	4a05      	ldr	r2, [pc, #20]	@ (80032dc <_sbrk+0x64>)
 80032c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032ca:	68fb      	ldr	r3, [r7, #12]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	20003000 	.word	0x20003000
 80032d8:	00000400 	.word	0x00000400
 80032dc:	20000074 	.word	0x20000074
 80032e0:	200001c8 	.word	0x200001c8

080032e4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032e8:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <SystemInit+0x20>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ee:	4a05      	ldr	r2, [pc, #20]	@ (8003304 <SystemInit+0x20>)
 80032f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032f8:	bf00      	nop
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003308:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003340 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800330c:	f7ff ffea 	bl	80032e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003310:	480c      	ldr	r0, [pc, #48]	@ (8003344 <LoopForever+0x6>)
  ldr r1, =_edata
 8003312:	490d      	ldr	r1, [pc, #52]	@ (8003348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003314:	4a0d      	ldr	r2, [pc, #52]	@ (800334c <LoopForever+0xe>)
  movs r3, #0
 8003316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003318:	e002      	b.n	8003320 <LoopCopyDataInit>

0800331a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800331a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800331c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800331e:	3304      	adds	r3, #4

08003320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003324:	d3f9      	bcc.n	800331a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003326:	4a0a      	ldr	r2, [pc, #40]	@ (8003350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003328:	4c0a      	ldr	r4, [pc, #40]	@ (8003354 <LoopForever+0x16>)
  movs r3, #0
 800332a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800332c:	e001      	b.n	8003332 <LoopFillZerobss>

0800332e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800332e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003330:	3204      	adds	r2, #4

08003332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003334:	d3fb      	bcc.n	800332e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003336:	f000 fab5 	bl	80038a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800333a:	f7ff fd29 	bl	8002d90 <main>

0800333e <LoopForever>:

LoopForever:
    b LoopForever
 800333e:	e7fe      	b.n	800333e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003340:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003348:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 800334c:	080045c8 	.word	0x080045c8
  ldr r2, =_sbss
 8003350:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8003354:	200001c4 	.word	0x200001c4

08003358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003358:	e7fe      	b.n	8003358 <ADC1_2_IRQHandler>
	...

0800335c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003360:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_IncTick+0x20>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <HAL_IncTick+0x24>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4413      	add	r3, r2
 800336c:	4a04      	ldr	r2, [pc, #16]	@ (8003380 <HAL_IncTick+0x24>)
 800336e:	6013      	str	r3, [r2, #0]
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000004 	.word	0x20000004
 8003380:	20000078 	.word	0x20000078

08003384 <LL_GPIO_SetPinMode>:
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	@ 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	fab3 f383 	clz	r3, r3
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	2103      	movs	r1, #3
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	401a      	ands	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	61bb      	str	r3, [r7, #24]
  return result;
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	fa01 f303 	lsl.w	r3, r1, r3
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	601a      	str	r2, [r3, #0]
}
 80033d6:	bf00      	nop
 80033d8:	3724      	adds	r7, #36	@ 0x24
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <LL_GPIO_SetPinOutputType>:
{
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	401a      	ands	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	431a      	orrs	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	605a      	str	r2, [r3, #4]
}
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_GPIO_SetPinSpeed>:
{
 8003412:	b480      	push	{r7}
 8003414:	b089      	sub	sp, #36	@ 0x24
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	613b      	str	r3, [r7, #16]
  return result;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	2103      	movs	r1, #3
 800343a:	fa01 f303 	lsl.w	r3, r1, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	401a      	ands	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa93 f3a3 	rbit	r3, r3
 800344c:	61bb      	str	r3, [r7, #24]
  return result;
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	fab3 f383 	clz	r3, r3
 8003454:	b2db      	uxtb	r3, r3
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	fa01 f303 	lsl.w	r3, r1, r3
 800345e:	431a      	orrs	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	609a      	str	r2, [r3, #8]
}
 8003464:	bf00      	nop
 8003466:	3724      	adds	r7, #36	@ 0x24
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <LL_GPIO_SetPinPull>:
{
 8003470:	b480      	push	{r7}
 8003472:	b089      	sub	sp, #36	@ 0x24
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	613b      	str	r3, [r7, #16]
  return result;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	2103      	movs	r1, #3
 8003498:	fa01 f303 	lsl.w	r3, r1, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	401a      	ands	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	fa93 f3a3 	rbit	r3, r3
 80034aa:	61bb      	str	r3, [r7, #24]
  return result;
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	fa01 f303 	lsl.w	r3, r1, r3
 80034bc:	431a      	orrs	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	60da      	str	r2, [r3, #12]
}
 80034c2:	bf00      	nop
 80034c4:	3724      	adds	r7, #36	@ 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <LL_GPIO_SetAFPin_0_7>:
{
 80034ce:	b480      	push	{r7}
 80034d0:	b089      	sub	sp, #36	@ 0x24
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a1a      	ldr	r2, [r3, #32]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	fa93 f3a3 	rbit	r3, r3
 80034e8:	613b      	str	r3, [r7, #16]
  return result;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	fab3 f383 	clz	r3, r3
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	210f      	movs	r1, #15
 80034f6:	fa01 f303 	lsl.w	r3, r1, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	401a      	ands	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	61bb      	str	r3, [r7, #24]
  return result;
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	fab3 f383 	clz	r3, r3
 8003510:	b2db      	uxtb	r3, r3
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	fa01 f303 	lsl.w	r3, r1, r3
 800351a:	431a      	orrs	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	621a      	str	r2, [r3, #32]
}
 8003520:	bf00      	nop
 8003522:	3724      	adds	r7, #36	@ 0x24
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <LL_GPIO_SetAFPin_8_15>:
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	@ 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	fa93 f3a3 	rbit	r3, r3
 8003548:	613b      	str	r3, [r7, #16]
  return result;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	210f      	movs	r1, #15
 8003556:	fa01 f303 	lsl.w	r3, r1, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	401a      	ands	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	0a1b      	lsrs	r3, r3, #8
 8003562:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	61bb      	str	r3, [r7, #24]
  return result;
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	fab3 f383 	clz	r3, r3
 8003572:	b2db      	uxtb	r3, r3
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	431a      	orrs	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003582:	bf00      	nop
 8003584:	3724      	adds	r7, #36	@ 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b088      	sub	sp, #32
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	fa93 f3a3 	rbit	r3, r3
 80035a4:	613b      	str	r3, [r7, #16]
  return result;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	fab3 f383 	clz	r3, r3
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80035b0:	e051      	b.n	8003656 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	2101      	movs	r1, #1
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	fa01 f303 	lsl.w	r3, r1, r3
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d043      	beq.n	8003650 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d003      	beq.n	80035d8 <LL_GPIO_Init+0x4a>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d10e      	bne.n	80035f6 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	461a      	mov	r2, r3
 80035de:	69b9      	ldr	r1, [r7, #24]
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff ff16 	bl	8003412 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	6819      	ldr	r1, [r3, #0]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	461a      	mov	r2, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff fef6 	bl	80033e2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	461a      	mov	r2, r3
 80035fc:	69b9      	ldr	r1, [r7, #24]
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ff36 	bl	8003470 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d11a      	bne.n	8003642 <LL_GPIO_Init+0xb4>
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	fa93 f3a3 	rbit	r3, r3
 8003616:	60bb      	str	r3, [r7, #8]
  return result;
 8003618:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b07      	cmp	r3, #7
 8003622:	d807      	bhi.n	8003634 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	461a      	mov	r2, r3
 800362a:	69b9      	ldr	r1, [r7, #24]
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff ff4e 	bl	80034ce <LL_GPIO_SetAFPin_0_7>
 8003632:	e006      	b.n	8003642 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	461a      	mov	r2, r3
 800363a:	69b9      	ldr	r1, [r7, #24]
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff75 	bl	800352c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	461a      	mov	r2, r3
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff fe9a 	bl	8003384 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	3301      	adds	r3, #1
 8003654:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1a6      	bne.n	80035b2 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <LL_SPI_IsEnabled>:
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367e:	2b40      	cmp	r3, #64	@ 0x40
 8003680:	d101      	bne.n	8003686 <LL_SPI_IsEnabled+0x18>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <LL_SPI_IsEnabled+0x1a>
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <LL_SPI_SetRxFIFOThreshold>:
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	605a      	str	r2, [r3, #4]
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <LL_SPI_SetCRCPolynomial>:
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
 80036c2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	461a      	mov	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	611a      	str	r2, [r3, #16]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ffc0 	bl	800366e <LL_SPI_IsEnabled>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d145      	bne.n	8003780 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036fc:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	6811      	ldr	r1, [r2, #0]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	6852      	ldr	r2, [r2, #4]
 8003708:	4311      	orrs	r1, r2
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	68d2      	ldr	r2, [r2, #12]
 800370e:	4311      	orrs	r1, r2
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	6912      	ldr	r2, [r2, #16]
 8003714:	4311      	orrs	r1, r2
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	6952      	ldr	r2, [r2, #20]
 800371a:	4311      	orrs	r1, r2
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	6992      	ldr	r2, [r2, #24]
 8003720:	4311      	orrs	r1, r2
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	69d2      	ldr	r2, [r2, #28]
 8003726:	4311      	orrs	r1, r2
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	6a12      	ldr	r2, [r2, #32]
 800372c:	430a      	orrs	r2, r1
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800373c:	f023 0304 	bic.w	r3, r3, #4
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	6891      	ldr	r1, [r2, #8]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	6952      	ldr	r2, [r2, #20]
 8003748:	0c12      	lsrs	r2, r2, #16
 800374a:	430a      	orrs	r2, r1
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800375a:	d204      	bcs.n	8003766 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 800375c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ff97 	bl	8003694 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800376e:	d105      	bne.n	800377c <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff ff9f 	bl	80036ba <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800377c:	2300      	movs	r3, #0
 800377e:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	fbb2 f3f3 	udiv	r3, r2, r3
 800379e:	4a07      	ldr	r2, [pc, #28]	@ (80037bc <LL_InitTick+0x30>)
 80037a0:	3b01      	subs	r3, #1
 80037a2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80037a4:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <LL_InitTick+0x30>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037aa:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <LL_InitTick+0x30>)
 80037ac:	2205      	movs	r2, #5
 80037ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000e010 	.word	0xe000e010

080037c0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80037c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ffdd 	bl	800378c <LL_InitTick>
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80037e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003824 <LL_mDelay+0x48>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80037ea:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f2:	d00c      	beq.n	800380e <LL_mDelay+0x32>
  {
    Delay++;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3301      	adds	r3, #1
 80037f8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80037fa:	e008      	b.n	800380e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80037fc:	4b09      	ldr	r3, [pc, #36]	@ (8003824 <LL_mDelay+0x48>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <LL_mDelay+0x32>
    {
      Delay--;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3b01      	subs	r3, #1
 800380c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f3      	bne.n	80037fc <LL_mDelay+0x20>
    }
  }
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	e000e010 	.word	0xe000e010

08003828 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003830:	4a04      	ldr	r2, [pc, #16]	@ (8003844 <LL_SetSystemCoreClock+0x1c>)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6013      	str	r3, [r2, #0]
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000000 	.word	0x20000000

08003848 <siprintf>:
 8003848:	b40e      	push	{r1, r2, r3}
 800384a:	b500      	push	{lr}
 800384c:	b09c      	sub	sp, #112	@ 0x70
 800384e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003850:	9002      	str	r0, [sp, #8]
 8003852:	9006      	str	r0, [sp, #24]
 8003854:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003858:	4809      	ldr	r0, [pc, #36]	@ (8003880 <siprintf+0x38>)
 800385a:	9107      	str	r1, [sp, #28]
 800385c:	9104      	str	r1, [sp, #16]
 800385e:	4909      	ldr	r1, [pc, #36]	@ (8003884 <siprintf+0x3c>)
 8003860:	f853 2b04 	ldr.w	r2, [r3], #4
 8003864:	9105      	str	r1, [sp, #20]
 8003866:	6800      	ldr	r0, [r0, #0]
 8003868:	9301      	str	r3, [sp, #4]
 800386a:	a902      	add	r1, sp, #8
 800386c:	f000 f994 	bl	8003b98 <_svfiprintf_r>
 8003870:	9b02      	ldr	r3, [sp, #8]
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	b01c      	add	sp, #112	@ 0x70
 8003878:	f85d eb04 	ldr.w	lr, [sp], #4
 800387c:	b003      	add	sp, #12
 800387e:	4770      	bx	lr
 8003880:	20000008 	.word	0x20000008
 8003884:	ffff0208 	.word	0xffff0208

08003888 <memset>:
 8003888:	4402      	add	r2, r0
 800388a:	4603      	mov	r3, r0
 800388c:	4293      	cmp	r3, r2
 800388e:	d100      	bne.n	8003892 <memset+0xa>
 8003890:	4770      	bx	lr
 8003892:	f803 1b01 	strb.w	r1, [r3], #1
 8003896:	e7f9      	b.n	800388c <memset+0x4>

08003898 <__errno>:
 8003898:	4b01      	ldr	r3, [pc, #4]	@ (80038a0 <__errno+0x8>)
 800389a:	6818      	ldr	r0, [r3, #0]
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000008 	.word	0x20000008

080038a4 <__libc_init_array>:
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	4d0d      	ldr	r5, [pc, #52]	@ (80038dc <__libc_init_array+0x38>)
 80038a8:	4c0d      	ldr	r4, [pc, #52]	@ (80038e0 <__libc_init_array+0x3c>)
 80038aa:	1b64      	subs	r4, r4, r5
 80038ac:	10a4      	asrs	r4, r4, #2
 80038ae:	2600      	movs	r6, #0
 80038b0:	42a6      	cmp	r6, r4
 80038b2:	d109      	bne.n	80038c8 <__libc_init_array+0x24>
 80038b4:	4d0b      	ldr	r5, [pc, #44]	@ (80038e4 <__libc_init_array+0x40>)
 80038b6:	4c0c      	ldr	r4, [pc, #48]	@ (80038e8 <__libc_init_array+0x44>)
 80038b8:	f000 fc66 	bl	8004188 <_init>
 80038bc:	1b64      	subs	r4, r4, r5
 80038be:	10a4      	asrs	r4, r4, #2
 80038c0:	2600      	movs	r6, #0
 80038c2:	42a6      	cmp	r6, r4
 80038c4:	d105      	bne.n	80038d2 <__libc_init_array+0x2e>
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038cc:	4798      	blx	r3
 80038ce:	3601      	adds	r6, #1
 80038d0:	e7ee      	b.n	80038b0 <__libc_init_array+0xc>
 80038d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d6:	4798      	blx	r3
 80038d8:	3601      	adds	r6, #1
 80038da:	e7f2      	b.n	80038c2 <__libc_init_array+0x1e>
 80038dc:	080045c0 	.word	0x080045c0
 80038e0:	080045c0 	.word	0x080045c0
 80038e4:	080045c0 	.word	0x080045c0
 80038e8:	080045c4 	.word	0x080045c4

080038ec <__retarget_lock_acquire_recursive>:
 80038ec:	4770      	bx	lr

080038ee <__retarget_lock_release_recursive>:
 80038ee:	4770      	bx	lr

080038f0 <_free_r>:
 80038f0:	b538      	push	{r3, r4, r5, lr}
 80038f2:	4605      	mov	r5, r0
 80038f4:	2900      	cmp	r1, #0
 80038f6:	d041      	beq.n	800397c <_free_r+0x8c>
 80038f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038fc:	1f0c      	subs	r4, r1, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bfb8      	it	lt
 8003902:	18e4      	addlt	r4, r4, r3
 8003904:	f000 f8e0 	bl	8003ac8 <__malloc_lock>
 8003908:	4a1d      	ldr	r2, [pc, #116]	@ (8003980 <_free_r+0x90>)
 800390a:	6813      	ldr	r3, [r2, #0]
 800390c:	b933      	cbnz	r3, 800391c <_free_r+0x2c>
 800390e:	6063      	str	r3, [r4, #4]
 8003910:	6014      	str	r4, [r2, #0]
 8003912:	4628      	mov	r0, r5
 8003914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003918:	f000 b8dc 	b.w	8003ad4 <__malloc_unlock>
 800391c:	42a3      	cmp	r3, r4
 800391e:	d908      	bls.n	8003932 <_free_r+0x42>
 8003920:	6820      	ldr	r0, [r4, #0]
 8003922:	1821      	adds	r1, r4, r0
 8003924:	428b      	cmp	r3, r1
 8003926:	bf01      	itttt	eq
 8003928:	6819      	ldreq	r1, [r3, #0]
 800392a:	685b      	ldreq	r3, [r3, #4]
 800392c:	1809      	addeq	r1, r1, r0
 800392e:	6021      	streq	r1, [r4, #0]
 8003930:	e7ed      	b.n	800390e <_free_r+0x1e>
 8003932:	461a      	mov	r2, r3
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	b10b      	cbz	r3, 800393c <_free_r+0x4c>
 8003938:	42a3      	cmp	r3, r4
 800393a:	d9fa      	bls.n	8003932 <_free_r+0x42>
 800393c:	6811      	ldr	r1, [r2, #0]
 800393e:	1850      	adds	r0, r2, r1
 8003940:	42a0      	cmp	r0, r4
 8003942:	d10b      	bne.n	800395c <_free_r+0x6c>
 8003944:	6820      	ldr	r0, [r4, #0]
 8003946:	4401      	add	r1, r0
 8003948:	1850      	adds	r0, r2, r1
 800394a:	4283      	cmp	r3, r0
 800394c:	6011      	str	r1, [r2, #0]
 800394e:	d1e0      	bne.n	8003912 <_free_r+0x22>
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	6053      	str	r3, [r2, #4]
 8003956:	4408      	add	r0, r1
 8003958:	6010      	str	r0, [r2, #0]
 800395a:	e7da      	b.n	8003912 <_free_r+0x22>
 800395c:	d902      	bls.n	8003964 <_free_r+0x74>
 800395e:	230c      	movs	r3, #12
 8003960:	602b      	str	r3, [r5, #0]
 8003962:	e7d6      	b.n	8003912 <_free_r+0x22>
 8003964:	6820      	ldr	r0, [r4, #0]
 8003966:	1821      	adds	r1, r4, r0
 8003968:	428b      	cmp	r3, r1
 800396a:	bf04      	itt	eq
 800396c:	6819      	ldreq	r1, [r3, #0]
 800396e:	685b      	ldreq	r3, [r3, #4]
 8003970:	6063      	str	r3, [r4, #4]
 8003972:	bf04      	itt	eq
 8003974:	1809      	addeq	r1, r1, r0
 8003976:	6021      	streq	r1, [r4, #0]
 8003978:	6054      	str	r4, [r2, #4]
 800397a:	e7ca      	b.n	8003912 <_free_r+0x22>
 800397c:	bd38      	pop	{r3, r4, r5, pc}
 800397e:	bf00      	nop
 8003980:	200001c0 	.word	0x200001c0

08003984 <sbrk_aligned>:
 8003984:	b570      	push	{r4, r5, r6, lr}
 8003986:	4e0f      	ldr	r6, [pc, #60]	@ (80039c4 <sbrk_aligned+0x40>)
 8003988:	460c      	mov	r4, r1
 800398a:	6831      	ldr	r1, [r6, #0]
 800398c:	4605      	mov	r5, r0
 800398e:	b911      	cbnz	r1, 8003996 <sbrk_aligned+0x12>
 8003990:	f000 fba6 	bl	80040e0 <_sbrk_r>
 8003994:	6030      	str	r0, [r6, #0]
 8003996:	4621      	mov	r1, r4
 8003998:	4628      	mov	r0, r5
 800399a:	f000 fba1 	bl	80040e0 <_sbrk_r>
 800399e:	1c43      	adds	r3, r0, #1
 80039a0:	d103      	bne.n	80039aa <sbrk_aligned+0x26>
 80039a2:	f04f 34ff 	mov.w	r4, #4294967295
 80039a6:	4620      	mov	r0, r4
 80039a8:	bd70      	pop	{r4, r5, r6, pc}
 80039aa:	1cc4      	adds	r4, r0, #3
 80039ac:	f024 0403 	bic.w	r4, r4, #3
 80039b0:	42a0      	cmp	r0, r4
 80039b2:	d0f8      	beq.n	80039a6 <sbrk_aligned+0x22>
 80039b4:	1a21      	subs	r1, r4, r0
 80039b6:	4628      	mov	r0, r5
 80039b8:	f000 fb92 	bl	80040e0 <_sbrk_r>
 80039bc:	3001      	adds	r0, #1
 80039be:	d1f2      	bne.n	80039a6 <sbrk_aligned+0x22>
 80039c0:	e7ef      	b.n	80039a2 <sbrk_aligned+0x1e>
 80039c2:	bf00      	nop
 80039c4:	200001bc 	.word	0x200001bc

080039c8 <_malloc_r>:
 80039c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039cc:	1ccd      	adds	r5, r1, #3
 80039ce:	f025 0503 	bic.w	r5, r5, #3
 80039d2:	3508      	adds	r5, #8
 80039d4:	2d0c      	cmp	r5, #12
 80039d6:	bf38      	it	cc
 80039d8:	250c      	movcc	r5, #12
 80039da:	2d00      	cmp	r5, #0
 80039dc:	4606      	mov	r6, r0
 80039de:	db01      	blt.n	80039e4 <_malloc_r+0x1c>
 80039e0:	42a9      	cmp	r1, r5
 80039e2:	d904      	bls.n	80039ee <_malloc_r+0x26>
 80039e4:	230c      	movs	r3, #12
 80039e6:	6033      	str	r3, [r6, #0]
 80039e8:	2000      	movs	r0, #0
 80039ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ac4 <_malloc_r+0xfc>
 80039f2:	f000 f869 	bl	8003ac8 <__malloc_lock>
 80039f6:	f8d8 3000 	ldr.w	r3, [r8]
 80039fa:	461c      	mov	r4, r3
 80039fc:	bb44      	cbnz	r4, 8003a50 <_malloc_r+0x88>
 80039fe:	4629      	mov	r1, r5
 8003a00:	4630      	mov	r0, r6
 8003a02:	f7ff ffbf 	bl	8003984 <sbrk_aligned>
 8003a06:	1c43      	adds	r3, r0, #1
 8003a08:	4604      	mov	r4, r0
 8003a0a:	d158      	bne.n	8003abe <_malloc_r+0xf6>
 8003a0c:	f8d8 4000 	ldr.w	r4, [r8]
 8003a10:	4627      	mov	r7, r4
 8003a12:	2f00      	cmp	r7, #0
 8003a14:	d143      	bne.n	8003a9e <_malloc_r+0xd6>
 8003a16:	2c00      	cmp	r4, #0
 8003a18:	d04b      	beq.n	8003ab2 <_malloc_r+0xea>
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	4639      	mov	r1, r7
 8003a1e:	4630      	mov	r0, r6
 8003a20:	eb04 0903 	add.w	r9, r4, r3
 8003a24:	f000 fb5c 	bl	80040e0 <_sbrk_r>
 8003a28:	4581      	cmp	r9, r0
 8003a2a:	d142      	bne.n	8003ab2 <_malloc_r+0xea>
 8003a2c:	6821      	ldr	r1, [r4, #0]
 8003a2e:	1a6d      	subs	r5, r5, r1
 8003a30:	4629      	mov	r1, r5
 8003a32:	4630      	mov	r0, r6
 8003a34:	f7ff ffa6 	bl	8003984 <sbrk_aligned>
 8003a38:	3001      	adds	r0, #1
 8003a3a:	d03a      	beq.n	8003ab2 <_malloc_r+0xea>
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	442b      	add	r3, r5
 8003a40:	6023      	str	r3, [r4, #0]
 8003a42:	f8d8 3000 	ldr.w	r3, [r8]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	bb62      	cbnz	r2, 8003aa4 <_malloc_r+0xdc>
 8003a4a:	f8c8 7000 	str.w	r7, [r8]
 8003a4e:	e00f      	b.n	8003a70 <_malloc_r+0xa8>
 8003a50:	6822      	ldr	r2, [r4, #0]
 8003a52:	1b52      	subs	r2, r2, r5
 8003a54:	d420      	bmi.n	8003a98 <_malloc_r+0xd0>
 8003a56:	2a0b      	cmp	r2, #11
 8003a58:	d917      	bls.n	8003a8a <_malloc_r+0xc2>
 8003a5a:	1961      	adds	r1, r4, r5
 8003a5c:	42a3      	cmp	r3, r4
 8003a5e:	6025      	str	r5, [r4, #0]
 8003a60:	bf18      	it	ne
 8003a62:	6059      	strne	r1, [r3, #4]
 8003a64:	6863      	ldr	r3, [r4, #4]
 8003a66:	bf08      	it	eq
 8003a68:	f8c8 1000 	streq.w	r1, [r8]
 8003a6c:	5162      	str	r2, [r4, r5]
 8003a6e:	604b      	str	r3, [r1, #4]
 8003a70:	4630      	mov	r0, r6
 8003a72:	f000 f82f 	bl	8003ad4 <__malloc_unlock>
 8003a76:	f104 000b 	add.w	r0, r4, #11
 8003a7a:	1d23      	adds	r3, r4, #4
 8003a7c:	f020 0007 	bic.w	r0, r0, #7
 8003a80:	1ac2      	subs	r2, r0, r3
 8003a82:	bf1c      	itt	ne
 8003a84:	1a1b      	subne	r3, r3, r0
 8003a86:	50a3      	strne	r3, [r4, r2]
 8003a88:	e7af      	b.n	80039ea <_malloc_r+0x22>
 8003a8a:	6862      	ldr	r2, [r4, #4]
 8003a8c:	42a3      	cmp	r3, r4
 8003a8e:	bf0c      	ite	eq
 8003a90:	f8c8 2000 	streq.w	r2, [r8]
 8003a94:	605a      	strne	r2, [r3, #4]
 8003a96:	e7eb      	b.n	8003a70 <_malloc_r+0xa8>
 8003a98:	4623      	mov	r3, r4
 8003a9a:	6864      	ldr	r4, [r4, #4]
 8003a9c:	e7ae      	b.n	80039fc <_malloc_r+0x34>
 8003a9e:	463c      	mov	r4, r7
 8003aa0:	687f      	ldr	r7, [r7, #4]
 8003aa2:	e7b6      	b.n	8003a12 <_malloc_r+0x4a>
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	42a3      	cmp	r3, r4
 8003aaa:	d1fb      	bne.n	8003aa4 <_malloc_r+0xdc>
 8003aac:	2300      	movs	r3, #0
 8003aae:	6053      	str	r3, [r2, #4]
 8003ab0:	e7de      	b.n	8003a70 <_malloc_r+0xa8>
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	6033      	str	r3, [r6, #0]
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	f000 f80c 	bl	8003ad4 <__malloc_unlock>
 8003abc:	e794      	b.n	80039e8 <_malloc_r+0x20>
 8003abe:	6005      	str	r5, [r0, #0]
 8003ac0:	e7d6      	b.n	8003a70 <_malloc_r+0xa8>
 8003ac2:	bf00      	nop
 8003ac4:	200001c0 	.word	0x200001c0

08003ac8 <__malloc_lock>:
 8003ac8:	4801      	ldr	r0, [pc, #4]	@ (8003ad0 <__malloc_lock+0x8>)
 8003aca:	f7ff bf0f 	b.w	80038ec <__retarget_lock_acquire_recursive>
 8003ace:	bf00      	nop
 8003ad0:	200001b8 	.word	0x200001b8

08003ad4 <__malloc_unlock>:
 8003ad4:	4801      	ldr	r0, [pc, #4]	@ (8003adc <__malloc_unlock+0x8>)
 8003ad6:	f7ff bf0a 	b.w	80038ee <__retarget_lock_release_recursive>
 8003ada:	bf00      	nop
 8003adc:	200001b8 	.word	0x200001b8

08003ae0 <__ssputs_r>:
 8003ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae4:	688e      	ldr	r6, [r1, #8]
 8003ae6:	461f      	mov	r7, r3
 8003ae8:	42be      	cmp	r6, r7
 8003aea:	680b      	ldr	r3, [r1, #0]
 8003aec:	4682      	mov	sl, r0
 8003aee:	460c      	mov	r4, r1
 8003af0:	4690      	mov	r8, r2
 8003af2:	d82d      	bhi.n	8003b50 <__ssputs_r+0x70>
 8003af4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003af8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003afc:	d026      	beq.n	8003b4c <__ssputs_r+0x6c>
 8003afe:	6965      	ldr	r5, [r4, #20]
 8003b00:	6909      	ldr	r1, [r1, #16]
 8003b02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b06:	eba3 0901 	sub.w	r9, r3, r1
 8003b0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b0e:	1c7b      	adds	r3, r7, #1
 8003b10:	444b      	add	r3, r9
 8003b12:	106d      	asrs	r5, r5, #1
 8003b14:	429d      	cmp	r5, r3
 8003b16:	bf38      	it	cc
 8003b18:	461d      	movcc	r5, r3
 8003b1a:	0553      	lsls	r3, r2, #21
 8003b1c:	d527      	bpl.n	8003b6e <__ssputs_r+0x8e>
 8003b1e:	4629      	mov	r1, r5
 8003b20:	f7ff ff52 	bl	80039c8 <_malloc_r>
 8003b24:	4606      	mov	r6, r0
 8003b26:	b360      	cbz	r0, 8003b82 <__ssputs_r+0xa2>
 8003b28:	6921      	ldr	r1, [r4, #16]
 8003b2a:	464a      	mov	r2, r9
 8003b2c:	f000 fae8 	bl	8004100 <memcpy>
 8003b30:	89a3      	ldrh	r3, [r4, #12]
 8003b32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b3a:	81a3      	strh	r3, [r4, #12]
 8003b3c:	6126      	str	r6, [r4, #16]
 8003b3e:	6165      	str	r5, [r4, #20]
 8003b40:	444e      	add	r6, r9
 8003b42:	eba5 0509 	sub.w	r5, r5, r9
 8003b46:	6026      	str	r6, [r4, #0]
 8003b48:	60a5      	str	r5, [r4, #8]
 8003b4a:	463e      	mov	r6, r7
 8003b4c:	42be      	cmp	r6, r7
 8003b4e:	d900      	bls.n	8003b52 <__ssputs_r+0x72>
 8003b50:	463e      	mov	r6, r7
 8003b52:	6820      	ldr	r0, [r4, #0]
 8003b54:	4632      	mov	r2, r6
 8003b56:	4641      	mov	r1, r8
 8003b58:	f000 faa8 	bl	80040ac <memmove>
 8003b5c:	68a3      	ldr	r3, [r4, #8]
 8003b5e:	1b9b      	subs	r3, r3, r6
 8003b60:	60a3      	str	r3, [r4, #8]
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	4433      	add	r3, r6
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	2000      	movs	r0, #0
 8003b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b6e:	462a      	mov	r2, r5
 8003b70:	f000 fad4 	bl	800411c <_realloc_r>
 8003b74:	4606      	mov	r6, r0
 8003b76:	2800      	cmp	r0, #0
 8003b78:	d1e0      	bne.n	8003b3c <__ssputs_r+0x5c>
 8003b7a:	6921      	ldr	r1, [r4, #16]
 8003b7c:	4650      	mov	r0, sl
 8003b7e:	f7ff feb7 	bl	80038f0 <_free_r>
 8003b82:	230c      	movs	r3, #12
 8003b84:	f8ca 3000 	str.w	r3, [sl]
 8003b88:	89a3      	ldrh	r3, [r4, #12]
 8003b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b8e:	81a3      	strh	r3, [r4, #12]
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	e7e9      	b.n	8003b6a <__ssputs_r+0x8a>
	...

08003b98 <_svfiprintf_r>:
 8003b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b9c:	4698      	mov	r8, r3
 8003b9e:	898b      	ldrh	r3, [r1, #12]
 8003ba0:	061b      	lsls	r3, r3, #24
 8003ba2:	b09d      	sub	sp, #116	@ 0x74
 8003ba4:	4607      	mov	r7, r0
 8003ba6:	460d      	mov	r5, r1
 8003ba8:	4614      	mov	r4, r2
 8003baa:	d510      	bpl.n	8003bce <_svfiprintf_r+0x36>
 8003bac:	690b      	ldr	r3, [r1, #16]
 8003bae:	b973      	cbnz	r3, 8003bce <_svfiprintf_r+0x36>
 8003bb0:	2140      	movs	r1, #64	@ 0x40
 8003bb2:	f7ff ff09 	bl	80039c8 <_malloc_r>
 8003bb6:	6028      	str	r0, [r5, #0]
 8003bb8:	6128      	str	r0, [r5, #16]
 8003bba:	b930      	cbnz	r0, 8003bca <_svfiprintf_r+0x32>
 8003bbc:	230c      	movs	r3, #12
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc4:	b01d      	add	sp, #116	@ 0x74
 8003bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bca:	2340      	movs	r3, #64	@ 0x40
 8003bcc:	616b      	str	r3, [r5, #20]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bd2:	2320      	movs	r3, #32
 8003bd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003bd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bdc:	2330      	movs	r3, #48	@ 0x30
 8003bde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003d7c <_svfiprintf_r+0x1e4>
 8003be2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003be6:	f04f 0901 	mov.w	r9, #1
 8003bea:	4623      	mov	r3, r4
 8003bec:	469a      	mov	sl, r3
 8003bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bf2:	b10a      	cbz	r2, 8003bf8 <_svfiprintf_r+0x60>
 8003bf4:	2a25      	cmp	r2, #37	@ 0x25
 8003bf6:	d1f9      	bne.n	8003bec <_svfiprintf_r+0x54>
 8003bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8003bfc:	d00b      	beq.n	8003c16 <_svfiprintf_r+0x7e>
 8003bfe:	465b      	mov	r3, fp
 8003c00:	4622      	mov	r2, r4
 8003c02:	4629      	mov	r1, r5
 8003c04:	4638      	mov	r0, r7
 8003c06:	f7ff ff6b 	bl	8003ae0 <__ssputs_r>
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	f000 80a7 	beq.w	8003d5e <_svfiprintf_r+0x1c6>
 8003c10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c12:	445a      	add	r2, fp
 8003c14:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c16:	f89a 3000 	ldrb.w	r3, [sl]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 809f 	beq.w	8003d5e <_svfiprintf_r+0x1c6>
 8003c20:	2300      	movs	r3, #0
 8003c22:	f04f 32ff 	mov.w	r2, #4294967295
 8003c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c2a:	f10a 0a01 	add.w	sl, sl, #1
 8003c2e:	9304      	str	r3, [sp, #16]
 8003c30:	9307      	str	r3, [sp, #28]
 8003c32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c36:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c38:	4654      	mov	r4, sl
 8003c3a:	2205      	movs	r2, #5
 8003c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c40:	484e      	ldr	r0, [pc, #312]	@ (8003d7c <_svfiprintf_r+0x1e4>)
 8003c42:	f7fc facd 	bl	80001e0 <memchr>
 8003c46:	9a04      	ldr	r2, [sp, #16]
 8003c48:	b9d8      	cbnz	r0, 8003c82 <_svfiprintf_r+0xea>
 8003c4a:	06d0      	lsls	r0, r2, #27
 8003c4c:	bf44      	itt	mi
 8003c4e:	2320      	movmi	r3, #32
 8003c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c54:	0711      	lsls	r1, r2, #28
 8003c56:	bf44      	itt	mi
 8003c58:	232b      	movmi	r3, #43	@ 0x2b
 8003c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c62:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c64:	d015      	beq.n	8003c92 <_svfiprintf_r+0xfa>
 8003c66:	9a07      	ldr	r2, [sp, #28]
 8003c68:	4654      	mov	r4, sl
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f04f 0c0a 	mov.w	ip, #10
 8003c70:	4621      	mov	r1, r4
 8003c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c76:	3b30      	subs	r3, #48	@ 0x30
 8003c78:	2b09      	cmp	r3, #9
 8003c7a:	d94b      	bls.n	8003d14 <_svfiprintf_r+0x17c>
 8003c7c:	b1b0      	cbz	r0, 8003cac <_svfiprintf_r+0x114>
 8003c7e:	9207      	str	r2, [sp, #28]
 8003c80:	e014      	b.n	8003cac <_svfiprintf_r+0x114>
 8003c82:	eba0 0308 	sub.w	r3, r0, r8
 8003c86:	fa09 f303 	lsl.w	r3, r9, r3
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	9304      	str	r3, [sp, #16]
 8003c8e:	46a2      	mov	sl, r4
 8003c90:	e7d2      	b.n	8003c38 <_svfiprintf_r+0xa0>
 8003c92:	9b03      	ldr	r3, [sp, #12]
 8003c94:	1d19      	adds	r1, r3, #4
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	9103      	str	r1, [sp, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bfbb      	ittet	lt
 8003c9e:	425b      	neglt	r3, r3
 8003ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ca4:	9307      	strge	r3, [sp, #28]
 8003ca6:	9307      	strlt	r3, [sp, #28]
 8003ca8:	bfb8      	it	lt
 8003caa:	9204      	strlt	r2, [sp, #16]
 8003cac:	7823      	ldrb	r3, [r4, #0]
 8003cae:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cb0:	d10a      	bne.n	8003cc8 <_svfiprintf_r+0x130>
 8003cb2:	7863      	ldrb	r3, [r4, #1]
 8003cb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cb6:	d132      	bne.n	8003d1e <_svfiprintf_r+0x186>
 8003cb8:	9b03      	ldr	r3, [sp, #12]
 8003cba:	1d1a      	adds	r2, r3, #4
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	9203      	str	r2, [sp, #12]
 8003cc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003cc4:	3402      	adds	r4, #2
 8003cc6:	9305      	str	r3, [sp, #20]
 8003cc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003d8c <_svfiprintf_r+0x1f4>
 8003ccc:	7821      	ldrb	r1, [r4, #0]
 8003cce:	2203      	movs	r2, #3
 8003cd0:	4650      	mov	r0, sl
 8003cd2:	f7fc fa85 	bl	80001e0 <memchr>
 8003cd6:	b138      	cbz	r0, 8003ce8 <_svfiprintf_r+0x150>
 8003cd8:	9b04      	ldr	r3, [sp, #16]
 8003cda:	eba0 000a 	sub.w	r0, r0, sl
 8003cde:	2240      	movs	r2, #64	@ 0x40
 8003ce0:	4082      	lsls	r2, r0
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	3401      	adds	r4, #1
 8003ce6:	9304      	str	r3, [sp, #16]
 8003ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cec:	4824      	ldr	r0, [pc, #144]	@ (8003d80 <_svfiprintf_r+0x1e8>)
 8003cee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003cf2:	2206      	movs	r2, #6
 8003cf4:	f7fc fa74 	bl	80001e0 <memchr>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d036      	beq.n	8003d6a <_svfiprintf_r+0x1d2>
 8003cfc:	4b21      	ldr	r3, [pc, #132]	@ (8003d84 <_svfiprintf_r+0x1ec>)
 8003cfe:	bb1b      	cbnz	r3, 8003d48 <_svfiprintf_r+0x1b0>
 8003d00:	9b03      	ldr	r3, [sp, #12]
 8003d02:	3307      	adds	r3, #7
 8003d04:	f023 0307 	bic.w	r3, r3, #7
 8003d08:	3308      	adds	r3, #8
 8003d0a:	9303      	str	r3, [sp, #12]
 8003d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d0e:	4433      	add	r3, r6
 8003d10:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d12:	e76a      	b.n	8003bea <_svfiprintf_r+0x52>
 8003d14:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d18:	460c      	mov	r4, r1
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	e7a8      	b.n	8003c70 <_svfiprintf_r+0xd8>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	3401      	adds	r4, #1
 8003d22:	9305      	str	r3, [sp, #20]
 8003d24:	4619      	mov	r1, r3
 8003d26:	f04f 0c0a 	mov.w	ip, #10
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d30:	3a30      	subs	r2, #48	@ 0x30
 8003d32:	2a09      	cmp	r2, #9
 8003d34:	d903      	bls.n	8003d3e <_svfiprintf_r+0x1a6>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0c6      	beq.n	8003cc8 <_svfiprintf_r+0x130>
 8003d3a:	9105      	str	r1, [sp, #20]
 8003d3c:	e7c4      	b.n	8003cc8 <_svfiprintf_r+0x130>
 8003d3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d42:	4604      	mov	r4, r0
 8003d44:	2301      	movs	r3, #1
 8003d46:	e7f0      	b.n	8003d2a <_svfiprintf_r+0x192>
 8003d48:	ab03      	add	r3, sp, #12
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	462a      	mov	r2, r5
 8003d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d88 <_svfiprintf_r+0x1f0>)
 8003d50:	a904      	add	r1, sp, #16
 8003d52:	4638      	mov	r0, r7
 8003d54:	f3af 8000 	nop.w
 8003d58:	1c42      	adds	r2, r0, #1
 8003d5a:	4606      	mov	r6, r0
 8003d5c:	d1d6      	bne.n	8003d0c <_svfiprintf_r+0x174>
 8003d5e:	89ab      	ldrh	r3, [r5, #12]
 8003d60:	065b      	lsls	r3, r3, #25
 8003d62:	f53f af2d 	bmi.w	8003bc0 <_svfiprintf_r+0x28>
 8003d66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d68:	e72c      	b.n	8003bc4 <_svfiprintf_r+0x2c>
 8003d6a:	ab03      	add	r3, sp, #12
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	462a      	mov	r2, r5
 8003d70:	4b05      	ldr	r3, [pc, #20]	@ (8003d88 <_svfiprintf_r+0x1f0>)
 8003d72:	a904      	add	r1, sp, #16
 8003d74:	4638      	mov	r0, r7
 8003d76:	f000 f879 	bl	8003e6c <_printf_i>
 8003d7a:	e7ed      	b.n	8003d58 <_svfiprintf_r+0x1c0>
 8003d7c:	08004584 	.word	0x08004584
 8003d80:	0800458e 	.word	0x0800458e
 8003d84:	00000000 	.word	0x00000000
 8003d88:	08003ae1 	.word	0x08003ae1
 8003d8c:	0800458a 	.word	0x0800458a

08003d90 <_printf_common>:
 8003d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d94:	4616      	mov	r6, r2
 8003d96:	4698      	mov	r8, r3
 8003d98:	688a      	ldr	r2, [r1, #8]
 8003d9a:	690b      	ldr	r3, [r1, #16]
 8003d9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003da0:	4293      	cmp	r3, r2
 8003da2:	bfb8      	it	lt
 8003da4:	4613      	movlt	r3, r2
 8003da6:	6033      	str	r3, [r6, #0]
 8003da8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003dac:	4607      	mov	r7, r0
 8003dae:	460c      	mov	r4, r1
 8003db0:	b10a      	cbz	r2, 8003db6 <_printf_common+0x26>
 8003db2:	3301      	adds	r3, #1
 8003db4:	6033      	str	r3, [r6, #0]
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	0699      	lsls	r1, r3, #26
 8003dba:	bf42      	ittt	mi
 8003dbc:	6833      	ldrmi	r3, [r6, #0]
 8003dbe:	3302      	addmi	r3, #2
 8003dc0:	6033      	strmi	r3, [r6, #0]
 8003dc2:	6825      	ldr	r5, [r4, #0]
 8003dc4:	f015 0506 	ands.w	r5, r5, #6
 8003dc8:	d106      	bne.n	8003dd8 <_printf_common+0x48>
 8003dca:	f104 0a19 	add.w	sl, r4, #25
 8003dce:	68e3      	ldr	r3, [r4, #12]
 8003dd0:	6832      	ldr	r2, [r6, #0]
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	42ab      	cmp	r3, r5
 8003dd6:	dc26      	bgt.n	8003e26 <_printf_common+0x96>
 8003dd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ddc:	6822      	ldr	r2, [r4, #0]
 8003dde:	3b00      	subs	r3, #0
 8003de0:	bf18      	it	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	0692      	lsls	r2, r2, #26
 8003de6:	d42b      	bmi.n	8003e40 <_printf_common+0xb0>
 8003de8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003dec:	4641      	mov	r1, r8
 8003dee:	4638      	mov	r0, r7
 8003df0:	47c8      	blx	r9
 8003df2:	3001      	adds	r0, #1
 8003df4:	d01e      	beq.n	8003e34 <_printf_common+0xa4>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	6922      	ldr	r2, [r4, #16]
 8003dfa:	f003 0306 	and.w	r3, r3, #6
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	bf02      	ittt	eq
 8003e02:	68e5      	ldreq	r5, [r4, #12]
 8003e04:	6833      	ldreq	r3, [r6, #0]
 8003e06:	1aed      	subeq	r5, r5, r3
 8003e08:	68a3      	ldr	r3, [r4, #8]
 8003e0a:	bf0c      	ite	eq
 8003e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e10:	2500      	movne	r5, #0
 8003e12:	4293      	cmp	r3, r2
 8003e14:	bfc4      	itt	gt
 8003e16:	1a9b      	subgt	r3, r3, r2
 8003e18:	18ed      	addgt	r5, r5, r3
 8003e1a:	2600      	movs	r6, #0
 8003e1c:	341a      	adds	r4, #26
 8003e1e:	42b5      	cmp	r5, r6
 8003e20:	d11a      	bne.n	8003e58 <_printf_common+0xc8>
 8003e22:	2000      	movs	r0, #0
 8003e24:	e008      	b.n	8003e38 <_printf_common+0xa8>
 8003e26:	2301      	movs	r3, #1
 8003e28:	4652      	mov	r2, sl
 8003e2a:	4641      	mov	r1, r8
 8003e2c:	4638      	mov	r0, r7
 8003e2e:	47c8      	blx	r9
 8003e30:	3001      	adds	r0, #1
 8003e32:	d103      	bne.n	8003e3c <_printf_common+0xac>
 8003e34:	f04f 30ff 	mov.w	r0, #4294967295
 8003e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e3c:	3501      	adds	r5, #1
 8003e3e:	e7c6      	b.n	8003dce <_printf_common+0x3e>
 8003e40:	18e1      	adds	r1, r4, r3
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	2030      	movs	r0, #48	@ 0x30
 8003e46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e4a:	4422      	add	r2, r4
 8003e4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e54:	3302      	adds	r3, #2
 8003e56:	e7c7      	b.n	8003de8 <_printf_common+0x58>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	4622      	mov	r2, r4
 8003e5c:	4641      	mov	r1, r8
 8003e5e:	4638      	mov	r0, r7
 8003e60:	47c8      	blx	r9
 8003e62:	3001      	adds	r0, #1
 8003e64:	d0e6      	beq.n	8003e34 <_printf_common+0xa4>
 8003e66:	3601      	adds	r6, #1
 8003e68:	e7d9      	b.n	8003e1e <_printf_common+0x8e>
	...

08003e6c <_printf_i>:
 8003e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e70:	7e0f      	ldrb	r7, [r1, #24]
 8003e72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e74:	2f78      	cmp	r7, #120	@ 0x78
 8003e76:	4691      	mov	r9, r2
 8003e78:	4680      	mov	r8, r0
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	469a      	mov	sl, r3
 8003e7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e82:	d807      	bhi.n	8003e94 <_printf_i+0x28>
 8003e84:	2f62      	cmp	r7, #98	@ 0x62
 8003e86:	d80a      	bhi.n	8003e9e <_printf_i+0x32>
 8003e88:	2f00      	cmp	r7, #0
 8003e8a:	f000 80d2 	beq.w	8004032 <_printf_i+0x1c6>
 8003e8e:	2f58      	cmp	r7, #88	@ 0x58
 8003e90:	f000 80b9 	beq.w	8004006 <_printf_i+0x19a>
 8003e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e9c:	e03a      	b.n	8003f14 <_printf_i+0xa8>
 8003e9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ea2:	2b15      	cmp	r3, #21
 8003ea4:	d8f6      	bhi.n	8003e94 <_printf_i+0x28>
 8003ea6:	a101      	add	r1, pc, #4	@ (adr r1, 8003eac <_printf_i+0x40>)
 8003ea8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003eac:	08003f05 	.word	0x08003f05
 8003eb0:	08003f19 	.word	0x08003f19
 8003eb4:	08003e95 	.word	0x08003e95
 8003eb8:	08003e95 	.word	0x08003e95
 8003ebc:	08003e95 	.word	0x08003e95
 8003ec0:	08003e95 	.word	0x08003e95
 8003ec4:	08003f19 	.word	0x08003f19
 8003ec8:	08003e95 	.word	0x08003e95
 8003ecc:	08003e95 	.word	0x08003e95
 8003ed0:	08003e95 	.word	0x08003e95
 8003ed4:	08003e95 	.word	0x08003e95
 8003ed8:	08004019 	.word	0x08004019
 8003edc:	08003f43 	.word	0x08003f43
 8003ee0:	08003fd3 	.word	0x08003fd3
 8003ee4:	08003e95 	.word	0x08003e95
 8003ee8:	08003e95 	.word	0x08003e95
 8003eec:	0800403b 	.word	0x0800403b
 8003ef0:	08003e95 	.word	0x08003e95
 8003ef4:	08003f43 	.word	0x08003f43
 8003ef8:	08003e95 	.word	0x08003e95
 8003efc:	08003e95 	.word	0x08003e95
 8003f00:	08003fdb 	.word	0x08003fdb
 8003f04:	6833      	ldr	r3, [r6, #0]
 8003f06:	1d1a      	adds	r2, r3, #4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6032      	str	r2, [r6, #0]
 8003f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f14:	2301      	movs	r3, #1
 8003f16:	e09d      	b.n	8004054 <_printf_i+0x1e8>
 8003f18:	6833      	ldr	r3, [r6, #0]
 8003f1a:	6820      	ldr	r0, [r4, #0]
 8003f1c:	1d19      	adds	r1, r3, #4
 8003f1e:	6031      	str	r1, [r6, #0]
 8003f20:	0606      	lsls	r6, r0, #24
 8003f22:	d501      	bpl.n	8003f28 <_printf_i+0xbc>
 8003f24:	681d      	ldr	r5, [r3, #0]
 8003f26:	e003      	b.n	8003f30 <_printf_i+0xc4>
 8003f28:	0645      	lsls	r5, r0, #25
 8003f2a:	d5fb      	bpl.n	8003f24 <_printf_i+0xb8>
 8003f2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f30:	2d00      	cmp	r5, #0
 8003f32:	da03      	bge.n	8003f3c <_printf_i+0xd0>
 8003f34:	232d      	movs	r3, #45	@ 0x2d
 8003f36:	426d      	negs	r5, r5
 8003f38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f3c:	4859      	ldr	r0, [pc, #356]	@ (80040a4 <_printf_i+0x238>)
 8003f3e:	230a      	movs	r3, #10
 8003f40:	e011      	b.n	8003f66 <_printf_i+0xfa>
 8003f42:	6821      	ldr	r1, [r4, #0]
 8003f44:	6833      	ldr	r3, [r6, #0]
 8003f46:	0608      	lsls	r0, r1, #24
 8003f48:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f4c:	d402      	bmi.n	8003f54 <_printf_i+0xe8>
 8003f4e:	0649      	lsls	r1, r1, #25
 8003f50:	bf48      	it	mi
 8003f52:	b2ad      	uxthmi	r5, r5
 8003f54:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f56:	4853      	ldr	r0, [pc, #332]	@ (80040a4 <_printf_i+0x238>)
 8003f58:	6033      	str	r3, [r6, #0]
 8003f5a:	bf14      	ite	ne
 8003f5c:	230a      	movne	r3, #10
 8003f5e:	2308      	moveq	r3, #8
 8003f60:	2100      	movs	r1, #0
 8003f62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f66:	6866      	ldr	r6, [r4, #4]
 8003f68:	60a6      	str	r6, [r4, #8]
 8003f6a:	2e00      	cmp	r6, #0
 8003f6c:	bfa2      	ittt	ge
 8003f6e:	6821      	ldrge	r1, [r4, #0]
 8003f70:	f021 0104 	bicge.w	r1, r1, #4
 8003f74:	6021      	strge	r1, [r4, #0]
 8003f76:	b90d      	cbnz	r5, 8003f7c <_printf_i+0x110>
 8003f78:	2e00      	cmp	r6, #0
 8003f7a:	d04b      	beq.n	8004014 <_printf_i+0x1a8>
 8003f7c:	4616      	mov	r6, r2
 8003f7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f82:	fb03 5711 	mls	r7, r3, r1, r5
 8003f86:	5dc7      	ldrb	r7, [r0, r7]
 8003f88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f8c:	462f      	mov	r7, r5
 8003f8e:	42bb      	cmp	r3, r7
 8003f90:	460d      	mov	r5, r1
 8003f92:	d9f4      	bls.n	8003f7e <_printf_i+0x112>
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d10b      	bne.n	8003fb0 <_printf_i+0x144>
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	07df      	lsls	r7, r3, #31
 8003f9c:	d508      	bpl.n	8003fb0 <_printf_i+0x144>
 8003f9e:	6923      	ldr	r3, [r4, #16]
 8003fa0:	6861      	ldr	r1, [r4, #4]
 8003fa2:	4299      	cmp	r1, r3
 8003fa4:	bfde      	ittt	le
 8003fa6:	2330      	movle	r3, #48	@ 0x30
 8003fa8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fb0:	1b92      	subs	r2, r2, r6
 8003fb2:	6122      	str	r2, [r4, #16]
 8003fb4:	f8cd a000 	str.w	sl, [sp]
 8003fb8:	464b      	mov	r3, r9
 8003fba:	aa03      	add	r2, sp, #12
 8003fbc:	4621      	mov	r1, r4
 8003fbe:	4640      	mov	r0, r8
 8003fc0:	f7ff fee6 	bl	8003d90 <_printf_common>
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	d14a      	bne.n	800405e <_printf_i+0x1f2>
 8003fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fcc:	b004      	add	sp, #16
 8003fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	f043 0320 	orr.w	r3, r3, #32
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	4833      	ldr	r0, [pc, #204]	@ (80040a8 <_printf_i+0x23c>)
 8003fdc:	2778      	movs	r7, #120	@ 0x78
 8003fde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	6831      	ldr	r1, [r6, #0]
 8003fe6:	061f      	lsls	r7, r3, #24
 8003fe8:	f851 5b04 	ldr.w	r5, [r1], #4
 8003fec:	d402      	bmi.n	8003ff4 <_printf_i+0x188>
 8003fee:	065f      	lsls	r7, r3, #25
 8003ff0:	bf48      	it	mi
 8003ff2:	b2ad      	uxthmi	r5, r5
 8003ff4:	6031      	str	r1, [r6, #0]
 8003ff6:	07d9      	lsls	r1, r3, #31
 8003ff8:	bf44      	itt	mi
 8003ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8003ffe:	6023      	strmi	r3, [r4, #0]
 8004000:	b11d      	cbz	r5, 800400a <_printf_i+0x19e>
 8004002:	2310      	movs	r3, #16
 8004004:	e7ac      	b.n	8003f60 <_printf_i+0xf4>
 8004006:	4827      	ldr	r0, [pc, #156]	@ (80040a4 <_printf_i+0x238>)
 8004008:	e7e9      	b.n	8003fde <_printf_i+0x172>
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	f023 0320 	bic.w	r3, r3, #32
 8004010:	6023      	str	r3, [r4, #0]
 8004012:	e7f6      	b.n	8004002 <_printf_i+0x196>
 8004014:	4616      	mov	r6, r2
 8004016:	e7bd      	b.n	8003f94 <_printf_i+0x128>
 8004018:	6833      	ldr	r3, [r6, #0]
 800401a:	6825      	ldr	r5, [r4, #0]
 800401c:	6961      	ldr	r1, [r4, #20]
 800401e:	1d18      	adds	r0, r3, #4
 8004020:	6030      	str	r0, [r6, #0]
 8004022:	062e      	lsls	r6, r5, #24
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	d501      	bpl.n	800402c <_printf_i+0x1c0>
 8004028:	6019      	str	r1, [r3, #0]
 800402a:	e002      	b.n	8004032 <_printf_i+0x1c6>
 800402c:	0668      	lsls	r0, r5, #25
 800402e:	d5fb      	bpl.n	8004028 <_printf_i+0x1bc>
 8004030:	8019      	strh	r1, [r3, #0]
 8004032:	2300      	movs	r3, #0
 8004034:	6123      	str	r3, [r4, #16]
 8004036:	4616      	mov	r6, r2
 8004038:	e7bc      	b.n	8003fb4 <_printf_i+0x148>
 800403a:	6833      	ldr	r3, [r6, #0]
 800403c:	1d1a      	adds	r2, r3, #4
 800403e:	6032      	str	r2, [r6, #0]
 8004040:	681e      	ldr	r6, [r3, #0]
 8004042:	6862      	ldr	r2, [r4, #4]
 8004044:	2100      	movs	r1, #0
 8004046:	4630      	mov	r0, r6
 8004048:	f7fc f8ca 	bl	80001e0 <memchr>
 800404c:	b108      	cbz	r0, 8004052 <_printf_i+0x1e6>
 800404e:	1b80      	subs	r0, r0, r6
 8004050:	6060      	str	r0, [r4, #4]
 8004052:	6863      	ldr	r3, [r4, #4]
 8004054:	6123      	str	r3, [r4, #16]
 8004056:	2300      	movs	r3, #0
 8004058:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800405c:	e7aa      	b.n	8003fb4 <_printf_i+0x148>
 800405e:	6923      	ldr	r3, [r4, #16]
 8004060:	4632      	mov	r2, r6
 8004062:	4649      	mov	r1, r9
 8004064:	4640      	mov	r0, r8
 8004066:	47d0      	blx	sl
 8004068:	3001      	adds	r0, #1
 800406a:	d0ad      	beq.n	8003fc8 <_printf_i+0x15c>
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	079b      	lsls	r3, r3, #30
 8004070:	d413      	bmi.n	800409a <_printf_i+0x22e>
 8004072:	68e0      	ldr	r0, [r4, #12]
 8004074:	9b03      	ldr	r3, [sp, #12]
 8004076:	4298      	cmp	r0, r3
 8004078:	bfb8      	it	lt
 800407a:	4618      	movlt	r0, r3
 800407c:	e7a6      	b.n	8003fcc <_printf_i+0x160>
 800407e:	2301      	movs	r3, #1
 8004080:	4632      	mov	r2, r6
 8004082:	4649      	mov	r1, r9
 8004084:	4640      	mov	r0, r8
 8004086:	47d0      	blx	sl
 8004088:	3001      	adds	r0, #1
 800408a:	d09d      	beq.n	8003fc8 <_printf_i+0x15c>
 800408c:	3501      	adds	r5, #1
 800408e:	68e3      	ldr	r3, [r4, #12]
 8004090:	9903      	ldr	r1, [sp, #12]
 8004092:	1a5b      	subs	r3, r3, r1
 8004094:	42ab      	cmp	r3, r5
 8004096:	dcf2      	bgt.n	800407e <_printf_i+0x212>
 8004098:	e7eb      	b.n	8004072 <_printf_i+0x206>
 800409a:	2500      	movs	r5, #0
 800409c:	f104 0619 	add.w	r6, r4, #25
 80040a0:	e7f5      	b.n	800408e <_printf_i+0x222>
 80040a2:	bf00      	nop
 80040a4:	08004595 	.word	0x08004595
 80040a8:	080045a6 	.word	0x080045a6

080040ac <memmove>:
 80040ac:	4288      	cmp	r0, r1
 80040ae:	b510      	push	{r4, lr}
 80040b0:	eb01 0402 	add.w	r4, r1, r2
 80040b4:	d902      	bls.n	80040bc <memmove+0x10>
 80040b6:	4284      	cmp	r4, r0
 80040b8:	4623      	mov	r3, r4
 80040ba:	d807      	bhi.n	80040cc <memmove+0x20>
 80040bc:	1e43      	subs	r3, r0, #1
 80040be:	42a1      	cmp	r1, r4
 80040c0:	d008      	beq.n	80040d4 <memmove+0x28>
 80040c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040ca:	e7f8      	b.n	80040be <memmove+0x12>
 80040cc:	4402      	add	r2, r0
 80040ce:	4601      	mov	r1, r0
 80040d0:	428a      	cmp	r2, r1
 80040d2:	d100      	bne.n	80040d6 <memmove+0x2a>
 80040d4:	bd10      	pop	{r4, pc}
 80040d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040de:	e7f7      	b.n	80040d0 <memmove+0x24>

080040e0 <_sbrk_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	4d06      	ldr	r5, [pc, #24]	@ (80040fc <_sbrk_r+0x1c>)
 80040e4:	2300      	movs	r3, #0
 80040e6:	4604      	mov	r4, r0
 80040e8:	4608      	mov	r0, r1
 80040ea:	602b      	str	r3, [r5, #0]
 80040ec:	f7ff f8c4 	bl	8003278 <_sbrk>
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	d102      	bne.n	80040fa <_sbrk_r+0x1a>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	b103      	cbz	r3, 80040fa <_sbrk_r+0x1a>
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	200001b4 	.word	0x200001b4

08004100 <memcpy>:
 8004100:	440a      	add	r2, r1
 8004102:	4291      	cmp	r1, r2
 8004104:	f100 33ff 	add.w	r3, r0, #4294967295
 8004108:	d100      	bne.n	800410c <memcpy+0xc>
 800410a:	4770      	bx	lr
 800410c:	b510      	push	{r4, lr}
 800410e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004112:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004116:	4291      	cmp	r1, r2
 8004118:	d1f9      	bne.n	800410e <memcpy+0xe>
 800411a:	bd10      	pop	{r4, pc}

0800411c <_realloc_r>:
 800411c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004120:	4680      	mov	r8, r0
 8004122:	4615      	mov	r5, r2
 8004124:	460c      	mov	r4, r1
 8004126:	b921      	cbnz	r1, 8004132 <_realloc_r+0x16>
 8004128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800412c:	4611      	mov	r1, r2
 800412e:	f7ff bc4b 	b.w	80039c8 <_malloc_r>
 8004132:	b92a      	cbnz	r2, 8004140 <_realloc_r+0x24>
 8004134:	f7ff fbdc 	bl	80038f0 <_free_r>
 8004138:	2400      	movs	r4, #0
 800413a:	4620      	mov	r0, r4
 800413c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004140:	f000 f81a 	bl	8004178 <_malloc_usable_size_r>
 8004144:	4285      	cmp	r5, r0
 8004146:	4606      	mov	r6, r0
 8004148:	d802      	bhi.n	8004150 <_realloc_r+0x34>
 800414a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800414e:	d8f4      	bhi.n	800413a <_realloc_r+0x1e>
 8004150:	4629      	mov	r1, r5
 8004152:	4640      	mov	r0, r8
 8004154:	f7ff fc38 	bl	80039c8 <_malloc_r>
 8004158:	4607      	mov	r7, r0
 800415a:	2800      	cmp	r0, #0
 800415c:	d0ec      	beq.n	8004138 <_realloc_r+0x1c>
 800415e:	42b5      	cmp	r5, r6
 8004160:	462a      	mov	r2, r5
 8004162:	4621      	mov	r1, r4
 8004164:	bf28      	it	cs
 8004166:	4632      	movcs	r2, r6
 8004168:	f7ff ffca 	bl	8004100 <memcpy>
 800416c:	4621      	mov	r1, r4
 800416e:	4640      	mov	r0, r8
 8004170:	f7ff fbbe 	bl	80038f0 <_free_r>
 8004174:	463c      	mov	r4, r7
 8004176:	e7e0      	b.n	800413a <_realloc_r+0x1e>

08004178 <_malloc_usable_size_r>:
 8004178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800417c:	1f18      	subs	r0, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	bfbc      	itt	lt
 8004182:	580b      	ldrlt	r3, [r1, r0]
 8004184:	18c0      	addlt	r0, r0, r3
 8004186:	4770      	bx	lr

08004188 <_init>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	bf00      	nop
 800418c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418e:	bc08      	pop	{r3}
 8004190:	469e      	mov	lr, r3
 8004192:	4770      	bx	lr

08004194 <_fini>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	bf00      	nop
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr
