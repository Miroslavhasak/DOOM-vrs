
DOOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d70  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  08007f00  08007f00  00008f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008908  08008908  0000a088  2**0
                  CONTENTS
  4 .ARM          00000008  08008908  08008908  00009908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008910  08008910  0000a088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008910  08008910  00009910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008914  08008914  00009914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08008918  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a088  2**0
                  CONTENTS
 10 .bss          00000508  20000088  20000088  0000a088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000590  20000590  0000a088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000068e4  00000000  00000000  0000a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aeb  00000000  00000000  0001099c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  00012488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000631  00000000  00000000  00012cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c738  00000000  00000000  000132e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000afd4  00000000  00000000  0002fa21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1aaa  00000000  00000000  0003a9f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000dc49f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003040  00000000  00000000  000dc4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  000df524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ee8 	.word	0x08007ee8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08007ee8 	.word	0x08007ee8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <randomFloat>:
Player enemy;
int boundX = 1000;
int boundY = 1000;

//RNG function
float randomFloat(float min, float max) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c52:	edc7 0a00 	vstr	s1, [r7]
    // Seed the random number generator once (use the system time)
    static int seeded = 0;
    if (!seeded) {
 8000c56:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <randomFloat+0x6c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d10b      	bne.n	8000c76 <randomFloat+0x2e>
        srand((unsigned int)time(NULL)); // Seed the RNG using time
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f004 fee8 	bl	8005a34 <time>
 8000c64:	4602      	mov	r2, r0
 8000c66:	460b      	mov	r3, r1
 8000c68:	4613      	mov	r3, r2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f004 fc56 	bl	800551c <srand>
        seeded = 1;
 8000c70:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <randomFloat+0x6c>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	601a      	str	r2, [r3, #0]
    }
    // Generate a random float value between 0 and 1, then scale it to [min, max]
    float scale = (float)rand() / (float)(RAND_MAX); // [0, 1]
 8000c76:	f004 fc7f 	bl	8005578 <rand>
 8000c7a:	ee07 0a90 	vmov	s15, r0
 8000c7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c82:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000cb8 <randomFloat+0x70>
 8000c86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c8a:	edc7 7a03 	vstr	s15, [r7, #12]
    return min + scale * (max - min);               // Scale to [min, max]
 8000c8e:	ed97 7a00 	vldr	s14, [r7]
 8000c92:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ca2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000caa:	eeb0 0a67 	vmov.f32	s0, s15
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200003f8 	.word	0x200003f8
 8000cb8:	4f000000 	.word	0x4f000000

08000cbc <initPolygon>:

// Function to initialize a polygon
void initPolygon(Polygon *polygon, int16_t *vertices, int16_t numVertices, int16_t color) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	461a      	mov	r2, r3
 8000cca:	460b      	mov	r3, r1
 8000ccc:	80fb      	strh	r3, [r7, #6]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	80bb      	strh	r3, [r7, #4]
    polygon->vertices = (int16_t *)malloc(numVertices * 3 * sizeof(int16_t));
 8000cd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f004 fb66 	bl	80053b0 <malloc>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	601a      	str	r2, [r3, #0]
    if (polygon->vertices == NULL) {
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d105      	bne.n	8000d00 <initPolygon+0x44>
        printf("Error allocating memory for polygon vertices.\n");
 8000cf4:	4814      	ldr	r0, [pc, #80]	@ (8000d48 <initPolygon+0x8c>)
 8000cf6:	f004 fd95 	bl	8005824 <puts>
        exit(EXIT_FAILURE);
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f004 fb46 	bl	800538c <exit>
    }
    for (int i = 0; i < numVertices * 3; i++) {
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e00e      	b.n	8000d24 <initPolygon+0x68>
        polygon->vertices[i] = vertices[i];
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	441a      	add	r2, r3
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6819      	ldr	r1, [r3, #0]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	440b      	add	r3, r1
 8000d18:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000d1c:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < numVertices * 3; i++) {
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3301      	adds	r3, #1
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbe8      	blt.n	8000d06 <initPolygon+0x4a>
    }
    polygon->numVertices = numVertices;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	88fa      	ldrh	r2, [r7, #6]
 8000d38:	809a      	strh	r2, [r3, #4]
    polygon->color = color;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	88ba      	ldrh	r2, [r7, #4]
 8000d3e:	80da      	strh	r2, [r3, #6]
}
 8000d40:	bf00      	nop
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	08007f00 	.word	0x08007f00

08000d4c <addPolygon>:

// Function to add a new polygon to the polygons array
void addPolygon(int16_t *vertices, int16_t numVertices, int16_t color) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	460b      	mov	r3, r1
 8000d56:	807b      	strh	r3, [r7, #2]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	803b      	strh	r3, [r7, #0]
    if (polygonCount >= MAX_POLYGONS) {
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <addPolygon+0x48>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b63      	cmp	r3, #99	@ 0x63
 8000d62:	dd03      	ble.n	8000d6c <addPolygon+0x20>
        printf("Cannot add more polygons. Maximum limit reached.\n");
 8000d64:	480c      	ldr	r0, [pc, #48]	@ (8000d98 <addPolygon+0x4c>)
 8000d66:	f004 fd5d 	bl	8005824 <puts>
        return;
 8000d6a:	e010      	b.n	8000d8e <addPolygon+0x42>
    }
    initPolygon(&polygons[polygonCount], vertices, numVertices, color);
 8000d6c:	4b09      	ldr	r3, [pc, #36]	@ (8000d94 <addPolygon+0x48>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <addPolygon+0x50>)
 8000d74:	1898      	adds	r0, r3, r2
 8000d76:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d7a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f7ff ff9c 	bl	8000cbc <initPolygon>
    polygonCount++;
 8000d84:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <addPolygon+0x48>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	4a02      	ldr	r2, [pc, #8]	@ (8000d94 <addPolygon+0x48>)
 8000d8c:	6013      	str	r3, [r2, #0]
}
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200003c4 	.word	0x200003c4
 8000d98:	08007f30 	.word	0x08007f30
 8000d9c:	200000a4 	.word	0x200000a4

08000da0 <initPolygons>:

    polygonCount--;
}

// Function to initialize polygons from preset map
void initPolygons() {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b09a      	sub	sp, #104	@ 0x68
 8000da4:	af00      	add	r7, sp, #0

	//arena s pouzitim polyline
	for(int8_t i=0; i<5; i++) {
 8000da6:	2300      	movs	r3, #0
 8000da8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000dac:	e06d      	b.n	8000e8a <initPolygons+0xea>
		int16_t EastWall3[] = {200+200*i, 0, 0,   200*i, 0, 0,   200*i, 0, 100,   200+200*i, 0, 100};
 8000dae:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000db2:	3301      	adds	r3, #1
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	461a      	mov	r2, r3
 8000db8:	0092      	lsls	r2, r2, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	0091      	lsls	r1, r2, #2
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8000ddc:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	461a      	mov	r2, r3
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	461a      	mov	r2, r3
 8000dea:	0091      	lsls	r1, r2, #2
 8000dec:	461a      	mov	r2, r3
 8000dee:	460b      	mov	r3, r1
 8000df0:	4413      	add	r3, r2
 8000df2:	00db      	lsls	r3, r3, #3
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	b21b      	sxth	r3, r3
 8000df8:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8000e02:	2300      	movs	r3, #0
 8000e04:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8000e08:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	461a      	mov	r2, r3
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	4413      	add	r3, r2
 8000e14:	461a      	mov	r2, r3
 8000e16:	0091      	lsls	r1, r2, #2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4413      	add	r3, r2
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8000e2e:	2364      	movs	r3, #100	@ 0x64
 8000e30:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8000e34:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000e38:	3301      	adds	r3, #1
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	461a      	mov	r2, r3
 8000e44:	0091      	lsls	r1, r2, #2
 8000e46:	461a      	mov	r2, r3
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4413      	add	r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8000e5c:	2364      	movs	r3, #100	@ 0x64
 8000e5e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		addPolygon(EastWall3, 4, decodeRgbValue(255, 255, 0)); // east
 8000e62:	2200      	movs	r2, #0
 8000e64:	21ff      	movs	r1, #255	@ 0xff
 8000e66:	20ff      	movs	r0, #255	@ 0xff
 8000e68:	f002 f990 	bl	800318c <decodeRgbValue>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	b21a      	sxth	r2, r3
 8000e70:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e74:	2104      	movs	r1, #4
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ff68 	bl	8000d4c <addPolygon>
	for(int8_t i=0; i<5; i++) {
 8000e7c:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	3301      	adds	r3, #1
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000e8a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	dd8d      	ble.n	8000dae <initPolygons+0xe>
	}
	for(int8_t i=0; i<5; i++) {
 8000e92:	2300      	movs	r3, #0
 8000e94:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8000e98:	e06b      	b.n	8000f72 <initPolygons+0x1d2>
		int16_t EastWall4[] = {1000, 200+200*i, 0,   1000, 200*i, 0,   1000, 200*i, 100,   1000, 200+200*i, 100};
 8000e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8000ea0:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	461a      	mov	r2, r3
 8000eb0:	0091      	lsls	r1, r2, #2
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	b21b      	sxth	r3, r3
 8000ebe:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	873b      	strh	r3, [r7, #56]	@ 0x38
 8000ec4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8000eca:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	0091      	lsls	r1, r2, #2
 8000eda:	461a      	mov	r2, r3
 8000edc:	460b      	mov	r3, r1
 8000ede:	4413      	add	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	b21b      	sxth	r3, r3
 8000ee6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8000ee8:	2300      	movs	r3, #0
 8000eea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8000eec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8000ef4:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	461a      	mov	r2, r3
 8000f02:	0091      	lsls	r1, r2, #2
 8000f04:	461a      	mov	r2, r3
 8000f06:	460b      	mov	r3, r1
 8000f08:	4413      	add	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8000f14:	2364      	movs	r3, #100	@ 0x64
 8000f16:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8000f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000f22:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000f26:	3301      	adds	r3, #1
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	0092      	lsls	r2, r2, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	461a      	mov	r2, r3
 8000f32:	0091      	lsls	r1, r2, #2
 8000f34:	461a      	mov	r2, r3
 8000f36:	460b      	mov	r3, r1
 8000f38:	4413      	add	r3, r2
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8000f44:	2364      	movs	r3, #100	@ 0x64
 8000f46:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		addPolygon(EastWall4, 4, decodeRgbValue(255, 255, 0)); // north
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	21ff      	movs	r1, #255	@ 0xff
 8000f4e:	20ff      	movs	r0, #255	@ 0xff
 8000f50:	f002 f91c 	bl	800318c <decodeRgbValue>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fef4 	bl	8000d4c <addPolygon>
	for(int8_t i=0; i<5; i++) {
 8000f64:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8000f72:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	dd8f      	ble.n	8000e9a <initPolygons+0xfa>
	}
	for(int8_t i=0; i<5; i++) {
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8000f80:	e06b      	b.n	800105a <initPolygons+0x2ba>
		int16_t EastWall3[] = {800-200*i, 1000, 0,   1000-200*i, 1000, 0,   1000-200*i, 1000, 100,   800-200*i, 1000, 100};
 8000f82:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	461a      	mov	r2, r3
 8000f8a:	0212      	lsls	r2, r2, #8
 8000f8c:	1ad2      	subs	r2, r2, r3
 8000f8e:	0092      	lsls	r2, r2, #2
 8000f90:	441a      	add	r2, r3
 8000f92:	00d2      	lsls	r2, r2, #3
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	83bb      	strh	r3, [r7, #28]
 8000fa4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa8:	83fb      	strh	r3, [r7, #30]
 8000faa:	2300      	movs	r3, #0
 8000fac:	843b      	strh	r3, [r7, #32]
 8000fae:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	0212      	lsls	r2, r2, #8
 8000fb8:	1ad2      	subs	r2, r2, r3
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	441a      	add	r2, r3
 8000fbe:	00d2      	lsls	r2, r2, #3
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000fd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000fda:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	0212      	lsls	r2, r2, #8
 8000fe4:	1ad2      	subs	r2, r2, r3
 8000fe6:	0092      	lsls	r2, r2, #2
 8000fe8:	441a      	add	r2, r3
 8000fea:	00d2      	lsls	r2, r2, #3
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8000ffc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001000:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001002:	2364      	movs	r3, #100	@ 0x64
 8001004:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001006:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 800100a:	b29b      	uxth	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	0212      	lsls	r2, r2, #8
 8001010:	1ad2      	subs	r2, r2, r3
 8001012:	0092      	lsls	r2, r2, #2
 8001014:	441a      	add	r2, r3
 8001016:	00d2      	lsls	r2, r2, #3
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	b29b      	uxth	r3, r3
 800101e:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8001022:	b29b      	uxth	r3, r3
 8001024:	b21b      	sxth	r3, r3
 8001026:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001028:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102c:	863b      	strh	r3, [r7, #48]	@ 0x30
 800102e:	2364      	movs	r3, #100	@ 0x64
 8001030:	867b      	strh	r3, [r7, #50]	@ 0x32
		addPolygon(EastWall3, 4, decodeRgbValue(255, 255, 0)); // west
 8001032:	2200      	movs	r2, #0
 8001034:	21ff      	movs	r1, #255	@ 0xff
 8001036:	20ff      	movs	r0, #255	@ 0xff
 8001038:	f002 f8a8 	bl	800318c <decodeRgbValue>
 800103c:	4603      	mov	r3, r0
 800103e:	b21a      	sxth	r2, r3
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	2104      	movs	r1, #4
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fe80 	bl	8000d4c <addPolygon>
	for(int8_t i=0; i<5; i++) {
 800104c:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8001050:	b2db      	uxtb	r3, r3
 8001052:	3301      	adds	r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 800105a:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 800105e:	2b04      	cmp	r3, #4
 8001060:	dd8f      	ble.n	8000f82 <initPolygons+0x1e2>
	}
	for(int8_t i=0; i<5; i++) {
 8001062:	2300      	movs	r3, #0
 8001064:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001068:	e066      	b.n	8001138 <initPolygons+0x398>
		int16_t EastWall4[] = {0, 800-200*i, 0,   0, 1000-200*i, 0,   0, 1000-200*i, 100,   0, 800-200*i, 100};
 800106a:	2300      	movs	r3, #0
 800106c:	80bb      	strh	r3, [r7, #4]
 800106e:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001072:	b29b      	uxth	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	0212      	lsls	r2, r2, #8
 8001078:	1ad2      	subs	r2, r2, r3
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	441a      	add	r2, r3
 800107e:	00d2      	lsls	r2, r2, #3
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	b29b      	uxth	r3, r3
 8001086:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 800108a:	b29b      	uxth	r3, r3
 800108c:	b21b      	sxth	r3, r3
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	2300      	movs	r3, #0
 8001092:	813b      	strh	r3, [r7, #8]
 8001094:	2300      	movs	r3, #0
 8001096:	817b      	strh	r3, [r7, #10]
 8001098:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800109c:	b29b      	uxth	r3, r3
 800109e:	461a      	mov	r2, r3
 80010a0:	0212      	lsls	r2, r2, #8
 80010a2:	1ad2      	subs	r2, r2, r3
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	441a      	add	r2, r3
 80010a8:	00d2      	lsls	r2, r2, #3
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	81bb      	strh	r3, [r7, #12]
 80010ba:	2300      	movs	r3, #0
 80010bc:	81fb      	strh	r3, [r7, #14]
 80010be:	2300      	movs	r3, #0
 80010c0:	823b      	strh	r3, [r7, #16]
 80010c2:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	461a      	mov	r2, r3
 80010ca:	0212      	lsls	r2, r2, #8
 80010cc:	1ad2      	subs	r2, r2, r3
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	441a      	add	r2, r3
 80010d2:	00d2      	lsls	r2, r2, #3
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	b29b      	uxth	r3, r3
 80010da:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	827b      	strh	r3, [r7, #18]
 80010e4:	2364      	movs	r3, #100	@ 0x64
 80010e6:	82bb      	strh	r3, [r7, #20]
 80010e8:	2300      	movs	r3, #0
 80010ea:	82fb      	strh	r3, [r7, #22]
 80010ec:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	0212      	lsls	r2, r2, #8
 80010f6:	1ad2      	subs	r2, r2, r3
 80010f8:	0092      	lsls	r2, r2, #2
 80010fa:	441a      	add	r2, r3
 80010fc:	00d2      	lsls	r2, r2, #3
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	b29b      	uxth	r3, r3
 8001104:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8001108:	b29b      	uxth	r3, r3
 800110a:	b21b      	sxth	r3, r3
 800110c:	833b      	strh	r3, [r7, #24]
 800110e:	2364      	movs	r3, #100	@ 0x64
 8001110:	837b      	strh	r3, [r7, #26]
		addPolygon(EastWall4, 4, decodeRgbValue(255, 255, 0)); // south
 8001112:	2200      	movs	r2, #0
 8001114:	21ff      	movs	r1, #255	@ 0xff
 8001116:	20ff      	movs	r0, #255	@ 0xff
 8001118:	f002 f838 	bl	800318c <decodeRgbValue>
 800111c:	4603      	mov	r3, r0
 800111e:	b21a      	sxth	r2, r3
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2104      	movs	r1, #4
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fe11 	bl	8000d4c <addPolygon>
	for(int8_t i=0; i<5; i++) {
 800112a:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800112e:	b2db      	uxtb	r3, r3
 8001130:	3301      	adds	r3, #1
 8001132:	b2db      	uxtb	r3, r3
 8001134:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001138:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800113c:	2b04      	cmp	r3, #4
 800113e:	dd94      	ble.n	800106a <initPolygons+0x2ca>
	}

}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3768      	adds	r7, #104	@ 0x68
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <initPlayer>:
        free(polygons[i].vertices);
    }
}

// Function to initialize the player
void initPlayer() {
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	player.x = 100;        // Initial X position
 8001150:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <initPlayer+0x3c>)
 8001152:	4a0e      	ldr	r2, [pc, #56]	@ (800118c <initPlayer+0x40>)
 8001154:	601a      	str	r2, [r3, #0]
    player.y = 100;        // Initial Y position
 8001156:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <initPlayer+0x3c>)
 8001158:	4a0c      	ldr	r2, [pc, #48]	@ (800118c <initPlayer+0x40>)
 800115a:	605a      	str	r2, [r3, #4]
    player.z = 50;         // Initial Z position
 800115c:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <initPlayer+0x3c>)
 800115e:	4a0c      	ldr	r2, [pc, #48]	@ (8001190 <initPlayer+0x44>)
 8001160:	609a      	str	r2, [r3, #8]
    player.rotation = 0.5; // Initial rotation angle
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <initPlayer+0x3c>)
 8001164:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001168:	60da      	str	r2, [r3, #12]
    player.health = 100;    // Starting health
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <initPlayer+0x3c>)
 800116c:	2264      	movs	r2, #100	@ 0x64
 800116e:	821a      	strh	r2, [r3, #16]
    player.armor = 100;     // Starting armor
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <initPlayer+0x3c>)
 8001172:	2264      	movs	r2, #100	@ 0x64
 8001174:	825a      	strh	r2, [r3, #18]
    player.ammo = 10;       // Starting ammo
 8001176:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <initPlayer+0x3c>)
 8001178:	220a      	movs	r2, #10
 800117a:	829a      	strh	r2, [r3, #20]
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	200003c8 	.word	0x200003c8
 800118c:	42c80000 	.word	0x42c80000
 8001190:	42480000 	.word	0x42480000

08001194 <initEnemy>:

// Function to initialize the player
void initEnemy() {
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	enemy.x = randomFloat(0, 1000); // Initial X position
 8001198:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80011e8 <initEnemy+0x54>
 800119c:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80011ec <initEnemy+0x58>
 80011a0:	f7ff fd52 	bl	8000c48 <randomFloat>
 80011a4:	eef0 7a40 	vmov.f32	s15, s0
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <initEnemy+0x5c>)
 80011aa:	edc3 7a00 	vstr	s15, [r3]
	enemy.y = randomFloat(0, 1000); // Initial Y position
 80011ae:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 80011e8 <initEnemy+0x54>
 80011b2:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 80011ec <initEnemy+0x58>
 80011b6:	f7ff fd47 	bl	8000c48 <randomFloat>
 80011ba:	eef0 7a40 	vmov.f32	s15, s0
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <initEnemy+0x5c>)
 80011c0:	edc3 7a01 	vstr	s15, [r3, #4]
	enemy.z = 50;         // Initial Z position
 80011c4:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <initEnemy+0x5c>)
 80011c6:	4a0b      	ldr	r2, [pc, #44]	@ (80011f4 <initEnemy+0x60>)
 80011c8:	609a      	str	r2, [r3, #8]
	enemy.rotation = 0.5; // Initial rotation angle
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <initEnemy+0x5c>)
 80011cc:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80011d0:	60da      	str	r2, [r3, #12]
	enemy.health = 100;    // Starting health
 80011d2:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <initEnemy+0x5c>)
 80011d4:	2264      	movs	r2, #100	@ 0x64
 80011d6:	821a      	strh	r2, [r3, #16]
	enemy.armor = 0;     // Starting armor
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <initEnemy+0x5c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	825a      	strh	r2, [r3, #18]
	enemy.ammo = 10;       // Starting ammo
 80011de:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <initEnemy+0x5c>)
 80011e0:	220a      	movs	r2, #10
 80011e2:	829a      	strh	r2, [r3, #20]
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	447a0000 	.word	0x447a0000
 80011ec:	00000000 	.word	0x00000000
 80011f0:	200003e0 	.word	0x200003e0
 80011f4:	42480000 	.word	0x42480000

080011f8 <movePlayer>:

// pohyb hraca na osi X a Y
// este to nefunguje uplne na osi Y
void movePlayer(Player *player, float stepX, float stepY, uint8_t polar) {
 80011f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	ed87 0a02 	vstr	s0, [r7, #8]
 8001206:	edc7 0a01 	vstr	s1, [r7, #4]
 800120a:	460b      	mov	r3, r1
 800120c:	70fb      	strb	r3, [r7, #3]

	float moveX = 0;
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
	float moveY = 0;
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	613b      	str	r3, [r7, #16]

	//treba doladit znamienka a sin/cos funkcie na moveX a moveY
	if (polar){	//ak sa hybeme vzhladom na natocenie hraca
 800121a:	78fb      	ldrb	r3, [r7, #3]
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8083 	beq.w	8001328 <movePlayer+0x130>
		moveX = stepX*cos(player->rotation) + stepY*sin(player->rotation);
 8001222:	68b8      	ldr	r0, [r7, #8]
 8001224:	f7ff f990 	bl	8000548 <__aeabi_f2d>
 8001228:	4604      	mov	r4, r0
 800122a:	460d      	mov	r5, r1
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f989 	bl	8000548 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	ec43 2b10 	vmov	d0, r2, r3
 800123e:	f005 fceb 	bl	8006c18 <cos>
 8001242:	ec53 2b10 	vmov	r2, r3, d0
 8001246:	4620      	mov	r0, r4
 8001248:	4629      	mov	r1, r5
 800124a:	f7ff f9d5 	bl	80005f8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4690      	mov	r8, r2
 8001254:	4699      	mov	r9, r3
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff f976 	bl	8000548 <__aeabi_f2d>
 800125c:	4604      	mov	r4, r0
 800125e:	460d      	mov	r5, r1
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f96f 	bl	8000548 <__aeabi_f2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	ec43 2b10 	vmov	d0, r2, r3
 8001272:	f005 fd2d 	bl	8006cd0 <sin>
 8001276:	ec53 2b10 	vmov	r2, r3, d0
 800127a:	4620      	mov	r0, r4
 800127c:	4629      	mov	r1, r5
 800127e:	f7ff f9bb 	bl	80005f8 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4640      	mov	r0, r8
 8001288:	4649      	mov	r1, r9
 800128a:	f7fe ffff 	bl	800028c <__adddf3>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fc87 	bl	8000ba8 <__aeabi_d2f>
 800129a:	4603      	mov	r3, r0
 800129c:	617b      	str	r3, [r7, #20]
		moveY = stepX*sin(player->rotation) + (-1)*stepY*cos(player->rotation);
 800129e:	68b8      	ldr	r0, [r7, #8]
 80012a0:	f7ff f952 	bl	8000548 <__aeabi_f2d>
 80012a4:	4604      	mov	r4, r0
 80012a6:	460d      	mov	r5, r1
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f94b 	bl	8000548 <__aeabi_f2d>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	ec43 2b10 	vmov	d0, r2, r3
 80012ba:	f005 fd09 	bl	8006cd0 <sin>
 80012be:	ec53 2b10 	vmov	r2, r3, d0
 80012c2:	4620      	mov	r0, r4
 80012c4:	4629      	mov	r1, r5
 80012c6:	f7ff f997 	bl	80005f8 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4690      	mov	r8, r2
 80012d0:	4699      	mov	r9, r3
 80012d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d6:	eef1 7a67 	vneg.f32	s15, s15
 80012da:	ee17 3a90 	vmov	r3, s15
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f932 	bl	8000548 <__aeabi_f2d>
 80012e4:	4604      	mov	r4, r0
 80012e6:	460d      	mov	r5, r1
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f92b 	bl	8000548 <__aeabi_f2d>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	ec43 2b10 	vmov	d0, r2, r3
 80012fa:	f005 fc8d 	bl	8006c18 <cos>
 80012fe:	ec53 2b10 	vmov	r2, r3, d0
 8001302:	4620      	mov	r0, r4
 8001304:	4629      	mov	r1, r5
 8001306:	f7ff f977 	bl	80005f8 <__aeabi_dmul>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4640      	mov	r0, r8
 8001310:	4649      	mov	r1, r9
 8001312:	f7fe ffbb 	bl	800028c <__adddf3>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc43 	bl	8000ba8 <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	e003      	b.n	8001330 <movePlayer+0x138>
	}
	else{		//ak chceme hraca premiestnit bez ohladu jeho na rotaciu
		moveX = stepX;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	617b      	str	r3, [r7, #20]
		moveY = stepY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	613b      	str	r3, [r7, #16]
	}

	//when hitting wall the player slides along the other axis
	if ((player->x + moveX < boundX)&&(player->x + moveX > 0)) {
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	ed93 7a00 	vldr	s14, [r3]
 8001336:	edd7 7a05 	vldr	s15, [r7, #20]
 800133a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800133e:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <movePlayer+0x1e8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	d515      	bpl.n	8001380 <movePlayer+0x188>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	ed93 7a00 	vldr	s14, [r3]
 800135a:	edd7 7a05 	vldr	s15, [r7, #20]
 800135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001362:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136a:	dd09      	ble.n	8001380 <movePlayer+0x188>
		player->x += moveX;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	ed93 7a00 	vldr	s14, [r3]
 8001372:	edd7 7a05 	vldr	s15, [r7, #20]
 8001376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	edc3 7a00 	vstr	s15, [r3]
	}
	if ((player->y + moveY < boundY)&&(player->y + moveY > 0)) {
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	ed93 7a01 	vldr	s14, [r3, #4]
 8001386:	edd7 7a04 	vldr	s15, [r7, #16]
 800138a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <movePlayer+0x1ec>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a2:	d400      	bmi.n	80013a6 <movePlayer+0x1ae>
		player->y += moveY;
	}
}
 80013a4:	e016      	b.n	80013d4 <movePlayer+0x1dc>
	if ((player->y + moveY < boundY)&&(player->y + moveY > 0)) {
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80013ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80013b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013bc:	dc00      	bgt.n	80013c0 <movePlayer+0x1c8>
}
 80013be:	e009      	b.n	80013d4 <movePlayer+0x1dc>
		player->y += moveY;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80013c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80013ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013de:	bf00      	nop
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000004 	.word	0x20000004

080013e8 <rotatePlayer>:

void rotatePlayer(Player *player, float angle) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	ed87 0a00 	vstr	s0, [r7]
	player->rotation += angle;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	ed93 7a03 	vldr	s14, [r3, #12]
 80013fa:	edd7 7a00 	vldr	s15, [r7]
 80013fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	edc3 7a03 	vstr	s15, [r3, #12]
	if (player->rotation > 3.1416) {
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f89b 	bl	8000548 <__aeabi_f2d>
 8001412:	a321      	add	r3, pc, #132	@ (adr r3, 8001498 <rotatePlayer+0xb0>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff fb7e 	bl	8000b18 <__aeabi_dcmpgt>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d012      	beq.n	8001448 <rotatePlayer+0x60>
		player->rotation -= 6.2832;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f88e 	bl	8000548 <__aeabi_f2d>
 800142c:	a31c      	add	r3, pc, #112	@ (adr r3, 80014a0 <rotatePlayer+0xb8>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7fe ff29 	bl	8000288 <__aeabi_dsub>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f7ff fbb3 	bl	8000ba8 <__aeabi_d2f>
 8001442:	4602      	mov	r2, r0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	60da      	str	r2, [r3, #12]
	}
	if (player->rotation < -3.1416) {
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f87b 	bl	8000548 <__aeabi_f2d>
 8001452:	a315      	add	r3, pc, #84	@ (adr r3, 80014a8 <rotatePlayer+0xc0>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff fb40 	bl	8000adc <__aeabi_dcmplt>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d100      	bne.n	8001464 <rotatePlayer+0x7c>
		player->rotation += 6.2832;
	}
}
 8001462:	e012      	b.n	800148a <rotatePlayer+0xa2>
		player->rotation += 6.2832;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f86d 	bl	8000548 <__aeabi_f2d>
 800146e:	a30c      	add	r3, pc, #48	@ (adr r3, 80014a0 <rotatePlayer+0xb8>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7fe ff0a 	bl	800028c <__adddf3>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff fb92 	bl	8000ba8 <__aeabi_d2f>
 8001484:	4602      	mov	r2, r0
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	60da      	str	r2, [r3, #12]
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	f3af 8000 	nop.w
 8001498:	2e48e8a7 	.word	0x2e48e8a7
 800149c:	400921ff 	.word	0x400921ff
 80014a0:	2e48e8a7 	.word	0x2e48e8a7
 80014a4:	401921ff 	.word	0x401921ff
 80014a8:	2e48e8a7 	.word	0x2e48e8a7
 80014ac:	c00921ff 	.word	0xc00921ff

080014b0 <drawAmmo>:

void drawAmmo() {
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af02      	add	r7, sp, #8
	char ammoText[16];
	lcdPutS("AMMO", 285, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 80014b6:	221f      	movs	r2, #31
 80014b8:	211f      	movs	r1, #31
 80014ba:	201f      	movs	r0, #31
 80014bc:	f001 fe66 	bl	800318c <decodeRgbValue>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461c      	mov	r4, r3
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	2000      	movs	r0, #0
 80014ca:	f001 fe5f 	bl	800318c <decodeRgbValue>
 80014ce:	4603      	mov	r3, r0
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	4623      	mov	r3, r4
 80014d4:	22e6      	movs	r2, #230	@ 0xe6
 80014d6:	f240 111d 	movw	r1, #285	@ 0x11d
 80014da:	4812      	ldr	r0, [pc, #72]	@ (8001524 <drawAmmo+0x74>)
 80014dc:	f001 fe72 	bl	80031c4 <lcdPutS>
	sprintf(ammoText, "%d ", player.ammo);
 80014e0:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <drawAmmo+0x78>)
 80014e2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80014e6:	461a      	mov	r2, r3
 80014e8:	463b      	mov	r3, r7
 80014ea:	4910      	ldr	r1, [pc, #64]	@ (800152c <drawAmmo+0x7c>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f004 f9a1 	bl	8005834 <siprintf>
	lcdPutS(ammoText, 280, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 80014f2:	221f      	movs	r2, #31
 80014f4:	211f      	movs	r1, #31
 80014f6:	201f      	movs	r0, #31
 80014f8:	f001 fe48 	bl	800318c <decodeRgbValue>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461c      	mov	r4, r3
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2000      	movs	r0, #0
 8001506:	f001 fe41 	bl	800318c <decodeRgbValue>
 800150a:	4603      	mov	r3, r0
 800150c:	4638      	mov	r0, r7
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	4623      	mov	r3, r4
 8001512:	22de      	movs	r2, #222	@ 0xde
 8001514:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001518:	f001 fe54 	bl	80031c4 <lcdPutS>
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bd90      	pop	{r4, r7, pc}
 8001524:	08007f7c 	.word	0x08007f7c
 8001528:	200003c8 	.word	0x200003c8
 800152c:	08007f84 	.word	0x08007f84

08001530 <drawScore>:

void drawScore(int16_t score) {
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b089      	sub	sp, #36	@ 0x24
 8001534:	af02      	add	r7, sp, #8
 8001536:	4603      	mov	r3, r0
 8001538:	80fb      	strh	r3, [r7, #6]
	char scoreText[16];
	lcdPutS("SCORE", 200, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 800153a:	221f      	movs	r2, #31
 800153c:	211f      	movs	r1, #31
 800153e:	201f      	movs	r0, #31
 8001540:	f001 fe24 	bl	800318c <decodeRgbValue>
 8001544:	4603      	mov	r3, r0
 8001546:	461c      	mov	r4, r3
 8001548:	2200      	movs	r2, #0
 800154a:	2100      	movs	r1, #0
 800154c:	2000      	movs	r0, #0
 800154e:	f001 fe1d 	bl	800318c <decodeRgbValue>
 8001552:	4603      	mov	r3, r0
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	4623      	mov	r3, r4
 8001558:	22e6      	movs	r2, #230	@ 0xe6
 800155a:	21c8      	movs	r1, #200	@ 0xc8
 800155c:	4811      	ldr	r0, [pc, #68]	@ (80015a4 <drawScore+0x74>)
 800155e:	f001 fe31 	bl	80031c4 <lcdPutS>
	sprintf(scoreText, "%d ", score);
 8001562:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	490f      	ldr	r1, [pc, #60]	@ (80015a8 <drawScore+0x78>)
 800156c:	4618      	mov	r0, r3
 800156e:	f004 f961 	bl	8005834 <siprintf>
	lcdPutS(scoreText, 195, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8001572:	221f      	movs	r2, #31
 8001574:	211f      	movs	r1, #31
 8001576:	201f      	movs	r0, #31
 8001578:	f001 fe08 	bl	800318c <decodeRgbValue>
 800157c:	4603      	mov	r3, r0
 800157e:	461c      	mov	r4, r3
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	2000      	movs	r0, #0
 8001586:	f001 fe01 	bl	800318c <decodeRgbValue>
 800158a:	4603      	mov	r3, r0
 800158c:	f107 0008 	add.w	r0, r7, #8
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4623      	mov	r3, r4
 8001594:	22de      	movs	r2, #222	@ 0xde
 8001596:	21c3      	movs	r1, #195	@ 0xc3
 8001598:	f001 fe14 	bl	80031c4 <lcdPutS>
}
 800159c:	bf00      	nop
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd90      	pop	{r4, r7, pc}
 80015a4:	08007f88 	.word	0x08007f88
 80015a8:	08007f84 	.word	0x08007f84

080015ac <drawHealth>:

void drawHealth() {
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af02      	add	r7, sp, #8
	char healthText[16];
	lcdPutS("HEALTH", 140, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 80015b2:	221f      	movs	r2, #31
 80015b4:	211f      	movs	r1, #31
 80015b6:	201f      	movs	r0, #31
 80015b8:	f001 fde8 	bl	800318c <decodeRgbValue>
 80015bc:	4603      	mov	r3, r0
 80015be:	461c      	mov	r4, r3
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2000      	movs	r0, #0
 80015c6:	f001 fde1 	bl	800318c <decodeRgbValue>
 80015ca:	4603      	mov	r3, r0
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	4623      	mov	r3, r4
 80015d0:	22e6      	movs	r2, #230	@ 0xe6
 80015d2:	218c      	movs	r1, #140	@ 0x8c
 80015d4:	4811      	ldr	r0, [pc, #68]	@ (800161c <drawHealth+0x70>)
 80015d6:	f001 fdf5 	bl	80031c4 <lcdPutS>
	sprintf(healthText, "%d ", player.health);
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <drawHealth+0x74>)
 80015dc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015e0:	461a      	mov	r2, r3
 80015e2:	463b      	mov	r3, r7
 80015e4:	490f      	ldr	r1, [pc, #60]	@ (8001624 <drawHealth+0x78>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f004 f924 	bl	8005834 <siprintf>
	lcdPutS(healthText, 135, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 80015ec:	221f      	movs	r2, #31
 80015ee:	211f      	movs	r1, #31
 80015f0:	201f      	movs	r0, #31
 80015f2:	f001 fdcb 	bl	800318c <decodeRgbValue>
 80015f6:	4603      	mov	r3, r0
 80015f8:	461c      	mov	r4, r3
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	2000      	movs	r0, #0
 8001600:	f001 fdc4 	bl	800318c <decodeRgbValue>
 8001604:	4603      	mov	r3, r0
 8001606:	4638      	mov	r0, r7
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	4623      	mov	r3, r4
 800160c:	22de      	movs	r2, #222	@ 0xde
 800160e:	2187      	movs	r1, #135	@ 0x87
 8001610:	f001 fdd8 	bl	80031c4 <lcdPutS>
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	08007f90 	.word	0x08007f90
 8001620:	200003c8 	.word	0x200003c8
 8001624:	08007f84 	.word	0x08007f84

08001628 <drawArmor>:

void drawArmor() {
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b087      	sub	sp, #28
 800162c:	af02      	add	r7, sp, #8
	char armorText[16];
	lcdPutS("ARMOR", 50, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 800162e:	221f      	movs	r2, #31
 8001630:	211f      	movs	r1, #31
 8001632:	201f      	movs	r0, #31
 8001634:	f001 fdaa 	bl	800318c <decodeRgbValue>
 8001638:	4603      	mov	r3, r0
 800163a:	461c      	mov	r4, r3
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2000      	movs	r0, #0
 8001642:	f001 fda3 	bl	800318c <decodeRgbValue>
 8001646:	4603      	mov	r3, r0
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	4623      	mov	r3, r4
 800164c:	22e6      	movs	r2, #230	@ 0xe6
 800164e:	2132      	movs	r1, #50	@ 0x32
 8001650:	4811      	ldr	r0, [pc, #68]	@ (8001698 <drawArmor+0x70>)
 8001652:	f001 fdb7 	bl	80031c4 <lcdPutS>
	sprintf(armorText, "%d ", player.armor);
 8001656:	4b11      	ldr	r3, [pc, #68]	@ (800169c <drawArmor+0x74>)
 8001658:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800165c:	461a      	mov	r2, r3
 800165e:	463b      	mov	r3, r7
 8001660:	490f      	ldr	r1, [pc, #60]	@ (80016a0 <drawArmor+0x78>)
 8001662:	4618      	mov	r0, r3
 8001664:	f004 f8e6 	bl	8005834 <siprintf>
	lcdPutS(armorText, 50, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8001668:	221f      	movs	r2, #31
 800166a:	211f      	movs	r1, #31
 800166c:	201f      	movs	r0, #31
 800166e:	f001 fd8d 	bl	800318c <decodeRgbValue>
 8001672:	4603      	mov	r3, r0
 8001674:	461c      	mov	r4, r3
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	2000      	movs	r0, #0
 800167c:	f001 fd86 	bl	800318c <decodeRgbValue>
 8001680:	4603      	mov	r3, r0
 8001682:	4638      	mov	r0, r7
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	4623      	mov	r3, r4
 8001688:	22de      	movs	r2, #222	@ 0xde
 800168a:	2132      	movs	r1, #50	@ 0x32
 800168c:	f001 fd9a 	bl	80031c4 <lcdPutS>
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	bd90      	pop	{r4, r7, pc}
 8001698:	08007f98 	.word	0x08007f98
 800169c:	200003c8 	.word	0x200003c8
 80016a0:	08007f84 	.word	0x08007f84

080016a4 <startNewGame>:

void startNewGame(int16_t difficulity){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
	initPlayer();
 80016ae:	f7ff fd4d 	bl	800114c <initPlayer>
	initEnemy();
 80016b2:	f7ff fd6f 	bl	8001194 <initEnemy>
	gameLoop(difficulity);
 80016b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 f804 	bl	80016c8 <gameLoop>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <gameLoop>:

void gameLoop(int16_t difficulity){
 80016c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016cc:	b0a6      	sub	sp, #152	@ 0x98
 80016ce:	af02      	add	r7, sp, #8
 80016d0:	4603      	mov	r3, r0
 80016d2:	80fb      	strh	r3, [r7, #6]
	// odkaz pre Mateja: sfunkcni tie piny a potom prerob gameLoop aby sa tu vykonavala hra
	// pre nepriatelov mozes pouzit strukturu hraca. Ich vykreslovanie potom ja dokoncim

	int8_t step = 5;	// kazdych 10 pixelov bude bodka, samozrejme 5 je lepsie, ale viac laguje
 80016d4:	2305      	movs	r3, #5
 80016d6:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

	//premenne potrebne na zastavenie hraca
	uint8_t stay = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
	uint8_t xm = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
	uint8_t ym = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
	uint8_t predX = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t predY = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

	float vzX = 0;			//vzdialenost medzi hracom a nepriatelom
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	66bb      	str	r3, [r7, #104]	@ 0x68
	float vzY = 0;
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	667b      	str	r3, [r7, #100]	@ 0x64
	float vz = 0;
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	// premenne potrebne k mechanike strelby
	uint8_t loadedState = 1;		//flag potrebny pocas nabijania zbrane
 800170c:	2301      	movs	r3, #1
 800170e:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	uint16_t loadedAmmo = 0;			//premenna potrebna pocas nabijania
 8001712:	2300      	movs	r3, #0
 8001714:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
	uint16_t loadSpeed = 3;			//rychlost nabijania
 8001718:	2303      	movs	r3, #3
 800171a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
	uint16_t magazineCapacity = 10;	//kapacita zasobnika
 800171e:	230a      	movs	r3, #10
 8001720:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
	int16_t bulletSpeed = 10;				//rychlost strely
 8001724:	230a      	movs	r3, #10
 8001726:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	int16_t bulletDamage = 120;				//damage strely (1 hit kill)
 800172a:	2378      	movs	r3, #120	@ 0x78
 800172c:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
	float bulletX = 0;			//suradnice strely
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	float bulletY = 0;
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	65bb      	str	r3, [r7, #88]	@ 0x58
	float bulletAngle = 0;			//smer strely
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	657b      	str	r3, [r7, #84]	@ 0x54

	int16_t kills = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
	int16_t kills2win = 0; // podmienka na skoncenie levelu, zavisi od obtiaznosti
 800174a:	2300      	movs	r3, #0
 800174c:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
	int16_t enemySpeed = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
	int16_t enemyDamage = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
	switch(difficulity){	//podla urcenej obtiaznosti sa nastavia parametre hry
 800175c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001760:	2b02      	cmp	r3, #2
 8001762:	d01a      	beq.n	800179a <gameLoop+0xd2>
 8001764:	2b02      	cmp	r3, #2
 8001766:	dc22      	bgt.n	80017ae <gameLoop+0xe6>
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <gameLoop+0xaa>
 800176c:	2b01      	cmp	r3, #1
 800176e:	d00a      	beq.n	8001786 <gameLoop+0xbe>
 8001770:	e01d      	b.n	80017ae <gameLoop+0xe6>
	case 0:
		enemySpeed = 10;
 8001772:	230a      	movs	r3, #10
 8001774:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		enemyDamage = 5;
 8001778:	2305      	movs	r3, #5
 800177a:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
		kills2win = 1;
 800177e:	2301      	movs	r3, #1
 8001780:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
		break;
 8001784:	e013      	b.n	80017ae <gameLoop+0xe6>
	case 1:
		enemySpeed = 20;
 8001786:	2314      	movs	r3, #20
 8001788:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		enemyDamage = 10;
 800178c:	230a      	movs	r3, #10
 800178e:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
		kills2win = 5;
 8001792:	2305      	movs	r3, #5
 8001794:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
		break;
 8001798:	e009      	b.n	80017ae <gameLoop+0xe6>
	case 2:
		enemySpeed = 40;
 800179a:	2328      	movs	r3, #40	@ 0x28
 800179c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		enemyDamage = 20;
 80017a0:	2314      	movs	r3, #20
 80017a2:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
		kills2win = 10;
 80017a6:	230a      	movs	r3, #10
 80017a8:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
		break;
 80017ac:	bf00      	nop
	}

	lcdRectangle(20, 220, 300, 250, decodeRgbValue(255, 255, 255)); //dolny status bar
 80017ae:	22ff      	movs	r2, #255	@ 0xff
 80017b0:	21ff      	movs	r1, #255	@ 0xff
 80017b2:	20ff      	movs	r0, #255	@ 0xff
 80017b4:	f001 fcea 	bl	800318c <decodeRgbValue>
 80017b8:	4603      	mov	r3, r0
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	23fa      	movs	r3, #250	@ 0xfa
 80017be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017c2:	21dc      	movs	r1, #220	@ 0xdc
 80017c4:	2014      	movs	r0, #20
 80017c6:	f001 f9e2 	bl	8002b8e <lcdRectangle>
	lcdCircle(160,230,8,decodeRgbValue(255, 255, 255)); //akysi kruh, v povodnej doom je tam hlava hraca
 80017ca:	22ff      	movs	r2, #255	@ 0xff
 80017cc:	21ff      	movs	r1, #255	@ 0xff
 80017ce:	20ff      	movs	r0, #255	@ 0xff
 80017d0:	f001 fcdc 	bl	800318c <decodeRgbValue>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2208      	movs	r2, #8
 80017d8:	21e6      	movs	r1, #230	@ 0xe6
 80017da:	20a0      	movs	r0, #160	@ 0xa0
 80017dc:	f001 fabe 	bl	8002d5c <lcdCircle>

	drawAmmo();
 80017e0:	f7ff fe66 	bl	80014b0 <drawAmmo>
	drawHealth();
 80017e4:	f7ff fee2 	bl	80015ac <drawHealth>
	drawArmor();
 80017e8:	f7ff ff1e 	bl	8001628 <drawArmor>
	drawScore(kills);
 80017ec:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fe9d 	bl	8001530 <drawScore>




	while(kills < kills2win){		// hlavny cyklus hry
 80017f6:	f000 bc08 	b.w	800200a <gameLoop+0x942>
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0) == GPIO_PIN_RESET){
			movePlayer(&player, 0, -50, 1);
		}*/


		if(!stay) {
 80017fa:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d13f      	bne.n	8001882 <gameLoop+0x1ba>
			if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == 1){
 8001802:	2102      	movs	r1, #2
 8001804:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001808:	f003 fb46 	bl	8004e98 <HAL_GPIO_ReadPin>
 800180c:	4603      	mov	r3, r0
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <gameLoop+0x15a>
				movePlayer(&player, 50, 0, 1);
 8001812:	2101      	movs	r1, #1
 8001814:	eddf 0ac3 	vldr	s1, [pc, #780]	@ 8001b24 <gameLoop+0x45c>
 8001818:	ed9f 0ac3 	vldr	s0, [pc, #780]	@ 8001b28 <gameLoop+0x460>
 800181c:	48c3      	ldr	r0, [pc, #780]	@ (8001b2c <gameLoop+0x464>)
 800181e:	f7ff fceb 	bl	80011f8 <movePlayer>
			}
			if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1) == 0){
 8001822:	2102      	movs	r1, #2
 8001824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001828:	f003 fb36 	bl	8004e98 <HAL_GPIO_ReadPin>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d107      	bne.n	8001842 <gameLoop+0x17a>
				movePlayer(&player, -50, 0, 1);
 8001832:	2101      	movs	r1, #1
 8001834:	eddf 0abb 	vldr	s1, [pc, #748]	@ 8001b24 <gameLoop+0x45c>
 8001838:	ed9f 0abd 	vldr	s0, [pc, #756]	@ 8001b30 <gameLoop+0x468>
 800183c:	48bb      	ldr	r0, [pc, #748]	@ (8001b2c <gameLoop+0x464>)
 800183e:	f7ff fcdb 	bl	80011f8 <movePlayer>
			}
			if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == 1){
 8001842:	2101      	movs	r1, #1
 8001844:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001848:	f003 fb26 	bl	8004e98 <HAL_GPIO_ReadPin>
 800184c:	4603      	mov	r3, r0
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <gameLoop+0x19a>
				movePlayer(&player, 0, 50, 1);
 8001852:	2101      	movs	r1, #1
 8001854:	eddf 0ab4 	vldr	s1, [pc, #720]	@ 8001b28 <gameLoop+0x460>
 8001858:	ed9f 0ab2 	vldr	s0, [pc, #712]	@ 8001b24 <gameLoop+0x45c>
 800185c:	48b3      	ldr	r0, [pc, #716]	@ (8001b2c <gameLoop+0x464>)
 800185e:	f7ff fccb 	bl	80011f8 <movePlayer>
			}
			if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) == 0){
 8001862:	2101      	movs	r1, #1
 8001864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001868:	f003 fb16 	bl	8004e98 <HAL_GPIO_ReadPin>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d107      	bne.n	8001882 <gameLoop+0x1ba>
				movePlayer(&player, 0, -50, 1);
 8001872:	2101      	movs	r1, #1
 8001874:	eddf 0aae 	vldr	s1, [pc, #696]	@ 8001b30 <gameLoop+0x468>
 8001878:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 8001b24 <gameLoop+0x45c>
 800187c:	48ab      	ldr	r0, [pc, #684]	@ (8001b2c <gameLoop+0x464>)
 800187e:	f7ff fcbb 	bl	80011f8 <movePlayer>
		}




		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == GPIO_PIN_RESET){
 8001882:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800188a:	f003 fb05 	bl	8004e98 <HAL_GPIO_ReadPin>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d104      	bne.n	800189e <gameLoop+0x1d6>
			rotatePlayer(&player, +3.1416/10);
 8001894:	ed9f 0aa7 	vldr	s0, [pc, #668]	@ 8001b34 <gameLoop+0x46c>
 8001898:	48a4      	ldr	r0, [pc, #656]	@ (8001b2c <gameLoop+0x464>)
 800189a:	f7ff fda5 	bl	80013e8 <rotatePlayer>
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == GPIO_PIN_RESET){
 800189e:	2108      	movs	r1, #8
 80018a0:	48a5      	ldr	r0, [pc, #660]	@ (8001b38 <gameLoop+0x470>)
 80018a2:	f003 faf9 	bl	8004e98 <HAL_GPIO_ReadPin>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d104      	bne.n	80018b6 <gameLoop+0x1ee>
			rotatePlayer(&player, -3.1416/10);
 80018ac:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8001b3c <gameLoop+0x474>
 80018b0:	489e      	ldr	r0, [pc, #632]	@ (8001b2c <gameLoop+0x464>)
 80018b2:	f7ff fd99 	bl	80013e8 <rotatePlayer>
		}



		if(enemy.health <= 0) {		//respawnujeme nepriatela ked ho zabijeme
 80018b6:	4ba2      	ldr	r3, [pc, #648]	@ (8001b40 <gameLoop+0x478>)
 80018b8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	dc0d      	bgt.n	80018dc <gameLoop+0x214>
			kills++;
 80018c0:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
			drawScore(kills);
 80018ce:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff fe2c 	bl	8001530 <drawScore>
			initEnemy();
 80018d8:	f7ff fc5c 	bl	8001194 <initEnemy>
		}
		if(enemy.health > 0) {		//logika nepriatela kym je nazive
 80018dc:	4b98      	ldr	r3, [pc, #608]	@ (8001b40 <gameLoop+0x478>)
 80018de:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f340 80ba 	ble.w	8001a5c <gameLoop+0x394>

			vzX = enemy.x - player.x;
 80018e8:	4b95      	ldr	r3, [pc, #596]	@ (8001b40 <gameLoop+0x478>)
 80018ea:	ed93 7a00 	vldr	s14, [r3]
 80018ee:	4b8f      	ldr	r3, [pc, #572]	@ (8001b2c <gameLoop+0x464>)
 80018f0:	edd3 7a00 	vldr	s15, [r3]
 80018f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f8:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
			vzY = enemy.y - player.y;
 80018fc:	4b90      	ldr	r3, [pc, #576]	@ (8001b40 <gameLoop+0x478>)
 80018fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001902:	4b8a      	ldr	r3, [pc, #552]	@ (8001b2c <gameLoop+0x464>)
 8001904:	edd3 7a01 	vldr	s15, [r3, #4]
 8001908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800190c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
			vz = sqrt(vzX*vzX + vzY*vzX);
 8001910:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001914:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001918:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 800191c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001928:	ee17 0a90 	vmov	r0, s15
 800192c:	f7fe fe0c 	bl	8000548 <__aeabi_f2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	ec43 2b10 	vmov	d0, r2, r3
 8001938:	f004 ffa8 	bl	800688c <sqrt>
 800193c:	ec53 2b10 	vmov	r2, r3, d0
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f7ff f930 	bl	8000ba8 <__aeabi_d2f>
 8001948:	4603      	mov	r3, r0
 800194a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			if(vz>50){						// nahana hraca po mape
 800194e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001952:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8001b28 <gameLoop+0x460>
 8001956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	dd54      	ble.n	8001a0a <gameLoop+0x342>
				if(vzX>0) {
 8001960:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001964:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196c:	dd0d      	ble.n	800198a <gameLoop+0x2c2>
					enemy.x -= enemySpeed;
 800196e:	4b74      	ldr	r3, [pc, #464]	@ (8001b40 <gameLoop+0x478>)
 8001970:	ed93 7a00 	vldr	s14, [r3]
 8001974:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001984:	4b6e      	ldr	r3, [pc, #440]	@ (8001b40 <gameLoop+0x478>)
 8001986:	edc3 7a00 	vstr	s15, [r3]
				}
				if(vzX<0) {
 800198a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800198e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001996:	d50d      	bpl.n	80019b4 <gameLoop+0x2ec>
					enemy.x += enemySpeed;
 8001998:	4b69      	ldr	r3, [pc, #420]	@ (8001b40 <gameLoop+0x478>)
 800199a:	ed93 7a00 	vldr	s14, [r3]
 800199e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 80019a2:	ee07 3a90 	vmov	s15, r3
 80019a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ae:	4b64      	ldr	r3, [pc, #400]	@ (8001b40 <gameLoop+0x478>)
 80019b0:	edc3 7a00 	vstr	s15, [r3]
				}
				if(vzY>0) {
 80019b4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80019b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c0:	dd0d      	ble.n	80019de <gameLoop+0x316>
					enemy.y -= enemySpeed;
 80019c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001b40 <gameLoop+0x478>)
 80019c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80019c8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d8:	4b59      	ldr	r3, [pc, #356]	@ (8001b40 <gameLoop+0x478>)
 80019da:	edc3 7a01 	vstr	s15, [r3, #4]
				}
				if(vzY<0) {
 80019de:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80019e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d537      	bpl.n	8001a5c <gameLoop+0x394>
					enemy.y += enemySpeed;
 80019ec:	4b54      	ldr	r3, [pc, #336]	@ (8001b40 <gameLoop+0x478>)
 80019ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80019f2:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a02:	4b4f      	ldr	r3, [pc, #316]	@ (8001b40 <gameLoop+0x478>)
 8001a04:	edc3 7a01 	vstr	s15, [r3, #4]
 8001a08:	e028      	b.n	8001a5c <gameLoop+0x394>
				}
			}
			else if(vz<50) {				//melee damage near player
 8001a0a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001a0e:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001b28 <gameLoop+0x460>
 8001a12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1a:	d51f      	bpl.n	8001a5c <gameLoop+0x394>
				if(player.armor>0) {
 8001a1c:	4b43      	ldr	r3, [pc, #268]	@ (8001b2c <gameLoop+0x464>)
 8001a1e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	dd0d      	ble.n	8001a42 <gameLoop+0x37a>
					player.armor -= enemyDamage;
 8001a26:	4b41      	ldr	r3, [pc, #260]	@ (8001b2c <gameLoop+0x464>)
 8001a28:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	b21a      	sxth	r2, r3
 8001a38:	4b3c      	ldr	r3, [pc, #240]	@ (8001b2c <gameLoop+0x464>)
 8001a3a:	825a      	strh	r2, [r3, #18]
					drawArmor();
 8001a3c:	f7ff fdf4 	bl	8001628 <drawArmor>
 8001a40:	e00c      	b.n	8001a5c <gameLoop+0x394>
				}
				else{
					player.health -= enemyDamage;
 8001a42:	4b3a      	ldr	r3, [pc, #232]	@ (8001b2c <gameLoop+0x464>)
 8001a44:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	b21a      	sxth	r2, r3
 8001a54:	4b35      	ldr	r3, [pc, #212]	@ (8001b2c <gameLoop+0x464>)
 8001a56:	821a      	strh	r2, [r3, #16]
					drawHealth();
 8001a58:	f7ff fda8 	bl	80015ac <drawHealth>




		//nakreslit nepriatela
		if(enemy.health > 0) {
 8001a5c:	4b38      	ldr	r3, [pc, #224]	@ (8001b40 <gameLoop+0x478>)
 8001a5e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	dd5b      	ble.n	8001b1e <gameLoop+0x456>
			int16_t enemyCoords[3] = {(int16_t)(enemy.x), (int16_t)(enemy.y), (int16_t)(enemy.z)};
 8001a66:	4b36      	ldr	r3, [pc, #216]	@ (8001b40 <gameLoop+0x478>)
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a70:	ee17 3a90 	vmov	r3, s15
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	843b      	strh	r3, [r7, #32]
 8001a78:	4b31      	ldr	r3, [pc, #196]	@ (8001b40 <gameLoop+0x478>)
 8001a7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a82:	ee17 3a90 	vmov	r3, s15
 8001a86:	b21b      	sxth	r3, r3
 8001a88:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b40 <gameLoop+0x478>)
 8001a8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a94:	ee17 3a90 	vmov	r3, s15
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
			float_t playerCoords[3] = {player.x, player.y, player.z};
 8001a9c:	4b23      	ldr	r3, [pc, #140]	@ (8001b2c <gameLoop+0x464>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <gameLoop+0x464>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <gameLoop+0x464>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	61fb      	str	r3, [r7, #28]
			float twoDCoords[2];
			threeDto2D(&enemyCoords, playerCoords, player.rotation, twoDCoords);
 8001aae:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <gameLoop+0x464>)
 8001ab0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ab4:	f107 020c 	add.w	r2, r7, #12
 8001ab8:	f107 0114 	add.w	r1, r7, #20
 8001abc:	f107 0320 	add.w	r3, r7, #32
 8001ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 fc47 	bl	8003358 <threeDto2D>
			int16_t enX = (int16_t)(twoDCoords[0]);
 8001aca:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad2:	ee17 3a90 	vmov	r3, s15
 8001ad6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
			int16_t enY = (int16_t)(twoDCoords[1]);
 8001ada:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae2:	ee17 3a90 	vmov	r3, s15
 8001ae6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
			int16_t rad = (int16_t)(5000/vz);
 8001aea:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001b44 <gameLoop+0x47c>
 8001aee:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8001af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001af6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001afa:	ee17 3a90 	vmov	r3, s15
 8001afe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
			lcdCircle(enX, enY, rad, decodeRgbValue(255, 0, 0));
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	20ff      	movs	r0, #255	@ 0xff
 8001b08:	f001 fb40 	bl	800318c <decodeRgbValue>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 8001b12:	f9b7 1050 	ldrsh.w	r1, [r7, #80]	@ 0x50
 8001b16:	f9b7 0052 	ldrsh.w	r0, [r7, #82]	@ 0x52
 8001b1a:	f001 f91f 	bl	8002d5c <lcdCircle>
		}

		// vykreslovanie mapy
		for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 8001b1e:	2300      	movs	r3, #0
 8001b20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001b22:	e03f      	b.n	8001ba4 <gameLoop+0x4dc>
 8001b24:	00000000 	.word	0x00000000
 8001b28:	42480000 	.word	0x42480000
 8001b2c:	200003c8 	.word	0x200003c8
 8001b30:	c2480000 	.word	0xc2480000
 8001b34:	3ea0d994 	.word	0x3ea0d994
 8001b38:	48000400 	.word	0x48000400
 8001b3c:	bea0d994 	.word	0xbea0d994
 8001b40:	200003e0 	.word	0x200003e0
 8001b44:	459c4000 	.word	0x459c4000
			lcd3DPolyline(polygons[i].vertices, polygons[i].numVertices, polygons[i].color, player.x, player.y, player.z, player.rotation, 1, step);
 8001b48:	4a96      	ldr	r2, [pc, #600]	@ (8001da4 <gameLoop+0x6dc>)
 8001b4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b4c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001b50:	4a94      	ldr	r2, [pc, #592]	@ (8001da4 <gameLoop+0x6dc>)
 8001b52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8001b5c:	4a91      	ldr	r2, [pc, #580]	@ (8001da4 <gameLoop+0x6dc>)
 8001b5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4b8f      	ldr	r3, [pc, #572]	@ (8001da8 <gameLoop+0x6e0>)
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	4b8d      	ldr	r3, [pc, #564]	@ (8001da8 <gameLoop+0x6e0>)
 8001b72:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b76:	4b8c      	ldr	r3, [pc, #560]	@ (8001da8 <gameLoop+0x6e0>)
 8001b78:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b7c:	4b8a      	ldr	r3, [pc, #552]	@ (8001da8 <gameLoop+0x6e0>)
 8001b7e:	ed93 6a03 	vldr	s12, [r3, #12]
 8001b82:	f997 3073 	ldrsb.w	r3, [r7, #115]	@ 0x73
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	eef0 1a46 	vmov.f32	s3, s12
 8001b8e:	eeb0 1a66 	vmov.f32	s2, s13
 8001b92:	eef0 0a47 	vmov.f32	s1, s14
 8001b96:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9a:	f001 fdcb 	bl	8003734 <lcd3DPolyline>
		for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 8001b9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001ba4:	4b81      	ldr	r3, [pc, #516]	@ (8001dac <gameLoop+0x6e4>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001baa:	429a      	cmp	r2, r3
 8001bac:	dbcc      	blt.n	8001b48 <gameLoop+0x480>




		//mechanika strelby
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) == GPIO_PIN_RESET){
 8001bae:	2102      	movs	r1, #2
 8001bb0:	487f      	ldr	r0, [pc, #508]	@ (8001db0 <gameLoop+0x6e8>)
 8001bb2:	f003 f971 	bl	8004e98 <HAL_GPIO_ReadPin>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f040 8133 	bne.w	8001e24 <gameLoop+0x75c>
			if(player.ammo>0) {			//ak mame naboje
 8001bbe:	4b7a      	ldr	r3, [pc, #488]	@ (8001da8 <gameLoop+0x6e0>)
 8001bc0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f340 812d 	ble.w	8001e24 <gameLoop+0x75c>
				//zobrazit vystrel
				lcdFilledRectangle(130, 195, 150, 215, decodeRgbValue(255, 255, 0));
 8001bca:	2200      	movs	r2, #0
 8001bcc:	21ff      	movs	r1, #255	@ 0xff
 8001bce:	20ff      	movs	r0, #255	@ 0xff
 8001bd0:	f001 fadc 	bl	800318c <decodeRgbValue>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	23d7      	movs	r3, #215	@ 0xd7
 8001bda:	2296      	movs	r2, #150	@ 0x96
 8001bdc:	21c3      	movs	r1, #195	@ 0xc3
 8001bde:	2082      	movs	r0, #130	@ 0x82
 8001be0:	f001 f81c 	bl	8002c1c <lcdFilledRectangle>
				lcdLine(140, 195, 160, 120, decodeRgbValue(255, 255, 0));
 8001be4:	2200      	movs	r2, #0
 8001be6:	21ff      	movs	r1, #255	@ 0xff
 8001be8:	20ff      	movs	r0, #255	@ 0xff
 8001bea:	f001 facf 	bl	800318c <decodeRgbValue>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2378      	movs	r3, #120	@ 0x78
 8001bf4:	22a0      	movs	r2, #160	@ 0xa0
 8001bf6:	21c3      	movs	r1, #195	@ 0xc3
 8001bf8:	208c      	movs	r0, #140	@ 0x8c
 8001bfa:	f000 fcfc 	bl	80025f6 <lcdLine>

				lcdFilledRectangle(130, 195, 150, 215, decodeRgbValue(0, 0, 0));
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	2000      	movs	r0, #0
 8001c04:	f001 fac2 	bl	800318c <decodeRgbValue>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	23d7      	movs	r3, #215	@ 0xd7
 8001c0e:	2296      	movs	r2, #150	@ 0x96
 8001c10:	21c3      	movs	r1, #195	@ 0xc3
 8001c12:	2082      	movs	r0, #130	@ 0x82
 8001c14:	f001 f802 	bl	8002c1c <lcdFilledRectangle>
				lcdLine(140, 195, 160, 120, decodeRgbValue(0, 0, 0));
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f001 fab5 	bl	800318c <decodeRgbValue>
 8001c22:	4603      	mov	r3, r0
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2378      	movs	r3, #120	@ 0x78
 8001c28:	22a0      	movs	r2, #160	@ 0xa0
 8001c2a:	21c3      	movs	r1, #195	@ 0xc3
 8001c2c:	208c      	movs	r0, #140	@ 0x8c
 8001c2e:	f000 fce2 	bl	80025f6 <lcdLine>

				player.ammo--;
 8001c32:	4b5d      	ldr	r3, [pc, #372]	@ (8001da8 <gameLoop+0x6e0>)
 8001c34:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	b21a      	sxth	r2, r3
 8001c40:	4b59      	ldr	r3, [pc, #356]	@ (8001da8 <gameLoop+0x6e0>)
 8001c42:	829a      	strh	r2, [r3, #20]
				drawAmmo();
 8001c44:	f7ff fc34 	bl	80014b0 <drawAmmo>

				float enemyDist = 0;
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
				bulletX = player.x;
 8001c4e:	4b56      	ldr	r3, [pc, #344]	@ (8001da8 <gameLoop+0x6e0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				bulletY = player.y;
 8001c56:	4b54      	ldr	r3, [pc, #336]	@ (8001da8 <gameLoop+0x6e0>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	65bb      	str	r3, [r7, #88]	@ 0x58
				bulletAngle = player.rotation;
 8001c5c:	4b52      	ldr	r3, [pc, #328]	@ (8001da8 <gameLoop+0x6e0>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	657b      	str	r3, [r7, #84]	@ 0x54

				//samotny let strely
				while( (bulletX<boundX)&&(bulletX>0)&&(bulletY<boundY)&&(bulletY>0) ) {
 8001c62:	e0ab      	b.n	8001dbc <gameLoop+0x6f4>
					bulletX += bulletSpeed*cos(bulletAngle) ;
 8001c64:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001c68:	f7fe fc6e 	bl	8000548 <__aeabi_f2d>
 8001c6c:	4604      	mov	r4, r0
 8001c6e:	460d      	mov	r5, r1
 8001c70:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe fc55 	bl	8000524 <__aeabi_i2d>
 8001c7a:	4680      	mov	r8, r0
 8001c7c:	4689      	mov	r9, r1
 8001c7e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001c80:	f7fe fc62 	bl	8000548 <__aeabi_f2d>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	ec43 2b10 	vmov	d0, r2, r3
 8001c8c:	f004 ffc4 	bl	8006c18 <cos>
 8001c90:	ec53 2b10 	vmov	r2, r3, d0
 8001c94:	4640      	mov	r0, r8
 8001c96:	4649      	mov	r1, r9
 8001c98:	f7fe fcae 	bl	80005f8 <__aeabi_dmul>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	f7fe faf2 	bl	800028c <__adddf3>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7fe ff7a 	bl	8000ba8 <__aeabi_d2f>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
					bulletX += bulletSpeed*sin(bulletAngle) ;
 8001cba:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001cbe:	f7fe fc43 	bl	8000548 <__aeabi_f2d>
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	460d      	mov	r5, r1
 8001cc6:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	@ 0x5e
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7fe fc2a 	bl	8000524 <__aeabi_i2d>
 8001cd0:	4680      	mov	r8, r0
 8001cd2:	4689      	mov	r9, r1
 8001cd4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001cd6:	f7fe fc37 	bl	8000548 <__aeabi_f2d>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	ec43 2b10 	vmov	d0, r2, r3
 8001ce2:	f004 fff5 	bl	8006cd0 <sin>
 8001ce6:	ec53 2b10 	vmov	r2, r3, d0
 8001cea:	4640      	mov	r0, r8
 8001cec:	4649      	mov	r1, r9
 8001cee:	f7fe fc83 	bl	80005f8 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	f7fe fac7 	bl	800028c <__adddf3>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe ff4f 	bl	8000ba8 <__aeabi_d2f>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
					enemyDist = sqrt((enemy.x-bulletX)*(enemy.x-bulletX)+(enemy.y-bulletY)*(enemy.y-bulletY));
 8001d10:	4b28      	ldr	r3, [pc, #160]	@ (8001db4 <gameLoop+0x6ec>)
 8001d12:	ed93 7a00 	vldr	s14, [r3]
 8001d16:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001d1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d1e:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <gameLoop+0x6ec>)
 8001d20:	edd3 6a00 	vldr	s13, [r3]
 8001d24:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001d28:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d30:	4b20      	ldr	r3, [pc, #128]	@ (8001db4 <gameLoop+0x6ec>)
 8001d32:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d36:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001d3a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001db4 <gameLoop+0x6ec>)
 8001d40:	ed93 6a01 	vldr	s12, [r3, #4]
 8001d44:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001d48:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d54:	ee17 0a90 	vmov	r0, s15
 8001d58:	f7fe fbf6 	bl	8000548 <__aeabi_f2d>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	ec43 2b10 	vmov	d0, r2, r3
 8001d64:	f004 fd92 	bl	800688c <sqrt>
 8001d68:	ec53 2b10 	vmov	r2, r3, d0
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7fe ff1a 	bl	8000ba8 <__aeabi_d2f>
 8001d74:	4603      	mov	r3, r0
 8001d76:	64bb      	str	r3, [r7, #72]	@ 0x48
					if(enemyDist<200) {			//ak zasiahne nepriatela
 8001d78:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001d7c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001db8 <gameLoop+0x6f0>
 8001d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	d400      	bmi.n	8001d8c <gameLoop+0x6c4>
 8001d8a:	e017      	b.n	8001dbc <gameLoop+0x6f4>
						enemy.health -= bulletDamage;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <gameLoop+0x6ec>)
 8001d8e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	b21a      	sxth	r2, r3
 8001d9e:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <gameLoop+0x6ec>)
 8001da0:	821a      	strh	r2, [r3, #16]
						break;
 8001da2:	e034      	b.n	8001e0e <gameLoop+0x746>
 8001da4:	200000a4 	.word	0x200000a4
 8001da8:	200003c8 	.word	0x200003c8
 8001dac:	200003c4 	.word	0x200003c4
 8001db0:	48000400 	.word	0x48000400
 8001db4:	200003e0 	.word	0x200003e0
 8001db8:	43480000 	.word	0x43480000
				while( (bulletX<boundX)&&(bulletX>0)&&(bulletY<boundY)&&(bulletY>0) ) {
 8001dbc:	4b97      	ldr	r3, [pc, #604]	@ (800201c <gameLoop+0x954>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc8:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001dcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd4:	d51b      	bpl.n	8001e0e <gameLoop+0x746>
 8001dd6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001dda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de2:	dd14      	ble.n	8001e0e <gameLoop+0x746>
 8001de4:	4b8e      	ldr	r3, [pc, #568]	@ (8002020 <gameLoop+0x958>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df0:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8001df4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfc:	d507      	bpl.n	8001e0e <gameLoop+0x746>
 8001dfe:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001e02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0a:	f73f af2b 	bgt.w	8001c64 <gameLoop+0x59c>
					}
				}
				if(player.ammo<=0) {	//ked dojdu naboje tak sa prepnu stavy
 8001e0e:	4b85      	ldr	r3, [pc, #532]	@ (8002024 <gameLoop+0x95c>)
 8001e10:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	dc05      	bgt.n	8001e24 <gameLoop+0x75c>
					loadedState = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
					loadedAmmo = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
				}
			}
		}
		if(player.ammo<=0) {	//ked dojdu naboje, tak reload
 8001e24:	4b7f      	ldr	r3, [pc, #508]	@ (8002024 <gameLoop+0x95c>)
 8001e26:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	dc19      	bgt.n	8001e62 <gameLoop+0x79a>
			if(!loadedState) {
 8001e2e:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d115      	bne.n	8001e62 <gameLoop+0x79a>
				loadedAmmo += loadSpeed;
 8001e36:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8001e3a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8001e3e:	4413      	add	r3, r2
 8001e40:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
				if(loadedAmmo>=magazineCapacity) {
 8001e44:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8001e48:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d308      	bcc.n	8001e62 <gameLoop+0x79a>
					loadedState = 1;
 8001e50:	2301      	movs	r3, #1
 8001e52:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
					player.ammo = magazineCapacity;
 8001e56:	f9b7 2060 	ldrsh.w	r2, [r7, #96]	@ 0x60
 8001e5a:	4b72      	ldr	r3, [pc, #456]	@ (8002024 <gameLoop+0x95c>)
 8001e5c:	829a      	strh	r2, [r3, #20]
					drawAmmo();
 8001e5e:	f7ff fb27 	bl	80014b0 <drawAmmo>
				}
			}
		}

		//vymazat nepriatela
		int16_t enemyCoords[3] = {(int16_t)(enemy.x), (int16_t)(enemy.y), (int16_t)(enemy.z)};
 8001e62:	4b71      	ldr	r3, [pc, #452]	@ (8002028 <gameLoop+0x960>)
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e6c:	ee17 3a90 	vmov	r3, s15
 8001e70:	b21b      	sxth	r3, r3
 8001e72:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001e74:	4b6c      	ldr	r3, [pc, #432]	@ (8002028 <gameLoop+0x960>)
 8001e76:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e7e:	ee17 3a90 	vmov	r3, s15
 8001e82:	b21b      	sxth	r3, r3
 8001e84:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001e86:	4b68      	ldr	r3, [pc, #416]	@ (8002028 <gameLoop+0x960>)
 8001e88:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e90:	ee17 3a90 	vmov	r3, s15
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
		float_t playerCoords[3] = {player.x, player.y, player.z};
 8001e9a:	4b62      	ldr	r3, [pc, #392]	@ (8002024 <gameLoop+0x95c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ea0:	4b60      	ldr	r3, [pc, #384]	@ (8002024 <gameLoop+0x95c>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ea6:	4b5f      	ldr	r3, [pc, #380]	@ (8002024 <gameLoop+0x95c>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
		float twoDCoords[2];
		threeDto2D(&enemyCoords, playerCoords, player.rotation, twoDCoords);
 8001eac:	4b5d      	ldr	r3, [pc, #372]	@ (8002024 <gameLoop+0x95c>)
 8001eae:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eb2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001eb6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001eba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f001 fa48 	bl	8003358 <threeDto2D>
		int16_t enX = (int16_t)(twoDCoords[0]);
 8001ec8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed0:	ee17 3a90 	vmov	r3, s15
 8001ed4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		int16_t enY = (int16_t)(twoDCoords[1]);
 8001ed8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee0:	ee17 3a90 	vmov	r3, s15
 8001ee4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
		int16_t rad = (int16_t)(5000/vz);
 8001ee8:	eddf 6a50 	vldr	s13, [pc, #320]	@ 800202c <gameLoop+0x964>
 8001eec:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8001ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef8:	ee17 3a90 	vmov	r3, s15
 8001efc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		lcdCircle(enX, enY, rad, decodeRgbValue(0, 0, 0));
 8001f00:	2200      	movs	r2, #0
 8001f02:	2100      	movs	r1, #0
 8001f04:	2000      	movs	r0, #0
 8001f06:	f001 f941 	bl	800318c <decodeRgbValue>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8001f10:	f9b7 1044 	ldrsh.w	r1, [r7, #68]	@ 0x44
 8001f14:	f9b7 0046 	ldrsh.w	r0, [r7, #70]	@ 0x46
 8001f18:	f000 ff20 	bl	8002d5c <lcdCircle>

		for (int i = 0; i < polygonCount; i++) {	//vymaze mapu so stenami
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001f20:	e02f      	b.n	8001f82 <gameLoop+0x8ba>
			lcd3DPolyline(polygons[i].vertices, polygons[i].numVertices, decodeRgbValue(0, 0, 0), player.x, player.y, player.z, player.rotation, 1, step);
 8001f22:	4a43      	ldr	r2, [pc, #268]	@ (8002030 <gameLoop+0x968>)
 8001f24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f26:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8001f2a:	4a41      	ldr	r2, [pc, #260]	@ (8002030 <gameLoop+0x968>)
 8001f2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	2100      	movs	r1, #0
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f001 f926 	bl	800318c <decodeRgbValue>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b37      	ldr	r3, [pc, #220]	@ (8002024 <gameLoop+0x95c>)
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	4b36      	ldr	r3, [pc, #216]	@ (8002024 <gameLoop+0x95c>)
 8001f4c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f50:	4b34      	ldr	r3, [pc, #208]	@ (8002024 <gameLoop+0x95c>)
 8001f52:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f56:	4b33      	ldr	r3, [pc, #204]	@ (8002024 <gameLoop+0x95c>)
 8001f58:	ed93 6a03 	vldr	s12, [r3, #12]
 8001f5c:	f997 3073 	ldrsb.w	r3, [r7, #115]	@ 0x73
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2301      	movs	r3, #1
 8001f64:	eef0 1a46 	vmov.f32	s3, s12
 8001f68:	eeb0 1a66 	vmov.f32	s2, s13
 8001f6c:	eef0 0a47 	vmov.f32	s1, s14
 8001f70:	eeb0 0a67 	vmov.f32	s0, s15
 8001f74:	4629      	mov	r1, r5
 8001f76:	4620      	mov	r0, r4
 8001f78:	f001 fbdc 	bl	8003734 <lcd3DPolyline>
		for (int i = 0; i < polygonCount; i++) {	//vymaze mapu so stenami
 8001f7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f7e:	3301      	adds	r3, #1
 8001f80:	677b      	str	r3, [r7, #116]	@ 0x74
 8001f82:	4b2c      	ldr	r3, [pc, #176]	@ (8002034 <gameLoop+0x96c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	dbca      	blt.n	8001f22 <gameLoop+0x85a>
		}

		//ukoncit level predcasne a vstupit do main menu
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0) == GPIO_PIN_RESET){
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	482a      	ldr	r0, [pc, #168]	@ (8002038 <gameLoop+0x970>)
 8001f90:	f002 ff82 	bl	8004e98 <HAL_GPIO_ReadPin>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d052      	beq.n	8002040 <gameLoop+0x978>
			break;
		}

		if (player.health<=0) {
 8001f9a:	4b22      	ldr	r3, [pc, #136]	@ (8002024 <gameLoop+0x95c>)
 8001f9c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	dc32      	bgt.n	800200a <gameLoop+0x942>
			//deathScreen()		//treba vyrobit funkciu, ktora zobrazi GAME OVER
			lcdPutSSized("GAME OVER", 230, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),3);
 8001fa4:	221f      	movs	r2, #31
 8001fa6:	211f      	movs	r1, #31
 8001fa8:	201f      	movs	r0, #31
 8001faa:	f001 f8ef 	bl	800318c <decodeRgbValue>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461c      	mov	r4, r3
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f001 f8e8 	bl	800318c <decodeRgbValue>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	9200      	str	r2, [sp, #0]
 8001fc6:	4623      	mov	r3, r4
 8001fc8:	2270      	movs	r2, #112	@ 0x70
 8001fca:	21e6      	movs	r1, #230	@ 0xe6
 8001fcc:	481b      	ldr	r0, [pc, #108]	@ (800203c <gameLoop+0x974>)
 8001fce:	f001 f940 	bl	8003252 <lcdPutSSized>
			LL_mDelay(1000);
 8001fd2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fd6:	f003 f9a3 	bl	8005320 <LL_mDelay>
			lcdPutSSized("GAME OVER", 230, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),3);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f001 f8d4 	bl	800318c <decodeRgbValue>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461c      	mov	r4, r3
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2100      	movs	r1, #0
 8001fec:	2000      	movs	r0, #0
 8001fee:	f001 f8cd 	bl	800318c <decodeRgbValue>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	9200      	str	r2, [sp, #0]
 8001ffc:	4623      	mov	r3, r4
 8001ffe:	2270      	movs	r2, #112	@ 0x70
 8002000:	21e6      	movs	r1, #230	@ 0xe6
 8002002:	480e      	ldr	r0, [pc, #56]	@ (800203c <gameLoop+0x974>)
 8002004:	f001 f925 	bl	8003252 <lcdPutSSized>
			break;				//ukonci sa hra a dostaneme sa do main menu
 8002008:	e01b      	b.n	8002042 <gameLoop+0x97a>
	while(kills < kills2win){		// hlavny cyklus hry
 800200a:	f9b7 2082 	ldrsh.w	r2, [r7, #130]	@ 0x82
 800200e:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	@ 0x80
 8002012:	429a      	cmp	r2, r3
 8002014:	f6ff abf1 	blt.w	80017fa <gameLoop+0x132>
 8002018:	e013      	b.n	8002042 <gameLoop+0x97a>
 800201a:	bf00      	nop
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004
 8002024:	200003c8 	.word	0x200003c8
 8002028:	200003e0 	.word	0x200003e0
 800202c:	459c4000 	.word	0x459c4000
 8002030:	200000a4 	.word	0x200000a4
 8002034:	200003c4 	.word	0x200003c4
 8002038:	48000400 	.word	0x48000400
 800203c:	08007fa0 	.word	0x08007fa0
			break;
 8002040:	bf00      	nop

		}

	}

	if((player.health>0)&&(kills==kills2win)) {
 8002042:	4b41      	ldr	r3, [pc, #260]	@ (8002148 <gameLoop+0xa80>)
 8002044:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	dd39      	ble.n	80020c0 <gameLoop+0x9f8>
 800204c:	f9b7 2082 	ldrsh.w	r2, [r7, #130]	@ 0x82
 8002050:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	@ 0x80
 8002054:	429a      	cmp	r2, r3
 8002056:	d133      	bne.n	80020c0 <gameLoop+0x9f8>
		//winScreen();				//treba vyrobit funkciu, ktroa zobrazi LEVEL COMPLETE
		lcdPutSSized("level complete", 270, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),3);
 8002058:	221f      	movs	r2, #31
 800205a:	211f      	movs	r1, #31
 800205c:	201f      	movs	r0, #31
 800205e:	f001 f895 	bl	800318c <decodeRgbValue>
 8002062:	4603      	mov	r3, r0
 8002064:	461c      	mov	r4, r3
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	2000      	movs	r0, #0
 800206c:	f001 f88e 	bl	800318c <decodeRgbValue>
 8002070:	4603      	mov	r3, r0
 8002072:	461a      	mov	r2, r3
 8002074:	2303      	movs	r3, #3
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	9200      	str	r2, [sp, #0]
 800207a:	4623      	mov	r3, r4
 800207c:	2270      	movs	r2, #112	@ 0x70
 800207e:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002082:	4832      	ldr	r0, [pc, #200]	@ (800214c <gameLoop+0xa84>)
 8002084:	f001 f8e5 	bl	8003252 <lcdPutSSized>
		LL_mDelay(1000);
 8002088:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800208c:	f003 f948 	bl	8005320 <LL_mDelay>
		lcdPutSSized("level complete", 270, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),3);
 8002090:	2200      	movs	r2, #0
 8002092:	2100      	movs	r1, #0
 8002094:	2000      	movs	r0, #0
 8002096:	f001 f879 	bl	800318c <decodeRgbValue>
 800209a:	4603      	mov	r3, r0
 800209c:	461c      	mov	r4, r3
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2000      	movs	r0, #0
 80020a4:	f001 f872 	bl	800318c <decodeRgbValue>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461a      	mov	r2, r3
 80020ac:	2303      	movs	r3, #3
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	9200      	str	r2, [sp, #0]
 80020b2:	4623      	mov	r3, r4
 80020b4:	2270      	movs	r2, #112	@ 0x70
 80020b6:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80020ba:	4824      	ldr	r0, [pc, #144]	@ (800214c <gameLoop+0xa84>)
 80020bc:	f001 f8c9 	bl	8003252 <lcdPutSSized>

	}
	if((player.health>0)&&(kills<kills2win)) {
 80020c0:	4b21      	ldr	r3, [pc, #132]	@ (8002148 <gameLoop+0xa80>)
 80020c2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	dd39      	ble.n	800213e <gameLoop+0xa76>
 80020ca:	f9b7 2082 	ldrsh.w	r2, [r7, #130]	@ 0x82
 80020ce:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	@ 0x80
 80020d2:	429a      	cmp	r2, r3
 80020d4:	da33      	bge.n	800213e <gameLoop+0xa76>
		//winScreen();				//treba vyrobit funkciu, ktroa zobrazi LEVEL COMPLETE
		lcdPutSSized("ending level", 270, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),3);
 80020d6:	221f      	movs	r2, #31
 80020d8:	211f      	movs	r1, #31
 80020da:	201f      	movs	r0, #31
 80020dc:	f001 f856 	bl	800318c <decodeRgbValue>
 80020e0:	4603      	mov	r3, r0
 80020e2:	461c      	mov	r4, r3
 80020e4:	2200      	movs	r2, #0
 80020e6:	2100      	movs	r1, #0
 80020e8:	2000      	movs	r0, #0
 80020ea:	f001 f84f 	bl	800318c <decodeRgbValue>
 80020ee:	4603      	mov	r3, r0
 80020f0:	461a      	mov	r2, r3
 80020f2:	2303      	movs	r3, #3
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	9200      	str	r2, [sp, #0]
 80020f8:	4623      	mov	r3, r4
 80020fa:	2270      	movs	r2, #112	@ 0x70
 80020fc:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002100:	4813      	ldr	r0, [pc, #76]	@ (8002150 <gameLoop+0xa88>)
 8002102:	f001 f8a6 	bl	8003252 <lcdPutSSized>
		LL_mDelay(1000);
 8002106:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800210a:	f003 f909 	bl	8005320 <LL_mDelay>
		lcdPutSSized("ending level", 270, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),3);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	2000      	movs	r0, #0
 8002114:	f001 f83a 	bl	800318c <decodeRgbValue>
 8002118:	4603      	mov	r3, r0
 800211a:	461c      	mov	r4, r3
 800211c:	2200      	movs	r2, #0
 800211e:	2100      	movs	r1, #0
 8002120:	2000      	movs	r0, #0
 8002122:	f001 f833 	bl	800318c <decodeRgbValue>
 8002126:	4603      	mov	r3, r0
 8002128:	461a      	mov	r2, r3
 800212a:	2303      	movs	r3, #3
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	9200      	str	r2, [sp, #0]
 8002130:	4623      	mov	r3, r4
 8002132:	2270      	movs	r2, #112	@ 0x70
 8002134:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8002138:	4805      	ldr	r0, [pc, #20]	@ (8002150 <gameLoop+0xa88>)
 800213a:	f001 f88a 	bl	8003252 <lcdPutSSized>

	}
	//potom sa vratime do menu...
}
 800213e:	bf00      	nop
 8002140:	3790      	adds	r7, #144	@ 0x90
 8002142:	46bd      	mov	sp, r7
 8002144:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002148:	200003c8 	.word	0x200003c8
 800214c:	08007fac 	.word	0x08007fac
 8002150:	08007fbc 	.word	0x08007fbc

08002154 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800215c:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <LL_SYSCFG_EnableFastModePlus+0x20>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4904      	ldr	r1, [pc, #16]	@ (8002174 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	40010000 	.word	0x40010000

08002178 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800219c:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	4907      	ldr	r1, [pc, #28]	@ (80021c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80021a8:	4b05      	ldr	r3, [pc, #20]	@ (80021c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021aa:	695a      	ldr	r2, [r3, #20]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4013      	ands	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40021000 	.word	0x40021000

080021c4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ca:	463b      	mov	r3, r7
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
 80021d8:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80021da:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80021de:	f7ff ffd9 	bl	8002194 <LL_AHB1_GRP1_EnableClock>
	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80021e2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80021e6:	f7ff ffd5 	bl	8002194 <LL_AHB1_GRP1_EnableClock>
	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80021ea:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80021ee:	f7ff ffd1 	bl	8002194 <LL_AHB1_GRP1_EnableClock>

	  /**/
	  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4);
 80021f2:	2118      	movs	r1, #24
 80021f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021f8:	f7ff ffbe 	bl	8002178 <LL_GPIO_ResetOutputPin>

	  /**/
	  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6);
 80021fc:	2170      	movs	r1, #112	@ 0x70
 80021fe:	4821      	ldr	r0, [pc, #132]	@ (8002284 <MX_GPIO_Init+0xc0>)
 8002200:	f7ff ffba 	bl	8002178 <LL_GPIO_ResetOutputPin>

	  /**/
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 8002204:	2318      	movs	r3, #24
 8002206:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002208:	2301      	movs	r3, #1
 800220a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	60bb      	str	r3, [r7, #8]
	  //GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002218:	463b      	mov	r3, r7
 800221a:	4619      	mov	r1, r3
 800221c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002220:	f002 ff57 	bl	80050d2 <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_7;
 8002224:	238b      	movs	r3, #139	@ 0x8b
 8002226:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002228:	2300      	movs	r3, #0
 800222a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800222c:	2300      	movs	r3, #0
 800222e:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002230:	463b      	mov	r3, r7
 8002232:	4619      	mov	r1, r3
 8002234:	4813      	ldr	r0, [pc, #76]	@ (8002284 <MX_GPIO_Init+0xc0>)
 8002236:	f002 ff4c 	bl	80050d2 <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 800223a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800223e:	603b      	str	r3, [r7, #0]
	                          |LL_GPIO_PIN_12;
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002240:	2300      	movs	r3, #0
 8002242:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	463b      	mov	r3, r7
 800224a:	4619      	mov	r1, r3
 800224c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002250:	f002 ff3f 	bl	80050d2 <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6;
 8002254:	2370      	movs	r3, #112	@ 0x70
 8002256:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002258:	2301      	movs	r3, #1
 800225a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	60bb      	str	r3, [r7, #8]
	  //GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002268:	463b      	mov	r3, r7
 800226a:	4619      	mov	r1, r3
 800226c:	4805      	ldr	r0, [pc, #20]	@ (8002284 <MX_GPIO_Init+0xc0>)
 800226e:	f002 ff30 	bl	80050d2 <LL_GPIO_Init>

	  /**/
	  LL_SYSCFG_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8002272:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002276:	f7ff ff6d 	bl	8002154 <LL_SYSCFG_EnableFastModePlus>

}
 800227a:	bf00      	nop
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	48000400 	.word	0x48000400

08002288 <lcdReset>:

// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	res_reset();
 800228c:	f002 fcb6 	bl	8004bfc <res_reset>
	LL_mDelay(100);
 8002290:	2064      	movs	r0, #100	@ 0x64
 8002292:	f003 f845 	bl	8005320 <LL_mDelay>

	res_set();
 8002296:	f002 fca8 	bl	8004bea <res_set>
	LL_mDelay(100);
 800229a:	2064      	movs	r0, #100	@ 0x64
 800229c:	f003 f840 	bl	8005320 <LL_mDelay>
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address) //urcuje obsah nasledujucich write data/parameter
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
	cd_reset();
 80022ae:	f002 fc8b 	bl	8004bc8 <cd_reset>
	cs_reset();
 80022b2:	f002 fc6d 	bl	8004b90 <cs_reset>
	readWriteSPI1(address);
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f002 fc35 	bl	8004b28 <readWriteSPI1>
	cs_set();
 80022be:	f002 fc5d 	bl	8004b7c <cs_set>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <lcdWriteParameter>:

void lcdWriteParameter(int8_t parameter) //tymto sa zapisuju rozne veci
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	71fb      	strb	r3, [r7, #7]
	cd_set();
 80022d4:	f002 fc6e 	bl	8004bb4 <cd_set>
	cs_reset();
 80022d8:	f002 fc5a 	bl	8004b90 <cs_reset>
	readWriteSPI1(parameter);
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	4618      	mov	r0, r3
 80022e0:	f002 fc22 	bl	8004b28 <readWriteSPI1>
	cs_set();
 80022e4:	f002 fc4a 	bl	8004b7c <cs_set>
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2)  //tymto sa zapisuje farba
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	460a      	mov	r2, r1
 80022fa:	71fb      	strb	r3, [r7, #7]
 80022fc:	4613      	mov	r3, r2
 80022fe:	71bb      	strb	r3, [r7, #6]
	cd_set();
 8002300:	f002 fc58 	bl	8004bb4 <cd_set>
	cs_reset();
 8002304:	f002 fc44 	bl	8004b90 <cs_reset>
	readWriteSPI1(dataByte1); //posielame samostatne dva bajty o farbe
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	4618      	mov	r0, r3
 800230c:	f002 fc0c 	bl	8004b28 <readWriteSPI1>
	readWriteSPI1(dataByte2);
 8002310:	79bb      	ldrb	r3, [r7, #6]
 8002312:	4618      	mov	r0, r3
 8002314:	f002 fc08 	bl	8004b28 <readWriteSPI1>
	cs_set();
 8002318:	f002 fc30 	bl	8004b7c <cs_set>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <lcdInitialise>:

void lcdInitialise(uint8_t orientation)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD


	// Hardware reset the LCD
	lcdReset();
 800232e:	f7ff ffab 	bl	8002288 <lcdReset>

    lcdWriteCommand(EXIT_SLEEP_MODE);
 8002332:	2011      	movs	r0, #17
 8002334:	f7ff ffb6 	bl	80022a4 <lcdWriteCommand>
    LL_mDelay(100); //Delay(10000); // Wait for the screen to wake up
 8002338:	2064      	movs	r0, #100	@ 0x64
 800233a:	f002 fff1 	bl	8005320 <LL_mDelay>

    lcdWriteCommand(SET_PIXEL_FORMAT);
 800233e:	203a      	movs	r0, #58	@ 0x3a
 8002340:	f7ff ffb0 	bl	80022a4 <lcdWriteCommand>
    lcdWriteParameter(0x05); // 16 bits per pixel
 8002344:	2005      	movs	r0, #5
 8002346:	f7ff ffc0 	bl	80022ca <lcdWriteParameter>

    lcdWriteCommand(SET_GAMMA_CURVE);
 800234a:	2026      	movs	r0, #38	@ 0x26
 800234c:	f7ff ffaa 	bl	80022a4 <lcdWriteCommand>
    lcdWriteParameter(0x04); // Select gamma curve 3
 8002350:	2004      	movs	r0, #4
 8002352:	f7ff ffba 	bl	80022ca <lcdWriteParameter>

    lcdWriteCommand(GAM_R_SEL);
 8002356:	20f2      	movs	r0, #242	@ 0xf2
 8002358:	f7ff ffa4 	bl	80022a4 <lcdWriteCommand>
    lcdWriteParameter(0x01); // Gamma adjustment enabled
 800235c:	2001      	movs	r0, #1
 800235e:	f7ff ffb4 	bl	80022ca <lcdWriteParameter>

    lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 8002362:	20e0      	movs	r0, #224	@ 0xe0
 8002364:	f7ff ff9e 	bl	80022a4 <lcdWriteCommand>
    lcdWriteParameter(0x3f); // 1st Parameter
 8002368:	203f      	movs	r0, #63	@ 0x3f
 800236a:	f7ff ffae 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x25); // 2nd Parameter
 800236e:	2025      	movs	r0, #37	@ 0x25
 8002370:	f7ff ffab 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x1c); // 3rd Parameter
 8002374:	201c      	movs	r0, #28
 8002376:	f7ff ffa8 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x1e); // 4th Parameter
 800237a:	201e      	movs	r0, #30
 800237c:	f7ff ffa5 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x20); // 5th Parameter
 8002380:	2020      	movs	r0, #32
 8002382:	f7ff ffa2 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x12); // 6th Parameter
 8002386:	2012      	movs	r0, #18
 8002388:	f7ff ff9f 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 7th Parameter
 800238c:	202a      	movs	r0, #42	@ 0x2a
 800238e:	f7ff ff9c 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x90); // 8th Parameter
 8002392:	f06f 006f 	mvn.w	r0, #111	@ 0x6f
 8002396:	f7ff ff98 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x24); // 9th Parameter
 800239a:	2024      	movs	r0, #36	@ 0x24
 800239c:	f7ff ff95 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x11); // 10th Parameter
 80023a0:	2011      	movs	r0, #17
 80023a2:	f7ff ff92 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x00); // 11th Parameter
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7ff ff8f 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x00); // 12th Parameter
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff ff8c 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x00); // 13th Parameter
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7ff ff89 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x00); // 14th Parameter
 80023b8:	2000      	movs	r0, #0
 80023ba:	f7ff ff86 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x00); // 15th Parameter
 80023be:	2000      	movs	r0, #0
 80023c0:	f7ff ff83 	bl	80022ca <lcdWriteParameter>

    lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 80023c4:	20e1      	movs	r0, #225	@ 0xe1
 80023c6:	f7ff ff6d 	bl	80022a4 <lcdWriteCommand>
    lcdWriteParameter(0x20); // 1st Parameter
 80023ca:	2020      	movs	r0, #32
 80023cc:	f7ff ff7d 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x20); // 2nd Parameter
 80023d0:	2020      	movs	r0, #32
 80023d2:	f7ff ff7a 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x20); // 3rd Parameter
 80023d6:	2020      	movs	r0, #32
 80023d8:	f7ff ff77 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x20); // 4th Parameter
 80023dc:	2020      	movs	r0, #32
 80023de:	f7ff ff74 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x05); // 5th Parameter
 80023e2:	2005      	movs	r0, #5
 80023e4:	f7ff ff71 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x00); // 6th Parameter
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7ff ff6e 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x15); // 7th Parameter
 80023ee:	2015      	movs	r0, #21
 80023f0:	f7ff ff6b 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0xa7); // 8th Parameter
 80023f4:	f06f 0058 	mvn.w	r0, #88	@ 0x58
 80023f8:	f7ff ff67 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x3d); // 9th Parameter
 80023fc:	203d      	movs	r0, #61	@ 0x3d
 80023fe:	f7ff ff64 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x18); // 10th Parameter
 8002402:	2018      	movs	r0, #24
 8002404:	f7ff ff61 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x25); // 11th Parameter
 8002408:	2025      	movs	r0, #37	@ 0x25
 800240a:	f7ff ff5e 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 12th Parameter
 800240e:	202a      	movs	r0, #42	@ 0x2a
 8002410:	f7ff ff5b 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 13th Parameter
 8002414:	202b      	movs	r0, #43	@ 0x2b
 8002416:	f7ff ff58 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 14th Parameter
 800241a:	202b      	movs	r0, #43	@ 0x2b
 800241c:	f7ff ff55 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x3a); // 15th Parameter
 8002420:	203a      	movs	r0, #58	@ 0x3a
 8002422:	f7ff ff52 	bl	80022ca <lcdWriteParameter>

    lcdWriteCommand(FRAME_RATE_CONTROL1);
 8002426:	20b1      	movs	r0, #177	@ 0xb1
 8002428:	f7ff ff3c 	bl	80022a4 <lcdWriteCommand>
    lcdWriteParameter(0x08); // DIVA = 8
 800242c:	2008      	movs	r0, #8
 800242e:	f7ff ff4c 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x08); // VPA = 8
 8002432:	2008      	movs	r0, #8
 8002434:	f7ff ff49 	bl	80022ca <lcdWriteParameter>

    lcdWriteCommand(DISPLAY_INVERSION);
 8002438:	20b4      	movs	r0, #180	@ 0xb4
 800243a:	f7ff ff33 	bl	80022a4 <lcdWriteCommand>
    lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 800243e:	2007      	movs	r0, #7
 8002440:	f7ff ff43 	bl	80022ca <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL1);
 8002444:	20c0      	movs	r0, #192	@ 0xc0
 8002446:	f7ff ff2d 	bl	80022a4 <lcdWriteCommand>
    lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 800244a:	200a      	movs	r0, #10
 800244c:	f7ff ff3d 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 8002450:	2002      	movs	r0, #2
 8002452:	f7ff ff3a 	bl	80022ca <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL2);
 8002456:	20c1      	movs	r0, #193	@ 0xc1
 8002458:	f7ff ff24 	bl	80022a4 <lcdWriteCommand>
    lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 800245c:	2002      	movs	r0, #2
 800245e:	f7ff ff34 	bl	80022ca <lcdWriteParameter>

    lcdWriteCommand(VCOM_CONTROL1);
 8002462:	20c5      	movs	r0, #197	@ 0xc5
 8002464:	f7ff ff1e 	bl	80022a4 <lcdWriteCommand>
    lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 8002468:	2050      	movs	r0, #80	@ 0x50
 800246a:	f7ff ff2e 	bl	80022ca <lcdWriteParameter>
    lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 800246e:	205b      	movs	r0, #91	@ 0x5b
 8002470:	f7ff ff2b 	bl	80022ca <lcdWriteParameter>

    lcdWriteCommand(VCOM_OFFSET_CONTROL);
 8002474:	20c7      	movs	r0, #199	@ 0xc7
 8002476:	f7ff ff15 	bl	80022a4 <lcdWriteCommand>
    lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 800247a:	2040      	movs	r0, #64	@ 0x40
 800247c:	f7ff ff25 	bl	80022ca <lcdWriteParameter>

    // here we set orientation for every pixel (first we define addresses)
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 8002480:	202a      	movs	r0, #42	@ 0x2a
 8002482:	f7ff ff0f 	bl	80022a4 <lcdWriteCommand>
	lcdWriteParameter(0x00); // X high start byte
 8002486:	2000      	movs	r0, #0
 8002488:	f7ff ff1f 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0x00); // X low start byte
 800248c:	2000      	movs	r0, #0
 800248e:	f7ff ff1c 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0x01); // X high end byte
 8002492:	2001      	movs	r0, #1
 8002494:	f7ff ff19 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0x3F); // X low end byte - 319
 8002498:	203f      	movs	r0, #63	@ 0x3f
 800249a:	f7ff ff16 	bl	80022ca <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS);
 800249e:	202b      	movs	r0, #43	@ 0x2b
 80024a0:	f7ff ff00 	bl	80022a4 <lcdWriteCommand>
	lcdWriteParameter(0x00); // Y high start byte
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7ff ff10 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0x00); // Y low start byte
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7ff ff0d 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0x00); // Y high end byte
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7ff ff0a 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0xEF); // Y low end byte (239, 0x00EF in hex)
 80024b6:	f06f 0010 	mvn.w	r0, #16
 80024ba:	f7ff ff06 	bl	80022ca <lcdWriteParameter>

	// Select display orientation
    lcdWriteCommand(SET_ADDRESS_MODE);
 80024be:	2036      	movs	r0, #54	@ 0x36
 80024c0:	f7ff fef0 	bl	80022a4 <lcdWriteCommand>
	lcdWriteParameter(orientation);
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fefe 	bl	80022ca <lcdWriteParameter>

	// Set the display to on
    lcdWriteCommand(SET_DISPLAY_ON);
 80024ce:	2029      	movs	r0, #41	@ 0x29
 80024d0:	f7ff fee8 	bl	80022a4 <lcdWriteCommand>
    lcdWriteCommand(WRITE_MEMORY_START);
 80024d4:	202c      	movs	r0, #44	@ 0x2c
 80024d6:	f7ff fee5 	bl	80022a4 <lcdWriteCommand>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <lcdClearDisplay>:

// LCD graphics functions -----------------------------------------------------------------------------------

void lcdClearDisplay(uint16_t colour)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	80fb      	strh	r3, [r7, #6]
	uint32_t pixel;

	// Set the column address to 0-319
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 80024ee:	202a      	movs	r0, #42	@ 0x2a
 80024f0:	f7ff fed8 	bl	80022a4 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f7ff fee8 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80024fa:	2000      	movs	r0, #0
 80024fc:	f7ff fee5 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0x01);
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff fee2 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0x3F);
 8002506:	203f      	movs	r0, #63	@ 0x3f
 8002508:	f7ff fedf 	bl	80022ca <lcdWriteParameter>

	// Set the page address to 0-239
	lcdWriteCommand(SET_PAGE_ADDRESS);
 800250c:	202b      	movs	r0, #43	@ 0x2b
 800250e:	f7ff fec9 	bl	80022a4 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8002512:	2000      	movs	r0, #0
 8002514:	f7ff fed9 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002518:	2000      	movs	r0, #0
 800251a:	f7ff fed6 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0x00);
 800251e:	2000      	movs	r0, #0
 8002520:	f7ff fed3 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0xEF);
 8002524:	f06f 0010 	mvn.w	r0, #16
 8002528:	f7ff fecf 	bl	80022ca <lcdWriteParameter>

	// Plot the pixels
	lcdWriteCommand(WRITE_MEMORY_START);
 800252c:	202c      	movs	r0, #44	@ 0x2c
 800252e:	f7ff feb9 	bl	80022a4 <lcdWriteCommand>
	for(pixel = 0; pixel < 76799; pixel++)
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	e00c      	b.n	8002552 <lcdClearDisplay+0x6e>
	{
		lcdWriteData(colour >> 8, colour);
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	0a1b      	lsrs	r3, r3, #8
 800253c:	b29b      	uxth	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	88fa      	ldrh	r2, [r7, #6]
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fed2 	bl	80022f0 <lcdWriteData>
	for(pixel = 0; pixel < 76799; pixel++)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	3301      	adds	r3, #1
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4a03      	ldr	r2, [pc, #12]	@ (8002564 <lcdClearDisplay+0x80>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d9ee      	bls.n	8002538 <lcdClearDisplay+0x54>
	}

}
 800255a:	bf00      	nop
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	00012bfe 	.word	0x00012bfe

08002568 <lcdPlot>:

// changing a single pixel on display
void lcdPlot(int16_t x, int16_t y, uint16_t colour)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	80fb      	strh	r3, [r7, #6]
 8002572:	460b      	mov	r3, r1
 8002574:	80bb      	strh	r3, [r7, #4]
 8002576:	4613      	mov	r3, r2
 8002578:	807b      	strh	r3, [r7, #2]
	// Horizontal Address Start Position
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 800257a:	202a      	movs	r0, #42	@ 0x2a
 800257c:	f7ff fe92 	bl	80022a4 <lcdWriteCommand>
	lcdWriteParameter(x >> 8);
 8002580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002584:	121b      	asrs	r3, r3, #8
 8002586:	b21b      	sxth	r3, r3
 8002588:	b25b      	sxtb	r3, r3
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fe9d 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(x);
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	b25b      	sxtb	r3, r3
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fe98 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0x01);
 800259a:	2001      	movs	r0, #1
 800259c:	f7ff fe95 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0x3F);//319
 80025a0:	203f      	movs	r0, #63	@ 0x3f
 80025a2:	f7ff fe92 	bl	80022ca <lcdWriteParameter>

	// Vertical Address end Position
	lcdWriteCommand(SET_PAGE_ADDRESS);
 80025a6:	202b      	movs	r0, #43	@ 0x2b
 80025a8:	f7ff fe7c 	bl	80022a4 <lcdWriteCommand>
	lcdWriteParameter(y >> 8);
 80025ac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025b0:	121b      	asrs	r3, r3, #8
 80025b2:	b21b      	sxth	r3, r3
 80025b4:	b25b      	sxtb	r3, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fe87 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(y);
 80025bc:	88bb      	ldrh	r3, [r7, #4]
 80025be:	b25b      	sxtb	r3, r3
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fe82 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f7ff fe7f 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0xEF);//239
 80025cc:	f06f 0010 	mvn.w	r0, #16
 80025d0:	f7ff fe7b 	bl	80022ca <lcdWriteParameter>

	// Plot the point
	lcdWriteCommand(WRITE_MEMORY_START);
 80025d4:	202c      	movs	r0, #44	@ 0x2c
 80025d6:	f7ff fe65 	bl	80022a4 <lcdWriteCommand>
	lcdWriteData(colour >> 8, colour);
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	b29b      	uxth	r3, r3
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fe81 	bl	80022f0 <lcdWriteData>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <lcdLine>:

void lcdLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 80025f6:	b590      	push	{r4, r7, lr}
 80025f8:	b08b      	sub	sp, #44	@ 0x2c
 80025fa:	af02      	add	r7, sp, #8
 80025fc:	4604      	mov	r4, r0
 80025fe:	4608      	mov	r0, r1
 8002600:	4611      	mov	r1, r2
 8002602:	461a      	mov	r2, r3
 8002604:	4623      	mov	r3, r4
 8002606:	80fb      	strh	r3, [r7, #6]
 8002608:	4603      	mov	r3, r0
 800260a:	80bb      	strh	r3, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	807b      	strh	r3, [r7, #2]
 8002610:	4613      	mov	r3, r2
 8002612:	803b      	strh	r3, [r7, #0]
	if(x0 == x1){ //vodorovna ciara optimalizovane
 8002614:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002618:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800261c:	429a      	cmp	r2, r3
 800261e:	d10d      	bne.n	800263c <lcdLine+0x46>
		lcdFilledRectangle(x0, y0, x1, y1, colour);
 8002620:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002624:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002628:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800262c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002630:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	4623      	mov	r3, r4
 8002636:	f000 faf1 	bl	8002c1c <lcdFilledRectangle>
		return;
 800263a:	e10a      	b.n	8002852 <lcdLine+0x25c>
	}
	else if(y0 == y1){ //zvisla ciara optimalizovane
 800263c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002640:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002644:	429a      	cmp	r2, r3
 8002646:	d10d      	bne.n	8002664 <lcdLine+0x6e>
		lcdFilledRectangle(x0, y0, x1, y1, colour);
 8002648:	f9b7 4000 	ldrsh.w	r4, [r7]
 800264c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002650:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002654:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002658:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	4623      	mov	r3, r4
 800265e:	f000 fadd 	bl	8002c1c <lcdFilledRectangle>
		return;
 8002662:	e0f6      	b.n	8002852 <lcdLine+0x25c>
	}

	int16_t dy = y1 - y0;
 8002664:	883a      	ldrh	r2, [r7, #0]
 8002666:	88bb      	ldrh	r3, [r7, #4]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	b29b      	uxth	r3, r3
 800266c:	83fb      	strh	r3, [r7, #30]
	int16_t dx = x1 - x0;
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	b29b      	uxth	r3, r3
 8002676:	83bb      	strh	r3, [r7, #28]
	int16_t stepx, stepy;

	if (dy < 0) //derivacie musia byt kladne
 8002678:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800267c:	2b00      	cmp	r3, #0
 800267e:	da07      	bge.n	8002690 <lcdLine+0x9a>
	{
		dy = -dy; stepy = -1;
 8002680:	8bfb      	ldrh	r3, [r7, #30]
 8002682:	425b      	negs	r3, r3
 8002684:	b29b      	uxth	r3, r3
 8002686:	83fb      	strh	r3, [r7, #30]
 8002688:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800268c:	833b      	strh	r3, [r7, #24]
 800268e:	e001      	b.n	8002694 <lcdLine+0x9e>
	}
	else stepy = 1;
 8002690:	2301      	movs	r3, #1
 8002692:	833b      	strh	r3, [r7, #24]

	if (dx < 0) //derivacie musia byt kladne
 8002694:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002698:	2b00      	cmp	r3, #0
 800269a:	da07      	bge.n	80026ac <lcdLine+0xb6>
	{
		dx = -dx; stepx = -1;
 800269c:	8bbb      	ldrh	r3, [r7, #28]
 800269e:	425b      	negs	r3, r3
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	83bb      	strh	r3, [r7, #28]
 80026a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026a8:	837b      	strh	r3, [r7, #26]
 80026aa:	e001      	b.n	80026b0 <lcdLine+0xba>
	}
	else stepx = 1;
 80026ac:	2301      	movs	r3, #1
 80026ae:	837b      	strh	r3, [r7, #26]

	dy <<= 1;	//dy*2
 80026b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	83fb      	strh	r3, [r7, #30]
	dx <<= 1;	//dx*2
 80026b8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	83bb      	strh	r3, [r7, #28]

	lcdPlot(x0, y0, colour);	//zaciatocny pixel
 80026c0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80026c2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80026c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ff4c 	bl	8002568 <lcdPlot>
	uint16_t partialLineStartCoord = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	82fb      	strh	r3, [r7, #22]

	if (dx > dy) {  //menej nez 45 stupnov
 80026d4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80026d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80026dc:	429a      	cmp	r2, r3
 80026de:	dd59      	ble.n	8002794 <lcdLine+0x19e>
		partialLineStartCoord = x0-1;
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	82fb      	strh	r3, [r7, #22]
		int fraction = dy - (dx >> 1);	//dy-(dx/2)
 80026e6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80026ea:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80026ee:	1052      	asrs	r2, r2, #1
 80026f0:	b212      	sxth	r2, r2
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
		while (x0 != x1)
 80026f6:	e02f      	b.n	8002758 <lcdLine+0x162>
		{

			if (fraction >= 0) //when we move up 1 pixel on Y axis
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	db22      	blt.n	8002744 <lcdLine+0x14e>
			{
				if((y0>0)&&(y0<255)) {
 80026fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	dd12      	ble.n	800272c <lcdLine+0x136>
 8002706:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800270a:	2bfe      	cmp	r3, #254	@ 0xfe
 800270c:	dc0e      	bgt.n	800272c <lcdLine+0x136>
					lcdFilledRectangle(partialLineStartCoord+1, y0, x0, y0, colour);
 800270e:	8afb      	ldrh	r3, [r7, #22]
 8002710:	3301      	adds	r3, #1
 8002712:	b29b      	uxth	r3, r3
 8002714:	b218      	sxth	r0, r3
 8002716:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800271a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800271e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002722:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	4623      	mov	r3, r4
 8002728:	f000 fa78 	bl	8002c1c <lcdFilledRectangle>
				}
				partialLineStartCoord = x0;
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	82fb      	strh	r3, [r7, #22]
				y0 += stepy;
 8002730:	88ba      	ldrh	r2, [r7, #4]
 8002732:	8b3b      	ldrh	r3, [r7, #24]
 8002734:	4413      	add	r3, r2
 8002736:	b29b      	uxth	r3, r3
 8002738:	80bb      	strh	r3, [r7, #4]
				fraction -= dx;
 800273a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	613b      	str	r3, [r7, #16]
			}
			x0 += stepx;
 8002744:	88fa      	ldrh	r2, [r7, #6]
 8002746:	8b7b      	ldrh	r3, [r7, #26]
 8002748:	4413      	add	r3, r2
 800274a:	b29b      	uxth	r3, r3
 800274c:	80fb      	strh	r3, [r7, #6]
			fraction += dy;
 800274e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
		while (x0 != x1)
 8002758:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800275c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002760:	429a      	cmp	r2, r3
 8002762:	d1c9      	bne.n	80026f8 <lcdLine+0x102>
		}
		if((y0>0)&&(y0<255)) {
 8002764:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	dd72      	ble.n	8002852 <lcdLine+0x25c>
 800276c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002770:	2bfe      	cmp	r3, #254	@ 0xfe
 8002772:	dc6e      	bgt.n	8002852 <lcdLine+0x25c>
			lcdFilledRectangle(partialLineStartCoord+1, y0, x0, y0, colour);
 8002774:	8afb      	ldrh	r3, [r7, #22]
 8002776:	3301      	adds	r3, #1
 8002778:	b29b      	uxth	r3, r3
 800277a:	b218      	sxth	r0, r3
 800277c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002780:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002784:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002788:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	4623      	mov	r3, r4
 800278e:	f000 fa45 	bl	8002c1c <lcdFilledRectangle>
 8002792:	e05e      	b.n	8002852 <lcdLine+0x25c>
		}
	}
	else			//viac nez 45 stupnov
	{
		partialLineStartCoord = y0-1;
 8002794:	88bb      	ldrh	r3, [r7, #4]
 8002796:	3b01      	subs	r3, #1
 8002798:	82fb      	strh	r3, [r7, #22]
		int fraction = dx - (dy >> 1);
 800279a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800279e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80027a2:	1052      	asrs	r2, r2, #1
 80027a4:	b212      	sxth	r2, r2
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]
		while (y0 != y1)
 80027aa:	e032      	b.n	8002812 <lcdLine+0x21c>
		{
			if (fraction >= 0)	//when we move up 1 pixel on X axis
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	db25      	blt.n	80027fe <lcdLine+0x208>
			{
				if((y0>0)&&(y0<255)&&(partialLineStartCoord+1>0)&&(partialLineStartCoord+1<255)) {
 80027b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	dd15      	ble.n	80027e6 <lcdLine+0x1f0>
 80027ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80027be:	2bfe      	cmp	r3, #254	@ 0xfe
 80027c0:	dc11      	bgt.n	80027e6 <lcdLine+0x1f0>
 80027c2:	8afb      	ldrh	r3, [r7, #22]
 80027c4:	2bfd      	cmp	r3, #253	@ 0xfd
 80027c6:	d80e      	bhi.n	80027e6 <lcdLine+0x1f0>
					lcdFilledRectangle(x0, partialLineStartCoord+1, x0, y0, colour);
 80027c8:	8afb      	ldrh	r3, [r7, #22]
 80027ca:	3301      	adds	r3, #1
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	b219      	sxth	r1, r3
 80027d0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80027d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80027d8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80027dc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	4623      	mov	r3, r4
 80027e2:	f000 fa1b 	bl	8002c1c <lcdFilledRectangle>
				}
				partialLineStartCoord = y0;
 80027e6:	88bb      	ldrh	r3, [r7, #4]
 80027e8:	82fb      	strh	r3, [r7, #22]
				x0 += stepx;
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	8b7b      	ldrh	r3, [r7, #26]
 80027ee:	4413      	add	r3, r2
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 80027f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	60fb      	str	r3, [r7, #12]
			}
			y0 += stepy;
 80027fe:	88ba      	ldrh	r2, [r7, #4]
 8002800:	8b3b      	ldrh	r3, [r7, #24]
 8002802:	4413      	add	r3, r2
 8002804:	b29b      	uxth	r3, r3
 8002806:	80bb      	strh	r3, [r7, #4]
			fraction += dx;
 8002808:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
		while (y0 != y1)
 8002812:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002816:	f9b7 3000 	ldrsh.w	r3, [r7]
 800281a:	429a      	cmp	r2, r3
 800281c:	d1c6      	bne.n	80027ac <lcdLine+0x1b6>
		}
		if((y0>0)&&(y0<255)&&(partialLineStartCoord+1>0)&&(partialLineStartCoord+1<255)) {
 800281e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	dd15      	ble.n	8002852 <lcdLine+0x25c>
 8002826:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800282a:	2bfe      	cmp	r3, #254	@ 0xfe
 800282c:	dc11      	bgt.n	8002852 <lcdLine+0x25c>
 800282e:	8afb      	ldrh	r3, [r7, #22]
 8002830:	2bfd      	cmp	r3, #253	@ 0xfd
 8002832:	d80e      	bhi.n	8002852 <lcdLine+0x25c>
			lcdFilledRectangle(x0, partialLineStartCoord+1, x0, y0, colour);
 8002834:	8afb      	ldrh	r3, [r7, #22]
 8002836:	3301      	adds	r3, #1
 8002838:	b29b      	uxth	r3, r3
 800283a:	b219      	sxth	r1, r3
 800283c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002840:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002844:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002848:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	4623      	mov	r3, r4
 800284e:	f000 f9e5 	bl	8002c1c <lcdFilledRectangle>
		}
	}
}
 8002852:	3724      	adds	r7, #36	@ 0x24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd90      	pop	{r4, r7, pc}

08002858 <lcdDottedLine>:

void lcdDottedLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour, uint16_t step)
{
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b089      	sub	sp, #36	@ 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	4604      	mov	r4, r0
 8002860:	4608      	mov	r0, r1
 8002862:	4611      	mov	r1, r2
 8002864:	461a      	mov	r2, r3
 8002866:	4623      	mov	r3, r4
 8002868:	80fb      	strh	r3, [r7, #6]
 800286a:	4603      	mov	r3, r0
 800286c:	80bb      	strh	r3, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	807b      	strh	r3, [r7, #2]
 8002872:	4613      	mov	r3, r2
 8002874:	803b      	strh	r3, [r7, #0]
	int16_t dy = y1 - y0;
 8002876:	883a      	ldrh	r2, [r7, #0]
 8002878:	88bb      	ldrh	r3, [r7, #4]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	b29b      	uxth	r3, r3
 800287e:	83fb      	strh	r3, [r7, #30]
	int16_t dx = x1 - x0;
 8002880:	887a      	ldrh	r2, [r7, #2]
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	b29b      	uxth	r3, r3
 8002888:	83bb      	strh	r3, [r7, #28]
	int16_t stepx, stepy;
	int16_t delta = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	82fb      	strh	r3, [r7, #22]
	int16_t astep = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	817b      	strh	r3, [r7, #10]
	int16_t stp = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	82bb      	strh	r3, [r7, #20]

	if (dy < 0)
 8002896:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800289a:	2b00      	cmp	r3, #0
 800289c:	da07      	bge.n	80028ae <lcdDottedLine+0x56>
	{
		dy = -dy; stepy = -1;
 800289e:	8bfb      	ldrh	r3, [r7, #30]
 80028a0:	425b      	negs	r3, r3
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	83fb      	strh	r3, [r7, #30]
 80028a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028aa:	833b      	strh	r3, [r7, #24]
 80028ac:	e001      	b.n	80028b2 <lcdDottedLine+0x5a>
	}
	else stepy = 1;
 80028ae:	2301      	movs	r3, #1
 80028b0:	833b      	strh	r3, [r7, #24]

 	if (dx < 0)
 80028b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	da07      	bge.n	80028ca <lcdDottedLine+0x72>
	{
		dx = -dx; stepx = -1;
 80028ba:	8bbb      	ldrh	r3, [r7, #28]
 80028bc:	425b      	negs	r3, r3
 80028be:	b29b      	uxth	r3, r3
 80028c0:	83bb      	strh	r3, [r7, #28]
 80028c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028c6:	837b      	strh	r3, [r7, #26]
 80028c8:	e001      	b.n	80028ce <lcdDottedLine+0x76>
	}
	else stepx = 1;
 80028ca:	2301      	movs	r3, #1
 80028cc:	837b      	strh	r3, [r7, #26]

	dy <<= 1;
 80028ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	83fb      	strh	r3, [r7, #30]
	dx <<= 1;
 80028d6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	83bb      	strh	r3, [r7, #28]

	if (dx > dy) {
 80028de:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80028e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	dd59      	ble.n	800299e <lcdDottedLine+0x146>
		int fraction = dy - (dx >> 1);
 80028ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80028ee:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80028f2:	1052      	asrs	r2, r2, #1
 80028f4:	b212      	sxth	r2, r2
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
		delta = abs(x0 - x1);
 80028fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80028fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	bfb8      	it	lt
 8002908:	425b      	neglt	r3, r3
 800290a:	82fb      	strh	r3, [r7, #22]
		astep = abs(stepx);
 800290c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002910:	2b00      	cmp	r3, #0
 8002912:	bfb8      	it	lt
 8002914:	425b      	neglt	r3, r3
 8002916:	b29b      	uxth	r3, r3
 8002918:	817b      	strh	r3, [r7, #10]
		while (delta > 0)
 800291a:	e03b      	b.n	8002994 <lcdDottedLine+0x13c>
		{
			if (fraction >= 0)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	db09      	blt.n	8002936 <lcdDottedLine+0xde>
			{
				y0 += stepy;
 8002922:	88ba      	ldrh	r2, [r7, #4]
 8002924:	8b3b      	ldrh	r3, [r7, #24]
 8002926:	4413      	add	r3, r2
 8002928:	b29b      	uxth	r3, r3
 800292a:	80bb      	strh	r3, [r7, #4]
				fraction -= dx;
 800292c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	613b      	str	r3, [r7, #16]
			}
			if((stp%step==0)&&(y0>0)&&(y0<255)) {
 8002936:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800293a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800293c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002940:	fb01 f202 	mul.w	r2, r1, r2
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10f      	bne.n	800296a <lcdDottedLine+0x112>
 800294a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	dd0b      	ble.n	800296a <lcdDottedLine+0x112>
 8002952:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002956:	2bfe      	cmp	r3, #254	@ 0xfe
 8002958:	dc07      	bgt.n	800296a <lcdDottedLine+0x112>
				lcdPlot(x0, y0, colour);
 800295a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800295c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002960:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fdff 	bl	8002568 <lcdPlot>
			}
   			x0 += stepx;
 800296a:	88fa      	ldrh	r2, [r7, #6]
 800296c:	8b7b      	ldrh	r3, [r7, #26]
 800296e:	4413      	add	r3, r2
 8002970:	b29b      	uxth	r3, r3
 8002972:	80fb      	strh	r3, [r7, #6]
   			delta = delta - astep;
 8002974:	8afa      	ldrh	r2, [r7, #22]
 8002976:	897b      	ldrh	r3, [r7, #10]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	b29b      	uxth	r3, r3
 800297c:	82fb      	strh	r3, [r7, #22]
   			fraction += dy;
 800297e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
   			stp++;
 8002988:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800298c:	b29b      	uxth	r3, r3
 800298e:	3301      	adds	r3, #1
 8002990:	b29b      	uxth	r3, r3
 8002992:	82bb      	strh	r3, [r7, #20]
		while (delta > 0)
 8002994:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002998:	2b00      	cmp	r3, #0
 800299a:	dcbf      	bgt.n	800291c <lcdDottedLine+0xc4>
			delta = delta - astep;
			fraction += dx;
			stp++;
		}
	}
}
 800299c:	e058      	b.n	8002a50 <lcdDottedLine+0x1f8>
		int fraction = dx - (dy >> 1);
 800299e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80029a2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80029a6:	1052      	asrs	r2, r2, #1
 80029a8:	b212      	sxth	r2, r2
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
		delta = abs(y0 - y1);
 80029ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80029b2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	bfb8      	it	lt
 80029bc:	425b      	neglt	r3, r3
 80029be:	82fb      	strh	r3, [r7, #22]
		astep = abs(stepy);
 80029c0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	bfb8      	it	lt
 80029c8:	425b      	neglt	r3, r3
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	817b      	strh	r3, [r7, #10]
		while (delta > 0)
 80029ce:	e03b      	b.n	8002a48 <lcdDottedLine+0x1f0>
			if (fraction >= 0)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	db09      	blt.n	80029ea <lcdDottedLine+0x192>
				x0 += stepx;
 80029d6:	88fa      	ldrh	r2, [r7, #6]
 80029d8:	8b7b      	ldrh	r3, [r7, #26]
 80029da:	4413      	add	r3, r2
 80029dc:	b29b      	uxth	r3, r3
 80029de:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 80029e0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	60fb      	str	r3, [r7, #12]
			if((stp%step==0)&&(y0>0)&&(y0<255)) {
 80029ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029ee:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80029f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80029f4:	fb01 f202 	mul.w	r2, r1, r2
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <lcdDottedLine+0x1c6>
 80029fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	dd0b      	ble.n	8002a1e <lcdDottedLine+0x1c6>
 8002a06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a0a:	2bfe      	cmp	r3, #254	@ 0xfe
 8002a0c:	dc07      	bgt.n	8002a1e <lcdDottedLine+0x1c6>
				lcdPlot(x0, y0, colour);
 8002a0e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002a10:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fda5 	bl	8002568 <lcdPlot>
			y0 += stepy;
 8002a1e:	88ba      	ldrh	r2, [r7, #4]
 8002a20:	8b3b      	ldrh	r3, [r7, #24]
 8002a22:	4413      	add	r3, r2
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	80bb      	strh	r3, [r7, #4]
			delta = delta - astep;
 8002a28:	8afa      	ldrh	r2, [r7, #22]
 8002a2a:	897b      	ldrh	r3, [r7, #10]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	82fb      	strh	r3, [r7, #22]
			fraction += dx;
 8002a32:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4413      	add	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
			stp++;
 8002a3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3301      	adds	r3, #1
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	82bb      	strh	r3, [r7, #20]
		while (delta > 0)
 8002a48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	dcbf      	bgt.n	80029d0 <lcdDottedLine+0x178>
}
 8002a50:	bf00      	nop
 8002a52:	3724      	adds	r7, #36	@ 0x24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd90      	pop	{r4, r7, pc}

08002a58 <lcdPolyline>:

void lcdPolyline(int16_t *points, int16_t lines, uint16_t colour)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b089      	sub	sp, #36	@ 0x24
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]
 8002a64:	4613      	mov	r3, r2
 8002a66:	803b      	strh	r3, [r7, #0]
	for(int16_t i = 0; i<lines-1; i++){
 8002a68:	2300      	movs	r3, #0
 8002a6a:	82fb      	strh	r3, [r7, #22]
 8002a6c:	e032      	b.n	8002ad4 <lcdPolyline+0x7c>
		int16_t x0 = points[2*i];
 8002a6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	82bb      	strh	r3, [r7, #20]
		int16_t y0 = points[2*i + 1];
 8002a7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	3302      	adds	r3, #2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	4413      	add	r3, r2
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	827b      	strh	r3, [r7, #18]
		int16_t x1 = points[2*(i+1)];
 8002a8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a90:	3301      	adds	r3, #1
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	4413      	add	r3, r2
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	823b      	strh	r3, [r7, #16]
		int16_t y1 = points[2*(i+1) + 1];
 8002a9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	81fb      	strh	r3, [r7, #14]
		lcdLine(x0, y0, x1, y1, colour);
 8002aae:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8002ab2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002ab6:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8002aba:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8002abe:	883b      	ldrh	r3, [r7, #0]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	4623      	mov	r3, r4
 8002ac4:	f7ff fd97 	bl	80025f6 <lcdLine>
	for(int16_t i = 0; i<lines-1; i++){
 8002ac8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	82fb      	strh	r3, [r7, #22]
 8002ad4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ad8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	dbc5      	blt.n	8002a6e <lcdPolyline+0x16>
	}
}
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd90      	pop	{r4, r7, pc}

08002aec <lcdDottedPolyline>:
void lcdDottedPolyline(int16_t *points, int16_t lines, uint16_t colour, uint16_t step)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b08b      	sub	sp, #44	@ 0x2c
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	4608      	mov	r0, r1
 8002af6:	4611      	mov	r1, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	817b      	strh	r3, [r7, #10]
 8002afe:	460b      	mov	r3, r1
 8002b00:	813b      	strh	r3, [r7, #8]
 8002b02:	4613      	mov	r3, r2
 8002b04:	80fb      	strh	r3, [r7, #6]
	for(int16_t i = 0; i<lines-1; i++){
 8002b06:	2300      	movs	r3, #0
 8002b08:	83fb      	strh	r3, [r7, #30]
 8002b0a:	e034      	b.n	8002b76 <lcdDottedPolyline+0x8a>
		int16_t x0 = points[2*i];
 8002b0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	83bb      	strh	r3, [r7, #28]
		int16_t y0 = points[2*i + 1];
 8002b1a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	3302      	adds	r3, #2
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4413      	add	r3, r2
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	837b      	strh	r3, [r7, #26]
		int16_t x1 = points[2*(i+1)];
 8002b2a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4413      	add	r3, r2
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	833b      	strh	r3, [r7, #24]
		int16_t y1 = points[2*(i+1) + 1];
 8002b3a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	3302      	adds	r3, #2
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	82fb      	strh	r3, [r7, #22]
		lcdDottedLine(x0, y0, x1, y1, colour, step);
 8002b4c:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8002b50:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002b54:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8002b58:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8002b5c:	88fb      	ldrh	r3, [r7, #6]
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	893b      	ldrh	r3, [r7, #8]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	4623      	mov	r3, r4
 8002b66:	f7ff fe77 	bl	8002858 <lcdDottedLine>
	for(int16_t i = 0; i<lines-1; i++){
 8002b6a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3301      	adds	r3, #1
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	83fb      	strh	r3, [r7, #30]
 8002b76:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002b7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	429a      	cmp	r2, r3
 8002b82:	dbc3      	blt.n	8002b0c <lcdDottedPolyline+0x20>
	}
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	3724      	adds	r7, #36	@ 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd90      	pop	{r4, r7, pc}

08002b8e <lcdRectangle>:

// Draw a rectangle between x0, y0 and x1, y1
void lcdRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8002b8e:	b590      	push	{r4, r7, lr}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af02      	add	r7, sp, #8
 8002b94:	4604      	mov	r4, r0
 8002b96:	4608      	mov	r0, r1
 8002b98:	4611      	mov	r1, r2
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4623      	mov	r3, r4
 8002b9e:	80fb      	strh	r3, [r7, #6]
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	80bb      	strh	r3, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	807b      	strh	r3, [r7, #2]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	803b      	strh	r3, [r7, #0]
	lcdLine(x0, y0, x0, y1, colour);
 8002bac:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002bb0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bb4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002bb8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002bbc:	8b3b      	ldrh	r3, [r7, #24]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	4623      	mov	r3, r4
 8002bc2:	f7ff fd18 	bl	80025f6 <lcdLine>
	lcdLine(x0, y1, x1, y1, colour);
 8002bc6:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002bca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002bce:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002bd2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002bd6:	8b3b      	ldrh	r3, [r7, #24]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	4623      	mov	r3, r4
 8002bdc:	f7ff fd0b 	bl	80025f6 <lcdLine>
	lcdLine(x1, y0, x1, y1, colour);
 8002be0:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002be4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002be8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002bec:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8002bf0:	8b3b      	ldrh	r3, [r7, #24]
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	f7ff fcfe 	bl	80025f6 <lcdLine>
	lcdLine(x0, y0, x1, y0, colour);
 8002bfa:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8002bfe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002c02:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002c06:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002c0a:	8b3b      	ldrh	r3, [r7, #24]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	4623      	mov	r3, r4
 8002c10:	f7ff fcf1 	bl	80025f6 <lcdLine>
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd90      	pop	{r4, r7, pc}

08002c1c <lcdFilledRectangle>:
	lcdDottedLine(x0, y0, x1, y0, colour, step);
}

// Draw a filled rectangle
void lcdFilledRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8002c1c:	b590      	push	{r4, r7, lr}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4604      	mov	r4, r0
 8002c24:	4608      	mov	r0, r1
 8002c26:	4611      	mov	r1, r2
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4623      	mov	r3, r4
 8002c2c:	80fb      	strh	r3, [r7, #6]
 8002c2e:	4603      	mov	r3, r0
 8002c30:	80bb      	strh	r3, [r7, #4]
 8002c32:	460b      	mov	r3, r1
 8002c34:	807b      	strh	r3, [r7, #2]
 8002c36:	4613      	mov	r3, r2
 8002c38:	803b      	strh	r3, [r7, #0]
	uint32_t pixels;
	int16_t pom = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	817b      	strh	r3, [r7, #10]
	if (x0>x1){	//x1 must be greater than x0
 8002c3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	dd05      	ble.n	8002c56 <lcdFilledRectangle+0x3a>
		pom = x0;
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	817b      	strh	r3, [r7, #10]
		x0 = x1;
 8002c4e:	887b      	ldrh	r3, [r7, #2]
 8002c50:	80fb      	strh	r3, [r7, #6]
		x1 = pom;
 8002c52:	897b      	ldrh	r3, [r7, #10]
 8002c54:	807b      	strh	r3, [r7, #2]
	}
	if (y0>y1){	//y1 must be greater than y0
 8002c56:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002c5a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	dd05      	ble.n	8002c6e <lcdFilledRectangle+0x52>
		pom = y0;
 8002c62:	88bb      	ldrh	r3, [r7, #4]
 8002c64:	817b      	strh	r3, [r7, #10]
		y0 = y1;
 8002c66:	883b      	ldrh	r3, [r7, #0]
 8002c68:	80bb      	strh	r3, [r7, #4]
		y1 = pom;
 8002c6a:	897b      	ldrh	r3, [r7, #10]
 8002c6c:	803b      	strh	r3, [r7, #0]
	}

	if((y1>0)&&(y0<255)){	//to prevent plotting nonsense
 8002c6e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	dd6e      	ble.n	8002d54 <lcdFilledRectangle+0x138>
 8002c76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c7a:	2bfe      	cmp	r3, #254	@ 0xfe
 8002c7c:	dc6a      	bgt.n	8002d54 <lcdFilledRectangle+0x138>
		if(y0<0) {	//
 8002c7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	da01      	bge.n	8002c8a <lcdFilledRectangle+0x6e>
			y0 = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	80bb      	strh	r3, [r7, #4]
		}
		if(y1>255) {
 8002c8a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c8e:	2bff      	cmp	r3, #255	@ 0xff
 8002c90:	dd01      	ble.n	8002c96 <lcdFilledRectangle+0x7a>
			y1 = 255;
 8002c92:	23ff      	movs	r3, #255	@ 0xff
 8002c94:	803b      	strh	r3, [r7, #0]
		}
		// To speed up plotting we define a x window with the width of the
		// rectangle and then just output the required number of bytes to
		// fill down to the end point
		lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8002c96:	202a      	movs	r0, #42	@ 0x2a
 8002c98:	f7ff fb04 	bl	80022a4 <lcdWriteCommand>
		lcdWriteParameter(x0 >> 8);
 8002c9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ca0:	121b      	asrs	r3, r3, #8
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	b25b      	sxtb	r3, r3
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fb0f 	bl	80022ca <lcdWriteParameter>
		lcdWriteParameter(x0);
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	b25b      	sxtb	r3, r3
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fb0a 	bl	80022ca <lcdWriteParameter>
		lcdWriteParameter(x1 >> 8);
 8002cb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cba:	121b      	asrs	r3, r3, #8
 8002cbc:	b21b      	sxth	r3, r3
 8002cbe:	b25b      	sxtb	r3, r3
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fb02 	bl	80022ca <lcdWriteParameter>
		lcdWriteParameter(x1);
 8002cc6:	887b      	ldrh	r3, [r7, #2]
 8002cc8:	b25b      	sxtb	r3, r3
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fafd 	bl	80022ca <lcdWriteParameter>

		lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8002cd0:	202b      	movs	r0, #43	@ 0x2b
 8002cd2:	f7ff fae7 	bl	80022a4 <lcdWriteCommand>
		lcdWriteParameter(y0 >> 8);
 8002cd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002cda:	121b      	asrs	r3, r3, #8
 8002cdc:	b21b      	sxth	r3, r3
 8002cde:	b25b      	sxtb	r3, r3
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff faf2 	bl	80022ca <lcdWriteParameter>
		lcdWriteParameter(y0);
 8002ce6:	88bb      	ldrh	r3, [r7, #4]
 8002ce8:	b25b      	sxtb	r3, r3
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff faed 	bl	80022ca <lcdWriteParameter>
		lcdWriteParameter(y1 >> 8);
 8002cf0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002cf4:	121b      	asrs	r3, r3, #8
 8002cf6:	b21b      	sxth	r3, r3
 8002cf8:	b25b      	sxtb	r3, r3
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff fae5 	bl	80022ca <lcdWriteParameter>
		lcdWriteParameter(y1);
 8002d00:	883b      	ldrh	r3, [r7, #0]
 8002d02:	b25b      	sxtb	r3, r3
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fae0 	bl	80022ca <lcdWriteParameter>

		lcdWriteCommand(WRITE_MEMORY_START);
 8002d0a:	202c      	movs	r0, #44	@ 0x2c
 8002d0c:	f7ff faca 	bl	80022a4 <lcdWriteCommand>
		for (pixels = 0; pixels < (((x1+1) - x0) * ((y1+1) - y0)); pixels++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	e00c      	b.n	8002d30 <lcdFilledRectangle+0x114>
				lcdWriteData(colour >> 8, colour);
 8002d16:	8c3b      	ldrh	r3, [r7, #32]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	8c3a      	ldrh	r2, [r7, #32]
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fae3 	bl	80022f0 <lcdWriteData>
		for (pixels = 0; pixels < (((x1+1) - x0) * ((y1+1) - y0)); pixels++)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002d40:	1c51      	adds	r1, r2, #1
 8002d42:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d46:	1a8a      	subs	r2, r1, r2
 8002d48:	fb02 f303 	mul.w	r3, r2, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d3e0      	bcc.n	8002d16 <lcdFilledRectangle+0xfa>
	}
}
 8002d54:	bf00      	nop
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd90      	pop	{r4, r7, pc}

08002d5c <lcdCircle>:
		lcdFilledDottedTriangle( pointsT, colour, step );
	}
}

void lcdCircle(int16_t xCentre, int16_t yCentre, int16_t radius, uint16_t colour)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4604      	mov	r4, r0
 8002d64:	4608      	mov	r0, r1
 8002d66:	4611      	mov	r1, r2
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4623      	mov	r3, r4
 8002d6c:	80fb      	strh	r3, [r7, #6]
 8002d6e:	4603      	mov	r3, r0
 8002d70:	80bb      	strh	r3, [r7, #4]
 8002d72:	460b      	mov	r3, r1
 8002d74:	807b      	strh	r3, [r7, #2]
 8002d76:	4613      	mov	r3, r2
 8002d78:	803b      	strh	r3, [r7, #0]
	int16_t x = 0, y = radius;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	81fb      	strh	r3, [r7, #14]
 8002d7e:	887b      	ldrh	r3, [r7, #2]
 8002d80:	81bb      	strh	r3, [r7, #12]
	int16_t d = 3 - (2 * radius);
 8002d82:	887b      	ldrh	r3, [r7, #2]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	f1c3 0303 	rsb	r3, r3, #3
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	817b      	strh	r3, [r7, #10]

    while(x <= y)
 8002d90:	e095      	b.n	8002ebe <lcdCircle+0x162>
	{
		lcdPlot(xCentre + x, yCentre + y, colour);
 8002d92:	88fa      	ldrh	r2, [r7, #6]
 8002d94:	89fb      	ldrh	r3, [r7, #14]
 8002d96:	4413      	add	r3, r2
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	b218      	sxth	r0, r3
 8002d9c:	88ba      	ldrh	r2, [r7, #4]
 8002d9e:	89bb      	ldrh	r3, [r7, #12]
 8002da0:	4413      	add	r3, r2
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	b21b      	sxth	r3, r3
 8002da6:	883a      	ldrh	r2, [r7, #0]
 8002da8:	4619      	mov	r1, r3
 8002daa:	f7ff fbdd 	bl	8002568 <lcdPlot>
		lcdPlot(xCentre + y, yCentre + x, colour);
 8002dae:	88fa      	ldrh	r2, [r7, #6]
 8002db0:	89bb      	ldrh	r3, [r7, #12]
 8002db2:	4413      	add	r3, r2
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	b218      	sxth	r0, r3
 8002db8:	88ba      	ldrh	r2, [r7, #4]
 8002dba:	89fb      	ldrh	r3, [r7, #14]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	b21b      	sxth	r3, r3
 8002dc2:	883a      	ldrh	r2, [r7, #0]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f7ff fbcf 	bl	8002568 <lcdPlot>
		lcdPlot(xCentre - x, yCentre + y, colour);
 8002dca:	88fa      	ldrh	r2, [r7, #6]
 8002dcc:	89fb      	ldrh	r3, [r7, #14]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	b218      	sxth	r0, r3
 8002dd4:	88ba      	ldrh	r2, [r7, #4]
 8002dd6:	89bb      	ldrh	r3, [r7, #12]
 8002dd8:	4413      	add	r3, r2
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	b21b      	sxth	r3, r3
 8002dde:	883a      	ldrh	r2, [r7, #0]
 8002de0:	4619      	mov	r1, r3
 8002de2:	f7ff fbc1 	bl	8002568 <lcdPlot>
		lcdPlot(xCentre + y, yCentre - x, colour);
 8002de6:	88fa      	ldrh	r2, [r7, #6]
 8002de8:	89bb      	ldrh	r3, [r7, #12]
 8002dea:	4413      	add	r3, r2
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	b218      	sxth	r0, r3
 8002df0:	88ba      	ldrh	r2, [r7, #4]
 8002df2:	89fb      	ldrh	r3, [r7, #14]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	b21b      	sxth	r3, r3
 8002dfa:	883a      	ldrh	r2, [r7, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f7ff fbb3 	bl	8002568 <lcdPlot>
		lcdPlot(xCentre - x, yCentre - y, colour);
 8002e02:	88fa      	ldrh	r2, [r7, #6]
 8002e04:	89fb      	ldrh	r3, [r7, #14]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	b218      	sxth	r0, r3
 8002e0c:	88ba      	ldrh	r2, [r7, #4]
 8002e0e:	89bb      	ldrh	r3, [r7, #12]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	b21b      	sxth	r3, r3
 8002e16:	883a      	ldrh	r2, [r7, #0]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f7ff fba5 	bl	8002568 <lcdPlot>
		lcdPlot(xCentre - y, yCentre - x, colour);
 8002e1e:	88fa      	ldrh	r2, [r7, #6]
 8002e20:	89bb      	ldrh	r3, [r7, #12]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	b218      	sxth	r0, r3
 8002e28:	88ba      	ldrh	r2, [r7, #4]
 8002e2a:	89fb      	ldrh	r3, [r7, #14]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	b21b      	sxth	r3, r3
 8002e32:	883a      	ldrh	r2, [r7, #0]
 8002e34:	4619      	mov	r1, r3
 8002e36:	f7ff fb97 	bl	8002568 <lcdPlot>
		lcdPlot(xCentre + x, yCentre - y, colour);
 8002e3a:	88fa      	ldrh	r2, [r7, #6]
 8002e3c:	89fb      	ldrh	r3, [r7, #14]
 8002e3e:	4413      	add	r3, r2
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	b218      	sxth	r0, r3
 8002e44:	88ba      	ldrh	r2, [r7, #4]
 8002e46:	89bb      	ldrh	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	b21b      	sxth	r3, r3
 8002e4e:	883a      	ldrh	r2, [r7, #0]
 8002e50:	4619      	mov	r1, r3
 8002e52:	f7ff fb89 	bl	8002568 <lcdPlot>
		lcdPlot(xCentre - y, yCentre + x, colour);
 8002e56:	88fa      	ldrh	r2, [r7, #6]
 8002e58:	89bb      	ldrh	r3, [r7, #12]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	b218      	sxth	r0, r3
 8002e60:	88ba      	ldrh	r2, [r7, #4]
 8002e62:	89fb      	ldrh	r3, [r7, #14]
 8002e64:	4413      	add	r3, r2
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	b21b      	sxth	r3, r3
 8002e6a:	883a      	ldrh	r2, [r7, #0]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f7ff fb7b 	bl	8002568 <lcdPlot>

		if (d < 0) d += (4 * x) + 6;
 8002e72:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	da09      	bge.n	8002e8e <lcdCircle+0x132>
 8002e7a:	89fb      	ldrh	r3, [r7, #14]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	897b      	ldrh	r3, [r7, #10]
 8002e82:	4413      	add	r3, r2
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3306      	adds	r3, #6
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	817b      	strh	r3, [r7, #10]
 8002e8c:	e011      	b.n	8002eb2 <lcdCircle+0x156>
		else
		{
			d += (4 * (x - y)) + 10;
 8002e8e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002e92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	897b      	ldrh	r3, [r7, #10]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	330a      	adds	r3, #10
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	817b      	strh	r3, [r7, #10]
			y -= 1;
 8002eaa:	89bb      	ldrh	r3, [r7, #12]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	81bb      	strh	r3, [r7, #12]
		}

		x++;
 8002eb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	81fb      	strh	r3, [r7, #14]
    while(x <= y)
 8002ebe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002ec2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	f77f af63 	ble.w	8002d92 <lcdCircle+0x36>
	}
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}
	...

08002ed8 <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, int16_t x, int16_t y, uint16_t fgColour, uint16_t bgColour)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4604      	mov	r4, r0
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4623      	mov	r3, r4
 8002ee8:	71fb      	strb	r3, [r7, #7]
 8002eea:	4603      	mov	r3, r0
 8002eec:	80bb      	strh	r3, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	807b      	strh	r3, [r7, #2]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	803b      	strh	r3, [r7, #0]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8002ef6:	202a      	movs	r0, #42	@ 0x2a
 8002ef8:	f7ff f9d4 	bl	80022a4 <lcdWriteCommand>
	lcdWriteParameter(x >> 8);
 8002efc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f00:	121b      	asrs	r3, r3, #8
 8002f02:	b21b      	sxth	r3, r3
 8002f04:	b25b      	sxtb	r3, r3
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff f9df 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(x);
 8002f0c:	88bb      	ldrh	r3, [r7, #4]
 8002f0e:	b25b      	sxtb	r3, r3
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff f9da 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter((x+5) >> 8);
 8002f16:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f1a:	3305      	adds	r3, #5
 8002f1c:	121b      	asrs	r3, r3, #8
 8002f1e:	b25b      	sxtb	r3, r3
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff f9d2 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(x+5);
 8002f26:	88bb      	ldrh	r3, [r7, #4]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	3305      	adds	r3, #5
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	b25b      	sxtb	r3, r3
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff f9ca 	bl	80022ca <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8002f36:	202b      	movs	r0, #43	@ 0x2b
 8002f38:	f7ff f9b4 	bl	80022a4 <lcdWriteCommand>
	lcdWriteParameter(y >> 8);
 8002f3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f40:	121b      	asrs	r3, r3, #8
 8002f42:	b21b      	sxth	r3, r3
 8002f44:	b25b      	sxtb	r3, r3
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff f9bf 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(y);
 8002f4c:	887b      	ldrh	r3, [r7, #2]
 8002f4e:	b25b      	sxtb	r3, r3
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff f9ba 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002f56:	2000      	movs	r0, #0
 8002f58:	f7ff f9b7 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0xEF);
 8002f5c:	f06f 0010 	mvn.w	r0, #16
 8002f60:	f7ff f9b3 	bl	80022ca <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8002f64:	202c      	movs	r0, #44	@ 0x2c
 8002f66:	f7ff f99d 	bl	80022a4 <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	73fb      	strb	r3, [r7, #15]
 8002f6e:	e036      	b.n	8002fde <lcdPutCh+0x106>
	{
		for (column = 0; column < 6; column++)
 8002f70:	2300      	movs	r3, #0
 8002f72:	73bb      	strb	r3, [r7, #14]
 8002f74:	e02d      	b.n	8002fd2 <lcdPutCh+0xfa>
		{
			// Calculate the mirrored column index
			uint8_t mirroredColumn = 5 - column;
 8002f76:	7bbb      	ldrb	r3, [r7, #14]
 8002f78:	f1c3 0305 	rsb	r3, r3, #5
 8002f7c:	737b      	strb	r3, [r7, #13]
			// Check the bit corresponding to the current row in the mirrored column
			if ((fontus[character][mirroredColumn]) & (1 << row))
 8002f7e:	79fa      	ldrb	r2, [r7, #7]
 8002f80:	7b79      	ldrb	r1, [r7, #13]
 8002f82:	481b      	ldr	r0, [pc, #108]	@ (8002ff0 <lcdPutCh+0x118>)
 8002f84:	4613      	mov	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	4413      	add	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4403      	add	r3, r0
 8002f8e:	440b      	add	r3, r1
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	7bfb      	ldrb	r3, [r7, #15]
 8002f96:	fa42 f303 	asr.w	r3, r2, r3
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <lcdPutCh+0xe0>
				lcdWriteData(fgColour >> 8, fgColour);
 8002fa2:	883b      	ldrh	r3, [r7, #0]
 8002fa4:	0a1b      	lsrs	r3, r3, #8
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	883a      	ldrh	r2, [r7, #0]
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff f99d 	bl	80022f0 <lcdWriteData>
 8002fb6:	e009      	b.n	8002fcc <lcdPutCh+0xf4>
			else
				lcdWriteData(bgColour >> 8, bgColour);
 8002fb8:	8c3b      	ldrh	r3, [r7, #32]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	8c3a      	ldrh	r2, [r7, #32]
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff f992 	bl	80022f0 <lcdWriteData>
		for (column = 0; column < 6; column++)
 8002fcc:	7bbb      	ldrb	r3, [r7, #14]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	73bb      	strb	r3, [r7, #14]
 8002fd2:	7bbb      	ldrb	r3, [r7, #14]
 8002fd4:	2b05      	cmp	r3, #5
 8002fd6:	d9ce      	bls.n	8002f76 <lcdPutCh+0x9e>
	for (row = 0; row < 8; row++)
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	73fb      	strb	r3, [r7, #15]
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	2b07      	cmp	r3, #7
 8002fe2:	d9c5      	bls.n	8002f70 <lcdPutCh+0x98>
		}
	}
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd90      	pop	{r4, r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	08008310 	.word	0x08008310

08002ff4 <lcdPutChSized>:

void lcdPutChSized(unsigned char character, int16_t x, int16_t y, uint16_t fgColour, uint16_t bgColour, uint8_t size)
{
 8002ff4:	b590      	push	{r4, r7, lr}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	4604      	mov	r4, r0
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	461a      	mov	r2, r3
 8003002:	4623      	mov	r3, r4
 8003004:	71fb      	strb	r3, [r7, #7]
 8003006:	4603      	mov	r3, r0
 8003008:	80bb      	strh	r3, [r7, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	807b      	strh	r3, [r7, #2]
 800300e:	4613      	mov	r3, r2
 8003010:	803b      	strh	r3, [r7, #0]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8003012:	202a      	movs	r0, #42	@ 0x2a
 8003014:	f7ff f946 	bl	80022a4 <lcdWriteCommand>
	lcdWriteParameter(x >> 8);
 8003018:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800301c:	121b      	asrs	r3, r3, #8
 800301e:	b21b      	sxth	r3, r3
 8003020:	b25b      	sxtb	r3, r3
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff f951 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(x);
 8003028:	88bb      	ldrh	r3, [r7, #4]
 800302a:	b25b      	sxtb	r3, r3
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff f94c 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter((x+5*size) >> 8);
 8003032:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003036:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	440b      	add	r3, r1
 8003042:	121b      	asrs	r3, r3, #8
 8003044:	b25b      	sxtb	r3, r3
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff f93f 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(x+5*size);
 800304c:	88bb      	ldrh	r3, [r7, #4]
 800304e:	b2da      	uxtb	r2, r3
 8003050:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003054:	4619      	mov	r1, r3
 8003056:	0089      	lsls	r1, r1, #2
 8003058:	440b      	add	r3, r1
 800305a:	b2db      	uxtb	r3, r3
 800305c:	4413      	add	r3, r2
 800305e:	b2db      	uxtb	r3, r3
 8003060:	b25b      	sxtb	r3, r3
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff f931 	bl	80022ca <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8003068:	202b      	movs	r0, #43	@ 0x2b
 800306a:	f7ff f91b 	bl	80022a4 <lcdWriteCommand>
	lcdWriteParameter(y >> 8);
 800306e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003072:	121b      	asrs	r3, r3, #8
 8003074:	b21b      	sxth	r3, r3
 8003076:	b25b      	sxtb	r3, r3
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff f926 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(y);
 800307e:	887b      	ldrh	r3, [r7, #2]
 8003080:	b25b      	sxtb	r3, r3
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff f921 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8003088:	2000      	movs	r0, #0
 800308a:	f7ff f91e 	bl	80022ca <lcdWriteParameter>
	lcdWriteParameter(0xEF);
 800308e:	f06f 0010 	mvn.w	r0, #16
 8003092:	f7ff f91a 	bl	80022ca <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8003096:	202c      	movs	r0, #44	@ 0x2c
 8003098:	f7ff f904 	bl	80022a4 <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8*size; row+=size)
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]
 80030a0:	e067      	b.n	8003172 <lcdPutChSized+0x17e>
	{
		for (column = 0; column < 6*size; column+=size)
 80030a2:	2300      	movs	r3, #0
 80030a4:	73bb      	strb	r3, [r7, #14]
 80030a6:	e056      	b.n	8003156 <lcdPutChSized+0x162>
		{
			uint8_t mirroredColumn = 5*size - column;
 80030a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80030ac:	461a      	mov	r2, r3
 80030ae:	0092      	lsls	r2, r2, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	7bbb      	ldrb	r3, [r7, #14]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	737b      	strb	r3, [r7, #13]
			if ((fontus[character][(uint8_t)(mirroredColumn/size)]) & (1 << (uint8_t)(row/size)))
 80030ba:	79fa      	ldrb	r2, [r7, #7]
 80030bc:	7b79      	ldrb	r1, [r7, #13]
 80030be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80030c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	4618      	mov	r0, r3
 80030ca:	492f      	ldr	r1, [pc, #188]	@ (8003188 <lcdPutChSized+0x194>)
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	440b      	add	r3, r1
 80030d6:	4403      	add	r3, r0
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	4619      	mov	r1, r3
 80030dc:	7bfa      	ldrb	r2, [r7, #15]
 80030de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80030e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	fa41 f303 	asr.w	r3, r1, r3
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d02b      	beq.n	800314c <lcdPutChSized+0x158>
				lcdFilledRectangle(x+column, y+row, x+column+size-1, y+row+size-1, fgColour);
 80030f4:	7bbb      	ldrb	r3, [r7, #14]
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	88bb      	ldrh	r3, [r7, #4]
 80030fa:	4413      	add	r3, r2
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	b218      	sxth	r0, r3
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	b29a      	uxth	r2, r3
 8003104:	887b      	ldrh	r3, [r7, #2]
 8003106:	4413      	add	r3, r2
 8003108:	b29b      	uxth	r3, r3
 800310a:	b219      	sxth	r1, r3
 800310c:	7bbb      	ldrb	r3, [r7, #14]
 800310e:	b29a      	uxth	r2, r3
 8003110:	88bb      	ldrh	r3, [r7, #4]
 8003112:	4413      	add	r3, r2
 8003114:	b29a      	uxth	r2, r3
 8003116:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800311a:	b29b      	uxth	r3, r3
 800311c:	4413      	add	r3, r2
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29b      	uxth	r3, r3
 8003124:	b21c      	sxth	r4, r3
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	b29a      	uxth	r2, r3
 800312a:	887b      	ldrh	r3, [r7, #2]
 800312c:	4413      	add	r3, r2
 800312e:	b29a      	uxth	r2, r3
 8003130:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003134:	b29b      	uxth	r3, r3
 8003136:	4413      	add	r3, r2
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29b      	uxth	r3, r3
 800313e:	b21a      	sxth	r2, r3
 8003140:	883b      	ldrh	r3, [r7, #0]
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	4622      	mov	r2, r4
 8003148:	f7ff fd68 	bl	8002c1c <lcdFilledRectangle>
		for (column = 0; column < 6*size; column+=size)
 800314c:	7bba      	ldrb	r2, [r7, #14]
 800314e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003152:	4413      	add	r3, r2
 8003154:	73bb      	strb	r3, [r7, #14]
 8003156:	7bb9      	ldrb	r1, [r7, #14]
 8003158:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800315c:	4613      	mov	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	4413      	add	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	4299      	cmp	r1, r3
 8003166:	db9f      	blt.n	80030a8 <lcdPutChSized+0xb4>
	for (row = 0; row < 8*size; row+=size)
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800316e:	4413      	add	r3, r2
 8003170:	73fb      	strb	r3, [r7, #15]
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	429a      	cmp	r2, r3
 800317c:	db91      	blt.n	80030a2 <lcdPutChSized+0xae>
		}
	}
}
 800317e:	bf00      	nop
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	bd90      	pop	{r4, r7, pc}
 8003188:	08008310 	.word	0x08008310

0800318c <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
 8003196:	460b      	mov	r3, r1
 8003198:	71bb      	strb	r3, [r7, #6]
 800319a:	4613      	mov	r3, r2
 800319c:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 800319e:	797b      	ldrb	r3, [r7, #5]
 80031a0:	02db      	lsls	r3, r3, #11
 80031a2:	b21a      	sxth	r2, r3
 80031a4:	79bb      	ldrb	r3, [r7, #6]
 80031a6:	019b      	lsls	r3, r3, #6
 80031a8:	b21b      	sxth	r3, r3
 80031aa:	4313      	orrs	r3, r2
 80031ac:	b21a      	sxth	r2, r3
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	b21b      	sxth	r3, r3
 80031b2:	4313      	orrs	r3, r2
 80031b4:	b21b      	sxth	r3, r3
 80031b6:	b29b      	uxth	r3, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <lcdPutS>:
// it easy to place text
uint8_t lcdTextY(uint8_t y) { return y*8; }

// Plot a string of characters to the LCD
void lcdPutS(const char *string, int16_t x, int16_t y, uint16_t fgColour, uint16_t bgColour)
{
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b089      	sub	sp, #36	@ 0x24
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	4608      	mov	r0, r1
 80031ce:	4611      	mov	r1, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	817b      	strh	r3, [r7, #10]
 80031d6:	460b      	mov	r3, r1
 80031d8:	813b      	strh	r3, [r7, #8]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
	int16_t origin = x;
 80031de:	897b      	ldrh	r3, [r7, #10]
 80031e0:	82bb      	strh	r3, [r7, #20]
	int16_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 80031e2:	2300      	movs	r3, #0
 80031e4:	82fb      	strh	r3, [r7, #22]
 80031e6:	e026      	b.n	8003236 <lcdPutS+0x72>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x < 10)
 80031e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031ec:	2b09      	cmp	r3, #9
 80031ee:	dc05      	bgt.n	80031fc <lcdPutS+0x38>
		{
			x = origin;
 80031f0:	8abb      	ldrh	r3, [r7, #20]
 80031f2:	817b      	strh	r3, [r7, #10]
			y += 8;
 80031f4:	893b      	ldrh	r3, [r7, #8]
 80031f6:	3308      	adds	r3, #8
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	813b      	strh	r3, [r7, #8]
		}

		// If we move past the bottom of the screen just exit
		if (y > 230) break;
 80031fc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003200:	2be6      	cmp	r3, #230	@ 0xe6
 8003202:	dc21      	bgt.n	8003248 <lcdPutS+0x84>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 8003204:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	4413      	add	r3, r2
 800320c:	7818      	ldrb	r0, [r3, #0]
 800320e:	88fc      	ldrh	r4, [r7, #6]
 8003210:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003214:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003218:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	4623      	mov	r3, r4
 800321e:	f7ff fe5b 	bl	8002ed8 <lcdPutCh>
		x -= 6;
 8003222:	897b      	ldrh	r3, [r7, #10]
 8003224:	3b06      	subs	r3, #6
 8003226:	b29b      	uxth	r3, r3
 8003228:	817b      	strh	r3, [r7, #10]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 800322a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800322e:	b29b      	uxth	r3, r3
 8003230:	3301      	adds	r3, #1
 8003232:	b29b      	uxth	r3, r3
 8003234:	82fb      	strh	r3, [r7, #22]
 8003236:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f7fc ffc8 	bl	80001d0 <strlen>
 8003240:	4603      	mov	r3, r0
 8003242:	429c      	cmp	r4, r3
 8003244:	d3d0      	bcc.n	80031e8 <lcdPutS+0x24>
	}
}
 8003246:	e000      	b.n	800324a <lcdPutS+0x86>
		if (y > 230) break;
 8003248:	bf00      	nop
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	bd90      	pop	{r4, r7, pc}

08003252 <lcdPutSSized>:

// Plot a string of characters to the LCD
void lcdPutSSized(const char *string, int16_t x, int16_t y, uint16_t fgColour, uint16_t bgColour, uint8_t size)
{
 8003252:	b590      	push	{r4, r7, lr}
 8003254:	b089      	sub	sp, #36	@ 0x24
 8003256:	af02      	add	r7, sp, #8
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	4608      	mov	r0, r1
 800325c:	4611      	mov	r1, r2
 800325e:	461a      	mov	r2, r3
 8003260:	4603      	mov	r3, r0
 8003262:	817b      	strh	r3, [r7, #10]
 8003264:	460b      	mov	r3, r1
 8003266:	813b      	strh	r3, [r7, #8]
 8003268:	4613      	mov	r3, r2
 800326a:	80fb      	strh	r3, [r7, #6]
	x = x-size*6;
 800326c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003270:	b29b      	uxth	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	897b      	ldrh	r3, [r7, #10]
 800327e:	4413      	add	r3, r2
 8003280:	b29b      	uxth	r3, r3
 8003282:	817b      	strh	r3, [r7, #10]
	int16_t origin = x;
 8003284:	897b      	ldrh	r3, [r7, #10]
 8003286:	82bb      	strh	r3, [r7, #20]
	int16_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8003288:	2300      	movs	r3, #0
 800328a:	82fb      	strh	r3, [r7, #22]
 800328c:	e056      	b.n	800333c <lcdPutSSized+0xea>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x < 1*size)
 800328e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003292:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003296:	429a      	cmp	r2, r3
 8003298:	da0a      	bge.n	80032b0 <lcdPutSSized+0x5e>
		{
			x = origin;
 800329a:	8abb      	ldrh	r3, [r7, #20]
 800329c:	817b      	strh	r3, [r7, #10]
			y += 8*size;
 800329e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	893b      	ldrh	r3, [r7, #8]
 80032aa:	4413      	add	r3, r2
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	813b      	strh	r3, [r7, #8]
		}

		// If we move past the bottom of the screen just exit
		if (y > (239-6*size)) break;
 80032b0:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80032b4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80032b8:	4613      	mov	r3, r2
 80032ba:	0092      	lsls	r2, r2, #2
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	33ef      	adds	r3, #239	@ 0xef
 80032c2:	4299      	cmp	r1, r3
 80032c4:	dc43      	bgt.n	800334e <lcdPutSSized+0xfc>

		// Plot the current character
		lcdPutChSized(string[characterNumber], x, y, fgColour, bgColour, size);
 80032c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4413      	add	r3, r2
 80032ce:	7818      	ldrb	r0, [r3, #0]
 80032d0:	88fc      	ldrh	r4, [r7, #6]
 80032d2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80032d6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80032da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	4623      	mov	r3, r4
 80032e6:	f7ff fe85 	bl	8002ff4 <lcdPutChSized>
		if ((x-6*size)>0) x -= 6*size;
 80032ea:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80032ee:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80032f2:	4613      	mov	r3, r2
 80032f4:	0092      	lsls	r2, r2, #2
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	440b      	add	r3, r1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	dd0c      	ble.n	800331a <lcdPutSSized+0xc8>
 8003300:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003304:	b29b      	uxth	r3, r3
 8003306:	461a      	mov	r2, r3
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	897b      	ldrh	r3, [r7, #10]
 8003312:	4413      	add	r3, r2
 8003314:	b29b      	uxth	r3, r3
 8003316:	817b      	strh	r3, [r7, #10]
 8003318:	e00a      	b.n	8003330 <lcdPutSSized+0xde>
		else
		{
			x = origin;
 800331a:	8abb      	ldrh	r3, [r7, #20]
 800331c:	817b      	strh	r3, [r7, #10]
			y += 8*size;
 800331e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003322:	b29b      	uxth	r3, r3
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	b29a      	uxth	r2, r3
 8003328:	893b      	ldrh	r3, [r7, #8]
 800332a:	4413      	add	r3, r2
 800332c:	b29b      	uxth	r3, r3
 800332e:	813b      	strh	r3, [r7, #8]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8003330:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003334:	b29b      	uxth	r3, r3
 8003336:	3301      	adds	r3, #1
 8003338:	b29b      	uxth	r3, r3
 800333a:	82fb      	strh	r3, [r7, #22]
 800333c:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f7fc ff45 	bl	80001d0 <strlen>
 8003346:	4603      	mov	r3, r0
 8003348:	429c      	cmp	r4, r3
 800334a:	d3a0      	bcc.n	800328e <lcdPutSSized+0x3c>
		}
	}
}
 800334c:	e000      	b.n	8003350 <lcdPutSSized+0xfe>
		if (y > (239-6*size)) break;
 800334e:	bf00      	nop
}
 8003350:	bf00      	nop
 8003352:	371c      	adds	r7, #28
 8003354:	46bd      	mov	sp, r7
 8003356:	bd90      	pop	{r4, r7, pc}

08003358 <threeDto2D>:

uint8_t threeDto2D(int16_t *points, float *playerCoord, float alpha, float *twoDCoords) {
 8003358:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800335c:	b090      	sub	sp, #64	@ 0x40
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	ed87 0a01 	vstr	s0, [r7, #4]
 8003368:	603a      	str	r2, [r7, #0]
	//points je 1D obsahuje X Y Z bodu
	float_t dx = (float_t)((float)(points[0]) - playerCoord[0]);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003370:	ee07 3a90 	vmov	s15, r3
 8003374:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	edd3 7a00 	vldr	s15, [r3]
 800337e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003382:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	float_t dy = (float_t)((float)(points[1]) - playerCoord[1]);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3302      	adds	r3, #2
 800338a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800338e:	ee07 3a90 	vmov	s15, r3
 8003392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	3304      	adds	r3, #4
 800339a:	edd3 7a00 	vldr	s15, [r3]
 800339e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033a2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float_t dz = (float_t)((float)(points[2]) - playerCoord[2]);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3304      	adds	r3, #4
 80033aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	3308      	adds	r3, #8
 80033ba:	edd3 7a00 	vldr	s15, [r3]
 80033be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	//float_t vz = sqrt(dx^2 + dy^2 + dz^2);	//vzdialenost od bodu euklidovska
	float_t vzh = sqrt((dx*dx) + (dy*dy));		//vzdialenost od bodu na xy osi
 80033c6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80033ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80033ce:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80033d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80033d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033da:	ee17 0a90 	vmov	r0, s15
 80033de:	f7fd f8b3 	bl	8000548 <__aeabi_f2d>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	ec43 2b10 	vmov	d0, r2, r3
 80033ea:	f003 fa4f 	bl	800688c <sqrt>
 80033ee:	ec53 2b10 	vmov	r2, r3, d0
 80033f2:	4610      	mov	r0, r2
 80033f4:	4619      	mov	r1, r3
 80033f6:	f7fd fbd7 	bl	8000ba8 <__aeabi_d2f>
 80033fa:	4603      	mov	r3, r0
 80033fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	//alfa je vlastne horizontalne natocenie kamery
	//beta je absolutne horizontalne natocenie telesa voci kamere
	float_t beta = atan(dy/dx) + (dx<=0)*3.1416*((alpha>0)-(alpha<=0));
 80033fe:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003402:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003406:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800340a:	ee16 0a90 	vmov	r0, s13
 800340e:	f7fd f89b 	bl	8000548 <__aeabi_f2d>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	ec43 2b10 	vmov	d0, r2, r3
 800341a:	f003 fa65 	bl	80068e8 <atan>
 800341e:	ec59 8b10 	vmov	r8, r9, d0
 8003422:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003426:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800342a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342e:	d803      	bhi.n	8003438 <threeDto2D+0xe0>
 8003430:	f04f 0000 	mov.w	r0, #0
 8003434:	49bc      	ldr	r1, [pc, #752]	@ (8003728 <threeDto2D+0x3d0>)
 8003436:	e003      	b.n	8003440 <threeDto2D+0xe8>
 8003438:	f04f 0000 	mov.w	r0, #0
 800343c:	f04f 0100 	mov.w	r1, #0
 8003440:	a3ad      	add	r3, pc, #692	@ (adr r3, 80036f8 <threeDto2D+0x3a0>)
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	f7fd f8d7 	bl	80005f8 <__aeabi_dmul>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4614      	mov	r4, r2
 8003450:	461d      	mov	r5, r3
 8003452:	edd7 7a01 	vldr	s15, [r7, #4]
 8003456:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	bfcc      	ite	gt
 8003460:	2301      	movgt	r3, #1
 8003462:	2300      	movle	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	edd7 7a01 	vldr	s15, [r7, #4]
 800346c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003474:	bf94      	ite	ls
 8003476:	2301      	movls	r3, #1
 8003478:	2300      	movhi	r3, #0
 800347a:	b2db      	uxtb	r3, r3
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd f850 	bl	8000524 <__aeabi_i2d>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4620      	mov	r0, r4
 800348a:	4629      	mov	r1, r5
 800348c:	f7fd f8b4 	bl	80005f8 <__aeabi_dmul>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4640      	mov	r0, r8
 8003496:	4649      	mov	r1, r9
 8003498:	f7fc fef8 	bl	800028c <__adddf3>
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	f7fd fb80 	bl	8000ba8 <__aeabi_d2f>
 80034a8:	4603      	mov	r3, r0
 80034aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	float_t gamma = beta - alpha;	//relativne horizontalne natocenie telesa voci kamere
 80034ac:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80034b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80034b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	uint8_t success = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if((gamma>-1.5707)&&(gamma<1.5707)) {
 80034c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80034c4:	f7fd f840 	bl	8000548 <__aeabi_f2d>
 80034c8:	a38d      	add	r3, pc, #564	@ (adr r3, 8003700 <threeDto2D+0x3a8>)
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	f7fd fb23 	bl	8000b18 <__aeabi_dcmpgt>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00d      	beq.n	80034f4 <threeDto2D+0x19c>
 80034d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80034da:	f7fd f835 	bl	8000548 <__aeabi_f2d>
 80034de:	a38a      	add	r3, pc, #552	@ (adr r3, 8003708 <threeDto2D+0x3b0>)
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f7fd fafa 	bl	8000adc <__aeabi_dcmplt>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <threeDto2D+0x19c>
		success = 1;	//ak je bod za kamerou, tak je to zle, este som to nedomyslel
 80034ee:	2301      	movs	r3, #1
 80034f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	float_t beta2 = atan(dz/vzh);	//kolmost telesa voci kamere
 80034f4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80034f8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80034fc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003500:	ee16 0a90 	vmov	r0, s13
 8003504:	f7fd f820 	bl	8000548 <__aeabi_f2d>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	ec43 2b10 	vmov	d0, r2, r3
 8003510:	f003 f9ea 	bl	80068e8 <atan>
 8003514:	ec53 2b10 	vmov	r2, r3, d0
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	f7fd fb44 	bl	8000ba8 <__aeabi_d2f>
 8003520:	4603      	mov	r3, r0
 8003522:	623b      	str	r3, [r7, #32]

	//beta3 - absolutna kolmost, gamma3 - relativna kolmost telesa voci kamere
	float_t beta3 = atan(dz/(vzh*cos(gamma))) + ((-1.57 > gamma)||(gamma > 1.57))*3.1416*((dz>0)-(dz<=0));
 8003524:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003526:	f7fd f80f 	bl	8000548 <__aeabi_f2d>
 800352a:	4604      	mov	r4, r0
 800352c:	460d      	mov	r5, r1
 800352e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003530:	f7fd f80a 	bl	8000548 <__aeabi_f2d>
 8003534:	4680      	mov	r8, r0
 8003536:	4689      	mov	r9, r1
 8003538:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800353a:	f7fd f805 	bl	8000548 <__aeabi_f2d>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	ec43 2b10 	vmov	d0, r2, r3
 8003546:	f003 fb67 	bl	8006c18 <cos>
 800354a:	ec53 2b10 	vmov	r2, r3, d0
 800354e:	4640      	mov	r0, r8
 8003550:	4649      	mov	r1, r9
 8003552:	f7fd f851 	bl	80005f8 <__aeabi_dmul>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4620      	mov	r0, r4
 800355c:	4629      	mov	r1, r5
 800355e:	f7fd f975 	bl	800084c <__aeabi_ddiv>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	ec43 2b17 	vmov	d7, r2, r3
 800356a:	eeb0 0a47 	vmov.f32	s0, s14
 800356e:	eef0 0a67 	vmov.f32	s1, s15
 8003572:	f003 f9b9 	bl	80068e8 <atan>
 8003576:	ec59 8b10 	vmov	r8, r9, d0
 800357a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800357c:	f7fc ffe4 	bl	8000548 <__aeabi_f2d>
 8003580:	a363      	add	r3, pc, #396	@ (adr r3, 8003710 <threeDto2D+0x3b8>)
 8003582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003586:	f7fd faa9 	bl	8000adc <__aeabi_dcmplt>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <threeDto2D+0x24e>
 8003590:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003592:	f7fc ffd9 	bl	8000548 <__aeabi_f2d>
 8003596:	a360      	add	r3, pc, #384	@ (adr r3, 8003718 <threeDto2D+0x3c0>)
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	f7fd fabc 	bl	8000b18 <__aeabi_dcmpgt>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <threeDto2D+0x252>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <threeDto2D+0x254>
 80035aa:	2300      	movs	r3, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fc ffb9 	bl	8000524 <__aeabi_i2d>
 80035b2:	a351      	add	r3, pc, #324	@ (adr r3, 80036f8 <threeDto2D+0x3a0>)
 80035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b8:	f7fd f81e 	bl	80005f8 <__aeabi_dmul>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4614      	mov	r4, r2
 80035c2:	461d      	mov	r5, r3
 80035c4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80035c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d0:	bfcc      	ite	gt
 80035d2:	2301      	movgt	r3, #1
 80035d4:	2300      	movle	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80035de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e6:	bf94      	ite	ls
 80035e8:	2301      	movls	r3, #1
 80035ea:	2300      	movhi	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fc ff97 	bl	8000524 <__aeabi_i2d>
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4620      	mov	r0, r4
 80035fc:	4629      	mov	r1, r5
 80035fe:	f7fc fffb 	bl	80005f8 <__aeabi_dmul>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4640      	mov	r0, r8
 8003608:	4649      	mov	r1, r9
 800360a:	f7fc fe3f 	bl	800028c <__adddf3>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	f7fd fac7 	bl	8000ba8 <__aeabi_d2f>
 800361a:	4603      	mov	r3, r0
 800361c:	61fb      	str	r3, [r7, #28]
	float_t alfa2 = 0; //zatial nie je potreba
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	61bb      	str	r3, [r7, #24]
	float_t gamma3 = beta3 - alfa2;
 8003624:	ed97 7a07 	vldr	s14, [r7, #28]
 8003628:	edd7 7a06 	vldr	s15, [r7, #24]
 800362c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003630:	edc7 7a05 	vstr	s15, [r7, #20]

	// zo ziskanych uhlov vypocitame suradnice na obrazovke, 2 najdolezitejsie vzorce
	//twoDCoords[0] = 160+160*( 1.27 * sin(gamma) * cos(beta2) );	//povodne
	//twoDCoords[0] = 160+160*( 1.7 *fabs(gamma)*sin(gamma) * cos(beta2) ); //nieco je v pohode, ale nie
	twoDCoords[0] = 160+160*( 1.27 * gamma * cos(beta2) );	//tiez moze byt
 8003634:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003636:	f7fc ff87 	bl	8000548 <__aeabi_f2d>
 800363a:	a339      	add	r3, pc, #228	@ (adr r3, 8003720 <threeDto2D+0x3c8>)
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	f7fc ffda 	bl	80005f8 <__aeabi_dmul>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4614      	mov	r4, r2
 800364a:	461d      	mov	r5, r3
 800364c:	6a38      	ldr	r0, [r7, #32]
 800364e:	f7fc ff7b 	bl	8000548 <__aeabi_f2d>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	ec43 2b10 	vmov	d0, r2, r3
 800365a:	f003 fadd 	bl	8006c18 <cos>
 800365e:	ec53 2b10 	vmov	r2, r3, d0
 8003662:	4620      	mov	r0, r4
 8003664:	4629      	mov	r1, r5
 8003666:	f7fc ffc7 	bl	80005f8 <__aeabi_dmul>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4610      	mov	r0, r2
 8003670:	4619      	mov	r1, r3
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	4b2d      	ldr	r3, [pc, #180]	@ (800372c <threeDto2D+0x3d4>)
 8003678:	f7fc ffbe 	bl	80005f8 <__aeabi_dmul>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4610      	mov	r0, r2
 8003682:	4619      	mov	r1, r3
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	4b28      	ldr	r3, [pc, #160]	@ (800372c <threeDto2D+0x3d4>)
 800368a:	f7fc fdff 	bl	800028c <__adddf3>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4610      	mov	r0, r2
 8003694:	4619      	mov	r1, r3
 8003696:	f7fd fa87 	bl	8000ba8 <__aeabi_d2f>
 800369a:	4602      	mov	r2, r0
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	601a      	str	r2, [r3, #0]
	//twoDCoords[0] = 160+160*( 1.27 * gamma ); //jednoduche a funguje
	twoDCoords[1] = 120-160*( gamma3*1.27 ); //1.27
 80036a0:	6978      	ldr	r0, [r7, #20]
 80036a2:	f7fc ff51 	bl	8000548 <__aeabi_f2d>
 80036a6:	a31e      	add	r3, pc, #120	@ (adr r3, 8003720 <threeDto2D+0x3c8>)
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f7fc ffa4 	bl	80005f8 <__aeabi_dmul>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4610      	mov	r0, r2
 80036b6:	4619      	mov	r1, r3
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <threeDto2D+0x3d4>)
 80036be:	f7fc ff9b 	bl	80005f8 <__aeabi_dmul>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	f04f 0000 	mov.w	r0, #0
 80036ca:	4919      	ldr	r1, [pc, #100]	@ (8003730 <threeDto2D+0x3d8>)
 80036cc:	f7fc fddc 	bl	8000288 <__aeabi_dsub>
 80036d0:	4602      	mov	r2, r0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	1d1c      	adds	r4, r3, #4
 80036dc:	f7fd fa64 	bl	8000ba8 <__aeabi_d2f>
 80036e0:	4603      	mov	r3, r0
 80036e2:	6023      	str	r3, [r4, #0]

	return success;
 80036e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3740      	adds	r7, #64	@ 0x40
 80036ec:	46bd      	mov	sp, r7
 80036ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036f2:	bf00      	nop
 80036f4:	f3af 8000 	nop.w
 80036f8:	2e48e8a7 	.word	0x2e48e8a7
 80036fc:	400921ff 	.word	0x400921ff
 8003700:	52bd3c36 	.word	0x52bd3c36
 8003704:	bff92196 	.word	0xbff92196
 8003708:	52bd3c36 	.word	0x52bd3c36
 800370c:	3ff92196 	.word	0x3ff92196
 8003710:	51eb851f 	.word	0x51eb851f
 8003714:	bff91eb8 	.word	0xbff91eb8
 8003718:	51eb851f 	.word	0x51eb851f
 800371c:	3ff91eb8 	.word	0x3ff91eb8
 8003720:	851eb852 	.word	0x851eb852
 8003724:	3ff451eb 	.word	0x3ff451eb
 8003728:	3ff00000 	.word	0x3ff00000
 800372c:	40640000 	.word	0x40640000
 8003730:	405e0000 	.word	0x405e0000

08003734 <lcd3DPolyline>:
			break;
		}
	}
}

void lcd3DPolyline(int16_t *points, int16_t sides, uint16_t colour, float px, float py, float pz, float alpha, int8_t dotted, int8_t step){
 8003734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003738:	b093      	sub	sp, #76	@ 0x4c
 800373a:	af00      	add	r7, sp, #0
 800373c:	61f8      	str	r0, [r7, #28]
 800373e:	4608      	mov	r0, r1
 8003740:	4611      	mov	r1, r2
 8003742:	ed87 0a05 	vstr	s0, [r7, #20]
 8003746:	edc7 0a04 	vstr	s1, [r7, #16]
 800374a:	ed87 1a03 	vstr	s2, [r7, #12]
 800374e:	edc7 1a02 	vstr	s3, [r7, #8]
 8003752:	461a      	mov	r2, r3
 8003754:	4603      	mov	r3, r0
 8003756:	837b      	strh	r3, [r7, #26]
 8003758:	460b      	mov	r3, r1
 800375a:	833b      	strh	r3, [r7, #24]
 800375c:	4613      	mov	r3, r2
 800375e:	71fb      	strb	r3, [r7, #7]
 8003760:	466b      	mov	r3, sp
 8003762:	461e      	mov	r6, r3
	int16_t polygonFormat[2*sides];
 8003764:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003768:	0059      	lsls	r1, r3, #1
 800376a:	1e4b      	subs	r3, r1, #1
 800376c:	643b      	str	r3, [r7, #64]	@ 0x40
 800376e:	460a      	mov	r2, r1
 8003770:	2300      	movs	r3, #0
 8003772:	4690      	mov	r8, r2
 8003774:	4699      	mov	r9, r3
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8003782:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8003786:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800378a:	460a      	mov	r2, r1
 800378c:	2300      	movs	r3, #0
 800378e:	4614      	mov	r4, r2
 8003790:	461d      	mov	r5, r3
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	012b      	lsls	r3, r5, #4
 800379c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80037a0:	0122      	lsls	r2, r4, #4
 80037a2:	460b      	mov	r3, r1
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	3307      	adds	r3, #7
 80037a8:	08db      	lsrs	r3, r3, #3
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	ebad 0d03 	sub.w	sp, sp, r3
 80037b0:	466b      	mov	r3, sp
 80037b2:	3301      	adds	r3, #1
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float_t playerCoord[3] = {px, py, pz};
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	633b      	str	r3, [r7, #48]	@ 0x30
	float twoDCoords[2];  // Temporary array for results
	uint8_t success = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	for(int16_t i=0; i<sides; i++){
 80037cc:	2300      	movs	r3, #0
 80037ce:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80037d2:	e03c      	b.n	800384e <lcd3DPolyline+0x11a>
		success = threeDto2D(&points[3 * i], playerCoord, alpha, twoDCoords);
 80037d4:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 80037d8:	4613      	mov	r3, r2
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4413      	add	r3, r2
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	461a      	mov	r2, r3
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	4413      	add	r3, r2
 80037e6:	f107 0220 	add.w	r2, r7, #32
 80037ea:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80037ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fdb0 	bl	8003358 <threeDto2D>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		if(!success) return;	//if any point is behing camera it doesn't plot the object
 80037fe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <lcd3DPolyline+0xd6>
 8003806:	46b5      	mov	sp, r6
 8003808:	e07b      	b.n	8003902 <lcd3DPolyline+0x1ce>
		polygonFormat[2 * i] = (int16_t)(twoDCoords[0]);
 800380a:	edd7 7a08 	vldr	s15, [r7, #32]
 800380e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8003812:	005a      	lsls	r2, r3, #1
 8003814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003818:	ee17 3a90 	vmov	r3, s15
 800381c:	b219      	sxth	r1, r3
 800381e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003820:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		polygonFormat[2 * i + 1] = (int16_t)(twoDCoords[1]);
 8003824:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003828:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003834:	ee17 3a90 	vmov	r3, s15
 8003838:	b219      	sxth	r1, r3
 800383a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800383c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int16_t i=0; i<sides; i++){
 8003840:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8003844:	b29b      	uxth	r3, r3
 8003846:	3301      	adds	r3, #1
 8003848:	b29b      	uxth	r3, r3
 800384a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800384e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 8003852:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003856:	429a      	cmp	r2, r3
 8003858:	dbbc      	blt.n	80037d4 <lcd3DPolyline+0xa0>
	}
	int16_t xRes = 320;
 800385a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800385e:	873b      	strh	r3, [r7, #56]	@ 0x38
	int16_t yRes = 240;
 8003860:	23f0      	movs	r3, #240	@ 0xf0
 8003862:	86fb      	strh	r3, [r7, #54]	@ 0x36
	for(int8_t i=0; i<sides; i++) {
 8003864:	2300      	movs	r3, #0
 8003866:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 800386a:	e042      	b.n	80038f2 <lcd3DPolyline+0x1be>
		if( (polygonFormat[2*i] > 0)&&(polygonFormat[2*i] < xRes)&&(polygonFormat[2*i+1] > 0)&&(polygonFormat[2*i+1] < yRes) ) {
 800386c:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8003870:	005a      	lsls	r2, r3, #1
 8003872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003874:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003878:	2b00      	cmp	r3, #0
 800387a:	dd33      	ble.n	80038e4 <lcd3DPolyline+0x1b0>
 800387c:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8003880:	005a      	lsls	r2, r3, #1
 8003882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003884:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003888:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 800388c:	429a      	cmp	r2, r3
 800388e:	dd29      	ble.n	80038e4 <lcd3DPolyline+0x1b0>
 8003890:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800389a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	dd20      	ble.n	80038e4 <lcd3DPolyline+0x1b0>
 80038a2:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ac:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80038b0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80038b4:	429a      	cmp	r2, r3
 80038b6:	dd15      	ble.n	80038e4 <lcd3DPolyline+0x1b0>
			if(!dotted) {
 80038b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d107      	bne.n	80038d0 <lcd3DPolyline+0x19c>
				lcdPolyline( polygonFormat, sides, colour);
 80038c0:	8b3a      	ldrh	r2, [r7, #24]
 80038c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80038c6:	4619      	mov	r1, r3
 80038c8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80038ca:	f7ff f8c5 	bl	8002a58 <lcdPolyline>
			}
			else{
				lcdDottedPolyline( polygonFormat, sides, colour, step);
			}
			break;
 80038ce:	e017      	b.n	8003900 <lcd3DPolyline+0x1cc>
				lcdDottedPolyline( polygonFormat, sides, colour, step);
 80038d0:	f997 3068 	ldrsb.w	r3, [r7, #104]	@ 0x68
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	8b3a      	ldrh	r2, [r7, #24]
 80038d8:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 80038dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80038de:	f7ff f905 	bl	8002aec <lcdDottedPolyline>
			break;
 80038e2:	e00d      	b.n	8003900 <lcd3DPolyline+0x1cc>
	for(int8_t i=0; i<sides; i++) {
 80038e4:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	3301      	adds	r3, #1
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80038f2:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 80038f6:	b21b      	sxth	r3, r3
 80038f8:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	dcb5      	bgt.n	800386c <lcd3DPolyline+0x138>
 8003900:	46b5      	mov	sp, r6
		}
	}
}
 8003902:	374c      	adds	r7, #76	@ 0x4c
 8003904:	46bd      	mov	sp, r7
 8003906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800390c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800391c:	4b0c      	ldr	r3, [pc, #48]	@ (8003950 <__NVIC_SetPriorityGrouping+0x44>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003928:	4013      	ands	r3, r2
 800392a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003934:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800393c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800393e:	4a04      	ldr	r2, [pc, #16]	@ (8003950 <__NVIC_SetPriorityGrouping+0x44>)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	60d3      	str	r3, [r2, #12]
}
 8003944:	bf00      	nop
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800395c:	4b06      	ldr	r3, [pc, #24]	@ (8003978 <LL_FLASH_SetLatency+0x24>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 0207 	bic.w	r2, r3, #7
 8003964:	4904      	ldr	r1, [pc, #16]	@ (8003978 <LL_FLASH_SetLatency+0x24>)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4313      	orrs	r3, r2
 800396a:	600b      	str	r3, [r1, #0]
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	40022000 	.word	0x40022000

0800397c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003980:	4b04      	ldr	r3, [pc, #16]	@ (8003994 <LL_FLASH_GetLatency+0x18>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0307 	and.w	r3, r3, #7
}
 8003988:	4618      	mov	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40022000 	.word	0x40022000

08003998 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80039a0:	4b08      	ldr	r3, [pc, #32]	@ (80039c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80039a2:	69da      	ldr	r2, [r3, #28]
 80039a4:	4907      	ldr	r1, [pc, #28]	@ (80039c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80039ac:	4b05      	ldr	r3, [pc, #20]	@ (80039c4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80039ae:	69da      	ldr	r2, [r3, #28]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4013      	ands	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039b6:	68fb      	ldr	r3, [r7, #12]
}
 80039b8:	bf00      	nop
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	40021000 	.word	0x40021000

080039c8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80039d0:	4b08      	ldr	r3, [pc, #32]	@ (80039f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80039d2:	699a      	ldr	r2, [r3, #24]
 80039d4:	4907      	ldr	r1, [pc, #28]	@ (80039f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4313      	orrs	r3, r2
 80039da:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80039dc:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80039de:	699a      	ldr	r2, [r3, #24]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4013      	ands	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039e6:	68fb      	ldr	r3, [r7, #12]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	40021000 	.word	0x40021000

080039f8 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d106      	bne.n	8003a14 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8003a06:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <LL_SYSTICK_SetClkSource+0x34>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a08      	ldr	r2, [pc, #32]	@ (8003a2c <LL_SYSTICK_SetClkSource+0x34>)
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8003a12:	e005      	b.n	8003a20 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8003a14:	4b05      	ldr	r3, [pc, #20]	@ (8003a2c <LL_SYSTICK_SetClkSource+0x34>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a04      	ldr	r2, [pc, #16]	@ (8003a2c <LL_SYSTICK_SetClkSource+0x34>)
 8003a1a:	f023 0304 	bic.w	r3, r3, #4
 8003a1e:	6013      	str	r3, [r2, #0]
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	e000e010 	.word	0xe000e010

08003a30 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a34:	4b05      	ldr	r3, [pc, #20]	@ (8003a4c <LL_RCC_HSI_Enable+0x1c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a04      	ldr	r2, [pc, #16]	@ (8003a4c <LL_RCC_HSI_Enable+0x1c>)
 8003a3a:	f043 0301 	orr.w	r3, r3, #1
 8003a3e:	6013      	str	r3, [r2, #0]
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40021000 	.word	0x40021000

08003a50 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003a54:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <LL_RCC_HSI_IsReady+0x20>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	bf0c      	ite	eq
 8003a60:	2301      	moveq	r3, #1
 8003a62:	2300      	movne	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	40021000 	.word	0x40021000

08003a74 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8003a7c:	4b07      	ldr	r3, [pc, #28]	@ (8003a9c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4904      	ldr	r1, [pc, #16]	@ (8003a9c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000

08003aa0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003aa8:	4b06      	ldr	r3, [pc, #24]	@ (8003ac4 <LL_RCC_SetSysClkSource+0x24>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f023 0203 	bic.w	r2, r3, #3
 8003ab0:	4904      	ldr	r1, [pc, #16]	@ (8003ac4 <LL_RCC_SetSysClkSource+0x24>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	40021000 	.word	0x40021000

08003ac8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003acc:	4b04      	ldr	r3, [pc, #16]	@ (8003ae0 <LL_RCC_GetSysClkSource+0x18>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000

08003ae4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003aec:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <LL_RCC_SetAHBPrescaler+0x24>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003af4:	4904      	ldr	r1, [pc, #16]	@ (8003b08 <LL_RCC_SetAHBPrescaler+0x24>)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	604b      	str	r3, [r1, #4]
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	40021000 	.word	0x40021000

08003b0c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003b14:	4b06      	ldr	r3, [pc, #24]	@ (8003b30 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b1c:	4904      	ldr	r1, [pc, #16]	@ (8003b30 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	40021000 	.word	0x40021000

08003b34 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003b3c:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b44:	4904      	ldr	r1, [pc, #16]	@ (8003b58 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	604b      	str	r3, [r1, #4]
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40021000 	.word	0x40021000

08003b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8003b62:	2001      	movs	r0, #1
 8003b64:	f7ff ff30 	bl	80039c8 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8003b68:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003b6c:	f7ff ff14 	bl	8003998 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b70:	2003      	movs	r0, #3
 8003b72:	f7ff fecb 	bl	800390c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b76:	f000 f825 	bl	8003bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b7a:	f7fe fb23 	bl	80021c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003b7e:	f000 ff71 	bl	8004a64 <MX_SPI1_Init>

  initCD_Pin();
 8003b82:	f001 f80f 	bl	8004ba4 <initCD_Pin>
  initCS_Pin();
 8003b86:	f000 fff3 	bl	8004b70 <initCS_Pin>
  initRES_Pin();
 8003b8a:	f001 f827 	bl	8004bdc <initRES_Pin>

  LL_mDelay(1);
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f001 fbc6 	bl	8005320 <LL_mDelay>

  uint8_t buttonD4_val = 1;		//NOT NEEDED NOW
 8003b94:	2301      	movs	r3, #1
 8003b96:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 2 */
  lcdInitialise(LCD_ORIENTATION3);
 8003b98:	20c0      	movs	r0, #192	@ 0xc0
 8003b9a:	f7fe fbc3 	bl	8002324 <lcdInitialise>
  lcdClearDisplay(decodeRgbValue(0, 0, 0));
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	f7ff faf2 	bl	800318c <decodeRgbValue>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fe fc9a 	bl	80024e4 <lcdClearDisplay>
  initPolygons();
 8003bb0:	f7fd f8f6 	bl	8000da0 <initPolygons>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  menu();
 8003bb4:	f000 fc20 	bl	80043f8 <menu>
	  LL_mDelay(300);
 8003bb8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003bbc:	f001 fbb0 	bl	8005320 <LL_mDelay>
	  menu();
 8003bc0:	bf00      	nop
 8003bc2:	e7f7      	b.n	8003bb4 <main+0x58>

08003bc4 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8003bc8:	2000      	movs	r0, #0
 8003bca:	f7ff fec3 	bl	8003954 <LL_FLASH_SetLatency>

	  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8003bce:	f7ff fed5 	bl	800397c <LL_FLASH_GetLatency>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <SystemClock_Config+0x18>
	  {
	  Error_Handler();
 8003bd8:	f000 f82a 	bl	8003c30 <Error_Handler>
	  }
	  LL_RCC_HSI_Enable();
 8003bdc:	f7ff ff28 	bl	8003a30 <LL_RCC_HSI_Enable>

	   // Wait till HSI is ready
	  while(LL_RCC_HSI_IsReady() != 1)
 8003be0:	bf00      	nop
 8003be2:	f7ff ff35 	bl	8003a50 <LL_RCC_HSI_IsReady>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d1fa      	bne.n	8003be2 <SystemClock_Config+0x1e>
	  {

	  }
	  LL_RCC_HSI_SetCalibTrimming(16);
 8003bec:	2010      	movs	r0, #16
 8003bee:	f7ff ff41 	bl	8003a74 <LL_RCC_HSI_SetCalibTrimming>
	  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	f7ff ff76 	bl	8003ae4 <LL_RCC_SetAHBPrescaler>
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	f7ff ff87 	bl	8003b0c <LL_RCC_SetAPB1Prescaler>
	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f7ff ff98 	bl	8003b34 <LL_RCC_SetAPB2Prescaler>
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003c04:	2000      	movs	r0, #0
 8003c06:	f7ff ff4b 	bl	8003aa0 <LL_RCC_SetSysClkSource>

	   // Wait till System clock is ready
	  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003c0a:	bf00      	nop
 8003c0c:	f7ff ff5c 	bl	8003ac8 <LL_RCC_GetSysClkSource>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1fa      	bne.n	8003c0c <SystemClock_Config+0x48>
	  {

	  }
	  LL_Init1msTick(8000000);
 8003c16:	4805      	ldr	r0, [pc, #20]	@ (8003c2c <SystemClock_Config+0x68>)
 8003c18:	f001 fb74 	bl	8005304 <LL_Init1msTick>
	  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8003c1c:	2004      	movs	r0, #4
 8003c1e:	f7ff feeb 	bl	80039f8 <LL_SYSTICK_SetClkSource>
	  LL_SetSystemCoreClock(8000000);
 8003c22:	4802      	ldr	r0, [pc, #8]	@ (8003c2c <SystemClock_Config+0x68>)
 8003c24:	f001 fba2 	bl	800536c <LL_SetSystemCoreClock>
}
 8003c28:	bf00      	nop
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	007a1200 	.word	0x007a1200

08003c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c34:	bf00      	nop
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <drawMenu>:
char ammoText[16];
char scoreText[16];
char healthText[16];
char armorText[16];

void drawMenu() {
 8003c40:	b590      	push	{r4, r7, lr}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af02      	add	r7, sp, #8
	lcdPutSSized("DOOM", 250, 0, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),8);
 8003c46:	221f      	movs	r2, #31
 8003c48:	211f      	movs	r1, #31
 8003c4a:	201f      	movs	r0, #31
 8003c4c:	f7ff fa9e 	bl	800318c <decodeRgbValue>
 8003c50:	4603      	mov	r3, r0
 8003c52:	461c      	mov	r4, r3
 8003c54:	2200      	movs	r2, #0
 8003c56:	2100      	movs	r1, #0
 8003c58:	2000      	movs	r0, #0
 8003c5a:	f7ff fa97 	bl	800318c <decodeRgbValue>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	461a      	mov	r2, r3
 8003c62:	2308      	movs	r3, #8
 8003c64:	9301      	str	r3, [sp, #4]
 8003c66:	9200      	str	r2, [sp, #0]
 8003c68:	4623      	mov	r3, r4
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	21fa      	movs	r1, #250	@ 0xfa
 8003c6e:	4892      	ldr	r0, [pc, #584]	@ (8003eb8 <drawMenu+0x278>)
 8003c70:	f7ff faef 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("NEW GAME", 205, 64, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8003c74:	221f      	movs	r2, #31
 8003c76:	211f      	movs	r1, #31
 8003c78:	201f      	movs	r0, #31
 8003c7a:	f7ff fa87 	bl	800318c <decodeRgbValue>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	461c      	mov	r4, r3
 8003c82:	2200      	movs	r2, #0
 8003c84:	2100      	movs	r1, #0
 8003c86:	2000      	movs	r0, #0
 8003c88:	f7ff fa80 	bl	800318c <decodeRgbValue>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	461a      	mov	r2, r3
 8003c90:	2302      	movs	r3, #2
 8003c92:	9301      	str	r3, [sp, #4]
 8003c94:	9200      	str	r2, [sp, #0]
 8003c96:	4623      	mov	r3, r4
 8003c98:	2240      	movs	r2, #64	@ 0x40
 8003c9a:	21cd      	movs	r1, #205	@ 0xcd
 8003c9c:	4887      	ldr	r0, [pc, #540]	@ (8003ebc <drawMenu+0x27c>)
 8003c9e:	f7ff fad8 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("OPTIONS", 205, 80, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8003ca2:	221f      	movs	r2, #31
 8003ca4:	211f      	movs	r1, #31
 8003ca6:	201f      	movs	r0, #31
 8003ca8:	f7ff fa70 	bl	800318c <decodeRgbValue>
 8003cac:	4603      	mov	r3, r0
 8003cae:	461c      	mov	r4, r3
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	f7ff fa69 	bl	800318c <decodeRgbValue>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	9200      	str	r2, [sp, #0]
 8003cc4:	4623      	mov	r3, r4
 8003cc6:	2250      	movs	r2, #80	@ 0x50
 8003cc8:	21cd      	movs	r1, #205	@ 0xcd
 8003cca:	487d      	ldr	r0, [pc, #500]	@ (8003ec0 <drawMenu+0x280>)
 8003ccc:	f7ff fac1 	bl	8003252 <lcdPutSSized>
	//lcdPutSSized("LOAD GAME", 205, 96, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
	//lcdPutSSized("SAVE GAME", 205, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
	lcdPutSSized("READ THIS!", 205, 96, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8003cd0:	221f      	movs	r2, #31
 8003cd2:	211f      	movs	r1, #31
 8003cd4:	201f      	movs	r0, #31
 8003cd6:	f7ff fa59 	bl	800318c <decodeRgbValue>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	461c      	mov	r4, r3
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f7ff fa52 	bl	800318c <decodeRgbValue>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	461a      	mov	r2, r3
 8003cec:	2302      	movs	r3, #2
 8003cee:	9301      	str	r3, [sp, #4]
 8003cf0:	9200      	str	r2, [sp, #0]
 8003cf2:	4623      	mov	r3, r4
 8003cf4:	2260      	movs	r2, #96	@ 0x60
 8003cf6:	21cd      	movs	r1, #205	@ 0xcd
 8003cf8:	4872      	ldr	r0, [pc, #456]	@ (8003ec4 <drawMenu+0x284>)
 8003cfa:	f7ff faaa 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("QUIT GAME", 205, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8003cfe:	221f      	movs	r2, #31
 8003d00:	211f      	movs	r1, #31
 8003d02:	201f      	movs	r0, #31
 8003d04:	f7ff fa42 	bl	800318c <decodeRgbValue>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	461c      	mov	r4, r3
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2100      	movs	r1, #0
 8003d10:	2000      	movs	r0, #0
 8003d12:	f7ff fa3b 	bl	800318c <decodeRgbValue>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	9301      	str	r3, [sp, #4]
 8003d1e:	9200      	str	r2, [sp, #0]
 8003d20:	4623      	mov	r3, r4
 8003d22:	2270      	movs	r2, #112	@ 0x70
 8003d24:	21cd      	movs	r1, #205	@ 0xcd
 8003d26:	4868      	ldr	r0, [pc, #416]	@ (8003ec8 <drawMenu+0x288>)
 8003d28:	f7ff fa93 	bl	8003252 <lcdPutSSized>

	lcdPutS("AMMO", 285, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8003d2c:	221f      	movs	r2, #31
 8003d2e:	211f      	movs	r1, #31
 8003d30:	201f      	movs	r0, #31
 8003d32:	f7ff fa2b 	bl	800318c <decodeRgbValue>
 8003d36:	4603      	mov	r3, r0
 8003d38:	461c      	mov	r4, r3
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	2000      	movs	r0, #0
 8003d40:	f7ff fa24 	bl	800318c <decodeRgbValue>
 8003d44:	4603      	mov	r3, r0
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	4623      	mov	r3, r4
 8003d4a:	22e6      	movs	r2, #230	@ 0xe6
 8003d4c:	f240 111d 	movw	r1, #285	@ 0x11d
 8003d50:	485e      	ldr	r0, [pc, #376]	@ (8003ecc <drawMenu+0x28c>)
 8003d52:	f7ff fa37 	bl	80031c4 <lcdPutS>
	sprintf(ammoText, "%d", ammo);
 8003d56:	4b5e      	ldr	r3, [pc, #376]	@ (8003ed0 <drawMenu+0x290>)
 8003d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	495d      	ldr	r1, [pc, #372]	@ (8003ed4 <drawMenu+0x294>)
 8003d60:	485d      	ldr	r0, [pc, #372]	@ (8003ed8 <drawMenu+0x298>)
 8003d62:	f001 fd67 	bl	8005834 <siprintf>
	lcdPutS(ammoText, 280, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8003d66:	221f      	movs	r2, #31
 8003d68:	211f      	movs	r1, #31
 8003d6a:	201f      	movs	r0, #31
 8003d6c:	f7ff fa0e 	bl	800318c <decodeRgbValue>
 8003d70:	4603      	mov	r3, r0
 8003d72:	461c      	mov	r4, r3
 8003d74:	2200      	movs	r2, #0
 8003d76:	2100      	movs	r1, #0
 8003d78:	2000      	movs	r0, #0
 8003d7a:	f7ff fa07 	bl	800318c <decodeRgbValue>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	4623      	mov	r3, r4
 8003d84:	22de      	movs	r2, #222	@ 0xde
 8003d86:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8003d8a:	4853      	ldr	r0, [pc, #332]	@ (8003ed8 <drawMenu+0x298>)
 8003d8c:	f7ff fa1a 	bl	80031c4 <lcdPutS>

	lcdPutS("SCORE", 200, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8003d90:	221f      	movs	r2, #31
 8003d92:	211f      	movs	r1, #31
 8003d94:	201f      	movs	r0, #31
 8003d96:	f7ff f9f9 	bl	800318c <decodeRgbValue>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	461c      	mov	r4, r3
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2100      	movs	r1, #0
 8003da2:	2000      	movs	r0, #0
 8003da4:	f7ff f9f2 	bl	800318c <decodeRgbValue>
 8003da8:	4603      	mov	r3, r0
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	4623      	mov	r3, r4
 8003dae:	22e6      	movs	r2, #230	@ 0xe6
 8003db0:	21c8      	movs	r1, #200	@ 0xc8
 8003db2:	484a      	ldr	r0, [pc, #296]	@ (8003edc <drawMenu+0x29c>)
 8003db4:	f7ff fa06 	bl	80031c4 <lcdPutS>
	sprintf(scoreText, "%d", score);
 8003db8:	4b49      	ldr	r3, [pc, #292]	@ (8003ee0 <drawMenu+0x2a0>)
 8003dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4944      	ldr	r1, [pc, #272]	@ (8003ed4 <drawMenu+0x294>)
 8003dc2:	4848      	ldr	r0, [pc, #288]	@ (8003ee4 <drawMenu+0x2a4>)
 8003dc4:	f001 fd36 	bl	8005834 <siprintf>
	lcdPutS(scoreText, 195, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8003dc8:	221f      	movs	r2, #31
 8003dca:	211f      	movs	r1, #31
 8003dcc:	201f      	movs	r0, #31
 8003dce:	f7ff f9dd 	bl	800318c <decodeRgbValue>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	461c      	mov	r4, r3
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2100      	movs	r1, #0
 8003dda:	2000      	movs	r0, #0
 8003ddc:	f7ff f9d6 	bl	800318c <decodeRgbValue>
 8003de0:	4603      	mov	r3, r0
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	4623      	mov	r3, r4
 8003de6:	22de      	movs	r2, #222	@ 0xde
 8003de8:	21c3      	movs	r1, #195	@ 0xc3
 8003dea:	483e      	ldr	r0, [pc, #248]	@ (8003ee4 <drawMenu+0x2a4>)
 8003dec:	f7ff f9ea 	bl	80031c4 <lcdPutS>

	lcdPutS("HEALTH", 140, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8003df0:	221f      	movs	r2, #31
 8003df2:	211f      	movs	r1, #31
 8003df4:	201f      	movs	r0, #31
 8003df6:	f7ff f9c9 	bl	800318c <decodeRgbValue>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	461c      	mov	r4, r3
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2100      	movs	r1, #0
 8003e02:	2000      	movs	r0, #0
 8003e04:	f7ff f9c2 	bl	800318c <decodeRgbValue>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	4623      	mov	r3, r4
 8003e0e:	22e6      	movs	r2, #230	@ 0xe6
 8003e10:	218c      	movs	r1, #140	@ 0x8c
 8003e12:	4835      	ldr	r0, [pc, #212]	@ (8003ee8 <drawMenu+0x2a8>)
 8003e14:	f7ff f9d6 	bl	80031c4 <lcdPutS>
	sprintf(healthText, "%d%%", health);
 8003e18:	4b34      	ldr	r3, [pc, #208]	@ (8003eec <drawMenu+0x2ac>)
 8003e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	4933      	ldr	r1, [pc, #204]	@ (8003ef0 <drawMenu+0x2b0>)
 8003e22:	4834      	ldr	r0, [pc, #208]	@ (8003ef4 <drawMenu+0x2b4>)
 8003e24:	f001 fd06 	bl	8005834 <siprintf>
	lcdPutS(healthText, 135, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8003e28:	221f      	movs	r2, #31
 8003e2a:	211f      	movs	r1, #31
 8003e2c:	201f      	movs	r0, #31
 8003e2e:	f7ff f9ad 	bl	800318c <decodeRgbValue>
 8003e32:	4603      	mov	r3, r0
 8003e34:	461c      	mov	r4, r3
 8003e36:	2200      	movs	r2, #0
 8003e38:	2100      	movs	r1, #0
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f7ff f9a6 	bl	800318c <decodeRgbValue>
 8003e40:	4603      	mov	r3, r0
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	4623      	mov	r3, r4
 8003e46:	22de      	movs	r2, #222	@ 0xde
 8003e48:	2187      	movs	r1, #135	@ 0x87
 8003e4a:	482a      	ldr	r0, [pc, #168]	@ (8003ef4 <drawMenu+0x2b4>)
 8003e4c:	f7ff f9ba 	bl	80031c4 <lcdPutS>

	lcdPutS("ARMOR", 50, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8003e50:	221f      	movs	r2, #31
 8003e52:	211f      	movs	r1, #31
 8003e54:	201f      	movs	r0, #31
 8003e56:	f7ff f999 	bl	800318c <decodeRgbValue>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461c      	mov	r4, r3
 8003e5e:	2200      	movs	r2, #0
 8003e60:	2100      	movs	r1, #0
 8003e62:	2000      	movs	r0, #0
 8003e64:	f7ff f992 	bl	800318c <decodeRgbValue>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	4623      	mov	r3, r4
 8003e6e:	22e6      	movs	r2, #230	@ 0xe6
 8003e70:	2132      	movs	r1, #50	@ 0x32
 8003e72:	4821      	ldr	r0, [pc, #132]	@ (8003ef8 <drawMenu+0x2b8>)
 8003e74:	f7ff f9a6 	bl	80031c4 <lcdPutS>
	sprintf(armorText, "%d%%", armor);
 8003e78:	4b20      	ldr	r3, [pc, #128]	@ (8003efc <drawMenu+0x2bc>)
 8003e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	491b      	ldr	r1, [pc, #108]	@ (8003ef0 <drawMenu+0x2b0>)
 8003e82:	481f      	ldr	r0, [pc, #124]	@ (8003f00 <drawMenu+0x2c0>)
 8003e84:	f001 fcd6 	bl	8005834 <siprintf>
	lcdPutS(armorText, 50, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8003e88:	221f      	movs	r2, #31
 8003e8a:	211f      	movs	r1, #31
 8003e8c:	201f      	movs	r0, #31
 8003e8e:	f7ff f97d 	bl	800318c <decodeRgbValue>
 8003e92:	4603      	mov	r3, r0
 8003e94:	461c      	mov	r4, r3
 8003e96:	2200      	movs	r2, #0
 8003e98:	2100      	movs	r1, #0
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f7ff f976 	bl	800318c <decodeRgbValue>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	4623      	mov	r3, r4
 8003ea6:	22de      	movs	r2, #222	@ 0xde
 8003ea8:	2132      	movs	r1, #50	@ 0x32
 8003eaa:	4815      	ldr	r0, [pc, #84]	@ (8003f00 <drawMenu+0x2c0>)
 8003eac:	f7ff f98a 	bl	80031c4 <lcdPutS>
}
 8003eb0:	bf00      	nop
 8003eb2:	3704      	adds	r7, #4
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd90      	pop	{r4, r7, pc}
 8003eb8:	08007fcc 	.word	0x08007fcc
 8003ebc:	08007fd4 	.word	0x08007fd4
 8003ec0:	08007fe0 	.word	0x08007fe0
 8003ec4:	08007fe8 	.word	0x08007fe8
 8003ec8:	08007ff4 	.word	0x08007ff4
 8003ecc:	08008000 	.word	0x08008000
 8003ed0:	20000008 	.word	0x20000008
 8003ed4:	08008008 	.word	0x08008008
 8003ed8:	200003fc 	.word	0x200003fc
 8003edc:	0800800c 	.word	0x0800800c
 8003ee0:	2000000a 	.word	0x2000000a
 8003ee4:	2000040c 	.word	0x2000040c
 8003ee8:	08008014 	.word	0x08008014
 8003eec:	2000000c 	.word	0x2000000c
 8003ef0:	0800801c 	.word	0x0800801c
 8003ef4:	2000041c 	.word	0x2000041c
 8003ef8:	08008024 	.word	0x08008024
 8003efc:	2000000e 	.word	0x2000000e
 8003f00:	2000042c 	.word	0x2000042c

08003f04 <clearMenu>:

void clearMenu() {
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af02      	add	r7, sp, #8
	lcdPutSSized("DOOM", 250, 0, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0), 8);
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f7ff f93c 	bl	800318c <decodeRgbValue>
 8003f14:	4603      	mov	r3, r0
 8003f16:	461c      	mov	r4, r3
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f7ff f935 	bl	800318c <decodeRgbValue>
 8003f22:	4603      	mov	r3, r0
 8003f24:	461a      	mov	r2, r3
 8003f26:	2308      	movs	r3, #8
 8003f28:	9301      	str	r3, [sp, #4]
 8003f2a:	9200      	str	r2, [sp, #0]
 8003f2c:	4623      	mov	r3, r4
 8003f2e:	2200      	movs	r2, #0
 8003f30:	21fa      	movs	r1, #250	@ 0xfa
 8003f32:	4838      	ldr	r0, [pc, #224]	@ (8004014 <clearMenu+0x110>)
 8003f34:	f7ff f98d 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("NEW GAME", 205, 64, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0), 2);
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	f7ff f925 	bl	800318c <decodeRgbValue>
 8003f42:	4603      	mov	r3, r0
 8003f44:	461c      	mov	r4, r3
 8003f46:	2200      	movs	r2, #0
 8003f48:	2100      	movs	r1, #0
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f7ff f91e 	bl	800318c <decodeRgbValue>
 8003f50:	4603      	mov	r3, r0
 8003f52:	461a      	mov	r2, r3
 8003f54:	2302      	movs	r3, #2
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	9200      	str	r2, [sp, #0]
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	2240      	movs	r2, #64	@ 0x40
 8003f5e:	21cd      	movs	r1, #205	@ 0xcd
 8003f60:	482d      	ldr	r0, [pc, #180]	@ (8004018 <clearMenu+0x114>)
 8003f62:	f7ff f976 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("OPTIONS", 205, 80, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0), 2);
 8003f66:	2200      	movs	r2, #0
 8003f68:	2100      	movs	r1, #0
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	f7ff f90e 	bl	800318c <decodeRgbValue>
 8003f70:	4603      	mov	r3, r0
 8003f72:	461c      	mov	r4, r3
 8003f74:	2200      	movs	r2, #0
 8003f76:	2100      	movs	r1, #0
 8003f78:	2000      	movs	r0, #0
 8003f7a:	f7ff f907 	bl	800318c <decodeRgbValue>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	461a      	mov	r2, r3
 8003f82:	2302      	movs	r3, #2
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	9200      	str	r2, [sp, #0]
 8003f88:	4623      	mov	r3, r4
 8003f8a:	2250      	movs	r2, #80	@ 0x50
 8003f8c:	21cd      	movs	r1, #205	@ 0xcd
 8003f8e:	4823      	ldr	r0, [pc, #140]	@ (800401c <clearMenu+0x118>)
 8003f90:	f7ff f95f 	bl	8003252 <lcdPutSSized>
	//lcdPutSSized("LOAD GAME", 205, 96, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0), 2);
	//lcdPutSSized("SAVE GAME", 205, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0), 2);
	lcdPutSSized("READ THIS!", 205, 96, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0), 2);
 8003f94:	2200      	movs	r2, #0
 8003f96:	2100      	movs	r1, #0
 8003f98:	2000      	movs	r0, #0
 8003f9a:	f7ff f8f7 	bl	800318c <decodeRgbValue>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	461c      	mov	r4, r3
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	f7ff f8f0 	bl	800318c <decodeRgbValue>
 8003fac:	4603      	mov	r3, r0
 8003fae:	461a      	mov	r2, r3
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	9200      	str	r2, [sp, #0]
 8003fb6:	4623      	mov	r3, r4
 8003fb8:	2260      	movs	r2, #96	@ 0x60
 8003fba:	21cd      	movs	r1, #205	@ 0xcd
 8003fbc:	4818      	ldr	r0, [pc, #96]	@ (8004020 <clearMenu+0x11c>)
 8003fbe:	f7ff f948 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("QUIT GAME", 205, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0), 2);
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	f7ff f8e0 	bl	800318c <decodeRgbValue>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	461c      	mov	r4, r3
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	f7ff f8d9 	bl	800318c <decodeRgbValue>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	461a      	mov	r2, r3
 8003fde:	2302      	movs	r3, #2
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	9200      	str	r2, [sp, #0]
 8003fe4:	4623      	mov	r3, r4
 8003fe6:	2270      	movs	r2, #112	@ 0x70
 8003fe8:	21cd      	movs	r1, #205	@ 0xcd
 8003fea:	480e      	ldr	r0, [pc, #56]	@ (8004024 <clearMenu+0x120>)
 8003fec:	f7ff f931 	bl	8003252 <lcdPutSSized>

    lcdFilledRectangle(20, 220, 300, 240, decodeRgbValue(0, 0, 0));
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	f7ff f8c9 	bl	800318c <decodeRgbValue>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	23f0      	movs	r3, #240	@ 0xf0
 8004000:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004004:	21dc      	movs	r1, #220	@ 0xdc
 8004006:	2014      	movs	r0, #20
 8004008:	f7fe fe08 	bl	8002c1c <lcdFilledRectangle>
}
 800400c:	bf00      	nop
 800400e:	3704      	adds	r7, #4
 8004010:	46bd      	mov	sp, r7
 8004012:	bd90      	pop	{r4, r7, pc}
 8004014:	08007fcc 	.word	0x08007fcc
 8004018:	08007fd4 	.word	0x08007fd4
 800401c:	08007fe0 	.word	0x08007fe0
 8004020:	08007fe8 	.word	0x08007fe8
 8004024:	08007ff4 	.word	0x08007ff4

08004028 <drawDifficulty>:

void drawDifficulty() {
 8004028:	b590      	push	{r4, r7, lr}
 800402a:	b083      	sub	sp, #12
 800402c:	af02      	add	r7, sp, #8
	lcdPutSSized("options", 240, 0, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),4);
 800402e:	221f      	movs	r2, #31
 8004030:	211f      	movs	r1, #31
 8004032:	201f      	movs	r0, #31
 8004034:	f7ff f8aa 	bl	800318c <decodeRgbValue>
 8004038:	4603      	mov	r3, r0
 800403a:	461c      	mov	r4, r3
 800403c:	2200      	movs	r2, #0
 800403e:	2100      	movs	r1, #0
 8004040:	2000      	movs	r0, #0
 8004042:	f7ff f8a3 	bl	800318c <decodeRgbValue>
 8004046:	4603      	mov	r3, r0
 8004048:	461a      	mov	r2, r3
 800404a:	2304      	movs	r3, #4
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	9200      	str	r2, [sp, #0]
 8004050:	4623      	mov	r3, r4
 8004052:	2200      	movs	r2, #0
 8004054:	21f0      	movs	r1, #240	@ 0xf0
 8004056:	4826      	ldr	r0, [pc, #152]	@ (80040f0 <drawDifficulty+0xc8>)
 8004058:	f7ff f8fb 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("EASY", 210, 80, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),3);
 800405c:	221f      	movs	r2, #31
 800405e:	211f      	movs	r1, #31
 8004060:	201f      	movs	r0, #31
 8004062:	f7ff f893 	bl	800318c <decodeRgbValue>
 8004066:	4603      	mov	r3, r0
 8004068:	461c      	mov	r4, r3
 800406a:	2200      	movs	r2, #0
 800406c:	2100      	movs	r1, #0
 800406e:	2000      	movs	r0, #0
 8004070:	f7ff f88c 	bl	800318c <decodeRgbValue>
 8004074:	4603      	mov	r3, r0
 8004076:	461a      	mov	r2, r3
 8004078:	2303      	movs	r3, #3
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	9200      	str	r2, [sp, #0]
 800407e:	4623      	mov	r3, r4
 8004080:	2250      	movs	r2, #80	@ 0x50
 8004082:	21d2      	movs	r1, #210	@ 0xd2
 8004084:	481b      	ldr	r0, [pc, #108]	@ (80040f4 <drawDifficulty+0xcc>)
 8004086:	f7ff f8e4 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("MEDIUM", 210, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),3);
 800408a:	221f      	movs	r2, #31
 800408c:	211f      	movs	r1, #31
 800408e:	201f      	movs	r0, #31
 8004090:	f7ff f87c 	bl	800318c <decodeRgbValue>
 8004094:	4603      	mov	r3, r0
 8004096:	461c      	mov	r4, r3
 8004098:	2200      	movs	r2, #0
 800409a:	2100      	movs	r1, #0
 800409c:	2000      	movs	r0, #0
 800409e:	f7ff f875 	bl	800318c <decodeRgbValue>
 80040a2:	4603      	mov	r3, r0
 80040a4:	461a      	mov	r2, r3
 80040a6:	2303      	movs	r3, #3
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	9200      	str	r2, [sp, #0]
 80040ac:	4623      	mov	r3, r4
 80040ae:	2270      	movs	r2, #112	@ 0x70
 80040b0:	21d2      	movs	r1, #210	@ 0xd2
 80040b2:	4811      	ldr	r0, [pc, #68]	@ (80040f8 <drawDifficulty+0xd0>)
 80040b4:	f7ff f8cd 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("HARD", 210, 144, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),3);
 80040b8:	221f      	movs	r2, #31
 80040ba:	211f      	movs	r1, #31
 80040bc:	201f      	movs	r0, #31
 80040be:	f7ff f865 	bl	800318c <decodeRgbValue>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461c      	mov	r4, r3
 80040c6:	2200      	movs	r2, #0
 80040c8:	2100      	movs	r1, #0
 80040ca:	2000      	movs	r0, #0
 80040cc:	f7ff f85e 	bl	800318c <decodeRgbValue>
 80040d0:	4603      	mov	r3, r0
 80040d2:	461a      	mov	r2, r3
 80040d4:	2303      	movs	r3, #3
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	9200      	str	r2, [sp, #0]
 80040da:	4623      	mov	r3, r4
 80040dc:	2290      	movs	r2, #144	@ 0x90
 80040de:	21d2      	movs	r1, #210	@ 0xd2
 80040e0:	4806      	ldr	r0, [pc, #24]	@ (80040fc <drawDifficulty+0xd4>)
 80040e2:	f7ff f8b6 	bl	8003252 <lcdPutSSized>
}
 80040e6:	bf00      	nop
 80040e8:	3704      	adds	r7, #4
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd90      	pop	{r4, r7, pc}
 80040ee:	bf00      	nop
 80040f0:	0800802c 	.word	0x0800802c
 80040f4:	08008034 	.word	0x08008034
 80040f8:	0800803c 	.word	0x0800803c
 80040fc:	08008044 	.word	0x08008044

08004100 <clearDifficulty>:

void clearDifficulty() {
 8004100:	b590      	push	{r4, r7, lr}
 8004102:	b083      	sub	sp, #12
 8004104:	af02      	add	r7, sp, #8
	lcdPutSSized("options", 240, 0, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),4);
 8004106:	2200      	movs	r2, #0
 8004108:	2100      	movs	r1, #0
 800410a:	2000      	movs	r0, #0
 800410c:	f7ff f83e 	bl	800318c <decodeRgbValue>
 8004110:	4603      	mov	r3, r0
 8004112:	461c      	mov	r4, r3
 8004114:	2200      	movs	r2, #0
 8004116:	2100      	movs	r1, #0
 8004118:	2000      	movs	r0, #0
 800411a:	f7ff f837 	bl	800318c <decodeRgbValue>
 800411e:	4603      	mov	r3, r0
 8004120:	461a      	mov	r2, r3
 8004122:	2304      	movs	r3, #4
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	9200      	str	r2, [sp, #0]
 8004128:	4623      	mov	r3, r4
 800412a:	2200      	movs	r2, #0
 800412c:	21f0      	movs	r1, #240	@ 0xf0
 800412e:	4826      	ldr	r0, [pc, #152]	@ (80041c8 <clearDifficulty+0xc8>)
 8004130:	f7ff f88f 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("EASY", 210, 80, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),3);
 8004134:	2200      	movs	r2, #0
 8004136:	2100      	movs	r1, #0
 8004138:	2000      	movs	r0, #0
 800413a:	f7ff f827 	bl	800318c <decodeRgbValue>
 800413e:	4603      	mov	r3, r0
 8004140:	461c      	mov	r4, r3
 8004142:	2200      	movs	r2, #0
 8004144:	2100      	movs	r1, #0
 8004146:	2000      	movs	r0, #0
 8004148:	f7ff f820 	bl	800318c <decodeRgbValue>
 800414c:	4603      	mov	r3, r0
 800414e:	461a      	mov	r2, r3
 8004150:	2303      	movs	r3, #3
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	9200      	str	r2, [sp, #0]
 8004156:	4623      	mov	r3, r4
 8004158:	2250      	movs	r2, #80	@ 0x50
 800415a:	21d2      	movs	r1, #210	@ 0xd2
 800415c:	481b      	ldr	r0, [pc, #108]	@ (80041cc <clearDifficulty+0xcc>)
 800415e:	f7ff f878 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("MEDIUM", 210, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),3);
 8004162:	2200      	movs	r2, #0
 8004164:	2100      	movs	r1, #0
 8004166:	2000      	movs	r0, #0
 8004168:	f7ff f810 	bl	800318c <decodeRgbValue>
 800416c:	4603      	mov	r3, r0
 800416e:	461c      	mov	r4, r3
 8004170:	2200      	movs	r2, #0
 8004172:	2100      	movs	r1, #0
 8004174:	2000      	movs	r0, #0
 8004176:	f7ff f809 	bl	800318c <decodeRgbValue>
 800417a:	4603      	mov	r3, r0
 800417c:	461a      	mov	r2, r3
 800417e:	2303      	movs	r3, #3
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	9200      	str	r2, [sp, #0]
 8004184:	4623      	mov	r3, r4
 8004186:	2270      	movs	r2, #112	@ 0x70
 8004188:	21d2      	movs	r1, #210	@ 0xd2
 800418a:	4811      	ldr	r0, [pc, #68]	@ (80041d0 <clearDifficulty+0xd0>)
 800418c:	f7ff f861 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("HARD", 210, 144, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),3);
 8004190:	2200      	movs	r2, #0
 8004192:	2100      	movs	r1, #0
 8004194:	2000      	movs	r0, #0
 8004196:	f7fe fff9 	bl	800318c <decodeRgbValue>
 800419a:	4603      	mov	r3, r0
 800419c:	461c      	mov	r4, r3
 800419e:	2200      	movs	r2, #0
 80041a0:	2100      	movs	r1, #0
 80041a2:	2000      	movs	r0, #0
 80041a4:	f7fe fff2 	bl	800318c <decodeRgbValue>
 80041a8:	4603      	mov	r3, r0
 80041aa:	461a      	mov	r2, r3
 80041ac:	2303      	movs	r3, #3
 80041ae:	9301      	str	r3, [sp, #4]
 80041b0:	9200      	str	r2, [sp, #0]
 80041b2:	4623      	mov	r3, r4
 80041b4:	2290      	movs	r2, #144	@ 0x90
 80041b6:	21d2      	movs	r1, #210	@ 0xd2
 80041b8:	4806      	ldr	r0, [pc, #24]	@ (80041d4 <clearDifficulty+0xd4>)
 80041ba:	f7ff f84a 	bl	8003252 <lcdPutSSized>
}
 80041be:	bf00      	nop
 80041c0:	3704      	adds	r7, #4
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd90      	pop	{r4, r7, pc}
 80041c6:	bf00      	nop
 80041c8:	0800802c 	.word	0x0800802c
 80041cc:	08008034 	.word	0x08008034
 80041d0:	0800803c 	.word	0x0800803c
 80041d4:	08008044 	.word	0x08008044

080041d8 <drawReadme>:

void drawReadme() {
 80041d8:	b590      	push	{r4, r7, lr}
 80041da:	b083      	sub	sp, #12
 80041dc:	af02      	add	r7, sp, #8
	lcdPutSSized("! WARNING !", 250, 0, decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0),3);
 80041de:	22ff      	movs	r2, #255	@ 0xff
 80041e0:	21ff      	movs	r1, #255	@ 0xff
 80041e2:	20ff      	movs	r0, #255	@ 0xff
 80041e4:	f7fe ffd2 	bl	800318c <decodeRgbValue>
 80041e8:	4603      	mov	r3, r0
 80041ea:	461c      	mov	r4, r3
 80041ec:	2200      	movs	r2, #0
 80041ee:	2100      	movs	r1, #0
 80041f0:	2000      	movs	r0, #0
 80041f2:	f7fe ffcb 	bl	800318c <decodeRgbValue>
 80041f6:	4603      	mov	r3, r0
 80041f8:	461a      	mov	r2, r3
 80041fa:	2303      	movs	r3, #3
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	9200      	str	r2, [sp, #0]
 8004200:	4623      	mov	r3, r4
 8004202:	2200      	movs	r2, #0
 8004204:	21fa      	movs	r1, #250	@ 0xfa
 8004206:	4833      	ldr	r0, [pc, #204]	@ (80042d4 <drawReadme+0xfc>)
 8004208:	f7ff f823 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("This game contains pixelated graphics and simplified animations inspired by retro games. While the content is minimal, it may include depictions of combat and fictional creatures. Viewer discretion is advised.", 310, 40, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),1);
 800420c:	221f      	movs	r2, #31
 800420e:	211f      	movs	r1, #31
 8004210:	201f      	movs	r0, #31
 8004212:	f7fe ffbb 	bl	800318c <decodeRgbValue>
 8004216:	4603      	mov	r3, r0
 8004218:	461c      	mov	r4, r3
 800421a:	2200      	movs	r2, #0
 800421c:	2100      	movs	r1, #0
 800421e:	2000      	movs	r0, #0
 8004220:	f7fe ffb4 	bl	800318c <decodeRgbValue>
 8004224:	4603      	mov	r3, r0
 8004226:	461a      	mov	r2, r3
 8004228:	2301      	movs	r3, #1
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	9200      	str	r2, [sp, #0]
 800422e:	4623      	mov	r3, r4
 8004230:	2228      	movs	r2, #40	@ 0x28
 8004232:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8004236:	4828      	ldr	r0, [pc, #160]	@ (80042d8 <drawReadme+0x100>)
 8004238:	f7ff f80b 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("Welcome to DOOM Micro! This game is a simplified version of the classic DOOM, specially designed for a microcontroller. Survive, fight, and conquer the pixelated demons! Use the controls to move, aim, and shoot. Watch your health and ammo, and don't forget every move counts. Good luck, Marine. The fate of humanity is in your hands!", 310, 112, decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0),1);
 800423c:	22ff      	movs	r2, #255	@ 0xff
 800423e:	21ff      	movs	r1, #255	@ 0xff
 8004240:	20ff      	movs	r0, #255	@ 0xff
 8004242:	f7fe ffa3 	bl	800318c <decodeRgbValue>
 8004246:	4603      	mov	r3, r0
 8004248:	461c      	mov	r4, r3
 800424a:	2200      	movs	r2, #0
 800424c:	2100      	movs	r1, #0
 800424e:	2000      	movs	r0, #0
 8004250:	f7fe ff9c 	bl	800318c <decodeRgbValue>
 8004254:	4603      	mov	r3, r0
 8004256:	461a      	mov	r2, r3
 8004258:	2301      	movs	r3, #1
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	9200      	str	r2, [sp, #0]
 800425e:	4623      	mov	r3, r4
 8004260:	2270      	movs	r2, #112	@ 0x70
 8004262:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8004266:	481d      	ldr	r0, [pc, #116]	@ (80042dc <drawReadme+0x104>)
 8004268:	f7fe fff3 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("Please use joystick for moving up for shooting down for quit and left right for rotation", 310, 190, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),1);
 800426c:	221f      	movs	r2, #31
 800426e:	211f      	movs	r1, #31
 8004270:	201f      	movs	r0, #31
 8004272:	f7fe ff8b 	bl	800318c <decodeRgbValue>
 8004276:	4603      	mov	r3, r0
 8004278:	461c      	mov	r4, r3
 800427a:	2200      	movs	r2, #0
 800427c:	2100      	movs	r1, #0
 800427e:	2000      	movs	r0, #0
 8004280:	f7fe ff84 	bl	800318c <decodeRgbValue>
 8004284:	4603      	mov	r3, r0
 8004286:	461a      	mov	r2, r3
 8004288:	2301      	movs	r3, #1
 800428a:	9301      	str	r3, [sp, #4]
 800428c:	9200      	str	r2, [sp, #0]
 800428e:	4623      	mov	r3, r4
 8004290:	22be      	movs	r2, #190	@ 0xbe
 8004292:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8004296:	4812      	ldr	r0, [pc, #72]	@ (80042e0 <drawReadme+0x108>)
 8004298:	f7fe ffdb 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("press right button to escape", 310, 220, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),1);
 800429c:	221f      	movs	r2, #31
 800429e:	211f      	movs	r1, #31
 80042a0:	201f      	movs	r0, #31
 80042a2:	f7fe ff73 	bl	800318c <decodeRgbValue>
 80042a6:	4603      	mov	r3, r0
 80042a8:	461c      	mov	r4, r3
 80042aa:	2200      	movs	r2, #0
 80042ac:	2100      	movs	r1, #0
 80042ae:	2000      	movs	r0, #0
 80042b0:	f7fe ff6c 	bl	800318c <decodeRgbValue>
 80042b4:	4603      	mov	r3, r0
 80042b6:	461a      	mov	r2, r3
 80042b8:	2301      	movs	r3, #1
 80042ba:	9301      	str	r3, [sp, #4]
 80042bc:	9200      	str	r2, [sp, #0]
 80042be:	4623      	mov	r3, r4
 80042c0:	22dc      	movs	r2, #220	@ 0xdc
 80042c2:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80042c6:	4807      	ldr	r0, [pc, #28]	@ (80042e4 <drawReadme+0x10c>)
 80042c8:	f7fe ffc3 	bl	8003252 <lcdPutSSized>
}
 80042cc:	bf00      	nop
 80042ce:	3704      	adds	r7, #4
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd90      	pop	{r4, r7, pc}
 80042d4:	0800804c 	.word	0x0800804c
 80042d8:	08008058 	.word	0x08008058
 80042dc:	0800812c 	.word	0x0800812c
 80042e0:	0800827c 	.word	0x0800827c
 80042e4:	080082d8 	.word	0x080082d8

080042e8 <clearReadme>:

void clearReadme() {
 80042e8:	b590      	push	{r4, r7, lr}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af02      	add	r7, sp, #8
	lcdPutSSized("! WARNING !", 250, 0, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),3);
 80042ee:	2200      	movs	r2, #0
 80042f0:	2100      	movs	r1, #0
 80042f2:	2000      	movs	r0, #0
 80042f4:	f7fe ff4a 	bl	800318c <decodeRgbValue>
 80042f8:	4603      	mov	r3, r0
 80042fa:	461c      	mov	r4, r3
 80042fc:	2200      	movs	r2, #0
 80042fe:	2100      	movs	r1, #0
 8004300:	2000      	movs	r0, #0
 8004302:	f7fe ff43 	bl	800318c <decodeRgbValue>
 8004306:	4603      	mov	r3, r0
 8004308:	461a      	mov	r2, r3
 800430a:	2303      	movs	r3, #3
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	9200      	str	r2, [sp, #0]
 8004310:	4623      	mov	r3, r4
 8004312:	2200      	movs	r2, #0
 8004314:	21fa      	movs	r1, #250	@ 0xfa
 8004316:	4833      	ldr	r0, [pc, #204]	@ (80043e4 <clearReadme+0xfc>)
 8004318:	f7fe ff9b 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("This game contains pixelated graphics and simplified animations inspired by retro games. While the content is minimal, it may include depictions of combat and fictional creatures. Viewer discretion is advised.", 310, 40, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),1);
 800431c:	2200      	movs	r2, #0
 800431e:	2100      	movs	r1, #0
 8004320:	2000      	movs	r0, #0
 8004322:	f7fe ff33 	bl	800318c <decodeRgbValue>
 8004326:	4603      	mov	r3, r0
 8004328:	461c      	mov	r4, r3
 800432a:	2200      	movs	r2, #0
 800432c:	2100      	movs	r1, #0
 800432e:	2000      	movs	r0, #0
 8004330:	f7fe ff2c 	bl	800318c <decodeRgbValue>
 8004334:	4603      	mov	r3, r0
 8004336:	461a      	mov	r2, r3
 8004338:	2301      	movs	r3, #1
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	9200      	str	r2, [sp, #0]
 800433e:	4623      	mov	r3, r4
 8004340:	2228      	movs	r2, #40	@ 0x28
 8004342:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8004346:	4828      	ldr	r0, [pc, #160]	@ (80043e8 <clearReadme+0x100>)
 8004348:	f7fe ff83 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("Welcome to DOOM Micro! This game is a simplified version of the classic DOOM, specially designed for a microcontroller. Survive, fight, and conquer the pixelated demons! Use the controls to move, aim, and shoot. Watch your health and ammo, and don't forget every move counts. Good luck, Marine. The fate of humanity is in your hands!", 310, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),1);
 800434c:	2200      	movs	r2, #0
 800434e:	2100      	movs	r1, #0
 8004350:	2000      	movs	r0, #0
 8004352:	f7fe ff1b 	bl	800318c <decodeRgbValue>
 8004356:	4603      	mov	r3, r0
 8004358:	461c      	mov	r4, r3
 800435a:	2200      	movs	r2, #0
 800435c:	2100      	movs	r1, #0
 800435e:	2000      	movs	r0, #0
 8004360:	f7fe ff14 	bl	800318c <decodeRgbValue>
 8004364:	4603      	mov	r3, r0
 8004366:	461a      	mov	r2, r3
 8004368:	2301      	movs	r3, #1
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	9200      	str	r2, [sp, #0]
 800436e:	4623      	mov	r3, r4
 8004370:	2270      	movs	r2, #112	@ 0x70
 8004372:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8004376:	481d      	ldr	r0, [pc, #116]	@ (80043ec <clearReadme+0x104>)
 8004378:	f7fe ff6b 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("Please use joystick for moving up for shooting down for quit and left right for rotation", 310, 190, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),1);
 800437c:	2200      	movs	r2, #0
 800437e:	2100      	movs	r1, #0
 8004380:	2000      	movs	r0, #0
 8004382:	f7fe ff03 	bl	800318c <decodeRgbValue>
 8004386:	4603      	mov	r3, r0
 8004388:	461c      	mov	r4, r3
 800438a:	2200      	movs	r2, #0
 800438c:	2100      	movs	r1, #0
 800438e:	2000      	movs	r0, #0
 8004390:	f7fe fefc 	bl	800318c <decodeRgbValue>
 8004394:	4603      	mov	r3, r0
 8004396:	461a      	mov	r2, r3
 8004398:	2301      	movs	r3, #1
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	9200      	str	r2, [sp, #0]
 800439e:	4623      	mov	r3, r4
 80043a0:	22be      	movs	r2, #190	@ 0xbe
 80043a2:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80043a6:	4812      	ldr	r0, [pc, #72]	@ (80043f0 <clearReadme+0x108>)
 80043a8:	f7fe ff53 	bl	8003252 <lcdPutSSized>
	lcdPutSSized("press right button to escape", 310, 220, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),1);
 80043ac:	2200      	movs	r2, #0
 80043ae:	2100      	movs	r1, #0
 80043b0:	2000      	movs	r0, #0
 80043b2:	f7fe feeb 	bl	800318c <decodeRgbValue>
 80043b6:	4603      	mov	r3, r0
 80043b8:	461c      	mov	r4, r3
 80043ba:	2200      	movs	r2, #0
 80043bc:	2100      	movs	r1, #0
 80043be:	2000      	movs	r0, #0
 80043c0:	f7fe fee4 	bl	800318c <decodeRgbValue>
 80043c4:	4603      	mov	r3, r0
 80043c6:	461a      	mov	r2, r3
 80043c8:	2301      	movs	r3, #1
 80043ca:	9301      	str	r3, [sp, #4]
 80043cc:	9200      	str	r2, [sp, #0]
 80043ce:	4623      	mov	r3, r4
 80043d0:	22dc      	movs	r2, #220	@ 0xdc
 80043d2:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80043d6:	4807      	ldr	r0, [pc, #28]	@ (80043f4 <clearReadme+0x10c>)
 80043d8:	f7fe ff3b 	bl	8003252 <lcdPutSSized>
}
 80043dc:	bf00      	nop
 80043de:	3704      	adds	r7, #4
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd90      	pop	{r4, r7, pc}
 80043e4:	0800804c 	.word	0x0800804c
 80043e8:	08008058 	.word	0x08008058
 80043ec:	0800812c 	.word	0x0800812c
 80043f0:	0800827c 	.word	0x0800827c
 80043f4:	080082d8 	.word	0x080082d8

080043f8 <menu>:

void menu(){
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af02      	add	r7, sp, #8
	int16_t difficulity = 0;		//v options sa bude dat menit
 80043fe:	2300      	movs	r3, #0
 8004400:	80fb      	strh	r3, [r7, #6]

	clearMenu();
 8004402:	f7ff fd7f 	bl	8003f04 <clearMenu>
	drawMenu();
 8004406:	f7ff fc1b 	bl	8003c40 <drawMenu>
	char healthText[16];
	char armorText[16];
*/
//lowerMenu();

	int select = 0;			//tymto sa vybera iba v main menu
 800440a:	2300      	movs	r3, #0
 800440c:	603b      	str	r3, [r7, #0]

	while(1)	//main menu cycle
	{

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) == GPIO_PIN_RESET)	//choose lower option
 800440e:	2102      	movs	r1, #2
 8004410:	4898      	ldr	r0, [pc, #608]	@ (8004674 <menu+0x27c>)
 8004412:	f000 fd41 	bl	8004e98 <HAL_GPIO_ReadPin>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10b      	bne.n	8004434 <menu+0x3c>
		{
			if(select == 0)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <menu+0x30>
				select = 3;
 8004422:	2303      	movs	r3, #3
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	e005      	b.n	8004434 <menu+0x3c>
			else if(select != 0)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <menu+0x3c>
				select--;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	3b01      	subs	r3, #1
 8004432:	603b      	str	r3, [r7, #0]
		}

		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0) == GPIO_PIN_RESET)	//choose option above
 8004434:	2101      	movs	r1, #1
 8004436:	488f      	ldr	r0, [pc, #572]	@ (8004674 <menu+0x27c>)
 8004438:	f000 fd2e 	bl	8004e98 <HAL_GPIO_ReadPin>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10b      	bne.n	800445a <menu+0x62>
		{
			if(select == 3)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b03      	cmp	r3, #3
 8004446:	d102      	bne.n	800444e <menu+0x56>
				select = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	e005      	b.n	800445a <menu+0x62>
			else if(select != 3)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d002      	beq.n	800445a <menu+0x62>
				select++;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	3301      	adds	r3, #1
 8004458:	603b      	str	r3, [r7, #0]
		}

		if(select == 0)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d12d      	bne.n	80044bc <menu+0xc4>
		{
			lcdPutSSized("NEW GAME", 205, 64, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8004460:	2200      	movs	r2, #0
 8004462:	2100      	movs	r1, #0
 8004464:	2000      	movs	r0, #0
 8004466:	f7fe fe91 	bl	800318c <decodeRgbValue>
 800446a:	4603      	mov	r3, r0
 800446c:	461c      	mov	r4, r3
 800446e:	2200      	movs	r2, #0
 8004470:	2100      	movs	r1, #0
 8004472:	2000      	movs	r0, #0
 8004474:	f7fe fe8a 	bl	800318c <decodeRgbValue>
 8004478:	4603      	mov	r3, r0
 800447a:	461a      	mov	r2, r3
 800447c:	2302      	movs	r3, #2
 800447e:	9301      	str	r3, [sp, #4]
 8004480:	9200      	str	r2, [sp, #0]
 8004482:	4623      	mov	r3, r4
 8004484:	2240      	movs	r2, #64	@ 0x40
 8004486:	21cd      	movs	r1, #205	@ 0xcd
 8004488:	487b      	ldr	r0, [pc, #492]	@ (8004678 <menu+0x280>)
 800448a:	f7fe fee2 	bl	8003252 <lcdPutSSized>
			//LL_mDelay(750);
			lcdPutSSized("NEW GAME", 205, 64, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 800448e:	221f      	movs	r2, #31
 8004490:	211f      	movs	r1, #31
 8004492:	201f      	movs	r0, #31
 8004494:	f7fe fe7a 	bl	800318c <decodeRgbValue>
 8004498:	4603      	mov	r3, r0
 800449a:	461c      	mov	r4, r3
 800449c:	2200      	movs	r2, #0
 800449e:	2100      	movs	r1, #0
 80044a0:	2000      	movs	r0, #0
 80044a2:	f7fe fe73 	bl	800318c <decodeRgbValue>
 80044a6:	4603      	mov	r3, r0
 80044a8:	461a      	mov	r2, r3
 80044aa:	2302      	movs	r3, #2
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	9200      	str	r2, [sp, #0]
 80044b0:	4623      	mov	r3, r4
 80044b2:	2240      	movs	r2, #64	@ 0x40
 80044b4:	21cd      	movs	r1, #205	@ 0xcd
 80044b6:	4870      	ldr	r0, [pc, #448]	@ (8004678 <menu+0x280>)
 80044b8:	f7fe fecb 	bl	8003252 <lcdPutSSized>
		}
		if(select == 1)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d12d      	bne.n	800451e <menu+0x126>
		{
			lcdPutSSized("OPTIONS", 205, 80, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 80044c2:	2200      	movs	r2, #0
 80044c4:	2100      	movs	r1, #0
 80044c6:	2000      	movs	r0, #0
 80044c8:	f7fe fe60 	bl	800318c <decodeRgbValue>
 80044cc:	4603      	mov	r3, r0
 80044ce:	461c      	mov	r4, r3
 80044d0:	2200      	movs	r2, #0
 80044d2:	2100      	movs	r1, #0
 80044d4:	2000      	movs	r0, #0
 80044d6:	f7fe fe59 	bl	800318c <decodeRgbValue>
 80044da:	4603      	mov	r3, r0
 80044dc:	461a      	mov	r2, r3
 80044de:	2302      	movs	r3, #2
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	9200      	str	r2, [sp, #0]
 80044e4:	4623      	mov	r3, r4
 80044e6:	2250      	movs	r2, #80	@ 0x50
 80044e8:	21cd      	movs	r1, #205	@ 0xcd
 80044ea:	4864      	ldr	r0, [pc, #400]	@ (800467c <menu+0x284>)
 80044ec:	f7fe feb1 	bl	8003252 <lcdPutSSized>
			//LL_mDelay(750);
			lcdPutSSized("OPTIONS", 205, 80, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80044f0:	221f      	movs	r2, #31
 80044f2:	211f      	movs	r1, #31
 80044f4:	201f      	movs	r0, #31
 80044f6:	f7fe fe49 	bl	800318c <decodeRgbValue>
 80044fa:	4603      	mov	r3, r0
 80044fc:	461c      	mov	r4, r3
 80044fe:	2200      	movs	r2, #0
 8004500:	2100      	movs	r1, #0
 8004502:	2000      	movs	r0, #0
 8004504:	f7fe fe42 	bl	800318c <decodeRgbValue>
 8004508:	4603      	mov	r3, r0
 800450a:	461a      	mov	r2, r3
 800450c:	2302      	movs	r3, #2
 800450e:	9301      	str	r3, [sp, #4]
 8004510:	9200      	str	r2, [sp, #0]
 8004512:	4623      	mov	r3, r4
 8004514:	2250      	movs	r2, #80	@ 0x50
 8004516:	21cd      	movs	r1, #205	@ 0xcd
 8004518:	4858      	ldr	r0, [pc, #352]	@ (800467c <menu+0x284>)
 800451a:	f7fe fe9a 	bl	8003252 <lcdPutSSized>
		}
		if(select == 2)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d12d      	bne.n	8004580 <menu+0x188>
		{
			lcdPutSSized("READ THIS!", 205, 96, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8004524:	2200      	movs	r2, #0
 8004526:	2100      	movs	r1, #0
 8004528:	2000      	movs	r0, #0
 800452a:	f7fe fe2f 	bl	800318c <decodeRgbValue>
 800452e:	4603      	mov	r3, r0
 8004530:	461c      	mov	r4, r3
 8004532:	2200      	movs	r2, #0
 8004534:	2100      	movs	r1, #0
 8004536:	2000      	movs	r0, #0
 8004538:	f7fe fe28 	bl	800318c <decodeRgbValue>
 800453c:	4603      	mov	r3, r0
 800453e:	461a      	mov	r2, r3
 8004540:	2302      	movs	r3, #2
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	9200      	str	r2, [sp, #0]
 8004546:	4623      	mov	r3, r4
 8004548:	2260      	movs	r2, #96	@ 0x60
 800454a:	21cd      	movs	r1, #205	@ 0xcd
 800454c:	484c      	ldr	r0, [pc, #304]	@ (8004680 <menu+0x288>)
 800454e:	f7fe fe80 	bl	8003252 <lcdPutSSized>
			//LL_mDelay(750);
			lcdPutSSized("READ THIS!", 205, 96, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8004552:	221f      	movs	r2, #31
 8004554:	211f      	movs	r1, #31
 8004556:	201f      	movs	r0, #31
 8004558:	f7fe fe18 	bl	800318c <decodeRgbValue>
 800455c:	4603      	mov	r3, r0
 800455e:	461c      	mov	r4, r3
 8004560:	2200      	movs	r2, #0
 8004562:	2100      	movs	r1, #0
 8004564:	2000      	movs	r0, #0
 8004566:	f7fe fe11 	bl	800318c <decodeRgbValue>
 800456a:	4603      	mov	r3, r0
 800456c:	461a      	mov	r2, r3
 800456e:	2302      	movs	r3, #2
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	9200      	str	r2, [sp, #0]
 8004574:	4623      	mov	r3, r4
 8004576:	2260      	movs	r2, #96	@ 0x60
 8004578:	21cd      	movs	r1, #205	@ 0xcd
 800457a:	4841      	ldr	r0, [pc, #260]	@ (8004680 <menu+0x288>)
 800457c:	f7fe fe69 	bl	8003252 <lcdPutSSized>
		}
		if(select == 3)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b03      	cmp	r3, #3
 8004584:	d12d      	bne.n	80045e2 <menu+0x1ea>
		{
			lcdPutSSized("QUIT GAME", 205, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8004586:	2200      	movs	r2, #0
 8004588:	2100      	movs	r1, #0
 800458a:	2000      	movs	r0, #0
 800458c:	f7fe fdfe 	bl	800318c <decodeRgbValue>
 8004590:	4603      	mov	r3, r0
 8004592:	461c      	mov	r4, r3
 8004594:	2200      	movs	r2, #0
 8004596:	2100      	movs	r1, #0
 8004598:	2000      	movs	r0, #0
 800459a:	f7fe fdf7 	bl	800318c <decodeRgbValue>
 800459e:	4603      	mov	r3, r0
 80045a0:	461a      	mov	r2, r3
 80045a2:	2302      	movs	r3, #2
 80045a4:	9301      	str	r3, [sp, #4]
 80045a6:	9200      	str	r2, [sp, #0]
 80045a8:	4623      	mov	r3, r4
 80045aa:	2270      	movs	r2, #112	@ 0x70
 80045ac:	21cd      	movs	r1, #205	@ 0xcd
 80045ae:	4835      	ldr	r0, [pc, #212]	@ (8004684 <menu+0x28c>)
 80045b0:	f7fe fe4f 	bl	8003252 <lcdPutSSized>
			//LL_mDelay(750);
			lcdPutSSized("QUIT GAME", 205, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80045b4:	221f      	movs	r2, #31
 80045b6:	211f      	movs	r1, #31
 80045b8:	201f      	movs	r0, #31
 80045ba:	f7fe fde7 	bl	800318c <decodeRgbValue>
 80045be:	4603      	mov	r3, r0
 80045c0:	461c      	mov	r4, r3
 80045c2:	2200      	movs	r2, #0
 80045c4:	2100      	movs	r1, #0
 80045c6:	2000      	movs	r0, #0
 80045c8:	f7fe fde0 	bl	800318c <decodeRgbValue>
 80045cc:	4603      	mov	r3, r0
 80045ce:	461a      	mov	r2, r3
 80045d0:	2302      	movs	r3, #2
 80045d2:	9301      	str	r3, [sp, #4]
 80045d4:	9200      	str	r2, [sp, #0]
 80045d6:	4623      	mov	r3, r4
 80045d8:	2270      	movs	r2, #112	@ 0x70
 80045da:	21cd      	movs	r1, #205	@ 0xcd
 80045dc:	4829      	ldr	r0, [pc, #164]	@ (8004684 <menu+0x28c>)
 80045de:	f7fe fe38 	bl	8003252 <lcdPutSSized>
		}

		//zacat novu hru
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == GPIO_PIN_RESET && select == 0) {
 80045e2:	2108      	movs	r1, #8
 80045e4:	4823      	ldr	r0, [pc, #140]	@ (8004674 <menu+0x27c>)
 80045e6:	f000 fc57 	bl	8004e98 <HAL_GPIO_ReadPin>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10b      	bne.n	8004608 <menu+0x210>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d108      	bne.n	8004608 <menu+0x210>
			clearMenu();
 80045f6:	f7ff fc85 	bl	8003f04 <clearMenu>
			startNewGame(difficulity);
 80045fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fd f850 	bl	80016a4 <startNewGame>
			drawMenu();
 8004604:	f7ff fb1c 	bl	8003c40 <drawMenu>
		}

		//enter options menu
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == GPIO_PIN_RESET && select == 1){
 8004608:	2108      	movs	r1, #8
 800460a:	481a      	ldr	r0, [pc, #104]	@ (8004674 <menu+0x27c>)
 800460c:	f000 fc44 	bl	8004e98 <HAL_GPIO_ReadPin>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	f040 80e4 	bne.w	80047e0 <menu+0x3e8>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b01      	cmp	r3, #1
 800461c:	f040 80e0 	bne.w	80047e0 <menu+0x3e8>
			clearMenu();
 8004620:	f7ff fc70 	bl	8003f04 <clearMenu>
			drawDifficulty();
 8004624:	f7ff fd00 	bl	8004028 <drawDifficulty>
			while(1){

				// vyber difficulity podla stlacenia tlacitok
				if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) == GPIO_PIN_RESET)	//choose option above
 8004628:	2102      	movs	r1, #2
 800462a:	4812      	ldr	r0, [pc, #72]	@ (8004674 <menu+0x27c>)
 800462c:	f000 fc34 	bl	8004e98 <HAL_GPIO_ReadPin>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d110      	bne.n	8004658 <menu+0x260>
				{
					if(difficulity == 0)
 8004636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <menu+0x24c>
						difficulity = 2;
 800463e:	2302      	movs	r3, #2
 8004640:	80fb      	strh	r3, [r7, #6]
 8004642:	e009      	b.n	8004658 <menu+0x260>
					else if(difficulity != 0)
 8004644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <menu+0x260>
						difficulity--;
 800464c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004650:	b29b      	uxth	r3, r3
 8004652:	3b01      	subs	r3, #1
 8004654:	b29b      	uxth	r3, r3
 8004656:	80fb      	strh	r3, [r7, #6]
				}

				if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0) == GPIO_PIN_RESET)	//choose option below
 8004658:	2101      	movs	r1, #1
 800465a:	4806      	ldr	r0, [pc, #24]	@ (8004674 <menu+0x27c>)
 800465c:	f000 fc1c 	bl	8004e98 <HAL_GPIO_ReadPin>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d11a      	bne.n	800469c <menu+0x2a4>
				{
					if(difficulity == 2)
 8004666:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800466a:	2b02      	cmp	r3, #2
 800466c:	d10c      	bne.n	8004688 <menu+0x290>
						difficulity = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	80fb      	strh	r3, [r7, #6]
 8004672:	e013      	b.n	800469c <menu+0x2a4>
 8004674:	48000400 	.word	0x48000400
 8004678:	08007fd4 	.word	0x08007fd4
 800467c:	08007fe0 	.word	0x08007fe0
 8004680:	08007fe8 	.word	0x08007fe8
 8004684:	08007ff4 	.word	0x08007ff4
					else if(difficulity != 2)
 8004688:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d005      	beq.n	800469c <menu+0x2a4>
						difficulity++;
 8004690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004694:	b29b      	uxth	r3, r3
 8004696:	3301      	adds	r3, #1
 8004698:	b29b      	uxth	r3, r3
 800469a:	80fb      	strh	r3, [r7, #6]
				}


				if(difficulity == 0)
 800469c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d12d      	bne.n	8004700 <menu+0x308>
				{
					lcdPutSSized("EASY", 210, 80, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),3);
 80046a4:	2200      	movs	r2, #0
 80046a6:	2100      	movs	r1, #0
 80046a8:	2000      	movs	r0, #0
 80046aa:	f7fe fd6f 	bl	800318c <decodeRgbValue>
 80046ae:	4603      	mov	r3, r0
 80046b0:	461c      	mov	r4, r3
 80046b2:	2200      	movs	r2, #0
 80046b4:	2100      	movs	r1, #0
 80046b6:	2000      	movs	r0, #0
 80046b8:	f7fe fd68 	bl	800318c <decodeRgbValue>
 80046bc:	4603      	mov	r3, r0
 80046be:	461a      	mov	r2, r3
 80046c0:	2303      	movs	r3, #3
 80046c2:	9301      	str	r3, [sp, #4]
 80046c4:	9200      	str	r2, [sp, #0]
 80046c6:	4623      	mov	r3, r4
 80046c8:	2250      	movs	r2, #80	@ 0x50
 80046ca:	21d2      	movs	r1, #210	@ 0xd2
 80046cc:	4875      	ldr	r0, [pc, #468]	@ (80048a4 <menu+0x4ac>)
 80046ce:	f7fe fdc0 	bl	8003252 <lcdPutSSized>
					lcdPutSSized("EASY", 210, 80, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),3);
 80046d2:	221f      	movs	r2, #31
 80046d4:	211f      	movs	r1, #31
 80046d6:	201f      	movs	r0, #31
 80046d8:	f7fe fd58 	bl	800318c <decodeRgbValue>
 80046dc:	4603      	mov	r3, r0
 80046de:	461c      	mov	r4, r3
 80046e0:	2200      	movs	r2, #0
 80046e2:	2100      	movs	r1, #0
 80046e4:	2000      	movs	r0, #0
 80046e6:	f7fe fd51 	bl	800318c <decodeRgbValue>
 80046ea:	4603      	mov	r3, r0
 80046ec:	461a      	mov	r2, r3
 80046ee:	2303      	movs	r3, #3
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	9200      	str	r2, [sp, #0]
 80046f4:	4623      	mov	r3, r4
 80046f6:	2250      	movs	r2, #80	@ 0x50
 80046f8:	21d2      	movs	r1, #210	@ 0xd2
 80046fa:	486a      	ldr	r0, [pc, #424]	@ (80048a4 <menu+0x4ac>)
 80046fc:	f7fe fda9 	bl	8003252 <lcdPutSSized>
				}

				if(difficulity == 1)
 8004700:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d12d      	bne.n	8004764 <menu+0x36c>
				{
					lcdPutSSized("MEDIUM", 210, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),3);
 8004708:	2200      	movs	r2, #0
 800470a:	2100      	movs	r1, #0
 800470c:	2000      	movs	r0, #0
 800470e:	f7fe fd3d 	bl	800318c <decodeRgbValue>
 8004712:	4603      	mov	r3, r0
 8004714:	461c      	mov	r4, r3
 8004716:	2200      	movs	r2, #0
 8004718:	2100      	movs	r1, #0
 800471a:	2000      	movs	r0, #0
 800471c:	f7fe fd36 	bl	800318c <decodeRgbValue>
 8004720:	4603      	mov	r3, r0
 8004722:	461a      	mov	r2, r3
 8004724:	2303      	movs	r3, #3
 8004726:	9301      	str	r3, [sp, #4]
 8004728:	9200      	str	r2, [sp, #0]
 800472a:	4623      	mov	r3, r4
 800472c:	2270      	movs	r2, #112	@ 0x70
 800472e:	21d2      	movs	r1, #210	@ 0xd2
 8004730:	485d      	ldr	r0, [pc, #372]	@ (80048a8 <menu+0x4b0>)
 8004732:	f7fe fd8e 	bl	8003252 <lcdPutSSized>
					lcdPutSSized("MEDIUM", 210, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),3);
 8004736:	221f      	movs	r2, #31
 8004738:	211f      	movs	r1, #31
 800473a:	201f      	movs	r0, #31
 800473c:	f7fe fd26 	bl	800318c <decodeRgbValue>
 8004740:	4603      	mov	r3, r0
 8004742:	461c      	mov	r4, r3
 8004744:	2200      	movs	r2, #0
 8004746:	2100      	movs	r1, #0
 8004748:	2000      	movs	r0, #0
 800474a:	f7fe fd1f 	bl	800318c <decodeRgbValue>
 800474e:	4603      	mov	r3, r0
 8004750:	461a      	mov	r2, r3
 8004752:	2303      	movs	r3, #3
 8004754:	9301      	str	r3, [sp, #4]
 8004756:	9200      	str	r2, [sp, #0]
 8004758:	4623      	mov	r3, r4
 800475a:	2270      	movs	r2, #112	@ 0x70
 800475c:	21d2      	movs	r1, #210	@ 0xd2
 800475e:	4852      	ldr	r0, [pc, #328]	@ (80048a8 <menu+0x4b0>)
 8004760:	f7fe fd77 	bl	8003252 <lcdPutSSized>
				}

				if(difficulity == 2)
 8004764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004768:	2b02      	cmp	r3, #2
 800476a:	d12d      	bne.n	80047c8 <menu+0x3d0>
				{
					lcdPutSSized("HARD", 210, 144, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),3);
 800476c:	2200      	movs	r2, #0
 800476e:	2100      	movs	r1, #0
 8004770:	2000      	movs	r0, #0
 8004772:	f7fe fd0b 	bl	800318c <decodeRgbValue>
 8004776:	4603      	mov	r3, r0
 8004778:	461c      	mov	r4, r3
 800477a:	2200      	movs	r2, #0
 800477c:	2100      	movs	r1, #0
 800477e:	2000      	movs	r0, #0
 8004780:	f7fe fd04 	bl	800318c <decodeRgbValue>
 8004784:	4603      	mov	r3, r0
 8004786:	461a      	mov	r2, r3
 8004788:	2303      	movs	r3, #3
 800478a:	9301      	str	r3, [sp, #4]
 800478c:	9200      	str	r2, [sp, #0]
 800478e:	4623      	mov	r3, r4
 8004790:	2290      	movs	r2, #144	@ 0x90
 8004792:	21d2      	movs	r1, #210	@ 0xd2
 8004794:	4845      	ldr	r0, [pc, #276]	@ (80048ac <menu+0x4b4>)
 8004796:	f7fe fd5c 	bl	8003252 <lcdPutSSized>
					lcdPutSSized("HARD", 210, 144, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),3);
 800479a:	221f      	movs	r2, #31
 800479c:	211f      	movs	r1, #31
 800479e:	201f      	movs	r0, #31
 80047a0:	f7fe fcf4 	bl	800318c <decodeRgbValue>
 80047a4:	4603      	mov	r3, r0
 80047a6:	461c      	mov	r4, r3
 80047a8:	2200      	movs	r2, #0
 80047aa:	2100      	movs	r1, #0
 80047ac:	2000      	movs	r0, #0
 80047ae:	f7fe fced 	bl	800318c <decodeRgbValue>
 80047b2:	4603      	mov	r3, r0
 80047b4:	461a      	mov	r2, r3
 80047b6:	2303      	movs	r3, #3
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	9200      	str	r2, [sp, #0]
 80047bc:	4623      	mov	r3, r4
 80047be:	2290      	movs	r2, #144	@ 0x90
 80047c0:	21d2      	movs	r1, #210	@ 0xd2
 80047c2:	483a      	ldr	r0, [pc, #232]	@ (80048ac <menu+0x4b4>)
 80047c4:	f7fe fd45 	bl	8003252 <lcdPutSSized>
				}

				//ukoncit options menu potvrdenim vyberu, snad pin3 je spravny pin
				if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == GPIO_PIN_RESET){
 80047c8:	2108      	movs	r1, #8
 80047ca:	4839      	ldr	r0, [pc, #228]	@ (80048b0 <menu+0x4b8>)
 80047cc:	f000 fb64 	bl	8004e98 <HAL_GPIO_ReadPin>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f47f af28 	bne.w	8004628 <menu+0x230>
					clearDifficulty();
 80047d8:	f7ff fc92 	bl	8004100 <clearDifficulty>
					drawMenu();
 80047dc:	f7ff fa30 	bl	8003c40 <drawMenu>
				}
			}
		}

		//ked kliknes na "read this"
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == GPIO_PIN_RESET && select == 2) {
 80047e0:	2108      	movs	r1, #8
 80047e2:	4833      	ldr	r0, [pc, #204]	@ (80048b0 <menu+0x4b8>)
 80047e4:	f000 fb58 	bl	8004e98 <HAL_GPIO_ReadPin>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d114      	bne.n	8004818 <menu+0x420>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d111      	bne.n	8004818 <menu+0x420>
			clearMenu();
 80047f4:	f7ff fb86 	bl	8003f04 <clearMenu>
			drawReadme();
 80047f8:	f7ff fcee 	bl	80041d8 <drawReadme>
			//LL_mDelay(5000);

			while(1) {
				if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == GPIO_PIN_RESET){
 80047fc:	2108      	movs	r1, #8
 80047fe:	482c      	ldr	r0, [pc, #176]	@ (80048b0 <menu+0x4b8>)
 8004800:	f000 fb4a 	bl	8004e98 <HAL_GPIO_ReadPin>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f8      	bne.n	80047fc <menu+0x404>
					clearReadme();
 800480a:	f7ff fd6d 	bl	80042e8 <clearReadme>
					//clearDifficulty();
					drawMenu();
 800480e:	f7ff fa17 	bl	8003c40 <drawMenu>
					break;
 8004812:	bf00      	nop
				}
			}
			drawMenu();
 8004814:	f7ff fa14 	bl	8003c40 <drawMenu>
		}

		//ked kliknes na "quit", tak sa ukonci cely program, potom treba restartovat STMko
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_3) == GPIO_PIN_RESET && select == 3) {
 8004818:	2108      	movs	r1, #8
 800481a:	4825      	ldr	r0, [pc, #148]	@ (80048b0 <menu+0x4b8>)
 800481c:	f000 fb3c 	bl	8004e98 <HAL_GPIO_ReadPin>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	f47f adf3 	bne.w	800440e <menu+0x16>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2b03      	cmp	r3, #3
 800482c:	f47f adef 	bne.w	800440e <menu+0x16>
			clearMenu();
 8004830:	f7ff fb68 	bl	8003f04 <clearMenu>
			break;
 8004834:	bf00      	nop
		}

	}
	lcdPutSSized("the game has been quit.", 220, 120, decodeRgbValue(100, 100, 100), decodeRgbValue(0, 0, 0),1);
 8004836:	2264      	movs	r2, #100	@ 0x64
 8004838:	2164      	movs	r1, #100	@ 0x64
 800483a:	2064      	movs	r0, #100	@ 0x64
 800483c:	f7fe fca6 	bl	800318c <decodeRgbValue>
 8004840:	4603      	mov	r3, r0
 8004842:	461c      	mov	r4, r3
 8004844:	2200      	movs	r2, #0
 8004846:	2100      	movs	r1, #0
 8004848:	2000      	movs	r0, #0
 800484a:	f7fe fc9f 	bl	800318c <decodeRgbValue>
 800484e:	4603      	mov	r3, r0
 8004850:	461a      	mov	r2, r3
 8004852:	2301      	movs	r3, #1
 8004854:	9301      	str	r3, [sp, #4]
 8004856:	9200      	str	r2, [sp, #0]
 8004858:	4623      	mov	r3, r4
 800485a:	2278      	movs	r2, #120	@ 0x78
 800485c:	21dc      	movs	r1, #220	@ 0xdc
 800485e:	4815      	ldr	r0, [pc, #84]	@ (80048b4 <menu+0x4bc>)
 8004860:	f7fe fcf7 	bl	8003252 <lcdPutSSized>
	LL_mDelay(2000);
 8004864:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004868:	f000 fd5a 	bl	8005320 <LL_mDelay>
	lcdPutSSized("the game has been quit.", 220, 120, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),1);
 800486c:	2200      	movs	r2, #0
 800486e:	2100      	movs	r1, #0
 8004870:	2000      	movs	r0, #0
 8004872:	f7fe fc8b 	bl	800318c <decodeRgbValue>
 8004876:	4603      	mov	r3, r0
 8004878:	461c      	mov	r4, r3
 800487a:	2200      	movs	r2, #0
 800487c:	2100      	movs	r1, #0
 800487e:	2000      	movs	r0, #0
 8004880:	f7fe fc84 	bl	800318c <decodeRgbValue>
 8004884:	4603      	mov	r3, r0
 8004886:	461a      	mov	r2, r3
 8004888:	2301      	movs	r3, #1
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	9200      	str	r2, [sp, #0]
 800488e:	4623      	mov	r3, r4
 8004890:	2278      	movs	r2, #120	@ 0x78
 8004892:	21dc      	movs	r1, #220	@ 0xdc
 8004894:	4807      	ldr	r0, [pc, #28]	@ (80048b4 <menu+0x4bc>)
 8004896:	f7fe fcdc 	bl	8003252 <lcdPutSSized>
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd90      	pop	{r4, r7, pc}
 80048a2:	bf00      	nop
 80048a4:	08008034 	.word	0x08008034
 80048a8:	0800803c 	.word	0x0800803c
 80048ac:	08008044 	.word	0x08008044
 80048b0:	48000400 	.word	0x48000400
 80048b4:	080082f8 	.word	0x080082f8

080048b8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	601a      	str	r2, [r3, #0]
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f023 0210 	bic.w	r2, r3, #16
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	605a      	str	r2, [r3, #4]
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f043 0208 	orr.w	r2, r3, #8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	605a      	str	r2, [r3, #4]
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f023 0208 	bic.w	r2, r3, #8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	605a      	str	r2, [r3, #4]
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b02      	cmp	r3, #2
 8004976:	d101      	bne.n	800497c <LL_SPI_IsActiveFlag_TXE+0x18>
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	330c      	adds	r3, #12
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	b2db      	uxtb	r3, r3
}
 800499a:	4618      	mov	r0, r3
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b085      	sub	sp, #20
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	460b      	mov	r3, r1
 80049b0:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	330c      	adds	r3, #12
 80049b6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80049be:	bf00      	nop
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <LL_GPIO_SetOutputPin>:
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
 80049d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	619a      	str	r2, [r3, #24]
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <LL_GPIO_ResetOutputPin>:
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <LL_AHB1_GRP1_EnableClock>:
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8004a0c:	4b08      	ldr	r3, [pc, #32]	@ (8004a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004a0e:	695a      	ldr	r2, [r3, #20]
 8004a10:	4907      	ldr	r1, [pc, #28]	@ (8004a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8004a18:	4b05      	ldr	r3, [pc, #20]	@ (8004a30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004a1a:	695a      	ldr	r2, [r3, #20]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a22:	68fb      	ldr	r3, [r7, #12]
}
 8004a24:	bf00      	nop
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	40021000 	.word	0x40021000

08004a34 <LL_APB2_GRP1_EnableClock>:
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004a3c:	4b08      	ldr	r3, [pc, #32]	@ (8004a60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004a3e:	699a      	ldr	r2, [r3, #24]
 8004a40:	4907      	ldr	r1, [pc, #28]	@ (8004a60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004a48:	4b05      	ldr	r3, [pc, #20]	@ (8004a60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004a4a:	699a      	ldr	r2, [r3, #24]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a52:	68fb      	ldr	r3, [r7, #12]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	40021000 	.word	0x40021000

08004a64 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b090      	sub	sp, #64	@ 0x40
 8004a68:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004a6a:	f107 0318 	add.w	r3, r7, #24
 8004a6e:	2228      	movs	r2, #40	@ 0x28
 8004a70:	2100      	movs	r1, #0
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 ffd6 	bl	8005a24 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a78:	463b      	mov	r3, r7
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	605a      	str	r2, [r3, #4]
 8004a80:	609a      	str	r2, [r3, #8]
 8004a82:	60da      	str	r2, [r3, #12]
 8004a84:	611a      	str	r2, [r3, #16]
 8004a86:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8004a88:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004a8c:	f7ff ffd2 	bl	8004a34 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004a90:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8004a94:	f7ff ffb6 	bl	8004a04 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8004a98:	23e0      	movs	r3, #224	@ 0xe0
 8004a9a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004aac:	2305      	movs	r3, #5
 8004aae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab0:	463b      	mov	r3, r7
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ab8:	f000 fb0b 	bl	80050d2 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004abc:	2300      	movs	r3, #0
 8004abe:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004ac0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8004ac4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004ac6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8004aca:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8004acc:	2300      	movs	r3, #0
 8004ace:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8004ad4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  // rychlost prenosu ovplyvnuje
  SPI_InitStruct.BaudRate =  LL_SPI_BAUDRATEPRESCALER_DIV2; //najrychlejsie
 8004ada:	2300      	movs	r3, #0
 8004adc:	633b      	str	r3, [r7, #48]	@ 0x30
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32; //250kBps povodne
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64; //125kBps
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128; //pomalsie
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV256; //najpomalsie
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8004ae6:	2307      	movs	r3, #7
 8004ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  SPI1->CR2 |= 1 << 12;
 8004aea:	4b0e      	ldr	r3, [pc, #56]	@ (8004b24 <MX_SPI1_Init+0xc0>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4a0d      	ldr	r2, [pc, #52]	@ (8004b24 <MX_SPI1_Init+0xc0>)
 8004af0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004af4:	6053      	str	r3, [r2, #4]

  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8004af6:	f107 0318 	add.w	r3, r7, #24
 8004afa:	4619      	mov	r1, r3
 8004afc:	4809      	ldr	r0, [pc, #36]	@ (8004b24 <MX_SPI1_Init+0xc0>)
 8004afe:	f000 fb8e 	bl	800521e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8004b02:	2100      	movs	r1, #0
 8004b04:	4807      	ldr	r0, [pc, #28]	@ (8004b24 <MX_SPI1_Init+0xc0>)
 8004b06:	f7ff fee7 	bl	80048d8 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8004b0a:	4806      	ldr	r0, [pc, #24]	@ (8004b24 <MX_SPI1_Init+0xc0>)
 8004b0c:	f7ff ff07 	bl	800491e <LL_SPI_DisableNSSPulseMgt>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8004b10:	4804      	ldr	r0, [pc, #16]	@ (8004b24 <MX_SPI1_Init+0xc0>)
 8004b12:	f7ff fef4 	bl	80048fe <LL_SPI_EnableNSSPulseMgt>
  LL_SPI_Enable(SPI1);
 8004b16:	4803      	ldr	r0, [pc, #12]	@ (8004b24 <MX_SPI1_Init+0xc0>)
 8004b18:	f7ff fece 	bl	80048b8 <LL_SPI_Enable>

}
 8004b1c:	bf00      	nop
 8004b1e:	3740      	adds	r7, #64	@ 0x40
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40013000 	.word	0x40013000

08004b28 <readWriteSPI1>:


unsigned char readWriteSPI1(unsigned char txData)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	71fb      	strb	r3, [r7, #7]
	unsigned char  rxData;

	LL_SPI_TransmitData8(SPI1, (uint8_t)txData);
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	4619      	mov	r1, r3
 8004b36:	480d      	ldr	r0, [pc, #52]	@ (8004b6c <readWriteSPI1+0x44>)
 8004b38:	f7ff ff35 	bl	80049a6 <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_TXE(SPI1) != SET);
 8004b3c:	bf00      	nop
 8004b3e:	480b      	ldr	r0, [pc, #44]	@ (8004b6c <readWriteSPI1+0x44>)
 8004b40:	f7ff ff10 	bl	8004964 <LL_SPI_IsActiveFlag_TXE>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d1f9      	bne.n	8004b3e <readWriteSPI1+0x16>

	// wait until RXNE = 1
	while(LL_SPI_IsActiveFlag_RXNE(SPI1) != SET);
 8004b4a:	bf00      	nop
 8004b4c:	4807      	ldr	r0, [pc, #28]	@ (8004b6c <readWriteSPI1+0x44>)
 8004b4e:	f7ff fef6 	bl	800493e <LL_SPI_IsActiveFlag_RXNE>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d1f9      	bne.n	8004b4c <readWriteSPI1+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = LL_SPI_ReceiveData8(SPI1);
 8004b58:	4804      	ldr	r0, [pc, #16]	@ (8004b6c <readWriteSPI1+0x44>)
 8004b5a:	f7ff ff16 	bl	800498a <LL_SPI_ReceiveData8>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	73fb      	strb	r3, [r7, #15]

	return rxData;
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40013000 	.word	0x40013000

08004b70 <initCS_Pin>:

void initCS_Pin(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
	cs_set();
 8004b74:	f000 f802 	bl	8004b7c <cs_set>
}
 8004b78:	bf00      	nop
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <cs_set>:

void cs_set(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8004b80:	2120      	movs	r1, #32
 8004b82:	4802      	ldr	r0, [pc, #8]	@ (8004b8c <cs_set+0x10>)
 8004b84:	f7ff ff21 	bl	80049ca <LL_GPIO_SetOutputPin>
}
 8004b88:	bf00      	nop
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	48000400 	.word	0x48000400

08004b90 <cs_reset>:

void cs_reset(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8004b94:	2120      	movs	r1, #32
 8004b96:	4802      	ldr	r0, [pc, #8]	@ (8004ba0 <cs_reset+0x10>)
 8004b98:	f7ff ff25 	bl	80049e6 <LL_GPIO_ResetOutputPin>
}
 8004b9c:	bf00      	nop
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	48000400 	.word	0x48000400

08004ba4 <initCD_Pin>:

void initCD_Pin(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
}
 8004ba8:	bf00      	nop
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
	...

08004bb4 <cd_set>:

void cd_set(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8004bb8:	2140      	movs	r1, #64	@ 0x40
 8004bba:	4802      	ldr	r0, [pc, #8]	@ (8004bc4 <cd_set+0x10>)
 8004bbc:	f7ff ff05 	bl	80049ca <LL_GPIO_SetOutputPin>
}
 8004bc0:	bf00      	nop
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	48000400 	.word	0x48000400

08004bc8 <cd_reset>:

void cd_reset(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8004bcc:	2140      	movs	r1, #64	@ 0x40
 8004bce:	4802      	ldr	r0, [pc, #8]	@ (8004bd8 <cd_reset+0x10>)
 8004bd0:	f7ff ff09 	bl	80049e6 <LL_GPIO_ResetOutputPin>
}
 8004bd4:	bf00      	nop
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	48000400 	.word	0x48000400

08004bdc <initRES_Pin>:

void initRES_Pin(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	*/
}
 8004be0:	bf00      	nop
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <res_set>:

void res_set(void)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8004bee:	2108      	movs	r1, #8
 8004bf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004bf4:	f7ff fee9 	bl	80049ca <LL_GPIO_SetOutputPin>
}
 8004bf8:	bf00      	nop
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <res_reset>:

void res_reset(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8004c00:	2108      	movs	r1, #8
 8004c02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c06:	f7ff feee 	bl	80049e6 <LL_GPIO_ResetOutputPin>
}
 8004c0a:	bf00      	nop
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004c12:	bf00      	nop
 8004c14:	e7fd      	b.n	8004c12 <NMI_Handler+0x4>

08004c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c16:	b480      	push	{r7}
 8004c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c1a:	bf00      	nop
 8004c1c:	e7fd      	b.n	8004c1a <HardFault_Handler+0x4>

08004c1e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c22:	bf00      	nop
 8004c24:	e7fd      	b.n	8004c22 <MemManage_Handler+0x4>

08004c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c26:	b480      	push	{r7}
 8004c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c2a:	bf00      	nop
 8004c2c:	e7fd      	b.n	8004c2a <BusFault_Handler+0x4>

08004c2e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c32:	bf00      	nop
 8004c34:	e7fd      	b.n	8004c32 <UsageFault_Handler+0x4>

08004c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c36:	b480      	push	{r7}
 8004c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c3a:	bf00      	nop
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c52:	b480      	push	{r7}
 8004c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c56:	bf00      	nop
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c64:	f000 f904 	bl	8004e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c68:	bf00      	nop
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  return 1;
 8004c70:	2301      	movs	r3, #1
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <_kill>:

int _kill(int pid, int sig)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004c86:	f000 ff59 	bl	8005b3c <__errno>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2216      	movs	r2, #22
 8004c8e:	601a      	str	r2, [r3, #0]
  return -1;
 8004c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <_exit>:

void _exit (int status)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7ff ffe7 	bl	8004c7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004cae:	bf00      	nop
 8004cb0:	e7fd      	b.n	8004cae <_exit+0x12>

08004cb2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b086      	sub	sp, #24
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e00a      	b.n	8004cda <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004cc4:	f3af 8000 	nop.w
 8004cc8:	4601      	mov	r1, r0
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	60ba      	str	r2, [r7, #8]
 8004cd0:	b2ca      	uxtb	r2, r1
 8004cd2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	dbf0      	blt.n	8004cc4 <_read+0x12>
  }

  return len;
 8004ce2:	687b      	ldr	r3, [r7, #4]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	e009      	b.n	8004d12 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	60ba      	str	r2, [r7, #8]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	dbf1      	blt.n	8004cfe <_write+0x12>
  }
  return len;
 8004d1a:	687b      	ldr	r3, [r7, #4]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <_close>:

int _close(int file)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004d2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d4c:	605a      	str	r2, [r3, #4]
  return 0;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <_isatty>:

int _isatty(int file)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004d64:	2301      	movs	r3, #1
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b085      	sub	sp, #20
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d94:	4a14      	ldr	r2, [pc, #80]	@ (8004de8 <_sbrk+0x5c>)
 8004d96:	4b15      	ldr	r3, [pc, #84]	@ (8004dec <_sbrk+0x60>)
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004da0:	4b13      	ldr	r3, [pc, #76]	@ (8004df0 <_sbrk+0x64>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004da8:	4b11      	ldr	r3, [pc, #68]	@ (8004df0 <_sbrk+0x64>)
 8004daa:	4a12      	ldr	r2, [pc, #72]	@ (8004df4 <_sbrk+0x68>)
 8004dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dae:	4b10      	ldr	r3, [pc, #64]	@ (8004df0 <_sbrk+0x64>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4413      	add	r3, r2
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d207      	bcs.n	8004dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004dbc:	f000 febe 	bl	8005b3c <__errno>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	220c      	movs	r2, #12
 8004dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dca:	e009      	b.n	8004de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004dcc:	4b08      	ldr	r3, [pc, #32]	@ (8004df0 <_sbrk+0x64>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dd2:	4b07      	ldr	r3, [pc, #28]	@ (8004df0 <_sbrk+0x64>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4413      	add	r3, r2
 8004dda:	4a05      	ldr	r2, [pc, #20]	@ (8004df0 <_sbrk+0x64>)
 8004ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004dde:	68fb      	ldr	r3, [r7, #12]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20003000 	.word	0x20003000
 8004dec:	00000400 	.word	0x00000400
 8004df0:	2000043c 	.word	0x2000043c
 8004df4:	20000590 	.word	0x20000590

08004df8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004dfc:	4b06      	ldr	r3, [pc, #24]	@ (8004e18 <SystemInit+0x20>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e02:	4a05      	ldr	r2, [pc, #20]	@ (8004e18 <SystemInit+0x20>)
 8004e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e0c:	bf00      	nop
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	e000ed00 	.word	0xe000ed00

08004e1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004e1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004e54 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004e20:	f7ff ffea 	bl	8004df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e24:	480c      	ldr	r0, [pc, #48]	@ (8004e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8004e26:	490d      	ldr	r1, [pc, #52]	@ (8004e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004e28:	4a0d      	ldr	r2, [pc, #52]	@ (8004e60 <LoopForever+0xe>)
  movs r3, #0
 8004e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e2c:	e002      	b.n	8004e34 <LoopCopyDataInit>

08004e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e32:	3304      	adds	r3, #4

08004e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e38:	d3f9      	bcc.n	8004e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8004e68 <LoopForever+0x16>)
  movs r3, #0
 8004e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e40:	e001      	b.n	8004e46 <LoopFillZerobss>

08004e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e44:	3204      	adds	r2, #4

08004e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e48:	d3fb      	bcc.n	8004e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e4a:	f000 fe7d 	bl	8005b48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004e4e:	f7fe fe85 	bl	8003b5c <main>

08004e52 <LoopForever>:

LoopForever:
    b LoopForever
 8004e52:	e7fe      	b.n	8004e52 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004e54:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8004e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e5c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8004e60:	08008918 	.word	0x08008918
  ldr r2, =_sbss
 8004e64:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8004e68:	20000590 	.word	0x20000590

08004e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004e6c:	e7fe      	b.n	8004e6c <ADC1_2_IRQHandler>
	...

08004e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e74:	4b06      	ldr	r3, [pc, #24]	@ (8004e90 <HAL_IncTick+0x20>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <HAL_IncTick+0x24>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4413      	add	r3, r2
 8004e80:	4a04      	ldr	r2, [pc, #16]	@ (8004e94 <HAL_IncTick+0x24>)
 8004e82:	6013      	str	r3, [r2, #0]
}
 8004e84:	bf00      	nop
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	20000014 	.word	0x20000014
 8004e94:	20000440 	.word	0x20000440

08004e98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	887b      	ldrh	r3, [r7, #2]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <HAL_GPIO_ReadPin+0x1e>
	/*char xxx[16];
	lcdPutS("joy out", 280, 80, decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));
	int k = (int)(GPIOx->IDR);
	sprintf(xxx, "%d ", k );
	lcdPutS(xxx, 200, 80, decodeRgbValue(255, 255, 255), decodeRgbValue(0, 0, 0));*/
    bitstatus = GPIO_PIN_SET;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	73fb      	strb	r3, [r7, #15]
 8004eb4:	e001      	b.n	8004eba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <LL_GPIO_SetPinMode>:
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b089      	sub	sp, #36	@ 0x24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	fa93 f3a3 	rbit	r3, r3
 8004ee2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	fab3 f383 	clz	r3, r3
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	2103      	movs	r1, #3
 8004ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	401a      	ands	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	fa93 f3a3 	rbit	r3, r3
 8004f02:	61bb      	str	r3, [r7, #24]
  return result;
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	fab3 f383 	clz	r3, r3
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	fa01 f303 	lsl.w	r3, r1, r3
 8004f14:	431a      	orrs	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	601a      	str	r2, [r3, #0]
}
 8004f1a:	bf00      	nop
 8004f1c:	3724      	adds	r7, #36	@ 0x24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <LL_GPIO_SetPinOutputType>:
{
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	401a      	ands	r2, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	fb01 f303 	mul.w	r3, r1, r3
 8004f44:	431a      	orrs	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	605a      	str	r2, [r3, #4]
}
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <LL_GPIO_SetPinSpeed>:
{
 8004f56:	b480      	push	{r7}
 8004f58:	b089      	sub	sp, #36	@ 0x24
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	fa93 f3a3 	rbit	r3, r3
 8004f70:	613b      	str	r3, [r7, #16]
  return result;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	fab3 f383 	clz	r3, r3
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	2103      	movs	r1, #3
 8004f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f82:	43db      	mvns	r3, r3
 8004f84:	401a      	ands	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	fa93 f3a3 	rbit	r3, r3
 8004f90:	61bb      	str	r3, [r7, #24]
  return result;
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	fab3 f383 	clz	r3, r3
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	609a      	str	r2, [r3, #8]
}
 8004fa8:	bf00      	nop
 8004faa:	3724      	adds	r7, #36	@ 0x24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <LL_GPIO_SetPinPull>:
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b089      	sub	sp, #36	@ 0x24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	fa93 f3a3 	rbit	r3, r3
 8004fce:	613b      	str	r3, [r7, #16]
  return result;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	fab3 f383 	clz	r3, r3
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	2103      	movs	r1, #3
 8004fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	fa93 f3a3 	rbit	r3, r3
 8004fee:	61bb      	str	r3, [r7, #24]
  return result;
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	fab3 f383 	clz	r3, r3
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8005000:	431a      	orrs	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	60da      	str	r2, [r3, #12]
}
 8005006:	bf00      	nop
 8005008:	3724      	adds	r7, #36	@ 0x24
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <LL_GPIO_SetAFPin_0_7>:
{
 8005012:	b480      	push	{r7}
 8005014:	b089      	sub	sp, #36	@ 0x24
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a1a      	ldr	r2, [r3, #32]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	fa93 f3a3 	rbit	r3, r3
 800502c:	613b      	str	r3, [r7, #16]
  return result;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	fab3 f383 	clz	r3, r3
 8005034:	b2db      	uxtb	r3, r3
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	210f      	movs	r1, #15
 800503a:	fa01 f303 	lsl.w	r3, r1, r3
 800503e:	43db      	mvns	r3, r3
 8005040:	401a      	ands	r2, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	fa93 f3a3 	rbit	r3, r3
 800504c:	61bb      	str	r3, [r7, #24]
  return result;
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	fab3 f383 	clz	r3, r3
 8005054:	b2db      	uxtb	r3, r3
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	fa01 f303 	lsl.w	r3, r1, r3
 800505e:	431a      	orrs	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	621a      	str	r2, [r3, #32]
}
 8005064:	bf00      	nop
 8005066:	3724      	adds	r7, #36	@ 0x24
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <LL_GPIO_SetAFPin_8_15>:
{
 8005070:	b480      	push	{r7}
 8005072:	b089      	sub	sp, #36	@ 0x24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	0a1b      	lsrs	r3, r3, #8
 8005084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	fa93 f3a3 	rbit	r3, r3
 800508c:	613b      	str	r3, [r7, #16]
  return result;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	fab3 f383 	clz	r3, r3
 8005094:	b2db      	uxtb	r3, r3
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	210f      	movs	r1, #15
 800509a:	fa01 f303 	lsl.w	r3, r1, r3
 800509e:	43db      	mvns	r3, r3
 80050a0:	401a      	ands	r2, r3
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	0a1b      	lsrs	r3, r3, #8
 80050a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	fa93 f3a3 	rbit	r3, r3
 80050ae:	61bb      	str	r3, [r7, #24]
  return result;
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	fab3 f383 	clz	r3, r3
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	fa01 f303 	lsl.w	r3, r1, r3
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80050c6:	bf00      	nop
 80050c8:	3724      	adds	r7, #36	@ 0x24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b088      	sub	sp, #32
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	fa93 f3a3 	rbit	r3, r3
 80050e8:	613b      	str	r3, [r7, #16]
  return result;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	fab3 f383 	clz	r3, r3
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80050f4:	e051      	b.n	800519a <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	2101      	movs	r1, #1
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005102:	4013      	ands	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d043      	beq.n	8005194 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d003      	beq.n	800511c <LL_GPIO_Init+0x4a>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d10e      	bne.n	800513a <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	461a      	mov	r2, r3
 8005122:	69b9      	ldr	r1, [r7, #24]
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff ff16 	bl	8004f56 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	6819      	ldr	r1, [r3, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	461a      	mov	r2, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff fef6 	bl	8004f26 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	461a      	mov	r2, r3
 8005140:	69b9      	ldr	r1, [r7, #24]
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff ff36 	bl	8004fb4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d11a      	bne.n	8005186 <LL_GPIO_Init+0xb4>
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	fa93 f3a3 	rbit	r3, r3
 800515a:	60bb      	str	r3, [r7, #8]
  return result;
 800515c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800515e:	fab3 f383 	clz	r3, r3
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b07      	cmp	r3, #7
 8005166:	d807      	bhi.n	8005178 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	461a      	mov	r2, r3
 800516e:	69b9      	ldr	r1, [r7, #24]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7ff ff4e 	bl	8005012 <LL_GPIO_SetAFPin_0_7>
 8005176:	e006      	b.n	8005186 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	461a      	mov	r2, r3
 800517e:	69b9      	ldr	r1, [r7, #24]
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff ff75 	bl	8005070 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	461a      	mov	r2, r3
 800518c:	69b9      	ldr	r1, [r7, #24]
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7ff fe9a 	bl	8004ec8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	3301      	adds	r3, #1
 8005198:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	fa22 f303 	lsr.w	r3, r2, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1a6      	bne.n	80050f6 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <LL_SPI_IsEnabled>:
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c2:	2b40      	cmp	r3, #64	@ 0x40
 80051c4:	d101      	bne.n	80051ca <LL_SPI_IsEnabled+0x18>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <LL_SPI_IsEnabled+0x1a>
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <LL_SPI_SetRxFIFOThreshold>:
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	605a      	str	r2, [r3, #4]
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <LL_SPI_SetCRCPolynomial>:
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	b29b      	uxth	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	611a      	str	r2, [r3, #16]
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff ffc0 	bl	80051b2 <LL_SPI_IsEnabled>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d145      	bne.n	80052c4 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005240:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	6811      	ldr	r1, [r2, #0]
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	6852      	ldr	r2, [r2, #4]
 800524c:	4311      	orrs	r1, r2
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	68d2      	ldr	r2, [r2, #12]
 8005252:	4311      	orrs	r1, r2
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	6912      	ldr	r2, [r2, #16]
 8005258:	4311      	orrs	r1, r2
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	6952      	ldr	r2, [r2, #20]
 800525e:	4311      	orrs	r1, r2
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	6992      	ldr	r2, [r2, #24]
 8005264:	4311      	orrs	r1, r2
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	69d2      	ldr	r2, [r2, #28]
 800526a:	4311      	orrs	r1, r2
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	6a12      	ldr	r2, [r2, #32]
 8005270:	430a      	orrs	r2, r1
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005280:	f023 0304 	bic.w	r3, r3, #4
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	6891      	ldr	r1, [r2, #8]
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	6952      	ldr	r2, [r2, #20]
 800528c:	0c12      	lsrs	r2, r2, #16
 800528e:	430a      	orrs	r2, r1
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800529e:	d204      	bcs.n	80052aa <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 80052a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff ff97 	bl	80051d8 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052b2:	d105      	bne.n	80052c0 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff ff9f 	bl	80051fe <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80052c0:	2300      	movs	r3, #0
 80052c2:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e2:	4a07      	ldr	r2, [pc, #28]	@ (8005300 <LL_InitTick+0x30>)
 80052e4:	3b01      	subs	r3, #1
 80052e6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80052e8:	4b05      	ldr	r3, [pc, #20]	@ (8005300 <LL_InitTick+0x30>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052ee:	4b04      	ldr	r3, [pc, #16]	@ (8005300 <LL_InitTick+0x30>)
 80052f0:	2205      	movs	r2, #5
 80052f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	e000e010 	.word	0xe000e010

08005304 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800530c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff ffdd 	bl	80052d0 <LL_InitTick>
}
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005328:	4b0f      	ldr	r3, [pc, #60]	@ (8005368 <LL_mDelay+0x48>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800532e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005336:	d00c      	beq.n	8005352 <LL_mDelay+0x32>
  {
    Delay++;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3301      	adds	r3, #1
 800533c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800533e:	e008      	b.n	8005352 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005340:	4b09      	ldr	r3, [pc, #36]	@ (8005368 <LL_mDelay+0x48>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <LL_mDelay+0x32>
    {
      Delay--;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3b01      	subs	r3, #1
 8005350:	607b      	str	r3, [r7, #4]
  while (Delay)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1f3      	bne.n	8005340 <LL_mDelay+0x20>
    }
  }
}
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	e000e010 	.word	0xe000e010

0800536c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005374:	4a04      	ldr	r2, [pc, #16]	@ (8005388 <LL_SetSystemCoreClock+0x1c>)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6013      	str	r3, [r2, #0]
}
 800537a:	bf00      	nop
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000010 	.word	0x20000010

0800538c <exit>:
 800538c:	b508      	push	{r3, lr}
 800538e:	4b06      	ldr	r3, [pc, #24]	@ (80053a8 <exit+0x1c>)
 8005390:	4604      	mov	r4, r0
 8005392:	b113      	cbz	r3, 800539a <exit+0xe>
 8005394:	2100      	movs	r1, #0
 8005396:	f3af 8000 	nop.w
 800539a:	4b04      	ldr	r3, [pc, #16]	@ (80053ac <exit+0x20>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	b103      	cbz	r3, 80053a2 <exit+0x16>
 80053a0:	4798      	blx	r3
 80053a2:	4620      	mov	r0, r4
 80053a4:	f7ff fc7a 	bl	8004c9c <_exit>
 80053a8:	00000000 	.word	0x00000000
 80053ac:	20000584 	.word	0x20000584

080053b0 <malloc>:
 80053b0:	4b02      	ldr	r3, [pc, #8]	@ (80053bc <malloc+0xc>)
 80053b2:	4601      	mov	r1, r0
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	f000 b825 	b.w	8005404 <_malloc_r>
 80053ba:	bf00      	nop
 80053bc:	20000024 	.word	0x20000024

080053c0 <sbrk_aligned>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	4e0f      	ldr	r6, [pc, #60]	@ (8005400 <sbrk_aligned+0x40>)
 80053c4:	460c      	mov	r4, r1
 80053c6:	6831      	ldr	r1, [r6, #0]
 80053c8:	4605      	mov	r5, r0
 80053ca:	b911      	cbnz	r1, 80053d2 <sbrk_aligned+0x12>
 80053cc:	f000 fb94 	bl	8005af8 <_sbrk_r>
 80053d0:	6030      	str	r0, [r6, #0]
 80053d2:	4621      	mov	r1, r4
 80053d4:	4628      	mov	r0, r5
 80053d6:	f000 fb8f 	bl	8005af8 <_sbrk_r>
 80053da:	1c43      	adds	r3, r0, #1
 80053dc:	d103      	bne.n	80053e6 <sbrk_aligned+0x26>
 80053de:	f04f 34ff 	mov.w	r4, #4294967295
 80053e2:	4620      	mov	r0, r4
 80053e4:	bd70      	pop	{r4, r5, r6, pc}
 80053e6:	1cc4      	adds	r4, r0, #3
 80053e8:	f024 0403 	bic.w	r4, r4, #3
 80053ec:	42a0      	cmp	r0, r4
 80053ee:	d0f8      	beq.n	80053e2 <sbrk_aligned+0x22>
 80053f0:	1a21      	subs	r1, r4, r0
 80053f2:	4628      	mov	r0, r5
 80053f4:	f000 fb80 	bl	8005af8 <_sbrk_r>
 80053f8:	3001      	adds	r0, #1
 80053fa:	d1f2      	bne.n	80053e2 <sbrk_aligned+0x22>
 80053fc:	e7ef      	b.n	80053de <sbrk_aligned+0x1e>
 80053fe:	bf00      	nop
 8005400:	20000444 	.word	0x20000444

08005404 <_malloc_r>:
 8005404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005408:	1ccd      	adds	r5, r1, #3
 800540a:	f025 0503 	bic.w	r5, r5, #3
 800540e:	3508      	adds	r5, #8
 8005410:	2d0c      	cmp	r5, #12
 8005412:	bf38      	it	cc
 8005414:	250c      	movcc	r5, #12
 8005416:	2d00      	cmp	r5, #0
 8005418:	4606      	mov	r6, r0
 800541a:	db01      	blt.n	8005420 <_malloc_r+0x1c>
 800541c:	42a9      	cmp	r1, r5
 800541e:	d904      	bls.n	800542a <_malloc_r+0x26>
 8005420:	230c      	movs	r3, #12
 8005422:	6033      	str	r3, [r6, #0]
 8005424:	2000      	movs	r0, #0
 8005426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800542a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005500 <_malloc_r+0xfc>
 800542e:	f000 f869 	bl	8005504 <__malloc_lock>
 8005432:	f8d8 3000 	ldr.w	r3, [r8]
 8005436:	461c      	mov	r4, r3
 8005438:	bb44      	cbnz	r4, 800548c <_malloc_r+0x88>
 800543a:	4629      	mov	r1, r5
 800543c:	4630      	mov	r0, r6
 800543e:	f7ff ffbf 	bl	80053c0 <sbrk_aligned>
 8005442:	1c43      	adds	r3, r0, #1
 8005444:	4604      	mov	r4, r0
 8005446:	d158      	bne.n	80054fa <_malloc_r+0xf6>
 8005448:	f8d8 4000 	ldr.w	r4, [r8]
 800544c:	4627      	mov	r7, r4
 800544e:	2f00      	cmp	r7, #0
 8005450:	d143      	bne.n	80054da <_malloc_r+0xd6>
 8005452:	2c00      	cmp	r4, #0
 8005454:	d04b      	beq.n	80054ee <_malloc_r+0xea>
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	4639      	mov	r1, r7
 800545a:	4630      	mov	r0, r6
 800545c:	eb04 0903 	add.w	r9, r4, r3
 8005460:	f000 fb4a 	bl	8005af8 <_sbrk_r>
 8005464:	4581      	cmp	r9, r0
 8005466:	d142      	bne.n	80054ee <_malloc_r+0xea>
 8005468:	6821      	ldr	r1, [r4, #0]
 800546a:	1a6d      	subs	r5, r5, r1
 800546c:	4629      	mov	r1, r5
 800546e:	4630      	mov	r0, r6
 8005470:	f7ff ffa6 	bl	80053c0 <sbrk_aligned>
 8005474:	3001      	adds	r0, #1
 8005476:	d03a      	beq.n	80054ee <_malloc_r+0xea>
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	442b      	add	r3, r5
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	f8d8 3000 	ldr.w	r3, [r8]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	bb62      	cbnz	r2, 80054e0 <_malloc_r+0xdc>
 8005486:	f8c8 7000 	str.w	r7, [r8]
 800548a:	e00f      	b.n	80054ac <_malloc_r+0xa8>
 800548c:	6822      	ldr	r2, [r4, #0]
 800548e:	1b52      	subs	r2, r2, r5
 8005490:	d420      	bmi.n	80054d4 <_malloc_r+0xd0>
 8005492:	2a0b      	cmp	r2, #11
 8005494:	d917      	bls.n	80054c6 <_malloc_r+0xc2>
 8005496:	1961      	adds	r1, r4, r5
 8005498:	42a3      	cmp	r3, r4
 800549a:	6025      	str	r5, [r4, #0]
 800549c:	bf18      	it	ne
 800549e:	6059      	strne	r1, [r3, #4]
 80054a0:	6863      	ldr	r3, [r4, #4]
 80054a2:	bf08      	it	eq
 80054a4:	f8c8 1000 	streq.w	r1, [r8]
 80054a8:	5162      	str	r2, [r4, r5]
 80054aa:	604b      	str	r3, [r1, #4]
 80054ac:	4630      	mov	r0, r6
 80054ae:	f000 f82f 	bl	8005510 <__malloc_unlock>
 80054b2:	f104 000b 	add.w	r0, r4, #11
 80054b6:	1d23      	adds	r3, r4, #4
 80054b8:	f020 0007 	bic.w	r0, r0, #7
 80054bc:	1ac2      	subs	r2, r0, r3
 80054be:	bf1c      	itt	ne
 80054c0:	1a1b      	subne	r3, r3, r0
 80054c2:	50a3      	strne	r3, [r4, r2]
 80054c4:	e7af      	b.n	8005426 <_malloc_r+0x22>
 80054c6:	6862      	ldr	r2, [r4, #4]
 80054c8:	42a3      	cmp	r3, r4
 80054ca:	bf0c      	ite	eq
 80054cc:	f8c8 2000 	streq.w	r2, [r8]
 80054d0:	605a      	strne	r2, [r3, #4]
 80054d2:	e7eb      	b.n	80054ac <_malloc_r+0xa8>
 80054d4:	4623      	mov	r3, r4
 80054d6:	6864      	ldr	r4, [r4, #4]
 80054d8:	e7ae      	b.n	8005438 <_malloc_r+0x34>
 80054da:	463c      	mov	r4, r7
 80054dc:	687f      	ldr	r7, [r7, #4]
 80054de:	e7b6      	b.n	800544e <_malloc_r+0x4a>
 80054e0:	461a      	mov	r2, r3
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	42a3      	cmp	r3, r4
 80054e6:	d1fb      	bne.n	80054e0 <_malloc_r+0xdc>
 80054e8:	2300      	movs	r3, #0
 80054ea:	6053      	str	r3, [r2, #4]
 80054ec:	e7de      	b.n	80054ac <_malloc_r+0xa8>
 80054ee:	230c      	movs	r3, #12
 80054f0:	6033      	str	r3, [r6, #0]
 80054f2:	4630      	mov	r0, r6
 80054f4:	f000 f80c 	bl	8005510 <__malloc_unlock>
 80054f8:	e794      	b.n	8005424 <_malloc_r+0x20>
 80054fa:	6005      	str	r5, [r0, #0]
 80054fc:	e7d6      	b.n	80054ac <_malloc_r+0xa8>
 80054fe:	bf00      	nop
 8005500:	20000448 	.word	0x20000448

08005504 <__malloc_lock>:
 8005504:	4801      	ldr	r0, [pc, #4]	@ (800550c <__malloc_lock+0x8>)
 8005506:	f000 bb44 	b.w	8005b92 <__retarget_lock_acquire_recursive>
 800550a:	bf00      	nop
 800550c:	2000058c 	.word	0x2000058c

08005510 <__malloc_unlock>:
 8005510:	4801      	ldr	r0, [pc, #4]	@ (8005518 <__malloc_unlock+0x8>)
 8005512:	f000 bb3f 	b.w	8005b94 <__retarget_lock_release_recursive>
 8005516:	bf00      	nop
 8005518:	2000058c 	.word	0x2000058c

0800551c <srand>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4b10      	ldr	r3, [pc, #64]	@ (8005560 <srand+0x44>)
 8005520:	681d      	ldr	r5, [r3, #0]
 8005522:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005524:	4604      	mov	r4, r0
 8005526:	b9b3      	cbnz	r3, 8005556 <srand+0x3a>
 8005528:	2018      	movs	r0, #24
 800552a:	f7ff ff41 	bl	80053b0 <malloc>
 800552e:	4602      	mov	r2, r0
 8005530:	6328      	str	r0, [r5, #48]	@ 0x30
 8005532:	b920      	cbnz	r0, 800553e <srand+0x22>
 8005534:	4b0b      	ldr	r3, [pc, #44]	@ (8005564 <srand+0x48>)
 8005536:	480c      	ldr	r0, [pc, #48]	@ (8005568 <srand+0x4c>)
 8005538:	2146      	movs	r1, #70	@ 0x46
 800553a:	f000 fb2d 	bl	8005b98 <__assert_func>
 800553e:	490b      	ldr	r1, [pc, #44]	@ (800556c <srand+0x50>)
 8005540:	4b0b      	ldr	r3, [pc, #44]	@ (8005570 <srand+0x54>)
 8005542:	e9c0 1300 	strd	r1, r3, [r0]
 8005546:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <srand+0x58>)
 8005548:	6083      	str	r3, [r0, #8]
 800554a:	230b      	movs	r3, #11
 800554c:	8183      	strh	r3, [r0, #12]
 800554e:	2100      	movs	r1, #0
 8005550:	2001      	movs	r0, #1
 8005552:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005556:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005558:	2200      	movs	r2, #0
 800555a:	611c      	str	r4, [r3, #16]
 800555c:	615a      	str	r2, [r3, #20]
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	20000024 	.word	0x20000024
 8005564:	08008610 	.word	0x08008610
 8005568:	08008627 	.word	0x08008627
 800556c:	abcd330e 	.word	0xabcd330e
 8005570:	e66d1234 	.word	0xe66d1234
 8005574:	0005deec 	.word	0x0005deec

08005578 <rand>:
 8005578:	4b16      	ldr	r3, [pc, #88]	@ (80055d4 <rand+0x5c>)
 800557a:	b510      	push	{r4, lr}
 800557c:	681c      	ldr	r4, [r3, #0]
 800557e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005580:	b9b3      	cbnz	r3, 80055b0 <rand+0x38>
 8005582:	2018      	movs	r0, #24
 8005584:	f7ff ff14 	bl	80053b0 <malloc>
 8005588:	4602      	mov	r2, r0
 800558a:	6320      	str	r0, [r4, #48]	@ 0x30
 800558c:	b920      	cbnz	r0, 8005598 <rand+0x20>
 800558e:	4b12      	ldr	r3, [pc, #72]	@ (80055d8 <rand+0x60>)
 8005590:	4812      	ldr	r0, [pc, #72]	@ (80055dc <rand+0x64>)
 8005592:	2152      	movs	r1, #82	@ 0x52
 8005594:	f000 fb00 	bl	8005b98 <__assert_func>
 8005598:	4911      	ldr	r1, [pc, #68]	@ (80055e0 <rand+0x68>)
 800559a:	4b12      	ldr	r3, [pc, #72]	@ (80055e4 <rand+0x6c>)
 800559c:	e9c0 1300 	strd	r1, r3, [r0]
 80055a0:	4b11      	ldr	r3, [pc, #68]	@ (80055e8 <rand+0x70>)
 80055a2:	6083      	str	r3, [r0, #8]
 80055a4:	230b      	movs	r3, #11
 80055a6:	8183      	strh	r3, [r0, #12]
 80055a8:	2100      	movs	r1, #0
 80055aa:	2001      	movs	r0, #1
 80055ac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80055b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80055b2:	480e      	ldr	r0, [pc, #56]	@ (80055ec <rand+0x74>)
 80055b4:	690b      	ldr	r3, [r1, #16]
 80055b6:	694c      	ldr	r4, [r1, #20]
 80055b8:	4a0d      	ldr	r2, [pc, #52]	@ (80055f0 <rand+0x78>)
 80055ba:	4358      	muls	r0, r3
 80055bc:	fb02 0004 	mla	r0, r2, r4, r0
 80055c0:	fba3 3202 	umull	r3, r2, r3, r2
 80055c4:	3301      	adds	r3, #1
 80055c6:	eb40 0002 	adc.w	r0, r0, r2
 80055ca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80055ce:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80055d2:	bd10      	pop	{r4, pc}
 80055d4:	20000024 	.word	0x20000024
 80055d8:	08008610 	.word	0x08008610
 80055dc:	08008627 	.word	0x08008627
 80055e0:	abcd330e 	.word	0xabcd330e
 80055e4:	e66d1234 	.word	0xe66d1234
 80055e8:	0005deec 	.word	0x0005deec
 80055ec:	5851f42d 	.word	0x5851f42d
 80055f0:	4c957f2d 	.word	0x4c957f2d

080055f4 <std>:
 80055f4:	2300      	movs	r3, #0
 80055f6:	b510      	push	{r4, lr}
 80055f8:	4604      	mov	r4, r0
 80055fa:	e9c0 3300 	strd	r3, r3, [r0]
 80055fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005602:	6083      	str	r3, [r0, #8]
 8005604:	8181      	strh	r1, [r0, #12]
 8005606:	6643      	str	r3, [r0, #100]	@ 0x64
 8005608:	81c2      	strh	r2, [r0, #14]
 800560a:	6183      	str	r3, [r0, #24]
 800560c:	4619      	mov	r1, r3
 800560e:	2208      	movs	r2, #8
 8005610:	305c      	adds	r0, #92	@ 0x5c
 8005612:	f000 fa07 	bl	8005a24 <memset>
 8005616:	4b0d      	ldr	r3, [pc, #52]	@ (800564c <std+0x58>)
 8005618:	6263      	str	r3, [r4, #36]	@ 0x24
 800561a:	4b0d      	ldr	r3, [pc, #52]	@ (8005650 <std+0x5c>)
 800561c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800561e:	4b0d      	ldr	r3, [pc, #52]	@ (8005654 <std+0x60>)
 8005620:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005622:	4b0d      	ldr	r3, [pc, #52]	@ (8005658 <std+0x64>)
 8005624:	6323      	str	r3, [r4, #48]	@ 0x30
 8005626:	4b0d      	ldr	r3, [pc, #52]	@ (800565c <std+0x68>)
 8005628:	6224      	str	r4, [r4, #32]
 800562a:	429c      	cmp	r4, r3
 800562c:	d006      	beq.n	800563c <std+0x48>
 800562e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005632:	4294      	cmp	r4, r2
 8005634:	d002      	beq.n	800563c <std+0x48>
 8005636:	33d0      	adds	r3, #208	@ 0xd0
 8005638:	429c      	cmp	r4, r3
 800563a:	d105      	bne.n	8005648 <std+0x54>
 800563c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005644:	f000 baa4 	b.w	8005b90 <__retarget_lock_init_recursive>
 8005648:	bd10      	pop	{r4, pc}
 800564a:	bf00      	nop
 800564c:	08005875 	.word	0x08005875
 8005650:	08005897 	.word	0x08005897
 8005654:	080058cf 	.word	0x080058cf
 8005658:	080058f3 	.word	0x080058f3
 800565c:	2000044c 	.word	0x2000044c

08005660 <stdio_exit_handler>:
 8005660:	4a02      	ldr	r2, [pc, #8]	@ (800566c <stdio_exit_handler+0xc>)
 8005662:	4903      	ldr	r1, [pc, #12]	@ (8005670 <stdio_exit_handler+0x10>)
 8005664:	4803      	ldr	r0, [pc, #12]	@ (8005674 <stdio_exit_handler+0x14>)
 8005666:	f000 b869 	b.w	800573c <_fwalk_sglue>
 800566a:	bf00      	nop
 800566c:	20000018 	.word	0x20000018
 8005670:	0800633d 	.word	0x0800633d
 8005674:	20000028 	.word	0x20000028

08005678 <cleanup_stdio>:
 8005678:	6841      	ldr	r1, [r0, #4]
 800567a:	4b0c      	ldr	r3, [pc, #48]	@ (80056ac <cleanup_stdio+0x34>)
 800567c:	4299      	cmp	r1, r3
 800567e:	b510      	push	{r4, lr}
 8005680:	4604      	mov	r4, r0
 8005682:	d001      	beq.n	8005688 <cleanup_stdio+0x10>
 8005684:	f000 fe5a 	bl	800633c <_fflush_r>
 8005688:	68a1      	ldr	r1, [r4, #8]
 800568a:	4b09      	ldr	r3, [pc, #36]	@ (80056b0 <cleanup_stdio+0x38>)
 800568c:	4299      	cmp	r1, r3
 800568e:	d002      	beq.n	8005696 <cleanup_stdio+0x1e>
 8005690:	4620      	mov	r0, r4
 8005692:	f000 fe53 	bl	800633c <_fflush_r>
 8005696:	68e1      	ldr	r1, [r4, #12]
 8005698:	4b06      	ldr	r3, [pc, #24]	@ (80056b4 <cleanup_stdio+0x3c>)
 800569a:	4299      	cmp	r1, r3
 800569c:	d004      	beq.n	80056a8 <cleanup_stdio+0x30>
 800569e:	4620      	mov	r0, r4
 80056a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a4:	f000 be4a 	b.w	800633c <_fflush_r>
 80056a8:	bd10      	pop	{r4, pc}
 80056aa:	bf00      	nop
 80056ac:	2000044c 	.word	0x2000044c
 80056b0:	200004b4 	.word	0x200004b4
 80056b4:	2000051c 	.word	0x2000051c

080056b8 <global_stdio_init.part.0>:
 80056b8:	b510      	push	{r4, lr}
 80056ba:	4b0b      	ldr	r3, [pc, #44]	@ (80056e8 <global_stdio_init.part.0+0x30>)
 80056bc:	4c0b      	ldr	r4, [pc, #44]	@ (80056ec <global_stdio_init.part.0+0x34>)
 80056be:	4a0c      	ldr	r2, [pc, #48]	@ (80056f0 <global_stdio_init.part.0+0x38>)
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	4620      	mov	r0, r4
 80056c4:	2200      	movs	r2, #0
 80056c6:	2104      	movs	r1, #4
 80056c8:	f7ff ff94 	bl	80055f4 <std>
 80056cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056d0:	2201      	movs	r2, #1
 80056d2:	2109      	movs	r1, #9
 80056d4:	f7ff ff8e 	bl	80055f4 <std>
 80056d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056dc:	2202      	movs	r2, #2
 80056de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056e2:	2112      	movs	r1, #18
 80056e4:	f7ff bf86 	b.w	80055f4 <std>
 80056e8:	20000584 	.word	0x20000584
 80056ec:	2000044c 	.word	0x2000044c
 80056f0:	08005661 	.word	0x08005661

080056f4 <__sfp_lock_acquire>:
 80056f4:	4801      	ldr	r0, [pc, #4]	@ (80056fc <__sfp_lock_acquire+0x8>)
 80056f6:	f000 ba4c 	b.w	8005b92 <__retarget_lock_acquire_recursive>
 80056fa:	bf00      	nop
 80056fc:	2000058d 	.word	0x2000058d

08005700 <__sfp_lock_release>:
 8005700:	4801      	ldr	r0, [pc, #4]	@ (8005708 <__sfp_lock_release+0x8>)
 8005702:	f000 ba47 	b.w	8005b94 <__retarget_lock_release_recursive>
 8005706:	bf00      	nop
 8005708:	2000058d 	.word	0x2000058d

0800570c <__sinit>:
 800570c:	b510      	push	{r4, lr}
 800570e:	4604      	mov	r4, r0
 8005710:	f7ff fff0 	bl	80056f4 <__sfp_lock_acquire>
 8005714:	6a23      	ldr	r3, [r4, #32]
 8005716:	b11b      	cbz	r3, 8005720 <__sinit+0x14>
 8005718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800571c:	f7ff bff0 	b.w	8005700 <__sfp_lock_release>
 8005720:	4b04      	ldr	r3, [pc, #16]	@ (8005734 <__sinit+0x28>)
 8005722:	6223      	str	r3, [r4, #32]
 8005724:	4b04      	ldr	r3, [pc, #16]	@ (8005738 <__sinit+0x2c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f5      	bne.n	8005718 <__sinit+0xc>
 800572c:	f7ff ffc4 	bl	80056b8 <global_stdio_init.part.0>
 8005730:	e7f2      	b.n	8005718 <__sinit+0xc>
 8005732:	bf00      	nop
 8005734:	08005679 	.word	0x08005679
 8005738:	20000584 	.word	0x20000584

0800573c <_fwalk_sglue>:
 800573c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005740:	4607      	mov	r7, r0
 8005742:	4688      	mov	r8, r1
 8005744:	4614      	mov	r4, r2
 8005746:	2600      	movs	r6, #0
 8005748:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800574c:	f1b9 0901 	subs.w	r9, r9, #1
 8005750:	d505      	bpl.n	800575e <_fwalk_sglue+0x22>
 8005752:	6824      	ldr	r4, [r4, #0]
 8005754:	2c00      	cmp	r4, #0
 8005756:	d1f7      	bne.n	8005748 <_fwalk_sglue+0xc>
 8005758:	4630      	mov	r0, r6
 800575a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800575e:	89ab      	ldrh	r3, [r5, #12]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d907      	bls.n	8005774 <_fwalk_sglue+0x38>
 8005764:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005768:	3301      	adds	r3, #1
 800576a:	d003      	beq.n	8005774 <_fwalk_sglue+0x38>
 800576c:	4629      	mov	r1, r5
 800576e:	4638      	mov	r0, r7
 8005770:	47c0      	blx	r8
 8005772:	4306      	orrs	r6, r0
 8005774:	3568      	adds	r5, #104	@ 0x68
 8005776:	e7e9      	b.n	800574c <_fwalk_sglue+0x10>

08005778 <_puts_r>:
 8005778:	6a03      	ldr	r3, [r0, #32]
 800577a:	b570      	push	{r4, r5, r6, lr}
 800577c:	6884      	ldr	r4, [r0, #8]
 800577e:	4605      	mov	r5, r0
 8005780:	460e      	mov	r6, r1
 8005782:	b90b      	cbnz	r3, 8005788 <_puts_r+0x10>
 8005784:	f7ff ffc2 	bl	800570c <__sinit>
 8005788:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800578a:	07db      	lsls	r3, r3, #31
 800578c:	d405      	bmi.n	800579a <_puts_r+0x22>
 800578e:	89a3      	ldrh	r3, [r4, #12]
 8005790:	0598      	lsls	r0, r3, #22
 8005792:	d402      	bmi.n	800579a <_puts_r+0x22>
 8005794:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005796:	f000 f9fc 	bl	8005b92 <__retarget_lock_acquire_recursive>
 800579a:	89a3      	ldrh	r3, [r4, #12]
 800579c:	0719      	lsls	r1, r3, #28
 800579e:	d502      	bpl.n	80057a6 <_puts_r+0x2e>
 80057a0:	6923      	ldr	r3, [r4, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d135      	bne.n	8005812 <_puts_r+0x9a>
 80057a6:	4621      	mov	r1, r4
 80057a8:	4628      	mov	r0, r5
 80057aa:	f000 f8e5 	bl	8005978 <__swsetup_r>
 80057ae:	b380      	cbz	r0, 8005812 <_puts_r+0x9a>
 80057b0:	f04f 35ff 	mov.w	r5, #4294967295
 80057b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057b6:	07da      	lsls	r2, r3, #31
 80057b8:	d405      	bmi.n	80057c6 <_puts_r+0x4e>
 80057ba:	89a3      	ldrh	r3, [r4, #12]
 80057bc:	059b      	lsls	r3, r3, #22
 80057be:	d402      	bmi.n	80057c6 <_puts_r+0x4e>
 80057c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057c2:	f000 f9e7 	bl	8005b94 <__retarget_lock_release_recursive>
 80057c6:	4628      	mov	r0, r5
 80057c8:	bd70      	pop	{r4, r5, r6, pc}
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	da04      	bge.n	80057d8 <_puts_r+0x60>
 80057ce:	69a2      	ldr	r2, [r4, #24]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	dc17      	bgt.n	8005804 <_puts_r+0x8c>
 80057d4:	290a      	cmp	r1, #10
 80057d6:	d015      	beq.n	8005804 <_puts_r+0x8c>
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	6022      	str	r2, [r4, #0]
 80057de:	7019      	strb	r1, [r3, #0]
 80057e0:	68a3      	ldr	r3, [r4, #8]
 80057e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057e6:	3b01      	subs	r3, #1
 80057e8:	60a3      	str	r3, [r4, #8]
 80057ea:	2900      	cmp	r1, #0
 80057ec:	d1ed      	bne.n	80057ca <_puts_r+0x52>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	da11      	bge.n	8005816 <_puts_r+0x9e>
 80057f2:	4622      	mov	r2, r4
 80057f4:	210a      	movs	r1, #10
 80057f6:	4628      	mov	r0, r5
 80057f8:	f000 f87f 	bl	80058fa <__swbuf_r>
 80057fc:	3001      	adds	r0, #1
 80057fe:	d0d7      	beq.n	80057b0 <_puts_r+0x38>
 8005800:	250a      	movs	r5, #10
 8005802:	e7d7      	b.n	80057b4 <_puts_r+0x3c>
 8005804:	4622      	mov	r2, r4
 8005806:	4628      	mov	r0, r5
 8005808:	f000 f877 	bl	80058fa <__swbuf_r>
 800580c:	3001      	adds	r0, #1
 800580e:	d1e7      	bne.n	80057e0 <_puts_r+0x68>
 8005810:	e7ce      	b.n	80057b0 <_puts_r+0x38>
 8005812:	3e01      	subs	r6, #1
 8005814:	e7e4      	b.n	80057e0 <_puts_r+0x68>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	6022      	str	r2, [r4, #0]
 800581c:	220a      	movs	r2, #10
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e7ee      	b.n	8005800 <_puts_r+0x88>
	...

08005824 <puts>:
 8005824:	4b02      	ldr	r3, [pc, #8]	@ (8005830 <puts+0xc>)
 8005826:	4601      	mov	r1, r0
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	f7ff bfa5 	b.w	8005778 <_puts_r>
 800582e:	bf00      	nop
 8005830:	20000024 	.word	0x20000024

08005834 <siprintf>:
 8005834:	b40e      	push	{r1, r2, r3}
 8005836:	b500      	push	{lr}
 8005838:	b09c      	sub	sp, #112	@ 0x70
 800583a:	ab1d      	add	r3, sp, #116	@ 0x74
 800583c:	9002      	str	r0, [sp, #8]
 800583e:	9006      	str	r0, [sp, #24]
 8005840:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005844:	4809      	ldr	r0, [pc, #36]	@ (800586c <siprintf+0x38>)
 8005846:	9107      	str	r1, [sp, #28]
 8005848:	9104      	str	r1, [sp, #16]
 800584a:	4909      	ldr	r1, [pc, #36]	@ (8005870 <siprintf+0x3c>)
 800584c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005850:	9105      	str	r1, [sp, #20]
 8005852:	6800      	ldr	r0, [r0, #0]
 8005854:	9301      	str	r3, [sp, #4]
 8005856:	a902      	add	r1, sp, #8
 8005858:	f000 fa62 	bl	8005d20 <_svfiprintf_r>
 800585c:	9b02      	ldr	r3, [sp, #8]
 800585e:	2200      	movs	r2, #0
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	b01c      	add	sp, #112	@ 0x70
 8005864:	f85d eb04 	ldr.w	lr, [sp], #4
 8005868:	b003      	add	sp, #12
 800586a:	4770      	bx	lr
 800586c:	20000024 	.word	0x20000024
 8005870:	ffff0208 	.word	0xffff0208

08005874 <__sread>:
 8005874:	b510      	push	{r4, lr}
 8005876:	460c      	mov	r4, r1
 8005878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800587c:	f000 f92a 	bl	8005ad4 <_read_r>
 8005880:	2800      	cmp	r0, #0
 8005882:	bfab      	itete	ge
 8005884:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005886:	89a3      	ldrhlt	r3, [r4, #12]
 8005888:	181b      	addge	r3, r3, r0
 800588a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800588e:	bfac      	ite	ge
 8005890:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005892:	81a3      	strhlt	r3, [r4, #12]
 8005894:	bd10      	pop	{r4, pc}

08005896 <__swrite>:
 8005896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800589a:	461f      	mov	r7, r3
 800589c:	898b      	ldrh	r3, [r1, #12]
 800589e:	05db      	lsls	r3, r3, #23
 80058a0:	4605      	mov	r5, r0
 80058a2:	460c      	mov	r4, r1
 80058a4:	4616      	mov	r6, r2
 80058a6:	d505      	bpl.n	80058b4 <__swrite+0x1e>
 80058a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ac:	2302      	movs	r3, #2
 80058ae:	2200      	movs	r2, #0
 80058b0:	f000 f8fe 	bl	8005ab0 <_lseek_r>
 80058b4:	89a3      	ldrh	r3, [r4, #12]
 80058b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058be:	81a3      	strh	r3, [r4, #12]
 80058c0:	4632      	mov	r2, r6
 80058c2:	463b      	mov	r3, r7
 80058c4:	4628      	mov	r0, r5
 80058c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058ca:	f000 b925 	b.w	8005b18 <_write_r>

080058ce <__sseek>:
 80058ce:	b510      	push	{r4, lr}
 80058d0:	460c      	mov	r4, r1
 80058d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d6:	f000 f8eb 	bl	8005ab0 <_lseek_r>
 80058da:	1c43      	adds	r3, r0, #1
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	bf15      	itete	ne
 80058e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80058e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80058e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80058ea:	81a3      	strheq	r3, [r4, #12]
 80058ec:	bf18      	it	ne
 80058ee:	81a3      	strhne	r3, [r4, #12]
 80058f0:	bd10      	pop	{r4, pc}

080058f2 <__sclose>:
 80058f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f6:	f000 b8b9 	b.w	8005a6c <_close_r>

080058fa <__swbuf_r>:
 80058fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fc:	460e      	mov	r6, r1
 80058fe:	4614      	mov	r4, r2
 8005900:	4605      	mov	r5, r0
 8005902:	b118      	cbz	r0, 800590c <__swbuf_r+0x12>
 8005904:	6a03      	ldr	r3, [r0, #32]
 8005906:	b90b      	cbnz	r3, 800590c <__swbuf_r+0x12>
 8005908:	f7ff ff00 	bl	800570c <__sinit>
 800590c:	69a3      	ldr	r3, [r4, #24]
 800590e:	60a3      	str	r3, [r4, #8]
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	071a      	lsls	r2, r3, #28
 8005914:	d501      	bpl.n	800591a <__swbuf_r+0x20>
 8005916:	6923      	ldr	r3, [r4, #16]
 8005918:	b943      	cbnz	r3, 800592c <__swbuf_r+0x32>
 800591a:	4621      	mov	r1, r4
 800591c:	4628      	mov	r0, r5
 800591e:	f000 f82b 	bl	8005978 <__swsetup_r>
 8005922:	b118      	cbz	r0, 800592c <__swbuf_r+0x32>
 8005924:	f04f 37ff 	mov.w	r7, #4294967295
 8005928:	4638      	mov	r0, r7
 800592a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	6922      	ldr	r2, [r4, #16]
 8005930:	1a98      	subs	r0, r3, r2
 8005932:	6963      	ldr	r3, [r4, #20]
 8005934:	b2f6      	uxtb	r6, r6
 8005936:	4283      	cmp	r3, r0
 8005938:	4637      	mov	r7, r6
 800593a:	dc05      	bgt.n	8005948 <__swbuf_r+0x4e>
 800593c:	4621      	mov	r1, r4
 800593e:	4628      	mov	r0, r5
 8005940:	f000 fcfc 	bl	800633c <_fflush_r>
 8005944:	2800      	cmp	r0, #0
 8005946:	d1ed      	bne.n	8005924 <__swbuf_r+0x2a>
 8005948:	68a3      	ldr	r3, [r4, #8]
 800594a:	3b01      	subs	r3, #1
 800594c:	60a3      	str	r3, [r4, #8]
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	6022      	str	r2, [r4, #0]
 8005954:	701e      	strb	r6, [r3, #0]
 8005956:	6962      	ldr	r2, [r4, #20]
 8005958:	1c43      	adds	r3, r0, #1
 800595a:	429a      	cmp	r2, r3
 800595c:	d004      	beq.n	8005968 <__swbuf_r+0x6e>
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	07db      	lsls	r3, r3, #31
 8005962:	d5e1      	bpl.n	8005928 <__swbuf_r+0x2e>
 8005964:	2e0a      	cmp	r6, #10
 8005966:	d1df      	bne.n	8005928 <__swbuf_r+0x2e>
 8005968:	4621      	mov	r1, r4
 800596a:	4628      	mov	r0, r5
 800596c:	f000 fce6 	bl	800633c <_fflush_r>
 8005970:	2800      	cmp	r0, #0
 8005972:	d0d9      	beq.n	8005928 <__swbuf_r+0x2e>
 8005974:	e7d6      	b.n	8005924 <__swbuf_r+0x2a>
	...

08005978 <__swsetup_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4b29      	ldr	r3, [pc, #164]	@ (8005a20 <__swsetup_r+0xa8>)
 800597c:	4605      	mov	r5, r0
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	460c      	mov	r4, r1
 8005982:	b118      	cbz	r0, 800598c <__swsetup_r+0x14>
 8005984:	6a03      	ldr	r3, [r0, #32]
 8005986:	b90b      	cbnz	r3, 800598c <__swsetup_r+0x14>
 8005988:	f7ff fec0 	bl	800570c <__sinit>
 800598c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005990:	0719      	lsls	r1, r3, #28
 8005992:	d422      	bmi.n	80059da <__swsetup_r+0x62>
 8005994:	06da      	lsls	r2, r3, #27
 8005996:	d407      	bmi.n	80059a8 <__swsetup_r+0x30>
 8005998:	2209      	movs	r2, #9
 800599a:	602a      	str	r2, [r5, #0]
 800599c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059a0:	81a3      	strh	r3, [r4, #12]
 80059a2:	f04f 30ff 	mov.w	r0, #4294967295
 80059a6:	e033      	b.n	8005a10 <__swsetup_r+0x98>
 80059a8:	0758      	lsls	r0, r3, #29
 80059aa:	d512      	bpl.n	80059d2 <__swsetup_r+0x5a>
 80059ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059ae:	b141      	cbz	r1, 80059c2 <__swsetup_r+0x4a>
 80059b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059b4:	4299      	cmp	r1, r3
 80059b6:	d002      	beq.n	80059be <__swsetup_r+0x46>
 80059b8:	4628      	mov	r0, r5
 80059ba:	f000 f90b 	bl	8005bd4 <_free_r>
 80059be:	2300      	movs	r3, #0
 80059c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80059c8:	81a3      	strh	r3, [r4, #12]
 80059ca:	2300      	movs	r3, #0
 80059cc:	6063      	str	r3, [r4, #4]
 80059ce:	6923      	ldr	r3, [r4, #16]
 80059d0:	6023      	str	r3, [r4, #0]
 80059d2:	89a3      	ldrh	r3, [r4, #12]
 80059d4:	f043 0308 	orr.w	r3, r3, #8
 80059d8:	81a3      	strh	r3, [r4, #12]
 80059da:	6923      	ldr	r3, [r4, #16]
 80059dc:	b94b      	cbnz	r3, 80059f2 <__swsetup_r+0x7a>
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80059e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059e8:	d003      	beq.n	80059f2 <__swsetup_r+0x7a>
 80059ea:	4621      	mov	r1, r4
 80059ec:	4628      	mov	r0, r5
 80059ee:	f000 fd05 	bl	80063fc <__smakebuf_r>
 80059f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059f6:	f013 0201 	ands.w	r2, r3, #1
 80059fa:	d00a      	beq.n	8005a12 <__swsetup_r+0x9a>
 80059fc:	2200      	movs	r2, #0
 80059fe:	60a2      	str	r2, [r4, #8]
 8005a00:	6962      	ldr	r2, [r4, #20]
 8005a02:	4252      	negs	r2, r2
 8005a04:	61a2      	str	r2, [r4, #24]
 8005a06:	6922      	ldr	r2, [r4, #16]
 8005a08:	b942      	cbnz	r2, 8005a1c <__swsetup_r+0xa4>
 8005a0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a0e:	d1c5      	bne.n	800599c <__swsetup_r+0x24>
 8005a10:	bd38      	pop	{r3, r4, r5, pc}
 8005a12:	0799      	lsls	r1, r3, #30
 8005a14:	bf58      	it	pl
 8005a16:	6962      	ldrpl	r2, [r4, #20]
 8005a18:	60a2      	str	r2, [r4, #8]
 8005a1a:	e7f4      	b.n	8005a06 <__swsetup_r+0x8e>
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	e7f7      	b.n	8005a10 <__swsetup_r+0x98>
 8005a20:	20000024 	.word	0x20000024

08005a24 <memset>:
 8005a24:	4402      	add	r2, r0
 8005a26:	4603      	mov	r3, r0
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d100      	bne.n	8005a2e <memset+0xa>
 8005a2c:	4770      	bx	lr
 8005a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a32:	e7f9      	b.n	8005a28 <memset+0x4>

08005a34 <time>:
 8005a34:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
 8005a36:	4b0c      	ldr	r3, [pc, #48]	@ (8005a68 <time+0x34>)
 8005a38:	f04f 36ff 	mov.w	r6, #4294967295
 8005a3c:	f04f 37ff 	mov.w	r7, #4294967295
 8005a40:	4669      	mov	r1, sp
 8005a42:	4604      	mov	r4, r0
 8005a44:	2200      	movs	r2, #0
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	e9cd 6700 	strd	r6, r7, [sp]
 8005a4c:	f000 f81e 	bl	8005a8c <_gettimeofday_r>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	bfb8      	it	lt
 8005a54:	e9cd 6700 	strdlt	r6, r7, [sp]
 8005a58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a5c:	b10c      	cbz	r4, 8005a62 <time+0x2e>
 8005a5e:	e9c4 0100 	strd	r0, r1, [r4]
 8005a62:	b004      	add	sp, #16
 8005a64:	bdd0      	pop	{r4, r6, r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000024 	.word	0x20000024

08005a6c <_close_r>:
 8005a6c:	b538      	push	{r3, r4, r5, lr}
 8005a6e:	4d06      	ldr	r5, [pc, #24]	@ (8005a88 <_close_r+0x1c>)
 8005a70:	2300      	movs	r3, #0
 8005a72:	4604      	mov	r4, r0
 8005a74:	4608      	mov	r0, r1
 8005a76:	602b      	str	r3, [r5, #0]
 8005a78:	f7ff f954 	bl	8004d24 <_close>
 8005a7c:	1c43      	adds	r3, r0, #1
 8005a7e:	d102      	bne.n	8005a86 <_close_r+0x1a>
 8005a80:	682b      	ldr	r3, [r5, #0]
 8005a82:	b103      	cbz	r3, 8005a86 <_close_r+0x1a>
 8005a84:	6023      	str	r3, [r4, #0]
 8005a86:	bd38      	pop	{r3, r4, r5, pc}
 8005a88:	20000588 	.word	0x20000588

08005a8c <_gettimeofday_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	4d07      	ldr	r5, [pc, #28]	@ (8005aac <_gettimeofday_r+0x20>)
 8005a90:	2300      	movs	r3, #0
 8005a92:	4604      	mov	r4, r0
 8005a94:	4608      	mov	r0, r1
 8005a96:	4611      	mov	r1, r2
 8005a98:	602b      	str	r3, [r5, #0]
 8005a9a:	f002 fa1d 	bl	8007ed8 <_gettimeofday>
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	d102      	bne.n	8005aa8 <_gettimeofday_r+0x1c>
 8005aa2:	682b      	ldr	r3, [r5, #0]
 8005aa4:	b103      	cbz	r3, 8005aa8 <_gettimeofday_r+0x1c>
 8005aa6:	6023      	str	r3, [r4, #0]
 8005aa8:	bd38      	pop	{r3, r4, r5, pc}
 8005aaa:	bf00      	nop
 8005aac:	20000588 	.word	0x20000588

08005ab0 <_lseek_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4d07      	ldr	r5, [pc, #28]	@ (8005ad0 <_lseek_r+0x20>)
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	4608      	mov	r0, r1
 8005ab8:	4611      	mov	r1, r2
 8005aba:	2200      	movs	r2, #0
 8005abc:	602a      	str	r2, [r5, #0]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f7ff f957 	bl	8004d72 <_lseek>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d102      	bne.n	8005ace <_lseek_r+0x1e>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	b103      	cbz	r3, 8005ace <_lseek_r+0x1e>
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	bd38      	pop	{r3, r4, r5, pc}
 8005ad0:	20000588 	.word	0x20000588

08005ad4 <_read_r>:
 8005ad4:	b538      	push	{r3, r4, r5, lr}
 8005ad6:	4d07      	ldr	r5, [pc, #28]	@ (8005af4 <_read_r+0x20>)
 8005ad8:	4604      	mov	r4, r0
 8005ada:	4608      	mov	r0, r1
 8005adc:	4611      	mov	r1, r2
 8005ade:	2200      	movs	r2, #0
 8005ae0:	602a      	str	r2, [r5, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f7ff f8e5 	bl	8004cb2 <_read>
 8005ae8:	1c43      	adds	r3, r0, #1
 8005aea:	d102      	bne.n	8005af2 <_read_r+0x1e>
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	b103      	cbz	r3, 8005af2 <_read_r+0x1e>
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	20000588 	.word	0x20000588

08005af8 <_sbrk_r>:
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	4d06      	ldr	r5, [pc, #24]	@ (8005b14 <_sbrk_r+0x1c>)
 8005afc:	2300      	movs	r3, #0
 8005afe:	4604      	mov	r4, r0
 8005b00:	4608      	mov	r0, r1
 8005b02:	602b      	str	r3, [r5, #0]
 8005b04:	f7ff f942 	bl	8004d8c <_sbrk>
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	d102      	bne.n	8005b12 <_sbrk_r+0x1a>
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	b103      	cbz	r3, 8005b12 <_sbrk_r+0x1a>
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	bd38      	pop	{r3, r4, r5, pc}
 8005b14:	20000588 	.word	0x20000588

08005b18 <_write_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	4d07      	ldr	r5, [pc, #28]	@ (8005b38 <_write_r+0x20>)
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	4608      	mov	r0, r1
 8005b20:	4611      	mov	r1, r2
 8005b22:	2200      	movs	r2, #0
 8005b24:	602a      	str	r2, [r5, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	f7ff f8e0 	bl	8004cec <_write>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	d102      	bne.n	8005b36 <_write_r+0x1e>
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	b103      	cbz	r3, 8005b36 <_write_r+0x1e>
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	20000588 	.word	0x20000588

08005b3c <__errno>:
 8005b3c:	4b01      	ldr	r3, [pc, #4]	@ (8005b44 <__errno+0x8>)
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20000024 	.word	0x20000024

08005b48 <__libc_init_array>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8005b80 <__libc_init_array+0x38>)
 8005b4c:	4c0d      	ldr	r4, [pc, #52]	@ (8005b84 <__libc_init_array+0x3c>)
 8005b4e:	1b64      	subs	r4, r4, r5
 8005b50:	10a4      	asrs	r4, r4, #2
 8005b52:	2600      	movs	r6, #0
 8005b54:	42a6      	cmp	r6, r4
 8005b56:	d109      	bne.n	8005b6c <__libc_init_array+0x24>
 8005b58:	4d0b      	ldr	r5, [pc, #44]	@ (8005b88 <__libc_init_array+0x40>)
 8005b5a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b8c <__libc_init_array+0x44>)
 8005b5c:	f002 f9c4 	bl	8007ee8 <_init>
 8005b60:	1b64      	subs	r4, r4, r5
 8005b62:	10a4      	asrs	r4, r4, #2
 8005b64:	2600      	movs	r6, #0
 8005b66:	42a6      	cmp	r6, r4
 8005b68:	d105      	bne.n	8005b76 <__libc_init_array+0x2e>
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b70:	4798      	blx	r3
 8005b72:	3601      	adds	r6, #1
 8005b74:	e7ee      	b.n	8005b54 <__libc_init_array+0xc>
 8005b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7a:	4798      	blx	r3
 8005b7c:	3601      	adds	r6, #1
 8005b7e:	e7f2      	b.n	8005b66 <__libc_init_array+0x1e>
 8005b80:	08008910 	.word	0x08008910
 8005b84:	08008910 	.word	0x08008910
 8005b88:	08008910 	.word	0x08008910
 8005b8c:	08008914 	.word	0x08008914

08005b90 <__retarget_lock_init_recursive>:
 8005b90:	4770      	bx	lr

08005b92 <__retarget_lock_acquire_recursive>:
 8005b92:	4770      	bx	lr

08005b94 <__retarget_lock_release_recursive>:
 8005b94:	4770      	bx	lr
	...

08005b98 <__assert_func>:
 8005b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b9a:	4614      	mov	r4, r2
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	4b09      	ldr	r3, [pc, #36]	@ (8005bc4 <__assert_func+0x2c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4605      	mov	r5, r0
 8005ba4:	68d8      	ldr	r0, [r3, #12]
 8005ba6:	b954      	cbnz	r4, 8005bbe <__assert_func+0x26>
 8005ba8:	4b07      	ldr	r3, [pc, #28]	@ (8005bc8 <__assert_func+0x30>)
 8005baa:	461c      	mov	r4, r3
 8005bac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005bb0:	9100      	str	r1, [sp, #0]
 8005bb2:	462b      	mov	r3, r5
 8005bb4:	4905      	ldr	r1, [pc, #20]	@ (8005bcc <__assert_func+0x34>)
 8005bb6:	f000 fbe9 	bl	800638c <fiprintf>
 8005bba:	f000 fca5 	bl	8006508 <abort>
 8005bbe:	4b04      	ldr	r3, [pc, #16]	@ (8005bd0 <__assert_func+0x38>)
 8005bc0:	e7f4      	b.n	8005bac <__assert_func+0x14>
 8005bc2:	bf00      	nop
 8005bc4:	20000024 	.word	0x20000024
 8005bc8:	080086ba 	.word	0x080086ba
 8005bcc:	0800868c 	.word	0x0800868c
 8005bd0:	0800867f 	.word	0x0800867f

08005bd4 <_free_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	2900      	cmp	r1, #0
 8005bda:	d041      	beq.n	8005c60 <_free_r+0x8c>
 8005bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005be0:	1f0c      	subs	r4, r1, #4
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	bfb8      	it	lt
 8005be6:	18e4      	addlt	r4, r4, r3
 8005be8:	f7ff fc8c 	bl	8005504 <__malloc_lock>
 8005bec:	4a1d      	ldr	r2, [pc, #116]	@ (8005c64 <_free_r+0x90>)
 8005bee:	6813      	ldr	r3, [r2, #0]
 8005bf0:	b933      	cbnz	r3, 8005c00 <_free_r+0x2c>
 8005bf2:	6063      	str	r3, [r4, #4]
 8005bf4:	6014      	str	r4, [r2, #0]
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bfc:	f7ff bc88 	b.w	8005510 <__malloc_unlock>
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	d908      	bls.n	8005c16 <_free_r+0x42>
 8005c04:	6820      	ldr	r0, [r4, #0]
 8005c06:	1821      	adds	r1, r4, r0
 8005c08:	428b      	cmp	r3, r1
 8005c0a:	bf01      	itttt	eq
 8005c0c:	6819      	ldreq	r1, [r3, #0]
 8005c0e:	685b      	ldreq	r3, [r3, #4]
 8005c10:	1809      	addeq	r1, r1, r0
 8005c12:	6021      	streq	r1, [r4, #0]
 8005c14:	e7ed      	b.n	8005bf2 <_free_r+0x1e>
 8005c16:	461a      	mov	r2, r3
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	b10b      	cbz	r3, 8005c20 <_free_r+0x4c>
 8005c1c:	42a3      	cmp	r3, r4
 8005c1e:	d9fa      	bls.n	8005c16 <_free_r+0x42>
 8005c20:	6811      	ldr	r1, [r2, #0]
 8005c22:	1850      	adds	r0, r2, r1
 8005c24:	42a0      	cmp	r0, r4
 8005c26:	d10b      	bne.n	8005c40 <_free_r+0x6c>
 8005c28:	6820      	ldr	r0, [r4, #0]
 8005c2a:	4401      	add	r1, r0
 8005c2c:	1850      	adds	r0, r2, r1
 8005c2e:	4283      	cmp	r3, r0
 8005c30:	6011      	str	r1, [r2, #0]
 8005c32:	d1e0      	bne.n	8005bf6 <_free_r+0x22>
 8005c34:	6818      	ldr	r0, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	6053      	str	r3, [r2, #4]
 8005c3a:	4408      	add	r0, r1
 8005c3c:	6010      	str	r0, [r2, #0]
 8005c3e:	e7da      	b.n	8005bf6 <_free_r+0x22>
 8005c40:	d902      	bls.n	8005c48 <_free_r+0x74>
 8005c42:	230c      	movs	r3, #12
 8005c44:	602b      	str	r3, [r5, #0]
 8005c46:	e7d6      	b.n	8005bf6 <_free_r+0x22>
 8005c48:	6820      	ldr	r0, [r4, #0]
 8005c4a:	1821      	adds	r1, r4, r0
 8005c4c:	428b      	cmp	r3, r1
 8005c4e:	bf04      	itt	eq
 8005c50:	6819      	ldreq	r1, [r3, #0]
 8005c52:	685b      	ldreq	r3, [r3, #4]
 8005c54:	6063      	str	r3, [r4, #4]
 8005c56:	bf04      	itt	eq
 8005c58:	1809      	addeq	r1, r1, r0
 8005c5a:	6021      	streq	r1, [r4, #0]
 8005c5c:	6054      	str	r4, [r2, #4]
 8005c5e:	e7ca      	b.n	8005bf6 <_free_r+0x22>
 8005c60:	bd38      	pop	{r3, r4, r5, pc}
 8005c62:	bf00      	nop
 8005c64:	20000448 	.word	0x20000448

08005c68 <__ssputs_r>:
 8005c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c6c:	688e      	ldr	r6, [r1, #8]
 8005c6e:	461f      	mov	r7, r3
 8005c70:	42be      	cmp	r6, r7
 8005c72:	680b      	ldr	r3, [r1, #0]
 8005c74:	4682      	mov	sl, r0
 8005c76:	460c      	mov	r4, r1
 8005c78:	4690      	mov	r8, r2
 8005c7a:	d82d      	bhi.n	8005cd8 <__ssputs_r+0x70>
 8005c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c84:	d026      	beq.n	8005cd4 <__ssputs_r+0x6c>
 8005c86:	6965      	ldr	r5, [r4, #20]
 8005c88:	6909      	ldr	r1, [r1, #16]
 8005c8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c8e:	eba3 0901 	sub.w	r9, r3, r1
 8005c92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c96:	1c7b      	adds	r3, r7, #1
 8005c98:	444b      	add	r3, r9
 8005c9a:	106d      	asrs	r5, r5, #1
 8005c9c:	429d      	cmp	r5, r3
 8005c9e:	bf38      	it	cc
 8005ca0:	461d      	movcc	r5, r3
 8005ca2:	0553      	lsls	r3, r2, #21
 8005ca4:	d527      	bpl.n	8005cf6 <__ssputs_r+0x8e>
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	f7ff fbac 	bl	8005404 <_malloc_r>
 8005cac:	4606      	mov	r6, r0
 8005cae:	b360      	cbz	r0, 8005d0a <__ssputs_r+0xa2>
 8005cb0:	6921      	ldr	r1, [r4, #16]
 8005cb2:	464a      	mov	r2, r9
 8005cb4:	f000 fc1a 	bl	80064ec <memcpy>
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cc2:	81a3      	strh	r3, [r4, #12]
 8005cc4:	6126      	str	r6, [r4, #16]
 8005cc6:	6165      	str	r5, [r4, #20]
 8005cc8:	444e      	add	r6, r9
 8005cca:	eba5 0509 	sub.w	r5, r5, r9
 8005cce:	6026      	str	r6, [r4, #0]
 8005cd0:	60a5      	str	r5, [r4, #8]
 8005cd2:	463e      	mov	r6, r7
 8005cd4:	42be      	cmp	r6, r7
 8005cd6:	d900      	bls.n	8005cda <__ssputs_r+0x72>
 8005cd8:	463e      	mov	r6, r7
 8005cda:	6820      	ldr	r0, [r4, #0]
 8005cdc:	4632      	mov	r2, r6
 8005cde:	4641      	mov	r1, r8
 8005ce0:	f000 fbc8 	bl	8006474 <memmove>
 8005ce4:	68a3      	ldr	r3, [r4, #8]
 8005ce6:	1b9b      	subs	r3, r3, r6
 8005ce8:	60a3      	str	r3, [r4, #8]
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	4433      	add	r3, r6
 8005cee:	6023      	str	r3, [r4, #0]
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf6:	462a      	mov	r2, r5
 8005cf8:	f000 fc0d 	bl	8006516 <_realloc_r>
 8005cfc:	4606      	mov	r6, r0
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d1e0      	bne.n	8005cc4 <__ssputs_r+0x5c>
 8005d02:	6921      	ldr	r1, [r4, #16]
 8005d04:	4650      	mov	r0, sl
 8005d06:	f7ff ff65 	bl	8005bd4 <_free_r>
 8005d0a:	230c      	movs	r3, #12
 8005d0c:	f8ca 3000 	str.w	r3, [sl]
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d16:	81a3      	strh	r3, [r4, #12]
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1c:	e7e9      	b.n	8005cf2 <__ssputs_r+0x8a>
	...

08005d20 <_svfiprintf_r>:
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	4698      	mov	r8, r3
 8005d26:	898b      	ldrh	r3, [r1, #12]
 8005d28:	061b      	lsls	r3, r3, #24
 8005d2a:	b09d      	sub	sp, #116	@ 0x74
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	460d      	mov	r5, r1
 8005d30:	4614      	mov	r4, r2
 8005d32:	d510      	bpl.n	8005d56 <_svfiprintf_r+0x36>
 8005d34:	690b      	ldr	r3, [r1, #16]
 8005d36:	b973      	cbnz	r3, 8005d56 <_svfiprintf_r+0x36>
 8005d38:	2140      	movs	r1, #64	@ 0x40
 8005d3a:	f7ff fb63 	bl	8005404 <_malloc_r>
 8005d3e:	6028      	str	r0, [r5, #0]
 8005d40:	6128      	str	r0, [r5, #16]
 8005d42:	b930      	cbnz	r0, 8005d52 <_svfiprintf_r+0x32>
 8005d44:	230c      	movs	r3, #12
 8005d46:	603b      	str	r3, [r7, #0]
 8005d48:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4c:	b01d      	add	sp, #116	@ 0x74
 8005d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d52:	2340      	movs	r3, #64	@ 0x40
 8005d54:	616b      	str	r3, [r5, #20]
 8005d56:	2300      	movs	r3, #0
 8005d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d5a:	2320      	movs	r3, #32
 8005d5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d64:	2330      	movs	r3, #48	@ 0x30
 8005d66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f04 <_svfiprintf_r+0x1e4>
 8005d6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d6e:	f04f 0901 	mov.w	r9, #1
 8005d72:	4623      	mov	r3, r4
 8005d74:	469a      	mov	sl, r3
 8005d76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d7a:	b10a      	cbz	r2, 8005d80 <_svfiprintf_r+0x60>
 8005d7c:	2a25      	cmp	r2, #37	@ 0x25
 8005d7e:	d1f9      	bne.n	8005d74 <_svfiprintf_r+0x54>
 8005d80:	ebba 0b04 	subs.w	fp, sl, r4
 8005d84:	d00b      	beq.n	8005d9e <_svfiprintf_r+0x7e>
 8005d86:	465b      	mov	r3, fp
 8005d88:	4622      	mov	r2, r4
 8005d8a:	4629      	mov	r1, r5
 8005d8c:	4638      	mov	r0, r7
 8005d8e:	f7ff ff6b 	bl	8005c68 <__ssputs_r>
 8005d92:	3001      	adds	r0, #1
 8005d94:	f000 80a7 	beq.w	8005ee6 <_svfiprintf_r+0x1c6>
 8005d98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d9a:	445a      	add	r2, fp
 8005d9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 809f 	beq.w	8005ee6 <_svfiprintf_r+0x1c6>
 8005da8:	2300      	movs	r3, #0
 8005daa:	f04f 32ff 	mov.w	r2, #4294967295
 8005dae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005db2:	f10a 0a01 	add.w	sl, sl, #1
 8005db6:	9304      	str	r3, [sp, #16]
 8005db8:	9307      	str	r3, [sp, #28]
 8005dba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005dbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8005dc0:	4654      	mov	r4, sl
 8005dc2:	2205      	movs	r2, #5
 8005dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dc8:	484e      	ldr	r0, [pc, #312]	@ (8005f04 <_svfiprintf_r+0x1e4>)
 8005dca:	f7fa fa09 	bl	80001e0 <memchr>
 8005dce:	9a04      	ldr	r2, [sp, #16]
 8005dd0:	b9d8      	cbnz	r0, 8005e0a <_svfiprintf_r+0xea>
 8005dd2:	06d0      	lsls	r0, r2, #27
 8005dd4:	bf44      	itt	mi
 8005dd6:	2320      	movmi	r3, #32
 8005dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ddc:	0711      	lsls	r1, r2, #28
 8005dde:	bf44      	itt	mi
 8005de0:	232b      	movmi	r3, #43	@ 0x2b
 8005de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005de6:	f89a 3000 	ldrb.w	r3, [sl]
 8005dea:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dec:	d015      	beq.n	8005e1a <_svfiprintf_r+0xfa>
 8005dee:	9a07      	ldr	r2, [sp, #28]
 8005df0:	4654      	mov	r4, sl
 8005df2:	2000      	movs	r0, #0
 8005df4:	f04f 0c0a 	mov.w	ip, #10
 8005df8:	4621      	mov	r1, r4
 8005dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dfe:	3b30      	subs	r3, #48	@ 0x30
 8005e00:	2b09      	cmp	r3, #9
 8005e02:	d94b      	bls.n	8005e9c <_svfiprintf_r+0x17c>
 8005e04:	b1b0      	cbz	r0, 8005e34 <_svfiprintf_r+0x114>
 8005e06:	9207      	str	r2, [sp, #28]
 8005e08:	e014      	b.n	8005e34 <_svfiprintf_r+0x114>
 8005e0a:	eba0 0308 	sub.w	r3, r0, r8
 8005e0e:	fa09 f303 	lsl.w	r3, r9, r3
 8005e12:	4313      	orrs	r3, r2
 8005e14:	9304      	str	r3, [sp, #16]
 8005e16:	46a2      	mov	sl, r4
 8005e18:	e7d2      	b.n	8005dc0 <_svfiprintf_r+0xa0>
 8005e1a:	9b03      	ldr	r3, [sp, #12]
 8005e1c:	1d19      	adds	r1, r3, #4
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	9103      	str	r1, [sp, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	bfbb      	ittet	lt
 8005e26:	425b      	neglt	r3, r3
 8005e28:	f042 0202 	orrlt.w	r2, r2, #2
 8005e2c:	9307      	strge	r3, [sp, #28]
 8005e2e:	9307      	strlt	r3, [sp, #28]
 8005e30:	bfb8      	it	lt
 8005e32:	9204      	strlt	r2, [sp, #16]
 8005e34:	7823      	ldrb	r3, [r4, #0]
 8005e36:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e38:	d10a      	bne.n	8005e50 <_svfiprintf_r+0x130>
 8005e3a:	7863      	ldrb	r3, [r4, #1]
 8005e3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e3e:	d132      	bne.n	8005ea6 <_svfiprintf_r+0x186>
 8005e40:	9b03      	ldr	r3, [sp, #12]
 8005e42:	1d1a      	adds	r2, r3, #4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	9203      	str	r2, [sp, #12]
 8005e48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e4c:	3402      	adds	r4, #2
 8005e4e:	9305      	str	r3, [sp, #20]
 8005e50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005f14 <_svfiprintf_r+0x1f4>
 8005e54:	7821      	ldrb	r1, [r4, #0]
 8005e56:	2203      	movs	r2, #3
 8005e58:	4650      	mov	r0, sl
 8005e5a:	f7fa f9c1 	bl	80001e0 <memchr>
 8005e5e:	b138      	cbz	r0, 8005e70 <_svfiprintf_r+0x150>
 8005e60:	9b04      	ldr	r3, [sp, #16]
 8005e62:	eba0 000a 	sub.w	r0, r0, sl
 8005e66:	2240      	movs	r2, #64	@ 0x40
 8005e68:	4082      	lsls	r2, r0
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	3401      	adds	r4, #1
 8005e6e:	9304      	str	r3, [sp, #16]
 8005e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e74:	4824      	ldr	r0, [pc, #144]	@ (8005f08 <_svfiprintf_r+0x1e8>)
 8005e76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e7a:	2206      	movs	r2, #6
 8005e7c:	f7fa f9b0 	bl	80001e0 <memchr>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	d036      	beq.n	8005ef2 <_svfiprintf_r+0x1d2>
 8005e84:	4b21      	ldr	r3, [pc, #132]	@ (8005f0c <_svfiprintf_r+0x1ec>)
 8005e86:	bb1b      	cbnz	r3, 8005ed0 <_svfiprintf_r+0x1b0>
 8005e88:	9b03      	ldr	r3, [sp, #12]
 8005e8a:	3307      	adds	r3, #7
 8005e8c:	f023 0307 	bic.w	r3, r3, #7
 8005e90:	3308      	adds	r3, #8
 8005e92:	9303      	str	r3, [sp, #12]
 8005e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e96:	4433      	add	r3, r6
 8005e98:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e9a:	e76a      	b.n	8005d72 <_svfiprintf_r+0x52>
 8005e9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	2001      	movs	r0, #1
 8005ea4:	e7a8      	b.n	8005df8 <_svfiprintf_r+0xd8>
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	3401      	adds	r4, #1
 8005eaa:	9305      	str	r3, [sp, #20]
 8005eac:	4619      	mov	r1, r3
 8005eae:	f04f 0c0a 	mov.w	ip, #10
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005eb8:	3a30      	subs	r2, #48	@ 0x30
 8005eba:	2a09      	cmp	r2, #9
 8005ebc:	d903      	bls.n	8005ec6 <_svfiprintf_r+0x1a6>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d0c6      	beq.n	8005e50 <_svfiprintf_r+0x130>
 8005ec2:	9105      	str	r1, [sp, #20]
 8005ec4:	e7c4      	b.n	8005e50 <_svfiprintf_r+0x130>
 8005ec6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eca:	4604      	mov	r4, r0
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e7f0      	b.n	8005eb2 <_svfiprintf_r+0x192>
 8005ed0:	ab03      	add	r3, sp, #12
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	462a      	mov	r2, r5
 8005ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8005f10 <_svfiprintf_r+0x1f0>)
 8005ed8:	a904      	add	r1, sp, #16
 8005eda:	4638      	mov	r0, r7
 8005edc:	f3af 8000 	nop.w
 8005ee0:	1c42      	adds	r2, r0, #1
 8005ee2:	4606      	mov	r6, r0
 8005ee4:	d1d6      	bne.n	8005e94 <_svfiprintf_r+0x174>
 8005ee6:	89ab      	ldrh	r3, [r5, #12]
 8005ee8:	065b      	lsls	r3, r3, #25
 8005eea:	f53f af2d 	bmi.w	8005d48 <_svfiprintf_r+0x28>
 8005eee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ef0:	e72c      	b.n	8005d4c <_svfiprintf_r+0x2c>
 8005ef2:	ab03      	add	r3, sp, #12
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	462a      	mov	r2, r5
 8005ef8:	4b05      	ldr	r3, [pc, #20]	@ (8005f10 <_svfiprintf_r+0x1f0>)
 8005efa:	a904      	add	r1, sp, #16
 8005efc:	4638      	mov	r0, r7
 8005efe:	f000 f879 	bl	8005ff4 <_printf_i>
 8005f02:	e7ed      	b.n	8005ee0 <_svfiprintf_r+0x1c0>
 8005f04:	080086bb 	.word	0x080086bb
 8005f08:	080086c5 	.word	0x080086c5
 8005f0c:	00000000 	.word	0x00000000
 8005f10:	08005c69 	.word	0x08005c69
 8005f14:	080086c1 	.word	0x080086c1

08005f18 <_printf_common>:
 8005f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f1c:	4616      	mov	r6, r2
 8005f1e:	4698      	mov	r8, r3
 8005f20:	688a      	ldr	r2, [r1, #8]
 8005f22:	690b      	ldr	r3, [r1, #16]
 8005f24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	bfb8      	it	lt
 8005f2c:	4613      	movlt	r3, r2
 8005f2e:	6033      	str	r3, [r6, #0]
 8005f30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f34:	4607      	mov	r7, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	b10a      	cbz	r2, 8005f3e <_printf_common+0x26>
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	6033      	str	r3, [r6, #0]
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	0699      	lsls	r1, r3, #26
 8005f42:	bf42      	ittt	mi
 8005f44:	6833      	ldrmi	r3, [r6, #0]
 8005f46:	3302      	addmi	r3, #2
 8005f48:	6033      	strmi	r3, [r6, #0]
 8005f4a:	6825      	ldr	r5, [r4, #0]
 8005f4c:	f015 0506 	ands.w	r5, r5, #6
 8005f50:	d106      	bne.n	8005f60 <_printf_common+0x48>
 8005f52:	f104 0a19 	add.w	sl, r4, #25
 8005f56:	68e3      	ldr	r3, [r4, #12]
 8005f58:	6832      	ldr	r2, [r6, #0]
 8005f5a:	1a9b      	subs	r3, r3, r2
 8005f5c:	42ab      	cmp	r3, r5
 8005f5e:	dc26      	bgt.n	8005fae <_printf_common+0x96>
 8005f60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f64:	6822      	ldr	r2, [r4, #0]
 8005f66:	3b00      	subs	r3, #0
 8005f68:	bf18      	it	ne
 8005f6a:	2301      	movne	r3, #1
 8005f6c:	0692      	lsls	r2, r2, #26
 8005f6e:	d42b      	bmi.n	8005fc8 <_printf_common+0xb0>
 8005f70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f74:	4641      	mov	r1, r8
 8005f76:	4638      	mov	r0, r7
 8005f78:	47c8      	blx	r9
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	d01e      	beq.n	8005fbc <_printf_common+0xa4>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	6922      	ldr	r2, [r4, #16]
 8005f82:	f003 0306 	and.w	r3, r3, #6
 8005f86:	2b04      	cmp	r3, #4
 8005f88:	bf02      	ittt	eq
 8005f8a:	68e5      	ldreq	r5, [r4, #12]
 8005f8c:	6833      	ldreq	r3, [r6, #0]
 8005f8e:	1aed      	subeq	r5, r5, r3
 8005f90:	68a3      	ldr	r3, [r4, #8]
 8005f92:	bf0c      	ite	eq
 8005f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f98:	2500      	movne	r5, #0
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	bfc4      	itt	gt
 8005f9e:	1a9b      	subgt	r3, r3, r2
 8005fa0:	18ed      	addgt	r5, r5, r3
 8005fa2:	2600      	movs	r6, #0
 8005fa4:	341a      	adds	r4, #26
 8005fa6:	42b5      	cmp	r5, r6
 8005fa8:	d11a      	bne.n	8005fe0 <_printf_common+0xc8>
 8005faa:	2000      	movs	r0, #0
 8005fac:	e008      	b.n	8005fc0 <_printf_common+0xa8>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	4652      	mov	r2, sl
 8005fb2:	4641      	mov	r1, r8
 8005fb4:	4638      	mov	r0, r7
 8005fb6:	47c8      	blx	r9
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d103      	bne.n	8005fc4 <_printf_common+0xac>
 8005fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc4:	3501      	adds	r5, #1
 8005fc6:	e7c6      	b.n	8005f56 <_printf_common+0x3e>
 8005fc8:	18e1      	adds	r1, r4, r3
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	2030      	movs	r0, #48	@ 0x30
 8005fce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fd2:	4422      	add	r2, r4
 8005fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fdc:	3302      	adds	r3, #2
 8005fde:	e7c7      	b.n	8005f70 <_printf_common+0x58>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	4622      	mov	r2, r4
 8005fe4:	4641      	mov	r1, r8
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	47c8      	blx	r9
 8005fea:	3001      	adds	r0, #1
 8005fec:	d0e6      	beq.n	8005fbc <_printf_common+0xa4>
 8005fee:	3601      	adds	r6, #1
 8005ff0:	e7d9      	b.n	8005fa6 <_printf_common+0x8e>
	...

08005ff4 <_printf_i>:
 8005ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ff8:	7e0f      	ldrb	r7, [r1, #24]
 8005ffa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ffc:	2f78      	cmp	r7, #120	@ 0x78
 8005ffe:	4691      	mov	r9, r2
 8006000:	4680      	mov	r8, r0
 8006002:	460c      	mov	r4, r1
 8006004:	469a      	mov	sl, r3
 8006006:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800600a:	d807      	bhi.n	800601c <_printf_i+0x28>
 800600c:	2f62      	cmp	r7, #98	@ 0x62
 800600e:	d80a      	bhi.n	8006026 <_printf_i+0x32>
 8006010:	2f00      	cmp	r7, #0
 8006012:	f000 80d2 	beq.w	80061ba <_printf_i+0x1c6>
 8006016:	2f58      	cmp	r7, #88	@ 0x58
 8006018:	f000 80b9 	beq.w	800618e <_printf_i+0x19a>
 800601c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006020:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006024:	e03a      	b.n	800609c <_printf_i+0xa8>
 8006026:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800602a:	2b15      	cmp	r3, #21
 800602c:	d8f6      	bhi.n	800601c <_printf_i+0x28>
 800602e:	a101      	add	r1, pc, #4	@ (adr r1, 8006034 <_printf_i+0x40>)
 8006030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006034:	0800608d 	.word	0x0800608d
 8006038:	080060a1 	.word	0x080060a1
 800603c:	0800601d 	.word	0x0800601d
 8006040:	0800601d 	.word	0x0800601d
 8006044:	0800601d 	.word	0x0800601d
 8006048:	0800601d 	.word	0x0800601d
 800604c:	080060a1 	.word	0x080060a1
 8006050:	0800601d 	.word	0x0800601d
 8006054:	0800601d 	.word	0x0800601d
 8006058:	0800601d 	.word	0x0800601d
 800605c:	0800601d 	.word	0x0800601d
 8006060:	080061a1 	.word	0x080061a1
 8006064:	080060cb 	.word	0x080060cb
 8006068:	0800615b 	.word	0x0800615b
 800606c:	0800601d 	.word	0x0800601d
 8006070:	0800601d 	.word	0x0800601d
 8006074:	080061c3 	.word	0x080061c3
 8006078:	0800601d 	.word	0x0800601d
 800607c:	080060cb 	.word	0x080060cb
 8006080:	0800601d 	.word	0x0800601d
 8006084:	0800601d 	.word	0x0800601d
 8006088:	08006163 	.word	0x08006163
 800608c:	6833      	ldr	r3, [r6, #0]
 800608e:	1d1a      	adds	r2, r3, #4
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6032      	str	r2, [r6, #0]
 8006094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006098:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800609c:	2301      	movs	r3, #1
 800609e:	e09d      	b.n	80061dc <_printf_i+0x1e8>
 80060a0:	6833      	ldr	r3, [r6, #0]
 80060a2:	6820      	ldr	r0, [r4, #0]
 80060a4:	1d19      	adds	r1, r3, #4
 80060a6:	6031      	str	r1, [r6, #0]
 80060a8:	0606      	lsls	r6, r0, #24
 80060aa:	d501      	bpl.n	80060b0 <_printf_i+0xbc>
 80060ac:	681d      	ldr	r5, [r3, #0]
 80060ae:	e003      	b.n	80060b8 <_printf_i+0xc4>
 80060b0:	0645      	lsls	r5, r0, #25
 80060b2:	d5fb      	bpl.n	80060ac <_printf_i+0xb8>
 80060b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060b8:	2d00      	cmp	r5, #0
 80060ba:	da03      	bge.n	80060c4 <_printf_i+0xd0>
 80060bc:	232d      	movs	r3, #45	@ 0x2d
 80060be:	426d      	negs	r5, r5
 80060c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060c4:	4859      	ldr	r0, [pc, #356]	@ (800622c <_printf_i+0x238>)
 80060c6:	230a      	movs	r3, #10
 80060c8:	e011      	b.n	80060ee <_printf_i+0xfa>
 80060ca:	6821      	ldr	r1, [r4, #0]
 80060cc:	6833      	ldr	r3, [r6, #0]
 80060ce:	0608      	lsls	r0, r1, #24
 80060d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80060d4:	d402      	bmi.n	80060dc <_printf_i+0xe8>
 80060d6:	0649      	lsls	r1, r1, #25
 80060d8:	bf48      	it	mi
 80060da:	b2ad      	uxthmi	r5, r5
 80060dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80060de:	4853      	ldr	r0, [pc, #332]	@ (800622c <_printf_i+0x238>)
 80060e0:	6033      	str	r3, [r6, #0]
 80060e2:	bf14      	ite	ne
 80060e4:	230a      	movne	r3, #10
 80060e6:	2308      	moveq	r3, #8
 80060e8:	2100      	movs	r1, #0
 80060ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060ee:	6866      	ldr	r6, [r4, #4]
 80060f0:	60a6      	str	r6, [r4, #8]
 80060f2:	2e00      	cmp	r6, #0
 80060f4:	bfa2      	ittt	ge
 80060f6:	6821      	ldrge	r1, [r4, #0]
 80060f8:	f021 0104 	bicge.w	r1, r1, #4
 80060fc:	6021      	strge	r1, [r4, #0]
 80060fe:	b90d      	cbnz	r5, 8006104 <_printf_i+0x110>
 8006100:	2e00      	cmp	r6, #0
 8006102:	d04b      	beq.n	800619c <_printf_i+0x1a8>
 8006104:	4616      	mov	r6, r2
 8006106:	fbb5 f1f3 	udiv	r1, r5, r3
 800610a:	fb03 5711 	mls	r7, r3, r1, r5
 800610e:	5dc7      	ldrb	r7, [r0, r7]
 8006110:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006114:	462f      	mov	r7, r5
 8006116:	42bb      	cmp	r3, r7
 8006118:	460d      	mov	r5, r1
 800611a:	d9f4      	bls.n	8006106 <_printf_i+0x112>
 800611c:	2b08      	cmp	r3, #8
 800611e:	d10b      	bne.n	8006138 <_printf_i+0x144>
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	07df      	lsls	r7, r3, #31
 8006124:	d508      	bpl.n	8006138 <_printf_i+0x144>
 8006126:	6923      	ldr	r3, [r4, #16]
 8006128:	6861      	ldr	r1, [r4, #4]
 800612a:	4299      	cmp	r1, r3
 800612c:	bfde      	ittt	le
 800612e:	2330      	movle	r3, #48	@ 0x30
 8006130:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006134:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006138:	1b92      	subs	r2, r2, r6
 800613a:	6122      	str	r2, [r4, #16]
 800613c:	f8cd a000 	str.w	sl, [sp]
 8006140:	464b      	mov	r3, r9
 8006142:	aa03      	add	r2, sp, #12
 8006144:	4621      	mov	r1, r4
 8006146:	4640      	mov	r0, r8
 8006148:	f7ff fee6 	bl	8005f18 <_printf_common>
 800614c:	3001      	adds	r0, #1
 800614e:	d14a      	bne.n	80061e6 <_printf_i+0x1f2>
 8006150:	f04f 30ff 	mov.w	r0, #4294967295
 8006154:	b004      	add	sp, #16
 8006156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	f043 0320 	orr.w	r3, r3, #32
 8006160:	6023      	str	r3, [r4, #0]
 8006162:	4833      	ldr	r0, [pc, #204]	@ (8006230 <_printf_i+0x23c>)
 8006164:	2778      	movs	r7, #120	@ 0x78
 8006166:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	6831      	ldr	r1, [r6, #0]
 800616e:	061f      	lsls	r7, r3, #24
 8006170:	f851 5b04 	ldr.w	r5, [r1], #4
 8006174:	d402      	bmi.n	800617c <_printf_i+0x188>
 8006176:	065f      	lsls	r7, r3, #25
 8006178:	bf48      	it	mi
 800617a:	b2ad      	uxthmi	r5, r5
 800617c:	6031      	str	r1, [r6, #0]
 800617e:	07d9      	lsls	r1, r3, #31
 8006180:	bf44      	itt	mi
 8006182:	f043 0320 	orrmi.w	r3, r3, #32
 8006186:	6023      	strmi	r3, [r4, #0]
 8006188:	b11d      	cbz	r5, 8006192 <_printf_i+0x19e>
 800618a:	2310      	movs	r3, #16
 800618c:	e7ac      	b.n	80060e8 <_printf_i+0xf4>
 800618e:	4827      	ldr	r0, [pc, #156]	@ (800622c <_printf_i+0x238>)
 8006190:	e7e9      	b.n	8006166 <_printf_i+0x172>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	f023 0320 	bic.w	r3, r3, #32
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	e7f6      	b.n	800618a <_printf_i+0x196>
 800619c:	4616      	mov	r6, r2
 800619e:	e7bd      	b.n	800611c <_printf_i+0x128>
 80061a0:	6833      	ldr	r3, [r6, #0]
 80061a2:	6825      	ldr	r5, [r4, #0]
 80061a4:	6961      	ldr	r1, [r4, #20]
 80061a6:	1d18      	adds	r0, r3, #4
 80061a8:	6030      	str	r0, [r6, #0]
 80061aa:	062e      	lsls	r6, r5, #24
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	d501      	bpl.n	80061b4 <_printf_i+0x1c0>
 80061b0:	6019      	str	r1, [r3, #0]
 80061b2:	e002      	b.n	80061ba <_printf_i+0x1c6>
 80061b4:	0668      	lsls	r0, r5, #25
 80061b6:	d5fb      	bpl.n	80061b0 <_printf_i+0x1bc>
 80061b8:	8019      	strh	r1, [r3, #0]
 80061ba:	2300      	movs	r3, #0
 80061bc:	6123      	str	r3, [r4, #16]
 80061be:	4616      	mov	r6, r2
 80061c0:	e7bc      	b.n	800613c <_printf_i+0x148>
 80061c2:	6833      	ldr	r3, [r6, #0]
 80061c4:	1d1a      	adds	r2, r3, #4
 80061c6:	6032      	str	r2, [r6, #0]
 80061c8:	681e      	ldr	r6, [r3, #0]
 80061ca:	6862      	ldr	r2, [r4, #4]
 80061cc:	2100      	movs	r1, #0
 80061ce:	4630      	mov	r0, r6
 80061d0:	f7fa f806 	bl	80001e0 <memchr>
 80061d4:	b108      	cbz	r0, 80061da <_printf_i+0x1e6>
 80061d6:	1b80      	subs	r0, r0, r6
 80061d8:	6060      	str	r0, [r4, #4]
 80061da:	6863      	ldr	r3, [r4, #4]
 80061dc:	6123      	str	r3, [r4, #16]
 80061de:	2300      	movs	r3, #0
 80061e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061e4:	e7aa      	b.n	800613c <_printf_i+0x148>
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	4632      	mov	r2, r6
 80061ea:	4649      	mov	r1, r9
 80061ec:	4640      	mov	r0, r8
 80061ee:	47d0      	blx	sl
 80061f0:	3001      	adds	r0, #1
 80061f2:	d0ad      	beq.n	8006150 <_printf_i+0x15c>
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	079b      	lsls	r3, r3, #30
 80061f8:	d413      	bmi.n	8006222 <_printf_i+0x22e>
 80061fa:	68e0      	ldr	r0, [r4, #12]
 80061fc:	9b03      	ldr	r3, [sp, #12]
 80061fe:	4298      	cmp	r0, r3
 8006200:	bfb8      	it	lt
 8006202:	4618      	movlt	r0, r3
 8006204:	e7a6      	b.n	8006154 <_printf_i+0x160>
 8006206:	2301      	movs	r3, #1
 8006208:	4632      	mov	r2, r6
 800620a:	4649      	mov	r1, r9
 800620c:	4640      	mov	r0, r8
 800620e:	47d0      	blx	sl
 8006210:	3001      	adds	r0, #1
 8006212:	d09d      	beq.n	8006150 <_printf_i+0x15c>
 8006214:	3501      	adds	r5, #1
 8006216:	68e3      	ldr	r3, [r4, #12]
 8006218:	9903      	ldr	r1, [sp, #12]
 800621a:	1a5b      	subs	r3, r3, r1
 800621c:	42ab      	cmp	r3, r5
 800621e:	dcf2      	bgt.n	8006206 <_printf_i+0x212>
 8006220:	e7eb      	b.n	80061fa <_printf_i+0x206>
 8006222:	2500      	movs	r5, #0
 8006224:	f104 0619 	add.w	r6, r4, #25
 8006228:	e7f5      	b.n	8006216 <_printf_i+0x222>
 800622a:	bf00      	nop
 800622c:	080086cc 	.word	0x080086cc
 8006230:	080086dd 	.word	0x080086dd

08006234 <__sflush_r>:
 8006234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800623c:	0716      	lsls	r6, r2, #28
 800623e:	4605      	mov	r5, r0
 8006240:	460c      	mov	r4, r1
 8006242:	d454      	bmi.n	80062ee <__sflush_r+0xba>
 8006244:	684b      	ldr	r3, [r1, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	dc02      	bgt.n	8006250 <__sflush_r+0x1c>
 800624a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800624c:	2b00      	cmp	r3, #0
 800624e:	dd48      	ble.n	80062e2 <__sflush_r+0xae>
 8006250:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006252:	2e00      	cmp	r6, #0
 8006254:	d045      	beq.n	80062e2 <__sflush_r+0xae>
 8006256:	2300      	movs	r3, #0
 8006258:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800625c:	682f      	ldr	r7, [r5, #0]
 800625e:	6a21      	ldr	r1, [r4, #32]
 8006260:	602b      	str	r3, [r5, #0]
 8006262:	d030      	beq.n	80062c6 <__sflush_r+0x92>
 8006264:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006266:	89a3      	ldrh	r3, [r4, #12]
 8006268:	0759      	lsls	r1, r3, #29
 800626a:	d505      	bpl.n	8006278 <__sflush_r+0x44>
 800626c:	6863      	ldr	r3, [r4, #4]
 800626e:	1ad2      	subs	r2, r2, r3
 8006270:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006272:	b10b      	cbz	r3, 8006278 <__sflush_r+0x44>
 8006274:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006276:	1ad2      	subs	r2, r2, r3
 8006278:	2300      	movs	r3, #0
 800627a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800627c:	6a21      	ldr	r1, [r4, #32]
 800627e:	4628      	mov	r0, r5
 8006280:	47b0      	blx	r6
 8006282:	1c43      	adds	r3, r0, #1
 8006284:	89a3      	ldrh	r3, [r4, #12]
 8006286:	d106      	bne.n	8006296 <__sflush_r+0x62>
 8006288:	6829      	ldr	r1, [r5, #0]
 800628a:	291d      	cmp	r1, #29
 800628c:	d82b      	bhi.n	80062e6 <__sflush_r+0xb2>
 800628e:	4a2a      	ldr	r2, [pc, #168]	@ (8006338 <__sflush_r+0x104>)
 8006290:	410a      	asrs	r2, r1
 8006292:	07d6      	lsls	r6, r2, #31
 8006294:	d427      	bmi.n	80062e6 <__sflush_r+0xb2>
 8006296:	2200      	movs	r2, #0
 8006298:	6062      	str	r2, [r4, #4]
 800629a:	04d9      	lsls	r1, r3, #19
 800629c:	6922      	ldr	r2, [r4, #16]
 800629e:	6022      	str	r2, [r4, #0]
 80062a0:	d504      	bpl.n	80062ac <__sflush_r+0x78>
 80062a2:	1c42      	adds	r2, r0, #1
 80062a4:	d101      	bne.n	80062aa <__sflush_r+0x76>
 80062a6:	682b      	ldr	r3, [r5, #0]
 80062a8:	b903      	cbnz	r3, 80062ac <__sflush_r+0x78>
 80062aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80062ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062ae:	602f      	str	r7, [r5, #0]
 80062b0:	b1b9      	cbz	r1, 80062e2 <__sflush_r+0xae>
 80062b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062b6:	4299      	cmp	r1, r3
 80062b8:	d002      	beq.n	80062c0 <__sflush_r+0x8c>
 80062ba:	4628      	mov	r0, r5
 80062bc:	f7ff fc8a 	bl	8005bd4 <_free_r>
 80062c0:	2300      	movs	r3, #0
 80062c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80062c4:	e00d      	b.n	80062e2 <__sflush_r+0xae>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4628      	mov	r0, r5
 80062ca:	47b0      	blx	r6
 80062cc:	4602      	mov	r2, r0
 80062ce:	1c50      	adds	r0, r2, #1
 80062d0:	d1c9      	bne.n	8006266 <__sflush_r+0x32>
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0c6      	beq.n	8006266 <__sflush_r+0x32>
 80062d8:	2b1d      	cmp	r3, #29
 80062da:	d001      	beq.n	80062e0 <__sflush_r+0xac>
 80062dc:	2b16      	cmp	r3, #22
 80062de:	d11e      	bne.n	800631e <__sflush_r+0xea>
 80062e0:	602f      	str	r7, [r5, #0]
 80062e2:	2000      	movs	r0, #0
 80062e4:	e022      	b.n	800632c <__sflush_r+0xf8>
 80062e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ea:	b21b      	sxth	r3, r3
 80062ec:	e01b      	b.n	8006326 <__sflush_r+0xf2>
 80062ee:	690f      	ldr	r7, [r1, #16]
 80062f0:	2f00      	cmp	r7, #0
 80062f2:	d0f6      	beq.n	80062e2 <__sflush_r+0xae>
 80062f4:	0793      	lsls	r3, r2, #30
 80062f6:	680e      	ldr	r6, [r1, #0]
 80062f8:	bf08      	it	eq
 80062fa:	694b      	ldreq	r3, [r1, #20]
 80062fc:	600f      	str	r7, [r1, #0]
 80062fe:	bf18      	it	ne
 8006300:	2300      	movne	r3, #0
 8006302:	eba6 0807 	sub.w	r8, r6, r7
 8006306:	608b      	str	r3, [r1, #8]
 8006308:	f1b8 0f00 	cmp.w	r8, #0
 800630c:	dde9      	ble.n	80062e2 <__sflush_r+0xae>
 800630e:	6a21      	ldr	r1, [r4, #32]
 8006310:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006312:	4643      	mov	r3, r8
 8006314:	463a      	mov	r2, r7
 8006316:	4628      	mov	r0, r5
 8006318:	47b0      	blx	r6
 800631a:	2800      	cmp	r0, #0
 800631c:	dc08      	bgt.n	8006330 <__sflush_r+0xfc>
 800631e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006326:	81a3      	strh	r3, [r4, #12]
 8006328:	f04f 30ff 	mov.w	r0, #4294967295
 800632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006330:	4407      	add	r7, r0
 8006332:	eba8 0800 	sub.w	r8, r8, r0
 8006336:	e7e7      	b.n	8006308 <__sflush_r+0xd4>
 8006338:	dfbffffe 	.word	0xdfbffffe

0800633c <_fflush_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	690b      	ldr	r3, [r1, #16]
 8006340:	4605      	mov	r5, r0
 8006342:	460c      	mov	r4, r1
 8006344:	b913      	cbnz	r3, 800634c <_fflush_r+0x10>
 8006346:	2500      	movs	r5, #0
 8006348:	4628      	mov	r0, r5
 800634a:	bd38      	pop	{r3, r4, r5, pc}
 800634c:	b118      	cbz	r0, 8006356 <_fflush_r+0x1a>
 800634e:	6a03      	ldr	r3, [r0, #32]
 8006350:	b90b      	cbnz	r3, 8006356 <_fflush_r+0x1a>
 8006352:	f7ff f9db 	bl	800570c <__sinit>
 8006356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0f3      	beq.n	8006346 <_fflush_r+0xa>
 800635e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006360:	07d0      	lsls	r0, r2, #31
 8006362:	d404      	bmi.n	800636e <_fflush_r+0x32>
 8006364:	0599      	lsls	r1, r3, #22
 8006366:	d402      	bmi.n	800636e <_fflush_r+0x32>
 8006368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800636a:	f7ff fc12 	bl	8005b92 <__retarget_lock_acquire_recursive>
 800636e:	4628      	mov	r0, r5
 8006370:	4621      	mov	r1, r4
 8006372:	f7ff ff5f 	bl	8006234 <__sflush_r>
 8006376:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006378:	07da      	lsls	r2, r3, #31
 800637a:	4605      	mov	r5, r0
 800637c:	d4e4      	bmi.n	8006348 <_fflush_r+0xc>
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	059b      	lsls	r3, r3, #22
 8006382:	d4e1      	bmi.n	8006348 <_fflush_r+0xc>
 8006384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006386:	f7ff fc05 	bl	8005b94 <__retarget_lock_release_recursive>
 800638a:	e7dd      	b.n	8006348 <_fflush_r+0xc>

0800638c <fiprintf>:
 800638c:	b40e      	push	{r1, r2, r3}
 800638e:	b503      	push	{r0, r1, lr}
 8006390:	4601      	mov	r1, r0
 8006392:	ab03      	add	r3, sp, #12
 8006394:	4805      	ldr	r0, [pc, #20]	@ (80063ac <fiprintf+0x20>)
 8006396:	f853 2b04 	ldr.w	r2, [r3], #4
 800639a:	6800      	ldr	r0, [r0, #0]
 800639c:	9301      	str	r3, [sp, #4]
 800639e:	f000 f911 	bl	80065c4 <_vfiprintf_r>
 80063a2:	b002      	add	sp, #8
 80063a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80063a8:	b003      	add	sp, #12
 80063aa:	4770      	bx	lr
 80063ac:	20000024 	.word	0x20000024

080063b0 <__swhatbuf_r>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	460c      	mov	r4, r1
 80063b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b8:	2900      	cmp	r1, #0
 80063ba:	b096      	sub	sp, #88	@ 0x58
 80063bc:	4615      	mov	r5, r2
 80063be:	461e      	mov	r6, r3
 80063c0:	da0d      	bge.n	80063de <__swhatbuf_r+0x2e>
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063c8:	f04f 0100 	mov.w	r1, #0
 80063cc:	bf14      	ite	ne
 80063ce:	2340      	movne	r3, #64	@ 0x40
 80063d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80063d4:	2000      	movs	r0, #0
 80063d6:	6031      	str	r1, [r6, #0]
 80063d8:	602b      	str	r3, [r5, #0]
 80063da:	b016      	add	sp, #88	@ 0x58
 80063dc:	bd70      	pop	{r4, r5, r6, pc}
 80063de:	466a      	mov	r2, sp
 80063e0:	f000 f862 	bl	80064a8 <_fstat_r>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	dbec      	blt.n	80063c2 <__swhatbuf_r+0x12>
 80063e8:	9901      	ldr	r1, [sp, #4]
 80063ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80063ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80063f2:	4259      	negs	r1, r3
 80063f4:	4159      	adcs	r1, r3
 80063f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063fa:	e7eb      	b.n	80063d4 <__swhatbuf_r+0x24>

080063fc <__smakebuf_r>:
 80063fc:	898b      	ldrh	r3, [r1, #12]
 80063fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006400:	079d      	lsls	r5, r3, #30
 8006402:	4606      	mov	r6, r0
 8006404:	460c      	mov	r4, r1
 8006406:	d507      	bpl.n	8006418 <__smakebuf_r+0x1c>
 8006408:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800640c:	6023      	str	r3, [r4, #0]
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	2301      	movs	r3, #1
 8006412:	6163      	str	r3, [r4, #20]
 8006414:	b003      	add	sp, #12
 8006416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006418:	ab01      	add	r3, sp, #4
 800641a:	466a      	mov	r2, sp
 800641c:	f7ff ffc8 	bl	80063b0 <__swhatbuf_r>
 8006420:	9f00      	ldr	r7, [sp, #0]
 8006422:	4605      	mov	r5, r0
 8006424:	4639      	mov	r1, r7
 8006426:	4630      	mov	r0, r6
 8006428:	f7fe ffec 	bl	8005404 <_malloc_r>
 800642c:	b948      	cbnz	r0, 8006442 <__smakebuf_r+0x46>
 800642e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006432:	059a      	lsls	r2, r3, #22
 8006434:	d4ee      	bmi.n	8006414 <__smakebuf_r+0x18>
 8006436:	f023 0303 	bic.w	r3, r3, #3
 800643a:	f043 0302 	orr.w	r3, r3, #2
 800643e:	81a3      	strh	r3, [r4, #12]
 8006440:	e7e2      	b.n	8006408 <__smakebuf_r+0xc>
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	6020      	str	r0, [r4, #0]
 8006446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800644a:	81a3      	strh	r3, [r4, #12]
 800644c:	9b01      	ldr	r3, [sp, #4]
 800644e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006452:	b15b      	cbz	r3, 800646c <__smakebuf_r+0x70>
 8006454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006458:	4630      	mov	r0, r6
 800645a:	f000 f837 	bl	80064cc <_isatty_r>
 800645e:	b128      	cbz	r0, 800646c <__smakebuf_r+0x70>
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	f023 0303 	bic.w	r3, r3, #3
 8006466:	f043 0301 	orr.w	r3, r3, #1
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	89a3      	ldrh	r3, [r4, #12]
 800646e:	431d      	orrs	r5, r3
 8006470:	81a5      	strh	r5, [r4, #12]
 8006472:	e7cf      	b.n	8006414 <__smakebuf_r+0x18>

08006474 <memmove>:
 8006474:	4288      	cmp	r0, r1
 8006476:	b510      	push	{r4, lr}
 8006478:	eb01 0402 	add.w	r4, r1, r2
 800647c:	d902      	bls.n	8006484 <memmove+0x10>
 800647e:	4284      	cmp	r4, r0
 8006480:	4623      	mov	r3, r4
 8006482:	d807      	bhi.n	8006494 <memmove+0x20>
 8006484:	1e43      	subs	r3, r0, #1
 8006486:	42a1      	cmp	r1, r4
 8006488:	d008      	beq.n	800649c <memmove+0x28>
 800648a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800648e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006492:	e7f8      	b.n	8006486 <memmove+0x12>
 8006494:	4402      	add	r2, r0
 8006496:	4601      	mov	r1, r0
 8006498:	428a      	cmp	r2, r1
 800649a:	d100      	bne.n	800649e <memmove+0x2a>
 800649c:	bd10      	pop	{r4, pc}
 800649e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064a6:	e7f7      	b.n	8006498 <memmove+0x24>

080064a8 <_fstat_r>:
 80064a8:	b538      	push	{r3, r4, r5, lr}
 80064aa:	4d07      	ldr	r5, [pc, #28]	@ (80064c8 <_fstat_r+0x20>)
 80064ac:	2300      	movs	r3, #0
 80064ae:	4604      	mov	r4, r0
 80064b0:	4608      	mov	r0, r1
 80064b2:	4611      	mov	r1, r2
 80064b4:	602b      	str	r3, [r5, #0]
 80064b6:	f7fe fc41 	bl	8004d3c <_fstat>
 80064ba:	1c43      	adds	r3, r0, #1
 80064bc:	d102      	bne.n	80064c4 <_fstat_r+0x1c>
 80064be:	682b      	ldr	r3, [r5, #0]
 80064c0:	b103      	cbz	r3, 80064c4 <_fstat_r+0x1c>
 80064c2:	6023      	str	r3, [r4, #0]
 80064c4:	bd38      	pop	{r3, r4, r5, pc}
 80064c6:	bf00      	nop
 80064c8:	20000588 	.word	0x20000588

080064cc <_isatty_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	4d06      	ldr	r5, [pc, #24]	@ (80064e8 <_isatty_r+0x1c>)
 80064d0:	2300      	movs	r3, #0
 80064d2:	4604      	mov	r4, r0
 80064d4:	4608      	mov	r0, r1
 80064d6:	602b      	str	r3, [r5, #0]
 80064d8:	f7fe fc40 	bl	8004d5c <_isatty>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_isatty_r+0x1a>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_isatty_r+0x1a>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	20000588 	.word	0x20000588

080064ec <memcpy>:
 80064ec:	440a      	add	r2, r1
 80064ee:	4291      	cmp	r1, r2
 80064f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80064f4:	d100      	bne.n	80064f8 <memcpy+0xc>
 80064f6:	4770      	bx	lr
 80064f8:	b510      	push	{r4, lr}
 80064fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006502:	4291      	cmp	r1, r2
 8006504:	d1f9      	bne.n	80064fa <memcpy+0xe>
 8006506:	bd10      	pop	{r4, pc}

08006508 <abort>:
 8006508:	b508      	push	{r3, lr}
 800650a:	2006      	movs	r0, #6
 800650c:	f000 f99a 	bl	8006844 <raise>
 8006510:	2001      	movs	r0, #1
 8006512:	f7fe fbc3 	bl	8004c9c <_exit>

08006516 <_realloc_r>:
 8006516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800651a:	4680      	mov	r8, r0
 800651c:	4615      	mov	r5, r2
 800651e:	460c      	mov	r4, r1
 8006520:	b921      	cbnz	r1, 800652c <_realloc_r+0x16>
 8006522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006526:	4611      	mov	r1, r2
 8006528:	f7fe bf6c 	b.w	8005404 <_malloc_r>
 800652c:	b92a      	cbnz	r2, 800653a <_realloc_r+0x24>
 800652e:	f7ff fb51 	bl	8005bd4 <_free_r>
 8006532:	2400      	movs	r4, #0
 8006534:	4620      	mov	r0, r4
 8006536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800653a:	f000 f99f 	bl	800687c <_malloc_usable_size_r>
 800653e:	4285      	cmp	r5, r0
 8006540:	4606      	mov	r6, r0
 8006542:	d802      	bhi.n	800654a <_realloc_r+0x34>
 8006544:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006548:	d8f4      	bhi.n	8006534 <_realloc_r+0x1e>
 800654a:	4629      	mov	r1, r5
 800654c:	4640      	mov	r0, r8
 800654e:	f7fe ff59 	bl	8005404 <_malloc_r>
 8006552:	4607      	mov	r7, r0
 8006554:	2800      	cmp	r0, #0
 8006556:	d0ec      	beq.n	8006532 <_realloc_r+0x1c>
 8006558:	42b5      	cmp	r5, r6
 800655a:	462a      	mov	r2, r5
 800655c:	4621      	mov	r1, r4
 800655e:	bf28      	it	cs
 8006560:	4632      	movcs	r2, r6
 8006562:	f7ff ffc3 	bl	80064ec <memcpy>
 8006566:	4621      	mov	r1, r4
 8006568:	4640      	mov	r0, r8
 800656a:	f7ff fb33 	bl	8005bd4 <_free_r>
 800656e:	463c      	mov	r4, r7
 8006570:	e7e0      	b.n	8006534 <_realloc_r+0x1e>

08006572 <__sfputc_r>:
 8006572:	6893      	ldr	r3, [r2, #8]
 8006574:	3b01      	subs	r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	b410      	push	{r4}
 800657a:	6093      	str	r3, [r2, #8]
 800657c:	da08      	bge.n	8006590 <__sfputc_r+0x1e>
 800657e:	6994      	ldr	r4, [r2, #24]
 8006580:	42a3      	cmp	r3, r4
 8006582:	db01      	blt.n	8006588 <__sfputc_r+0x16>
 8006584:	290a      	cmp	r1, #10
 8006586:	d103      	bne.n	8006590 <__sfputc_r+0x1e>
 8006588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800658c:	f7ff b9b5 	b.w	80058fa <__swbuf_r>
 8006590:	6813      	ldr	r3, [r2, #0]
 8006592:	1c58      	adds	r0, r3, #1
 8006594:	6010      	str	r0, [r2, #0]
 8006596:	7019      	strb	r1, [r3, #0]
 8006598:	4608      	mov	r0, r1
 800659a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <__sfputs_r>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	4606      	mov	r6, r0
 80065a4:	460f      	mov	r7, r1
 80065a6:	4614      	mov	r4, r2
 80065a8:	18d5      	adds	r5, r2, r3
 80065aa:	42ac      	cmp	r4, r5
 80065ac:	d101      	bne.n	80065b2 <__sfputs_r+0x12>
 80065ae:	2000      	movs	r0, #0
 80065b0:	e007      	b.n	80065c2 <__sfputs_r+0x22>
 80065b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b6:	463a      	mov	r2, r7
 80065b8:	4630      	mov	r0, r6
 80065ba:	f7ff ffda 	bl	8006572 <__sfputc_r>
 80065be:	1c43      	adds	r3, r0, #1
 80065c0:	d1f3      	bne.n	80065aa <__sfputs_r+0xa>
 80065c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065c4 <_vfiprintf_r>:
 80065c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c8:	460d      	mov	r5, r1
 80065ca:	b09d      	sub	sp, #116	@ 0x74
 80065cc:	4614      	mov	r4, r2
 80065ce:	4698      	mov	r8, r3
 80065d0:	4606      	mov	r6, r0
 80065d2:	b118      	cbz	r0, 80065dc <_vfiprintf_r+0x18>
 80065d4:	6a03      	ldr	r3, [r0, #32]
 80065d6:	b90b      	cbnz	r3, 80065dc <_vfiprintf_r+0x18>
 80065d8:	f7ff f898 	bl	800570c <__sinit>
 80065dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065de:	07d9      	lsls	r1, r3, #31
 80065e0:	d405      	bmi.n	80065ee <_vfiprintf_r+0x2a>
 80065e2:	89ab      	ldrh	r3, [r5, #12]
 80065e4:	059a      	lsls	r2, r3, #22
 80065e6:	d402      	bmi.n	80065ee <_vfiprintf_r+0x2a>
 80065e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065ea:	f7ff fad2 	bl	8005b92 <__retarget_lock_acquire_recursive>
 80065ee:	89ab      	ldrh	r3, [r5, #12]
 80065f0:	071b      	lsls	r3, r3, #28
 80065f2:	d501      	bpl.n	80065f8 <_vfiprintf_r+0x34>
 80065f4:	692b      	ldr	r3, [r5, #16]
 80065f6:	b99b      	cbnz	r3, 8006620 <_vfiprintf_r+0x5c>
 80065f8:	4629      	mov	r1, r5
 80065fa:	4630      	mov	r0, r6
 80065fc:	f7ff f9bc 	bl	8005978 <__swsetup_r>
 8006600:	b170      	cbz	r0, 8006620 <_vfiprintf_r+0x5c>
 8006602:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006604:	07dc      	lsls	r4, r3, #31
 8006606:	d504      	bpl.n	8006612 <_vfiprintf_r+0x4e>
 8006608:	f04f 30ff 	mov.w	r0, #4294967295
 800660c:	b01d      	add	sp, #116	@ 0x74
 800660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006612:	89ab      	ldrh	r3, [r5, #12]
 8006614:	0598      	lsls	r0, r3, #22
 8006616:	d4f7      	bmi.n	8006608 <_vfiprintf_r+0x44>
 8006618:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800661a:	f7ff fabb 	bl	8005b94 <__retarget_lock_release_recursive>
 800661e:	e7f3      	b.n	8006608 <_vfiprintf_r+0x44>
 8006620:	2300      	movs	r3, #0
 8006622:	9309      	str	r3, [sp, #36]	@ 0x24
 8006624:	2320      	movs	r3, #32
 8006626:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800662a:	f8cd 800c 	str.w	r8, [sp, #12]
 800662e:	2330      	movs	r3, #48	@ 0x30
 8006630:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80067e0 <_vfiprintf_r+0x21c>
 8006634:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006638:	f04f 0901 	mov.w	r9, #1
 800663c:	4623      	mov	r3, r4
 800663e:	469a      	mov	sl, r3
 8006640:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006644:	b10a      	cbz	r2, 800664a <_vfiprintf_r+0x86>
 8006646:	2a25      	cmp	r2, #37	@ 0x25
 8006648:	d1f9      	bne.n	800663e <_vfiprintf_r+0x7a>
 800664a:	ebba 0b04 	subs.w	fp, sl, r4
 800664e:	d00b      	beq.n	8006668 <_vfiprintf_r+0xa4>
 8006650:	465b      	mov	r3, fp
 8006652:	4622      	mov	r2, r4
 8006654:	4629      	mov	r1, r5
 8006656:	4630      	mov	r0, r6
 8006658:	f7ff ffa2 	bl	80065a0 <__sfputs_r>
 800665c:	3001      	adds	r0, #1
 800665e:	f000 80a7 	beq.w	80067b0 <_vfiprintf_r+0x1ec>
 8006662:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006664:	445a      	add	r2, fp
 8006666:	9209      	str	r2, [sp, #36]	@ 0x24
 8006668:	f89a 3000 	ldrb.w	r3, [sl]
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 809f 	beq.w	80067b0 <_vfiprintf_r+0x1ec>
 8006672:	2300      	movs	r3, #0
 8006674:	f04f 32ff 	mov.w	r2, #4294967295
 8006678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800667c:	f10a 0a01 	add.w	sl, sl, #1
 8006680:	9304      	str	r3, [sp, #16]
 8006682:	9307      	str	r3, [sp, #28]
 8006684:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006688:	931a      	str	r3, [sp, #104]	@ 0x68
 800668a:	4654      	mov	r4, sl
 800668c:	2205      	movs	r2, #5
 800668e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006692:	4853      	ldr	r0, [pc, #332]	@ (80067e0 <_vfiprintf_r+0x21c>)
 8006694:	f7f9 fda4 	bl	80001e0 <memchr>
 8006698:	9a04      	ldr	r2, [sp, #16]
 800669a:	b9d8      	cbnz	r0, 80066d4 <_vfiprintf_r+0x110>
 800669c:	06d1      	lsls	r1, r2, #27
 800669e:	bf44      	itt	mi
 80066a0:	2320      	movmi	r3, #32
 80066a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066a6:	0713      	lsls	r3, r2, #28
 80066a8:	bf44      	itt	mi
 80066aa:	232b      	movmi	r3, #43	@ 0x2b
 80066ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066b0:	f89a 3000 	ldrb.w	r3, [sl]
 80066b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80066b6:	d015      	beq.n	80066e4 <_vfiprintf_r+0x120>
 80066b8:	9a07      	ldr	r2, [sp, #28]
 80066ba:	4654      	mov	r4, sl
 80066bc:	2000      	movs	r0, #0
 80066be:	f04f 0c0a 	mov.w	ip, #10
 80066c2:	4621      	mov	r1, r4
 80066c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066c8:	3b30      	subs	r3, #48	@ 0x30
 80066ca:	2b09      	cmp	r3, #9
 80066cc:	d94b      	bls.n	8006766 <_vfiprintf_r+0x1a2>
 80066ce:	b1b0      	cbz	r0, 80066fe <_vfiprintf_r+0x13a>
 80066d0:	9207      	str	r2, [sp, #28]
 80066d2:	e014      	b.n	80066fe <_vfiprintf_r+0x13a>
 80066d4:	eba0 0308 	sub.w	r3, r0, r8
 80066d8:	fa09 f303 	lsl.w	r3, r9, r3
 80066dc:	4313      	orrs	r3, r2
 80066de:	9304      	str	r3, [sp, #16]
 80066e0:	46a2      	mov	sl, r4
 80066e2:	e7d2      	b.n	800668a <_vfiprintf_r+0xc6>
 80066e4:	9b03      	ldr	r3, [sp, #12]
 80066e6:	1d19      	adds	r1, r3, #4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	9103      	str	r1, [sp, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	bfbb      	ittet	lt
 80066f0:	425b      	neglt	r3, r3
 80066f2:	f042 0202 	orrlt.w	r2, r2, #2
 80066f6:	9307      	strge	r3, [sp, #28]
 80066f8:	9307      	strlt	r3, [sp, #28]
 80066fa:	bfb8      	it	lt
 80066fc:	9204      	strlt	r2, [sp, #16]
 80066fe:	7823      	ldrb	r3, [r4, #0]
 8006700:	2b2e      	cmp	r3, #46	@ 0x2e
 8006702:	d10a      	bne.n	800671a <_vfiprintf_r+0x156>
 8006704:	7863      	ldrb	r3, [r4, #1]
 8006706:	2b2a      	cmp	r3, #42	@ 0x2a
 8006708:	d132      	bne.n	8006770 <_vfiprintf_r+0x1ac>
 800670a:	9b03      	ldr	r3, [sp, #12]
 800670c:	1d1a      	adds	r2, r3, #4
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	9203      	str	r2, [sp, #12]
 8006712:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006716:	3402      	adds	r4, #2
 8006718:	9305      	str	r3, [sp, #20]
 800671a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80067f0 <_vfiprintf_r+0x22c>
 800671e:	7821      	ldrb	r1, [r4, #0]
 8006720:	2203      	movs	r2, #3
 8006722:	4650      	mov	r0, sl
 8006724:	f7f9 fd5c 	bl	80001e0 <memchr>
 8006728:	b138      	cbz	r0, 800673a <_vfiprintf_r+0x176>
 800672a:	9b04      	ldr	r3, [sp, #16]
 800672c:	eba0 000a 	sub.w	r0, r0, sl
 8006730:	2240      	movs	r2, #64	@ 0x40
 8006732:	4082      	lsls	r2, r0
 8006734:	4313      	orrs	r3, r2
 8006736:	3401      	adds	r4, #1
 8006738:	9304      	str	r3, [sp, #16]
 800673a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800673e:	4829      	ldr	r0, [pc, #164]	@ (80067e4 <_vfiprintf_r+0x220>)
 8006740:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006744:	2206      	movs	r2, #6
 8006746:	f7f9 fd4b 	bl	80001e0 <memchr>
 800674a:	2800      	cmp	r0, #0
 800674c:	d03f      	beq.n	80067ce <_vfiprintf_r+0x20a>
 800674e:	4b26      	ldr	r3, [pc, #152]	@ (80067e8 <_vfiprintf_r+0x224>)
 8006750:	bb1b      	cbnz	r3, 800679a <_vfiprintf_r+0x1d6>
 8006752:	9b03      	ldr	r3, [sp, #12]
 8006754:	3307      	adds	r3, #7
 8006756:	f023 0307 	bic.w	r3, r3, #7
 800675a:	3308      	adds	r3, #8
 800675c:	9303      	str	r3, [sp, #12]
 800675e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006760:	443b      	add	r3, r7
 8006762:	9309      	str	r3, [sp, #36]	@ 0x24
 8006764:	e76a      	b.n	800663c <_vfiprintf_r+0x78>
 8006766:	fb0c 3202 	mla	r2, ip, r2, r3
 800676a:	460c      	mov	r4, r1
 800676c:	2001      	movs	r0, #1
 800676e:	e7a8      	b.n	80066c2 <_vfiprintf_r+0xfe>
 8006770:	2300      	movs	r3, #0
 8006772:	3401      	adds	r4, #1
 8006774:	9305      	str	r3, [sp, #20]
 8006776:	4619      	mov	r1, r3
 8006778:	f04f 0c0a 	mov.w	ip, #10
 800677c:	4620      	mov	r0, r4
 800677e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006782:	3a30      	subs	r2, #48	@ 0x30
 8006784:	2a09      	cmp	r2, #9
 8006786:	d903      	bls.n	8006790 <_vfiprintf_r+0x1cc>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d0c6      	beq.n	800671a <_vfiprintf_r+0x156>
 800678c:	9105      	str	r1, [sp, #20]
 800678e:	e7c4      	b.n	800671a <_vfiprintf_r+0x156>
 8006790:	fb0c 2101 	mla	r1, ip, r1, r2
 8006794:	4604      	mov	r4, r0
 8006796:	2301      	movs	r3, #1
 8006798:	e7f0      	b.n	800677c <_vfiprintf_r+0x1b8>
 800679a:	ab03      	add	r3, sp, #12
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	462a      	mov	r2, r5
 80067a0:	4b12      	ldr	r3, [pc, #72]	@ (80067ec <_vfiprintf_r+0x228>)
 80067a2:	a904      	add	r1, sp, #16
 80067a4:	4630      	mov	r0, r6
 80067a6:	f3af 8000 	nop.w
 80067aa:	4607      	mov	r7, r0
 80067ac:	1c78      	adds	r0, r7, #1
 80067ae:	d1d6      	bne.n	800675e <_vfiprintf_r+0x19a>
 80067b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067b2:	07d9      	lsls	r1, r3, #31
 80067b4:	d405      	bmi.n	80067c2 <_vfiprintf_r+0x1fe>
 80067b6:	89ab      	ldrh	r3, [r5, #12]
 80067b8:	059a      	lsls	r2, r3, #22
 80067ba:	d402      	bmi.n	80067c2 <_vfiprintf_r+0x1fe>
 80067bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067be:	f7ff f9e9 	bl	8005b94 <__retarget_lock_release_recursive>
 80067c2:	89ab      	ldrh	r3, [r5, #12]
 80067c4:	065b      	lsls	r3, r3, #25
 80067c6:	f53f af1f 	bmi.w	8006608 <_vfiprintf_r+0x44>
 80067ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067cc:	e71e      	b.n	800660c <_vfiprintf_r+0x48>
 80067ce:	ab03      	add	r3, sp, #12
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	462a      	mov	r2, r5
 80067d4:	4b05      	ldr	r3, [pc, #20]	@ (80067ec <_vfiprintf_r+0x228>)
 80067d6:	a904      	add	r1, sp, #16
 80067d8:	4630      	mov	r0, r6
 80067da:	f7ff fc0b 	bl	8005ff4 <_printf_i>
 80067de:	e7e4      	b.n	80067aa <_vfiprintf_r+0x1e6>
 80067e0:	080086bb 	.word	0x080086bb
 80067e4:	080086c5 	.word	0x080086c5
 80067e8:	00000000 	.word	0x00000000
 80067ec:	080065a1 	.word	0x080065a1
 80067f0:	080086c1 	.word	0x080086c1

080067f4 <_raise_r>:
 80067f4:	291f      	cmp	r1, #31
 80067f6:	b538      	push	{r3, r4, r5, lr}
 80067f8:	4605      	mov	r5, r0
 80067fa:	460c      	mov	r4, r1
 80067fc:	d904      	bls.n	8006808 <_raise_r+0x14>
 80067fe:	2316      	movs	r3, #22
 8006800:	6003      	str	r3, [r0, #0]
 8006802:	f04f 30ff 	mov.w	r0, #4294967295
 8006806:	bd38      	pop	{r3, r4, r5, pc}
 8006808:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800680a:	b112      	cbz	r2, 8006812 <_raise_r+0x1e>
 800680c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006810:	b94b      	cbnz	r3, 8006826 <_raise_r+0x32>
 8006812:	4628      	mov	r0, r5
 8006814:	f000 f830 	bl	8006878 <_getpid_r>
 8006818:	4622      	mov	r2, r4
 800681a:	4601      	mov	r1, r0
 800681c:	4628      	mov	r0, r5
 800681e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006822:	f000 b817 	b.w	8006854 <_kill_r>
 8006826:	2b01      	cmp	r3, #1
 8006828:	d00a      	beq.n	8006840 <_raise_r+0x4c>
 800682a:	1c59      	adds	r1, r3, #1
 800682c:	d103      	bne.n	8006836 <_raise_r+0x42>
 800682e:	2316      	movs	r3, #22
 8006830:	6003      	str	r3, [r0, #0]
 8006832:	2001      	movs	r0, #1
 8006834:	e7e7      	b.n	8006806 <_raise_r+0x12>
 8006836:	2100      	movs	r1, #0
 8006838:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800683c:	4620      	mov	r0, r4
 800683e:	4798      	blx	r3
 8006840:	2000      	movs	r0, #0
 8006842:	e7e0      	b.n	8006806 <_raise_r+0x12>

08006844 <raise>:
 8006844:	4b02      	ldr	r3, [pc, #8]	@ (8006850 <raise+0xc>)
 8006846:	4601      	mov	r1, r0
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	f7ff bfd3 	b.w	80067f4 <_raise_r>
 800684e:	bf00      	nop
 8006850:	20000024 	.word	0x20000024

08006854 <_kill_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4d07      	ldr	r5, [pc, #28]	@ (8006874 <_kill_r+0x20>)
 8006858:	2300      	movs	r3, #0
 800685a:	4604      	mov	r4, r0
 800685c:	4608      	mov	r0, r1
 800685e:	4611      	mov	r1, r2
 8006860:	602b      	str	r3, [r5, #0]
 8006862:	f7fe fa0b 	bl	8004c7c <_kill>
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	d102      	bne.n	8006870 <_kill_r+0x1c>
 800686a:	682b      	ldr	r3, [r5, #0]
 800686c:	b103      	cbz	r3, 8006870 <_kill_r+0x1c>
 800686e:	6023      	str	r3, [r4, #0]
 8006870:	bd38      	pop	{r3, r4, r5, pc}
 8006872:	bf00      	nop
 8006874:	20000588 	.word	0x20000588

08006878 <_getpid_r>:
 8006878:	f7fe b9f8 	b.w	8004c6c <_getpid>

0800687c <_malloc_usable_size_r>:
 800687c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006880:	1f18      	subs	r0, r3, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	bfbc      	itt	lt
 8006886:	580b      	ldrlt	r3, [r1, r0]
 8006888:	18c0      	addlt	r0, r0, r3
 800688a:	4770      	bx	lr

0800688c <sqrt>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	ed2d 8b02 	vpush	{d8}
 8006892:	ec55 4b10 	vmov	r4, r5, d0
 8006896:	f000 fa6f 	bl	8006d78 <__ieee754_sqrt>
 800689a:	4622      	mov	r2, r4
 800689c:	462b      	mov	r3, r5
 800689e:	4620      	mov	r0, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	eeb0 8a40 	vmov.f32	s16, s0
 80068a6:	eef0 8a60 	vmov.f32	s17, s1
 80068aa:	f7fa f93f 	bl	8000b2c <__aeabi_dcmpun>
 80068ae:	b990      	cbnz	r0, 80068d6 <sqrt+0x4a>
 80068b0:	2200      	movs	r2, #0
 80068b2:	2300      	movs	r3, #0
 80068b4:	4620      	mov	r0, r4
 80068b6:	4629      	mov	r1, r5
 80068b8:	f7fa f910 	bl	8000adc <__aeabi_dcmplt>
 80068bc:	b158      	cbz	r0, 80068d6 <sqrt+0x4a>
 80068be:	f7ff f93d 	bl	8005b3c <__errno>
 80068c2:	2321      	movs	r3, #33	@ 0x21
 80068c4:	6003      	str	r3, [r0, #0]
 80068c6:	2200      	movs	r2, #0
 80068c8:	2300      	movs	r3, #0
 80068ca:	4610      	mov	r0, r2
 80068cc:	4619      	mov	r1, r3
 80068ce:	f7f9 ffbd 	bl	800084c <__aeabi_ddiv>
 80068d2:	ec41 0b18 	vmov	d8, r0, r1
 80068d6:	eeb0 0a48 	vmov.f32	s0, s16
 80068da:	eef0 0a68 	vmov.f32	s1, s17
 80068de:	ecbd 8b02 	vpop	{d8}
 80068e2:	bd38      	pop	{r3, r4, r5, pc}
 80068e4:	0000      	movs	r0, r0
	...

080068e8 <atan>:
 80068e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	ec55 4b10 	vmov	r4, r5, d0
 80068f0:	4bbf      	ldr	r3, [pc, #764]	@ (8006bf0 <atan+0x308>)
 80068f2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80068f6:	429e      	cmp	r6, r3
 80068f8:	46ab      	mov	fp, r5
 80068fa:	d918      	bls.n	800692e <atan+0x46>
 80068fc:	4bbd      	ldr	r3, [pc, #756]	@ (8006bf4 <atan+0x30c>)
 80068fe:	429e      	cmp	r6, r3
 8006900:	d801      	bhi.n	8006906 <atan+0x1e>
 8006902:	d109      	bne.n	8006918 <atan+0x30>
 8006904:	b144      	cbz	r4, 8006918 <atan+0x30>
 8006906:	4622      	mov	r2, r4
 8006908:	462b      	mov	r3, r5
 800690a:	4620      	mov	r0, r4
 800690c:	4629      	mov	r1, r5
 800690e:	f7f9 fcbd 	bl	800028c <__adddf3>
 8006912:	4604      	mov	r4, r0
 8006914:	460d      	mov	r5, r1
 8006916:	e006      	b.n	8006926 <atan+0x3e>
 8006918:	f1bb 0f00 	cmp.w	fp, #0
 800691c:	f340 812b 	ble.w	8006b76 <atan+0x28e>
 8006920:	a597      	add	r5, pc, #604	@ (adr r5, 8006b80 <atan+0x298>)
 8006922:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006926:	ec45 4b10 	vmov	d0, r4, r5
 800692a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692e:	4bb2      	ldr	r3, [pc, #712]	@ (8006bf8 <atan+0x310>)
 8006930:	429e      	cmp	r6, r3
 8006932:	d813      	bhi.n	800695c <atan+0x74>
 8006934:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006938:	429e      	cmp	r6, r3
 800693a:	d80c      	bhi.n	8006956 <atan+0x6e>
 800693c:	a392      	add	r3, pc, #584	@ (adr r3, 8006b88 <atan+0x2a0>)
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	4620      	mov	r0, r4
 8006944:	4629      	mov	r1, r5
 8006946:	f7f9 fca1 	bl	800028c <__adddf3>
 800694a:	4bac      	ldr	r3, [pc, #688]	@ (8006bfc <atan+0x314>)
 800694c:	2200      	movs	r2, #0
 800694e:	f7fa f8e3 	bl	8000b18 <__aeabi_dcmpgt>
 8006952:	2800      	cmp	r0, #0
 8006954:	d1e7      	bne.n	8006926 <atan+0x3e>
 8006956:	f04f 3aff 	mov.w	sl, #4294967295
 800695a:	e029      	b.n	80069b0 <atan+0xc8>
 800695c:	f000 f9b0 	bl	8006cc0 <fabs>
 8006960:	4ba7      	ldr	r3, [pc, #668]	@ (8006c00 <atan+0x318>)
 8006962:	429e      	cmp	r6, r3
 8006964:	ec55 4b10 	vmov	r4, r5, d0
 8006968:	f200 80bc 	bhi.w	8006ae4 <atan+0x1fc>
 800696c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006970:	429e      	cmp	r6, r3
 8006972:	f200 809e 	bhi.w	8006ab2 <atan+0x1ca>
 8006976:	4622      	mov	r2, r4
 8006978:	462b      	mov	r3, r5
 800697a:	4620      	mov	r0, r4
 800697c:	4629      	mov	r1, r5
 800697e:	f7f9 fc85 	bl	800028c <__adddf3>
 8006982:	4b9e      	ldr	r3, [pc, #632]	@ (8006bfc <atan+0x314>)
 8006984:	2200      	movs	r2, #0
 8006986:	f7f9 fc7f 	bl	8000288 <__aeabi_dsub>
 800698a:	2200      	movs	r2, #0
 800698c:	4606      	mov	r6, r0
 800698e:	460f      	mov	r7, r1
 8006990:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006994:	4620      	mov	r0, r4
 8006996:	4629      	mov	r1, r5
 8006998:	f7f9 fc78 	bl	800028c <__adddf3>
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	4630      	mov	r0, r6
 80069a2:	4639      	mov	r1, r7
 80069a4:	f7f9 ff52 	bl	800084c <__aeabi_ddiv>
 80069a8:	f04f 0a00 	mov.w	sl, #0
 80069ac:	4604      	mov	r4, r0
 80069ae:	460d      	mov	r5, r1
 80069b0:	4622      	mov	r2, r4
 80069b2:	462b      	mov	r3, r5
 80069b4:	4620      	mov	r0, r4
 80069b6:	4629      	mov	r1, r5
 80069b8:	f7f9 fe1e 	bl	80005f8 <__aeabi_dmul>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4680      	mov	r8, r0
 80069c2:	4689      	mov	r9, r1
 80069c4:	f7f9 fe18 	bl	80005f8 <__aeabi_dmul>
 80069c8:	a371      	add	r3, pc, #452	@ (adr r3, 8006b90 <atan+0x2a8>)
 80069ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ce:	4606      	mov	r6, r0
 80069d0:	460f      	mov	r7, r1
 80069d2:	f7f9 fe11 	bl	80005f8 <__aeabi_dmul>
 80069d6:	a370      	add	r3, pc, #448	@ (adr r3, 8006b98 <atan+0x2b0>)
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	f7f9 fc56 	bl	800028c <__adddf3>
 80069e0:	4632      	mov	r2, r6
 80069e2:	463b      	mov	r3, r7
 80069e4:	f7f9 fe08 	bl	80005f8 <__aeabi_dmul>
 80069e8:	a36d      	add	r3, pc, #436	@ (adr r3, 8006ba0 <atan+0x2b8>)
 80069ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ee:	f7f9 fc4d 	bl	800028c <__adddf3>
 80069f2:	4632      	mov	r2, r6
 80069f4:	463b      	mov	r3, r7
 80069f6:	f7f9 fdff 	bl	80005f8 <__aeabi_dmul>
 80069fa:	a36b      	add	r3, pc, #428	@ (adr r3, 8006ba8 <atan+0x2c0>)
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	f7f9 fc44 	bl	800028c <__adddf3>
 8006a04:	4632      	mov	r2, r6
 8006a06:	463b      	mov	r3, r7
 8006a08:	f7f9 fdf6 	bl	80005f8 <__aeabi_dmul>
 8006a0c:	a368      	add	r3, pc, #416	@ (adr r3, 8006bb0 <atan+0x2c8>)
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f7f9 fc3b 	bl	800028c <__adddf3>
 8006a16:	4632      	mov	r2, r6
 8006a18:	463b      	mov	r3, r7
 8006a1a:	f7f9 fded 	bl	80005f8 <__aeabi_dmul>
 8006a1e:	a366      	add	r3, pc, #408	@ (adr r3, 8006bb8 <atan+0x2d0>)
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	f7f9 fc32 	bl	800028c <__adddf3>
 8006a28:	4642      	mov	r2, r8
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	f7f9 fde4 	bl	80005f8 <__aeabi_dmul>
 8006a30:	a363      	add	r3, pc, #396	@ (adr r3, 8006bc0 <atan+0x2d8>)
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	4680      	mov	r8, r0
 8006a38:	4689      	mov	r9, r1
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	4639      	mov	r1, r7
 8006a3e:	f7f9 fddb 	bl	80005f8 <__aeabi_dmul>
 8006a42:	a361      	add	r3, pc, #388	@ (adr r3, 8006bc8 <atan+0x2e0>)
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f7f9 fc1e 	bl	8000288 <__aeabi_dsub>
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	463b      	mov	r3, r7
 8006a50:	f7f9 fdd2 	bl	80005f8 <__aeabi_dmul>
 8006a54:	a35e      	add	r3, pc, #376	@ (adr r3, 8006bd0 <atan+0x2e8>)
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	f7f9 fc15 	bl	8000288 <__aeabi_dsub>
 8006a5e:	4632      	mov	r2, r6
 8006a60:	463b      	mov	r3, r7
 8006a62:	f7f9 fdc9 	bl	80005f8 <__aeabi_dmul>
 8006a66:	a35c      	add	r3, pc, #368	@ (adr r3, 8006bd8 <atan+0x2f0>)
 8006a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6c:	f7f9 fc0c 	bl	8000288 <__aeabi_dsub>
 8006a70:	4632      	mov	r2, r6
 8006a72:	463b      	mov	r3, r7
 8006a74:	f7f9 fdc0 	bl	80005f8 <__aeabi_dmul>
 8006a78:	a359      	add	r3, pc, #356	@ (adr r3, 8006be0 <atan+0x2f8>)
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	f7f9 fc03 	bl	8000288 <__aeabi_dsub>
 8006a82:	4632      	mov	r2, r6
 8006a84:	463b      	mov	r3, r7
 8006a86:	f7f9 fdb7 	bl	80005f8 <__aeabi_dmul>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4640      	mov	r0, r8
 8006a90:	4649      	mov	r1, r9
 8006a92:	f7f9 fbfb 	bl	800028c <__adddf3>
 8006a96:	4622      	mov	r2, r4
 8006a98:	462b      	mov	r3, r5
 8006a9a:	f7f9 fdad 	bl	80005f8 <__aeabi_dmul>
 8006a9e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	d148      	bne.n	8006b3a <atan+0x252>
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	4629      	mov	r1, r5
 8006aac:	f7f9 fbec 	bl	8000288 <__aeabi_dsub>
 8006ab0:	e72f      	b.n	8006912 <atan+0x2a>
 8006ab2:	4b52      	ldr	r3, [pc, #328]	@ (8006bfc <atan+0x314>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	4629      	mov	r1, r5
 8006aba:	f7f9 fbe5 	bl	8000288 <__aeabi_dsub>
 8006abe:	4b4f      	ldr	r3, [pc, #316]	@ (8006bfc <atan+0x314>)
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	460f      	mov	r7, r1
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	4629      	mov	r1, r5
 8006aca:	f7f9 fbdf 	bl	800028c <__adddf3>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	4639      	mov	r1, r7
 8006ad6:	f7f9 feb9 	bl	800084c <__aeabi_ddiv>
 8006ada:	f04f 0a01 	mov.w	sl, #1
 8006ade:	4604      	mov	r4, r0
 8006ae0:	460d      	mov	r5, r1
 8006ae2:	e765      	b.n	80069b0 <atan+0xc8>
 8006ae4:	4b47      	ldr	r3, [pc, #284]	@ (8006c04 <atan+0x31c>)
 8006ae6:	429e      	cmp	r6, r3
 8006ae8:	d21c      	bcs.n	8006b24 <atan+0x23c>
 8006aea:	4b47      	ldr	r3, [pc, #284]	@ (8006c08 <atan+0x320>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	4620      	mov	r0, r4
 8006af0:	4629      	mov	r1, r5
 8006af2:	f7f9 fbc9 	bl	8000288 <__aeabi_dsub>
 8006af6:	4b44      	ldr	r3, [pc, #272]	@ (8006c08 <atan+0x320>)
 8006af8:	4606      	mov	r6, r0
 8006afa:	460f      	mov	r7, r1
 8006afc:	2200      	movs	r2, #0
 8006afe:	4620      	mov	r0, r4
 8006b00:	4629      	mov	r1, r5
 8006b02:	f7f9 fd79 	bl	80005f8 <__aeabi_dmul>
 8006b06:	4b3d      	ldr	r3, [pc, #244]	@ (8006bfc <atan+0x314>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f7f9 fbbf 	bl	800028c <__adddf3>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4630      	mov	r0, r6
 8006b14:	4639      	mov	r1, r7
 8006b16:	f7f9 fe99 	bl	800084c <__aeabi_ddiv>
 8006b1a:	f04f 0a02 	mov.w	sl, #2
 8006b1e:	4604      	mov	r4, r0
 8006b20:	460d      	mov	r5, r1
 8006b22:	e745      	b.n	80069b0 <atan+0xc8>
 8006b24:	4622      	mov	r2, r4
 8006b26:	462b      	mov	r3, r5
 8006b28:	4938      	ldr	r1, [pc, #224]	@ (8006c0c <atan+0x324>)
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	f7f9 fe8e 	bl	800084c <__aeabi_ddiv>
 8006b30:	f04f 0a03 	mov.w	sl, #3
 8006b34:	4604      	mov	r4, r0
 8006b36:	460d      	mov	r5, r1
 8006b38:	e73a      	b.n	80069b0 <atan+0xc8>
 8006b3a:	4b35      	ldr	r3, [pc, #212]	@ (8006c10 <atan+0x328>)
 8006b3c:	4e35      	ldr	r6, [pc, #212]	@ (8006c14 <atan+0x32c>)
 8006b3e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	f7f9 fb9f 	bl	8000288 <__aeabi_dsub>
 8006b4a:	4622      	mov	r2, r4
 8006b4c:	462b      	mov	r3, r5
 8006b4e:	f7f9 fb9b 	bl	8000288 <__aeabi_dsub>
 8006b52:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006b5e:	f7f9 fb93 	bl	8000288 <__aeabi_dsub>
 8006b62:	f1bb 0f00 	cmp.w	fp, #0
 8006b66:	4604      	mov	r4, r0
 8006b68:	460d      	mov	r5, r1
 8006b6a:	f6bf aedc 	bge.w	8006926 <atan+0x3e>
 8006b6e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006b72:	461d      	mov	r5, r3
 8006b74:	e6d7      	b.n	8006926 <atan+0x3e>
 8006b76:	a51c      	add	r5, pc, #112	@ (adr r5, 8006be8 <atan+0x300>)
 8006b78:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006b7c:	e6d3      	b.n	8006926 <atan+0x3e>
 8006b7e:	bf00      	nop
 8006b80:	54442d18 	.word	0x54442d18
 8006b84:	3ff921fb 	.word	0x3ff921fb
 8006b88:	8800759c 	.word	0x8800759c
 8006b8c:	7e37e43c 	.word	0x7e37e43c
 8006b90:	e322da11 	.word	0xe322da11
 8006b94:	3f90ad3a 	.word	0x3f90ad3a
 8006b98:	24760deb 	.word	0x24760deb
 8006b9c:	3fa97b4b 	.word	0x3fa97b4b
 8006ba0:	a0d03d51 	.word	0xa0d03d51
 8006ba4:	3fb10d66 	.word	0x3fb10d66
 8006ba8:	c54c206e 	.word	0xc54c206e
 8006bac:	3fb745cd 	.word	0x3fb745cd
 8006bb0:	920083ff 	.word	0x920083ff
 8006bb4:	3fc24924 	.word	0x3fc24924
 8006bb8:	5555550d 	.word	0x5555550d
 8006bbc:	3fd55555 	.word	0x3fd55555
 8006bc0:	2c6a6c2f 	.word	0x2c6a6c2f
 8006bc4:	bfa2b444 	.word	0xbfa2b444
 8006bc8:	52defd9a 	.word	0x52defd9a
 8006bcc:	3fadde2d 	.word	0x3fadde2d
 8006bd0:	af749a6d 	.word	0xaf749a6d
 8006bd4:	3fb3b0f2 	.word	0x3fb3b0f2
 8006bd8:	fe231671 	.word	0xfe231671
 8006bdc:	3fbc71c6 	.word	0x3fbc71c6
 8006be0:	9998ebc4 	.word	0x9998ebc4
 8006be4:	3fc99999 	.word	0x3fc99999
 8006be8:	54442d18 	.word	0x54442d18
 8006bec:	bff921fb 	.word	0xbff921fb
 8006bf0:	440fffff 	.word	0x440fffff
 8006bf4:	7ff00000 	.word	0x7ff00000
 8006bf8:	3fdbffff 	.word	0x3fdbffff
 8006bfc:	3ff00000 	.word	0x3ff00000
 8006c00:	3ff2ffff 	.word	0x3ff2ffff
 8006c04:	40038000 	.word	0x40038000
 8006c08:	3ff80000 	.word	0x3ff80000
 8006c0c:	bff00000 	.word	0xbff00000
 8006c10:	080086f0 	.word	0x080086f0
 8006c14:	08008710 	.word	0x08008710

08006c18 <cos>:
 8006c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c1a:	ec53 2b10 	vmov	r2, r3, d0
 8006c1e:	4826      	ldr	r0, [pc, #152]	@ (8006cb8 <cos+0xa0>)
 8006c20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006c24:	4281      	cmp	r1, r0
 8006c26:	d806      	bhi.n	8006c36 <cos+0x1e>
 8006c28:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006cb0 <cos+0x98>
 8006c2c:	b005      	add	sp, #20
 8006c2e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c32:	f000 b97d 	b.w	8006f30 <__kernel_cos>
 8006c36:	4821      	ldr	r0, [pc, #132]	@ (8006cbc <cos+0xa4>)
 8006c38:	4281      	cmp	r1, r0
 8006c3a:	d908      	bls.n	8006c4e <cos+0x36>
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	4619      	mov	r1, r3
 8006c40:	f7f9 fb22 	bl	8000288 <__aeabi_dsub>
 8006c44:	ec41 0b10 	vmov	d0, r0, r1
 8006c48:	b005      	add	sp, #20
 8006c4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c4e:	4668      	mov	r0, sp
 8006c50:	f000 faf2 	bl	8007238 <__ieee754_rem_pio2>
 8006c54:	f000 0003 	and.w	r0, r0, #3
 8006c58:	2801      	cmp	r0, #1
 8006c5a:	d00b      	beq.n	8006c74 <cos+0x5c>
 8006c5c:	2802      	cmp	r0, #2
 8006c5e:	d015      	beq.n	8006c8c <cos+0x74>
 8006c60:	b9d8      	cbnz	r0, 8006c9a <cos+0x82>
 8006c62:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c66:	ed9d 0b00 	vldr	d0, [sp]
 8006c6a:	f000 f961 	bl	8006f30 <__kernel_cos>
 8006c6e:	ec51 0b10 	vmov	r0, r1, d0
 8006c72:	e7e7      	b.n	8006c44 <cos+0x2c>
 8006c74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c78:	ed9d 0b00 	vldr	d0, [sp]
 8006c7c:	f000 fa20 	bl	80070c0 <__kernel_sin>
 8006c80:	ec53 2b10 	vmov	r2, r3, d0
 8006c84:	4610      	mov	r0, r2
 8006c86:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006c8a:	e7db      	b.n	8006c44 <cos+0x2c>
 8006c8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c90:	ed9d 0b00 	vldr	d0, [sp]
 8006c94:	f000 f94c 	bl	8006f30 <__kernel_cos>
 8006c98:	e7f2      	b.n	8006c80 <cos+0x68>
 8006c9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c9e:	ed9d 0b00 	vldr	d0, [sp]
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	f000 fa0c 	bl	80070c0 <__kernel_sin>
 8006ca8:	e7e1      	b.n	8006c6e <cos+0x56>
 8006caa:	bf00      	nop
 8006cac:	f3af 8000 	nop.w
	...
 8006cb8:	3fe921fb 	.word	0x3fe921fb
 8006cbc:	7fefffff 	.word	0x7fefffff

08006cc0 <fabs>:
 8006cc0:	ec51 0b10 	vmov	r0, r1, d0
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006cca:	ec43 2b10 	vmov	d0, r2, r3
 8006cce:	4770      	bx	lr

08006cd0 <sin>:
 8006cd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cd2:	ec53 2b10 	vmov	r2, r3, d0
 8006cd6:	4826      	ldr	r0, [pc, #152]	@ (8006d70 <sin+0xa0>)
 8006cd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006cdc:	4281      	cmp	r1, r0
 8006cde:	d807      	bhi.n	8006cf0 <sin+0x20>
 8006ce0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006d68 <sin+0x98>
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	b005      	add	sp, #20
 8006ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cec:	f000 b9e8 	b.w	80070c0 <__kernel_sin>
 8006cf0:	4820      	ldr	r0, [pc, #128]	@ (8006d74 <sin+0xa4>)
 8006cf2:	4281      	cmp	r1, r0
 8006cf4:	d908      	bls.n	8006d08 <sin+0x38>
 8006cf6:	4610      	mov	r0, r2
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	f7f9 fac5 	bl	8000288 <__aeabi_dsub>
 8006cfe:	ec41 0b10 	vmov	d0, r0, r1
 8006d02:	b005      	add	sp, #20
 8006d04:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d08:	4668      	mov	r0, sp
 8006d0a:	f000 fa95 	bl	8007238 <__ieee754_rem_pio2>
 8006d0e:	f000 0003 	and.w	r0, r0, #3
 8006d12:	2801      	cmp	r0, #1
 8006d14:	d00c      	beq.n	8006d30 <sin+0x60>
 8006d16:	2802      	cmp	r0, #2
 8006d18:	d011      	beq.n	8006d3e <sin+0x6e>
 8006d1a:	b9e8      	cbnz	r0, 8006d58 <sin+0x88>
 8006d1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d20:	ed9d 0b00 	vldr	d0, [sp]
 8006d24:	2001      	movs	r0, #1
 8006d26:	f000 f9cb 	bl	80070c0 <__kernel_sin>
 8006d2a:	ec51 0b10 	vmov	r0, r1, d0
 8006d2e:	e7e6      	b.n	8006cfe <sin+0x2e>
 8006d30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d34:	ed9d 0b00 	vldr	d0, [sp]
 8006d38:	f000 f8fa 	bl	8006f30 <__kernel_cos>
 8006d3c:	e7f5      	b.n	8006d2a <sin+0x5a>
 8006d3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d42:	ed9d 0b00 	vldr	d0, [sp]
 8006d46:	2001      	movs	r0, #1
 8006d48:	f000 f9ba 	bl	80070c0 <__kernel_sin>
 8006d4c:	ec53 2b10 	vmov	r2, r3, d0
 8006d50:	4610      	mov	r0, r2
 8006d52:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006d56:	e7d2      	b.n	8006cfe <sin+0x2e>
 8006d58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006d5c:	ed9d 0b00 	vldr	d0, [sp]
 8006d60:	f000 f8e6 	bl	8006f30 <__kernel_cos>
 8006d64:	e7f2      	b.n	8006d4c <sin+0x7c>
 8006d66:	bf00      	nop
	...
 8006d70:	3fe921fb 	.word	0x3fe921fb
 8006d74:	7fefffff 	.word	0x7fefffff

08006d78 <__ieee754_sqrt>:
 8006d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	4a68      	ldr	r2, [pc, #416]	@ (8006f20 <__ieee754_sqrt+0x1a8>)
 8006d7e:	ec55 4b10 	vmov	r4, r5, d0
 8006d82:	43aa      	bics	r2, r5
 8006d84:	462b      	mov	r3, r5
 8006d86:	4621      	mov	r1, r4
 8006d88:	d110      	bne.n	8006dac <__ieee754_sqrt+0x34>
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	4629      	mov	r1, r5
 8006d90:	f7f9 fc32 	bl	80005f8 <__aeabi_dmul>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4620      	mov	r0, r4
 8006d9a:	4629      	mov	r1, r5
 8006d9c:	f7f9 fa76 	bl	800028c <__adddf3>
 8006da0:	4604      	mov	r4, r0
 8006da2:	460d      	mov	r5, r1
 8006da4:	ec45 4b10 	vmov	d0, r4, r5
 8006da8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dac:	2d00      	cmp	r5, #0
 8006dae:	dc0e      	bgt.n	8006dce <__ieee754_sqrt+0x56>
 8006db0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006db4:	4322      	orrs	r2, r4
 8006db6:	d0f5      	beq.n	8006da4 <__ieee754_sqrt+0x2c>
 8006db8:	b19d      	cbz	r5, 8006de2 <__ieee754_sqrt+0x6a>
 8006dba:	4622      	mov	r2, r4
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	f7f9 fa62 	bl	8000288 <__aeabi_dsub>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	f7f9 fd40 	bl	800084c <__aeabi_ddiv>
 8006dcc:	e7e8      	b.n	8006da0 <__ieee754_sqrt+0x28>
 8006dce:	152a      	asrs	r2, r5, #20
 8006dd0:	d115      	bne.n	8006dfe <__ieee754_sqrt+0x86>
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	e009      	b.n	8006dea <__ieee754_sqrt+0x72>
 8006dd6:	0acb      	lsrs	r3, r1, #11
 8006dd8:	3a15      	subs	r2, #21
 8006dda:	0549      	lsls	r1, r1, #21
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0fa      	beq.n	8006dd6 <__ieee754_sqrt+0x5e>
 8006de0:	e7f7      	b.n	8006dd2 <__ieee754_sqrt+0x5a>
 8006de2:	462a      	mov	r2, r5
 8006de4:	e7fa      	b.n	8006ddc <__ieee754_sqrt+0x64>
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	3001      	adds	r0, #1
 8006dea:	02dc      	lsls	r4, r3, #11
 8006dec:	d5fb      	bpl.n	8006de6 <__ieee754_sqrt+0x6e>
 8006dee:	1e44      	subs	r4, r0, #1
 8006df0:	1b12      	subs	r2, r2, r4
 8006df2:	f1c0 0420 	rsb	r4, r0, #32
 8006df6:	fa21 f404 	lsr.w	r4, r1, r4
 8006dfa:	4323      	orrs	r3, r4
 8006dfc:	4081      	lsls	r1, r0
 8006dfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e02:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e0a:	07d2      	lsls	r2, r2, #31
 8006e0c:	bf5c      	itt	pl
 8006e0e:	005b      	lslpl	r3, r3, #1
 8006e10:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006e14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006e18:	bf58      	it	pl
 8006e1a:	0049      	lslpl	r1, r1, #1
 8006e1c:	2600      	movs	r6, #0
 8006e1e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006e22:	106d      	asrs	r5, r5, #1
 8006e24:	0049      	lsls	r1, r1, #1
 8006e26:	2016      	movs	r0, #22
 8006e28:	4632      	mov	r2, r6
 8006e2a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006e2e:	1917      	adds	r7, r2, r4
 8006e30:	429f      	cmp	r7, r3
 8006e32:	bfde      	ittt	le
 8006e34:	193a      	addle	r2, r7, r4
 8006e36:	1bdb      	suble	r3, r3, r7
 8006e38:	1936      	addle	r6, r6, r4
 8006e3a:	0fcf      	lsrs	r7, r1, #31
 8006e3c:	3801      	subs	r0, #1
 8006e3e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006e42:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006e46:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006e4a:	d1f0      	bne.n	8006e2e <__ieee754_sqrt+0xb6>
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	2720      	movs	r7, #32
 8006e50:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006e54:	429a      	cmp	r2, r3
 8006e56:	eb00 0e0c 	add.w	lr, r0, ip
 8006e5a:	db02      	blt.n	8006e62 <__ieee754_sqrt+0xea>
 8006e5c:	d113      	bne.n	8006e86 <__ieee754_sqrt+0x10e>
 8006e5e:	458e      	cmp	lr, r1
 8006e60:	d811      	bhi.n	8006e86 <__ieee754_sqrt+0x10e>
 8006e62:	f1be 0f00 	cmp.w	lr, #0
 8006e66:	eb0e 000c 	add.w	r0, lr, ip
 8006e6a:	da42      	bge.n	8006ef2 <__ieee754_sqrt+0x17a>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	db40      	blt.n	8006ef2 <__ieee754_sqrt+0x17a>
 8006e70:	f102 0801 	add.w	r8, r2, #1
 8006e74:	1a9b      	subs	r3, r3, r2
 8006e76:	458e      	cmp	lr, r1
 8006e78:	bf88      	it	hi
 8006e7a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006e7e:	eba1 010e 	sub.w	r1, r1, lr
 8006e82:	4464      	add	r4, ip
 8006e84:	4642      	mov	r2, r8
 8006e86:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006e8a:	3f01      	subs	r7, #1
 8006e8c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006e90:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006e94:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006e98:	d1dc      	bne.n	8006e54 <__ieee754_sqrt+0xdc>
 8006e9a:	4319      	orrs	r1, r3
 8006e9c:	d01b      	beq.n	8006ed6 <__ieee754_sqrt+0x15e>
 8006e9e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006f24 <__ieee754_sqrt+0x1ac>
 8006ea2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006f28 <__ieee754_sqrt+0x1b0>
 8006ea6:	e9da 0100 	ldrd	r0, r1, [sl]
 8006eaa:	e9db 2300 	ldrd	r2, r3, [fp]
 8006eae:	f7f9 f9eb 	bl	8000288 <__aeabi_dsub>
 8006eb2:	e9da 8900 	ldrd	r8, r9, [sl]
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	4640      	mov	r0, r8
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	f7f9 fe17 	bl	8000af0 <__aeabi_dcmple>
 8006ec2:	b140      	cbz	r0, 8006ed6 <__ieee754_sqrt+0x15e>
 8006ec4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006ec8:	e9da 0100 	ldrd	r0, r1, [sl]
 8006ecc:	e9db 2300 	ldrd	r2, r3, [fp]
 8006ed0:	d111      	bne.n	8006ef6 <__ieee754_sqrt+0x17e>
 8006ed2:	3601      	adds	r6, #1
 8006ed4:	463c      	mov	r4, r7
 8006ed6:	1072      	asrs	r2, r6, #1
 8006ed8:	0863      	lsrs	r3, r4, #1
 8006eda:	07f1      	lsls	r1, r6, #31
 8006edc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006ee0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006ee4:	bf48      	it	mi
 8006ee6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006eea:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8006eee:	4618      	mov	r0, r3
 8006ef0:	e756      	b.n	8006da0 <__ieee754_sqrt+0x28>
 8006ef2:	4690      	mov	r8, r2
 8006ef4:	e7be      	b.n	8006e74 <__ieee754_sqrt+0xfc>
 8006ef6:	f7f9 f9c9 	bl	800028c <__adddf3>
 8006efa:	e9da 8900 	ldrd	r8, r9, [sl]
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4640      	mov	r0, r8
 8006f04:	4649      	mov	r1, r9
 8006f06:	f7f9 fde9 	bl	8000adc <__aeabi_dcmplt>
 8006f0a:	b120      	cbz	r0, 8006f16 <__ieee754_sqrt+0x19e>
 8006f0c:	1ca0      	adds	r0, r4, #2
 8006f0e:	bf08      	it	eq
 8006f10:	3601      	addeq	r6, #1
 8006f12:	3402      	adds	r4, #2
 8006f14:	e7df      	b.n	8006ed6 <__ieee754_sqrt+0x15e>
 8006f16:	1c63      	adds	r3, r4, #1
 8006f18:	f023 0401 	bic.w	r4, r3, #1
 8006f1c:	e7db      	b.n	8006ed6 <__ieee754_sqrt+0x15e>
 8006f1e:	bf00      	nop
 8006f20:	7ff00000 	.word	0x7ff00000
 8006f24:	20000080 	.word	0x20000080
 8006f28:	20000078 	.word	0x20000078
 8006f2c:	00000000 	.word	0x00000000

08006f30 <__kernel_cos>:
 8006f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	ec57 6b10 	vmov	r6, r7, d0
 8006f38:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006f3c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8006f40:	ed8d 1b00 	vstr	d1, [sp]
 8006f44:	d206      	bcs.n	8006f54 <__kernel_cos+0x24>
 8006f46:	4630      	mov	r0, r6
 8006f48:	4639      	mov	r1, r7
 8006f4a:	f7f9 fe05 	bl	8000b58 <__aeabi_d2iz>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	f000 8088 	beq.w	8007064 <__kernel_cos+0x134>
 8006f54:	4632      	mov	r2, r6
 8006f56:	463b      	mov	r3, r7
 8006f58:	4630      	mov	r0, r6
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	f7f9 fb4c 	bl	80005f8 <__aeabi_dmul>
 8006f60:	4b51      	ldr	r3, [pc, #324]	@ (80070a8 <__kernel_cos+0x178>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	4604      	mov	r4, r0
 8006f66:	460d      	mov	r5, r1
 8006f68:	f7f9 fb46 	bl	80005f8 <__aeabi_dmul>
 8006f6c:	a340      	add	r3, pc, #256	@ (adr r3, 8007070 <__kernel_cos+0x140>)
 8006f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f72:	4682      	mov	sl, r0
 8006f74:	468b      	mov	fp, r1
 8006f76:	4620      	mov	r0, r4
 8006f78:	4629      	mov	r1, r5
 8006f7a:	f7f9 fb3d 	bl	80005f8 <__aeabi_dmul>
 8006f7e:	a33e      	add	r3, pc, #248	@ (adr r3, 8007078 <__kernel_cos+0x148>)
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	f7f9 f982 	bl	800028c <__adddf3>
 8006f88:	4622      	mov	r2, r4
 8006f8a:	462b      	mov	r3, r5
 8006f8c:	f7f9 fb34 	bl	80005f8 <__aeabi_dmul>
 8006f90:	a33b      	add	r3, pc, #236	@ (adr r3, 8007080 <__kernel_cos+0x150>)
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	f7f9 f977 	bl	8000288 <__aeabi_dsub>
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	f7f9 fb2b 	bl	80005f8 <__aeabi_dmul>
 8006fa2:	a339      	add	r3, pc, #228	@ (adr r3, 8007088 <__kernel_cos+0x158>)
 8006fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa8:	f7f9 f970 	bl	800028c <__adddf3>
 8006fac:	4622      	mov	r2, r4
 8006fae:	462b      	mov	r3, r5
 8006fb0:	f7f9 fb22 	bl	80005f8 <__aeabi_dmul>
 8006fb4:	a336      	add	r3, pc, #216	@ (adr r3, 8007090 <__kernel_cos+0x160>)
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f7f9 f965 	bl	8000288 <__aeabi_dsub>
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	462b      	mov	r3, r5
 8006fc2:	f7f9 fb19 	bl	80005f8 <__aeabi_dmul>
 8006fc6:	a334      	add	r3, pc, #208	@ (adr r3, 8007098 <__kernel_cos+0x168>)
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	f7f9 f95e 	bl	800028c <__adddf3>
 8006fd0:	4622      	mov	r2, r4
 8006fd2:	462b      	mov	r3, r5
 8006fd4:	f7f9 fb10 	bl	80005f8 <__aeabi_dmul>
 8006fd8:	4622      	mov	r2, r4
 8006fda:	462b      	mov	r3, r5
 8006fdc:	f7f9 fb0c 	bl	80005f8 <__aeabi_dmul>
 8006fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	4630      	mov	r0, r6
 8006fea:	4639      	mov	r1, r7
 8006fec:	f7f9 fb04 	bl	80005f8 <__aeabi_dmul>
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f7f9 f946 	bl	8000288 <__aeabi_dsub>
 8006ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80070ac <__kernel_cos+0x17c>)
 8006ffe:	4598      	cmp	r8, r3
 8007000:	4606      	mov	r6, r0
 8007002:	460f      	mov	r7, r1
 8007004:	d810      	bhi.n	8007028 <__kernel_cos+0xf8>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4650      	mov	r0, sl
 800700c:	4659      	mov	r1, fp
 800700e:	f7f9 f93b 	bl	8000288 <__aeabi_dsub>
 8007012:	460b      	mov	r3, r1
 8007014:	4926      	ldr	r1, [pc, #152]	@ (80070b0 <__kernel_cos+0x180>)
 8007016:	4602      	mov	r2, r0
 8007018:	2000      	movs	r0, #0
 800701a:	f7f9 f935 	bl	8000288 <__aeabi_dsub>
 800701e:	ec41 0b10 	vmov	d0, r0, r1
 8007022:	b003      	add	sp, #12
 8007024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007028:	4b22      	ldr	r3, [pc, #136]	@ (80070b4 <__kernel_cos+0x184>)
 800702a:	4921      	ldr	r1, [pc, #132]	@ (80070b0 <__kernel_cos+0x180>)
 800702c:	4598      	cmp	r8, r3
 800702e:	bf8c      	ite	hi
 8007030:	4d21      	ldrhi	r5, [pc, #132]	@ (80070b8 <__kernel_cos+0x188>)
 8007032:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8007036:	2400      	movs	r4, #0
 8007038:	4622      	mov	r2, r4
 800703a:	462b      	mov	r3, r5
 800703c:	2000      	movs	r0, #0
 800703e:	f7f9 f923 	bl	8000288 <__aeabi_dsub>
 8007042:	4622      	mov	r2, r4
 8007044:	4680      	mov	r8, r0
 8007046:	4689      	mov	r9, r1
 8007048:	462b      	mov	r3, r5
 800704a:	4650      	mov	r0, sl
 800704c:	4659      	mov	r1, fp
 800704e:	f7f9 f91b 	bl	8000288 <__aeabi_dsub>
 8007052:	4632      	mov	r2, r6
 8007054:	463b      	mov	r3, r7
 8007056:	f7f9 f917 	bl	8000288 <__aeabi_dsub>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4640      	mov	r0, r8
 8007060:	4649      	mov	r1, r9
 8007062:	e7da      	b.n	800701a <__kernel_cos+0xea>
 8007064:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80070a0 <__kernel_cos+0x170>
 8007068:	e7db      	b.n	8007022 <__kernel_cos+0xf2>
 800706a:	bf00      	nop
 800706c:	f3af 8000 	nop.w
 8007070:	be8838d4 	.word	0xbe8838d4
 8007074:	bda8fae9 	.word	0xbda8fae9
 8007078:	bdb4b1c4 	.word	0xbdb4b1c4
 800707c:	3e21ee9e 	.word	0x3e21ee9e
 8007080:	809c52ad 	.word	0x809c52ad
 8007084:	3e927e4f 	.word	0x3e927e4f
 8007088:	19cb1590 	.word	0x19cb1590
 800708c:	3efa01a0 	.word	0x3efa01a0
 8007090:	16c15177 	.word	0x16c15177
 8007094:	3f56c16c 	.word	0x3f56c16c
 8007098:	5555554c 	.word	0x5555554c
 800709c:	3fa55555 	.word	0x3fa55555
 80070a0:	00000000 	.word	0x00000000
 80070a4:	3ff00000 	.word	0x3ff00000
 80070a8:	3fe00000 	.word	0x3fe00000
 80070ac:	3fd33332 	.word	0x3fd33332
 80070b0:	3ff00000 	.word	0x3ff00000
 80070b4:	3fe90000 	.word	0x3fe90000
 80070b8:	3fd20000 	.word	0x3fd20000
 80070bc:	00000000 	.word	0x00000000

080070c0 <__kernel_sin>:
 80070c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c4:	ec55 4b10 	vmov	r4, r5, d0
 80070c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80070cc:	b085      	sub	sp, #20
 80070ce:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80070d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80070d6:	4680      	mov	r8, r0
 80070d8:	d205      	bcs.n	80070e6 <__kernel_sin+0x26>
 80070da:	4620      	mov	r0, r4
 80070dc:	4629      	mov	r1, r5
 80070de:	f7f9 fd3b 	bl	8000b58 <__aeabi_d2iz>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d052      	beq.n	800718c <__kernel_sin+0xcc>
 80070e6:	4622      	mov	r2, r4
 80070e8:	462b      	mov	r3, r5
 80070ea:	4620      	mov	r0, r4
 80070ec:	4629      	mov	r1, r5
 80070ee:	f7f9 fa83 	bl	80005f8 <__aeabi_dmul>
 80070f2:	4682      	mov	sl, r0
 80070f4:	468b      	mov	fp, r1
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4620      	mov	r0, r4
 80070fc:	4629      	mov	r1, r5
 80070fe:	f7f9 fa7b 	bl	80005f8 <__aeabi_dmul>
 8007102:	a342      	add	r3, pc, #264	@ (adr r3, 800720c <__kernel_sin+0x14c>)
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	e9cd 0100 	strd	r0, r1, [sp]
 800710c:	4650      	mov	r0, sl
 800710e:	4659      	mov	r1, fp
 8007110:	f7f9 fa72 	bl	80005f8 <__aeabi_dmul>
 8007114:	a33f      	add	r3, pc, #252	@ (adr r3, 8007214 <__kernel_sin+0x154>)
 8007116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711a:	f7f9 f8b5 	bl	8000288 <__aeabi_dsub>
 800711e:	4652      	mov	r2, sl
 8007120:	465b      	mov	r3, fp
 8007122:	f7f9 fa69 	bl	80005f8 <__aeabi_dmul>
 8007126:	a33d      	add	r3, pc, #244	@ (adr r3, 800721c <__kernel_sin+0x15c>)
 8007128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712c:	f7f9 f8ae 	bl	800028c <__adddf3>
 8007130:	4652      	mov	r2, sl
 8007132:	465b      	mov	r3, fp
 8007134:	f7f9 fa60 	bl	80005f8 <__aeabi_dmul>
 8007138:	a33a      	add	r3, pc, #232	@ (adr r3, 8007224 <__kernel_sin+0x164>)
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	f7f9 f8a3 	bl	8000288 <__aeabi_dsub>
 8007142:	4652      	mov	r2, sl
 8007144:	465b      	mov	r3, fp
 8007146:	f7f9 fa57 	bl	80005f8 <__aeabi_dmul>
 800714a:	a338      	add	r3, pc, #224	@ (adr r3, 800722c <__kernel_sin+0x16c>)
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	f7f9 f89c 	bl	800028c <__adddf3>
 8007154:	4606      	mov	r6, r0
 8007156:	460f      	mov	r7, r1
 8007158:	f1b8 0f00 	cmp.w	r8, #0
 800715c:	d11b      	bne.n	8007196 <__kernel_sin+0xd6>
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	4650      	mov	r0, sl
 8007164:	4659      	mov	r1, fp
 8007166:	f7f9 fa47 	bl	80005f8 <__aeabi_dmul>
 800716a:	a325      	add	r3, pc, #148	@ (adr r3, 8007200 <__kernel_sin+0x140>)
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	f7f9 f88a 	bl	8000288 <__aeabi_dsub>
 8007174:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007178:	f7f9 fa3e 	bl	80005f8 <__aeabi_dmul>
 800717c:	4602      	mov	r2, r0
 800717e:	460b      	mov	r3, r1
 8007180:	4620      	mov	r0, r4
 8007182:	4629      	mov	r1, r5
 8007184:	f7f9 f882 	bl	800028c <__adddf3>
 8007188:	4604      	mov	r4, r0
 800718a:	460d      	mov	r5, r1
 800718c:	ec45 4b10 	vmov	d0, r4, r5
 8007190:	b005      	add	sp, #20
 8007192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800719a:	4b1b      	ldr	r3, [pc, #108]	@ (8007208 <__kernel_sin+0x148>)
 800719c:	2200      	movs	r2, #0
 800719e:	f7f9 fa2b 	bl	80005f8 <__aeabi_dmul>
 80071a2:	4632      	mov	r2, r6
 80071a4:	4680      	mov	r8, r0
 80071a6:	4689      	mov	r9, r1
 80071a8:	463b      	mov	r3, r7
 80071aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071ae:	f7f9 fa23 	bl	80005f8 <__aeabi_dmul>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	4640      	mov	r0, r8
 80071b8:	4649      	mov	r1, r9
 80071ba:	f7f9 f865 	bl	8000288 <__aeabi_dsub>
 80071be:	4652      	mov	r2, sl
 80071c0:	465b      	mov	r3, fp
 80071c2:	f7f9 fa19 	bl	80005f8 <__aeabi_dmul>
 80071c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071ca:	f7f9 f85d 	bl	8000288 <__aeabi_dsub>
 80071ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8007200 <__kernel_sin+0x140>)
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	4606      	mov	r6, r0
 80071d6:	460f      	mov	r7, r1
 80071d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071dc:	f7f9 fa0c 	bl	80005f8 <__aeabi_dmul>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4630      	mov	r0, r6
 80071e6:	4639      	mov	r1, r7
 80071e8:	f7f9 f850 	bl	800028c <__adddf3>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4620      	mov	r0, r4
 80071f2:	4629      	mov	r1, r5
 80071f4:	f7f9 f848 	bl	8000288 <__aeabi_dsub>
 80071f8:	e7c6      	b.n	8007188 <__kernel_sin+0xc8>
 80071fa:	bf00      	nop
 80071fc:	f3af 8000 	nop.w
 8007200:	55555549 	.word	0x55555549
 8007204:	3fc55555 	.word	0x3fc55555
 8007208:	3fe00000 	.word	0x3fe00000
 800720c:	5acfd57c 	.word	0x5acfd57c
 8007210:	3de5d93a 	.word	0x3de5d93a
 8007214:	8a2b9ceb 	.word	0x8a2b9ceb
 8007218:	3e5ae5e6 	.word	0x3e5ae5e6
 800721c:	57b1fe7d 	.word	0x57b1fe7d
 8007220:	3ec71de3 	.word	0x3ec71de3
 8007224:	19c161d5 	.word	0x19c161d5
 8007228:	3f2a01a0 	.word	0x3f2a01a0
 800722c:	1110f8a6 	.word	0x1110f8a6
 8007230:	3f811111 	.word	0x3f811111
 8007234:	00000000 	.word	0x00000000

08007238 <__ieee754_rem_pio2>:
 8007238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	ec57 6b10 	vmov	r6, r7, d0
 8007240:	4bc5      	ldr	r3, [pc, #788]	@ (8007558 <__ieee754_rem_pio2+0x320>)
 8007242:	b08d      	sub	sp, #52	@ 0x34
 8007244:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007248:	4598      	cmp	r8, r3
 800724a:	4604      	mov	r4, r0
 800724c:	9704      	str	r7, [sp, #16]
 800724e:	d807      	bhi.n	8007260 <__ieee754_rem_pio2+0x28>
 8007250:	2200      	movs	r2, #0
 8007252:	2300      	movs	r3, #0
 8007254:	ed80 0b00 	vstr	d0, [r0]
 8007258:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800725c:	2500      	movs	r5, #0
 800725e:	e028      	b.n	80072b2 <__ieee754_rem_pio2+0x7a>
 8007260:	4bbe      	ldr	r3, [pc, #760]	@ (800755c <__ieee754_rem_pio2+0x324>)
 8007262:	4598      	cmp	r8, r3
 8007264:	d878      	bhi.n	8007358 <__ieee754_rem_pio2+0x120>
 8007266:	9b04      	ldr	r3, [sp, #16]
 8007268:	4dbd      	ldr	r5, [pc, #756]	@ (8007560 <__ieee754_rem_pio2+0x328>)
 800726a:	2b00      	cmp	r3, #0
 800726c:	4630      	mov	r0, r6
 800726e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8007520 <__ieee754_rem_pio2+0x2e8>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	4639      	mov	r1, r7
 8007276:	dd38      	ble.n	80072ea <__ieee754_rem_pio2+0xb2>
 8007278:	f7f9 f806 	bl	8000288 <__aeabi_dsub>
 800727c:	45a8      	cmp	r8, r5
 800727e:	4606      	mov	r6, r0
 8007280:	460f      	mov	r7, r1
 8007282:	d01a      	beq.n	80072ba <__ieee754_rem_pio2+0x82>
 8007284:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007528 <__ieee754_rem_pio2+0x2f0>)
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f7f8 fffd 	bl	8000288 <__aeabi_dsub>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	4680      	mov	r8, r0
 8007294:	4689      	mov	r9, r1
 8007296:	4630      	mov	r0, r6
 8007298:	4639      	mov	r1, r7
 800729a:	f7f8 fff5 	bl	8000288 <__aeabi_dsub>
 800729e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8007528 <__ieee754_rem_pio2+0x2f0>)
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	f7f8 fff0 	bl	8000288 <__aeabi_dsub>
 80072a8:	e9c4 8900 	strd	r8, r9, [r4]
 80072ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80072b0:	2501      	movs	r5, #1
 80072b2:	4628      	mov	r0, r5
 80072b4:	b00d      	add	sp, #52	@ 0x34
 80072b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ba:	a39d      	add	r3, pc, #628	@ (adr r3, 8007530 <__ieee754_rem_pio2+0x2f8>)
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	f7f8 ffe2 	bl	8000288 <__aeabi_dsub>
 80072c4:	a39c      	add	r3, pc, #624	@ (adr r3, 8007538 <__ieee754_rem_pio2+0x300>)
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	4606      	mov	r6, r0
 80072cc:	460f      	mov	r7, r1
 80072ce:	f7f8 ffdb 	bl	8000288 <__aeabi_dsub>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	4680      	mov	r8, r0
 80072d8:	4689      	mov	r9, r1
 80072da:	4630      	mov	r0, r6
 80072dc:	4639      	mov	r1, r7
 80072de:	f7f8 ffd3 	bl	8000288 <__aeabi_dsub>
 80072e2:	a395      	add	r3, pc, #596	@ (adr r3, 8007538 <__ieee754_rem_pio2+0x300>)
 80072e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e8:	e7dc      	b.n	80072a4 <__ieee754_rem_pio2+0x6c>
 80072ea:	f7f8 ffcf 	bl	800028c <__adddf3>
 80072ee:	45a8      	cmp	r8, r5
 80072f0:	4606      	mov	r6, r0
 80072f2:	460f      	mov	r7, r1
 80072f4:	d018      	beq.n	8007328 <__ieee754_rem_pio2+0xf0>
 80072f6:	a38c      	add	r3, pc, #560	@ (adr r3, 8007528 <__ieee754_rem_pio2+0x2f0>)
 80072f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fc:	f7f8 ffc6 	bl	800028c <__adddf3>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4680      	mov	r8, r0
 8007306:	4689      	mov	r9, r1
 8007308:	4630      	mov	r0, r6
 800730a:	4639      	mov	r1, r7
 800730c:	f7f8 ffbc 	bl	8000288 <__aeabi_dsub>
 8007310:	a385      	add	r3, pc, #532	@ (adr r3, 8007528 <__ieee754_rem_pio2+0x2f0>)
 8007312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007316:	f7f8 ffb9 	bl	800028c <__adddf3>
 800731a:	f04f 35ff 	mov.w	r5, #4294967295
 800731e:	e9c4 8900 	strd	r8, r9, [r4]
 8007322:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007326:	e7c4      	b.n	80072b2 <__ieee754_rem_pio2+0x7a>
 8007328:	a381      	add	r3, pc, #516	@ (adr r3, 8007530 <__ieee754_rem_pio2+0x2f8>)
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	f7f8 ffad 	bl	800028c <__adddf3>
 8007332:	a381      	add	r3, pc, #516	@ (adr r3, 8007538 <__ieee754_rem_pio2+0x300>)
 8007334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007338:	4606      	mov	r6, r0
 800733a:	460f      	mov	r7, r1
 800733c:	f7f8 ffa6 	bl	800028c <__adddf3>
 8007340:	4602      	mov	r2, r0
 8007342:	460b      	mov	r3, r1
 8007344:	4680      	mov	r8, r0
 8007346:	4689      	mov	r9, r1
 8007348:	4630      	mov	r0, r6
 800734a:	4639      	mov	r1, r7
 800734c:	f7f8 ff9c 	bl	8000288 <__aeabi_dsub>
 8007350:	a379      	add	r3, pc, #484	@ (adr r3, 8007538 <__ieee754_rem_pio2+0x300>)
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	e7de      	b.n	8007316 <__ieee754_rem_pio2+0xde>
 8007358:	4b82      	ldr	r3, [pc, #520]	@ (8007564 <__ieee754_rem_pio2+0x32c>)
 800735a:	4598      	cmp	r8, r3
 800735c:	f200 80d1 	bhi.w	8007502 <__ieee754_rem_pio2+0x2ca>
 8007360:	f7ff fcae 	bl	8006cc0 <fabs>
 8007364:	ec57 6b10 	vmov	r6, r7, d0
 8007368:	a375      	add	r3, pc, #468	@ (adr r3, 8007540 <__ieee754_rem_pio2+0x308>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	4630      	mov	r0, r6
 8007370:	4639      	mov	r1, r7
 8007372:	f7f9 f941 	bl	80005f8 <__aeabi_dmul>
 8007376:	4b7c      	ldr	r3, [pc, #496]	@ (8007568 <__ieee754_rem_pio2+0x330>)
 8007378:	2200      	movs	r2, #0
 800737a:	f7f8 ff87 	bl	800028c <__adddf3>
 800737e:	f7f9 fbeb 	bl	8000b58 <__aeabi_d2iz>
 8007382:	4605      	mov	r5, r0
 8007384:	f7f9 f8ce 	bl	8000524 <__aeabi_i2d>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007390:	a363      	add	r3, pc, #396	@ (adr r3, 8007520 <__ieee754_rem_pio2+0x2e8>)
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f7f9 f92f 	bl	80005f8 <__aeabi_dmul>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4630      	mov	r0, r6
 80073a0:	4639      	mov	r1, r7
 80073a2:	f7f8 ff71 	bl	8000288 <__aeabi_dsub>
 80073a6:	a360      	add	r3, pc, #384	@ (adr r3, 8007528 <__ieee754_rem_pio2+0x2f0>)
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	4682      	mov	sl, r0
 80073ae:	468b      	mov	fp, r1
 80073b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073b4:	f7f9 f920 	bl	80005f8 <__aeabi_dmul>
 80073b8:	2d1f      	cmp	r5, #31
 80073ba:	4606      	mov	r6, r0
 80073bc:	460f      	mov	r7, r1
 80073be:	dc0c      	bgt.n	80073da <__ieee754_rem_pio2+0x1a2>
 80073c0:	4b6a      	ldr	r3, [pc, #424]	@ (800756c <__ieee754_rem_pio2+0x334>)
 80073c2:	1e6a      	subs	r2, r5, #1
 80073c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c8:	4543      	cmp	r3, r8
 80073ca:	d006      	beq.n	80073da <__ieee754_rem_pio2+0x1a2>
 80073cc:	4632      	mov	r2, r6
 80073ce:	463b      	mov	r3, r7
 80073d0:	4650      	mov	r0, sl
 80073d2:	4659      	mov	r1, fp
 80073d4:	f7f8 ff58 	bl	8000288 <__aeabi_dsub>
 80073d8:	e00e      	b.n	80073f8 <__ieee754_rem_pio2+0x1c0>
 80073da:	463b      	mov	r3, r7
 80073dc:	4632      	mov	r2, r6
 80073de:	4650      	mov	r0, sl
 80073e0:	4659      	mov	r1, fp
 80073e2:	f7f8 ff51 	bl	8000288 <__aeabi_dsub>
 80073e6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80073ea:	9305      	str	r3, [sp, #20]
 80073ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80073f0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80073f4:	2b10      	cmp	r3, #16
 80073f6:	dc02      	bgt.n	80073fe <__ieee754_rem_pio2+0x1c6>
 80073f8:	e9c4 0100 	strd	r0, r1, [r4]
 80073fc:	e039      	b.n	8007472 <__ieee754_rem_pio2+0x23a>
 80073fe:	a34c      	add	r3, pc, #304	@ (adr r3, 8007530 <__ieee754_rem_pio2+0x2f8>)
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007408:	f7f9 f8f6 	bl	80005f8 <__aeabi_dmul>
 800740c:	4606      	mov	r6, r0
 800740e:	460f      	mov	r7, r1
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	4650      	mov	r0, sl
 8007416:	4659      	mov	r1, fp
 8007418:	f7f8 ff36 	bl	8000288 <__aeabi_dsub>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4680      	mov	r8, r0
 8007422:	4689      	mov	r9, r1
 8007424:	4650      	mov	r0, sl
 8007426:	4659      	mov	r1, fp
 8007428:	f7f8 ff2e 	bl	8000288 <__aeabi_dsub>
 800742c:	4632      	mov	r2, r6
 800742e:	463b      	mov	r3, r7
 8007430:	f7f8 ff2a 	bl	8000288 <__aeabi_dsub>
 8007434:	a340      	add	r3, pc, #256	@ (adr r3, 8007538 <__ieee754_rem_pio2+0x300>)
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	4606      	mov	r6, r0
 800743c:	460f      	mov	r7, r1
 800743e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007442:	f7f9 f8d9 	bl	80005f8 <__aeabi_dmul>
 8007446:	4632      	mov	r2, r6
 8007448:	463b      	mov	r3, r7
 800744a:	f7f8 ff1d 	bl	8000288 <__aeabi_dsub>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	4606      	mov	r6, r0
 8007454:	460f      	mov	r7, r1
 8007456:	4640      	mov	r0, r8
 8007458:	4649      	mov	r1, r9
 800745a:	f7f8 ff15 	bl	8000288 <__aeabi_dsub>
 800745e:	9a05      	ldr	r2, [sp, #20]
 8007460:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	2b31      	cmp	r3, #49	@ 0x31
 8007468:	dc20      	bgt.n	80074ac <__ieee754_rem_pio2+0x274>
 800746a:	e9c4 0100 	strd	r0, r1, [r4]
 800746e:	46c2      	mov	sl, r8
 8007470:	46cb      	mov	fp, r9
 8007472:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007476:	4650      	mov	r0, sl
 8007478:	4642      	mov	r2, r8
 800747a:	464b      	mov	r3, r9
 800747c:	4659      	mov	r1, fp
 800747e:	f7f8 ff03 	bl	8000288 <__aeabi_dsub>
 8007482:	463b      	mov	r3, r7
 8007484:	4632      	mov	r2, r6
 8007486:	f7f8 feff 	bl	8000288 <__aeabi_dsub>
 800748a:	9b04      	ldr	r3, [sp, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007492:	f6bf af0e 	bge.w	80072b2 <__ieee754_rem_pio2+0x7a>
 8007496:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800749a:	6063      	str	r3, [r4, #4]
 800749c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80074a0:	f8c4 8000 	str.w	r8, [r4]
 80074a4:	60a0      	str	r0, [r4, #8]
 80074a6:	60e3      	str	r3, [r4, #12]
 80074a8:	426d      	negs	r5, r5
 80074aa:	e702      	b.n	80072b2 <__ieee754_rem_pio2+0x7a>
 80074ac:	a326      	add	r3, pc, #152	@ (adr r3, 8007548 <__ieee754_rem_pio2+0x310>)
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074b6:	f7f9 f89f 	bl	80005f8 <__aeabi_dmul>
 80074ba:	4606      	mov	r6, r0
 80074bc:	460f      	mov	r7, r1
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4640      	mov	r0, r8
 80074c4:	4649      	mov	r1, r9
 80074c6:	f7f8 fedf 	bl	8000288 <__aeabi_dsub>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	4682      	mov	sl, r0
 80074d0:	468b      	mov	fp, r1
 80074d2:	4640      	mov	r0, r8
 80074d4:	4649      	mov	r1, r9
 80074d6:	f7f8 fed7 	bl	8000288 <__aeabi_dsub>
 80074da:	4632      	mov	r2, r6
 80074dc:	463b      	mov	r3, r7
 80074de:	f7f8 fed3 	bl	8000288 <__aeabi_dsub>
 80074e2:	a31b      	add	r3, pc, #108	@ (adr r3, 8007550 <__ieee754_rem_pio2+0x318>)
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	4606      	mov	r6, r0
 80074ea:	460f      	mov	r7, r1
 80074ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074f0:	f7f9 f882 	bl	80005f8 <__aeabi_dmul>
 80074f4:	4632      	mov	r2, r6
 80074f6:	463b      	mov	r3, r7
 80074f8:	f7f8 fec6 	bl	8000288 <__aeabi_dsub>
 80074fc:	4606      	mov	r6, r0
 80074fe:	460f      	mov	r7, r1
 8007500:	e764      	b.n	80073cc <__ieee754_rem_pio2+0x194>
 8007502:	4b1b      	ldr	r3, [pc, #108]	@ (8007570 <__ieee754_rem_pio2+0x338>)
 8007504:	4598      	cmp	r8, r3
 8007506:	d935      	bls.n	8007574 <__ieee754_rem_pio2+0x33c>
 8007508:	4632      	mov	r2, r6
 800750a:	463b      	mov	r3, r7
 800750c:	4630      	mov	r0, r6
 800750e:	4639      	mov	r1, r7
 8007510:	f7f8 feba 	bl	8000288 <__aeabi_dsub>
 8007514:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007518:	e9c4 0100 	strd	r0, r1, [r4]
 800751c:	e69e      	b.n	800725c <__ieee754_rem_pio2+0x24>
 800751e:	bf00      	nop
 8007520:	54400000 	.word	0x54400000
 8007524:	3ff921fb 	.word	0x3ff921fb
 8007528:	1a626331 	.word	0x1a626331
 800752c:	3dd0b461 	.word	0x3dd0b461
 8007530:	1a600000 	.word	0x1a600000
 8007534:	3dd0b461 	.word	0x3dd0b461
 8007538:	2e037073 	.word	0x2e037073
 800753c:	3ba3198a 	.word	0x3ba3198a
 8007540:	6dc9c883 	.word	0x6dc9c883
 8007544:	3fe45f30 	.word	0x3fe45f30
 8007548:	2e000000 	.word	0x2e000000
 800754c:	3ba3198a 	.word	0x3ba3198a
 8007550:	252049c1 	.word	0x252049c1
 8007554:	397b839a 	.word	0x397b839a
 8007558:	3fe921fb 	.word	0x3fe921fb
 800755c:	4002d97b 	.word	0x4002d97b
 8007560:	3ff921fb 	.word	0x3ff921fb
 8007564:	413921fb 	.word	0x413921fb
 8007568:	3fe00000 	.word	0x3fe00000
 800756c:	08008730 	.word	0x08008730
 8007570:	7fefffff 	.word	0x7fefffff
 8007574:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007578:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800757c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007580:	4630      	mov	r0, r6
 8007582:	460f      	mov	r7, r1
 8007584:	f7f9 fae8 	bl	8000b58 <__aeabi_d2iz>
 8007588:	f7f8 ffcc 	bl	8000524 <__aeabi_i2d>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4630      	mov	r0, r6
 8007592:	4639      	mov	r1, r7
 8007594:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007598:	f7f8 fe76 	bl	8000288 <__aeabi_dsub>
 800759c:	4b22      	ldr	r3, [pc, #136]	@ (8007628 <__ieee754_rem_pio2+0x3f0>)
 800759e:	2200      	movs	r2, #0
 80075a0:	f7f9 f82a 	bl	80005f8 <__aeabi_dmul>
 80075a4:	460f      	mov	r7, r1
 80075a6:	4606      	mov	r6, r0
 80075a8:	f7f9 fad6 	bl	8000b58 <__aeabi_d2iz>
 80075ac:	f7f8 ffba 	bl	8000524 <__aeabi_i2d>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	4630      	mov	r0, r6
 80075b6:	4639      	mov	r1, r7
 80075b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80075bc:	f7f8 fe64 	bl	8000288 <__aeabi_dsub>
 80075c0:	4b19      	ldr	r3, [pc, #100]	@ (8007628 <__ieee754_rem_pio2+0x3f0>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	f7f9 f818 	bl	80005f8 <__aeabi_dmul>
 80075c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80075cc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80075d0:	f04f 0803 	mov.w	r8, #3
 80075d4:	2600      	movs	r6, #0
 80075d6:	2700      	movs	r7, #0
 80075d8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80075dc:	4632      	mov	r2, r6
 80075de:	463b      	mov	r3, r7
 80075e0:	46c2      	mov	sl, r8
 80075e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80075e6:	f7f9 fa6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d1f4      	bne.n	80075d8 <__ieee754_rem_pio2+0x3a0>
 80075ee:	4b0f      	ldr	r3, [pc, #60]	@ (800762c <__ieee754_rem_pio2+0x3f4>)
 80075f0:	9301      	str	r3, [sp, #4]
 80075f2:	2302      	movs	r3, #2
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	462a      	mov	r2, r5
 80075f8:	4653      	mov	r3, sl
 80075fa:	4621      	mov	r1, r4
 80075fc:	a806      	add	r0, sp, #24
 80075fe:	f000 f817 	bl	8007630 <__kernel_rem_pio2>
 8007602:	9b04      	ldr	r3, [sp, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	4605      	mov	r5, r0
 8007608:	f6bf ae53 	bge.w	80072b2 <__ieee754_rem_pio2+0x7a>
 800760c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007610:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007614:	e9c4 2300 	strd	r2, r3, [r4]
 8007618:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800761c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007620:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007624:	e740      	b.n	80074a8 <__ieee754_rem_pio2+0x270>
 8007626:	bf00      	nop
 8007628:	41700000 	.word	0x41700000
 800762c:	080087b0 	.word	0x080087b0

08007630 <__kernel_rem_pio2>:
 8007630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	ed2d 8b02 	vpush	{d8}
 8007638:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800763c:	f112 0f14 	cmn.w	r2, #20
 8007640:	9306      	str	r3, [sp, #24]
 8007642:	9104      	str	r1, [sp, #16]
 8007644:	4bbe      	ldr	r3, [pc, #760]	@ (8007940 <__kernel_rem_pio2+0x310>)
 8007646:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8007648:	9008      	str	r0, [sp, #32]
 800764a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	9b06      	ldr	r3, [sp, #24]
 8007652:	f103 33ff 	add.w	r3, r3, #4294967295
 8007656:	bfa8      	it	ge
 8007658:	1ed4      	subge	r4, r2, #3
 800765a:	9305      	str	r3, [sp, #20]
 800765c:	bfb2      	itee	lt
 800765e:	2400      	movlt	r4, #0
 8007660:	2318      	movge	r3, #24
 8007662:	fb94 f4f3 	sdivge	r4, r4, r3
 8007666:	f06f 0317 	mvn.w	r3, #23
 800766a:	fb04 3303 	mla	r3, r4, r3, r3
 800766e:	eb03 0b02 	add.w	fp, r3, r2
 8007672:	9b00      	ldr	r3, [sp, #0]
 8007674:	9a05      	ldr	r2, [sp, #20]
 8007676:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8007930 <__kernel_rem_pio2+0x300>
 800767a:	eb03 0802 	add.w	r8, r3, r2
 800767e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007680:	1aa7      	subs	r7, r4, r2
 8007682:	ae20      	add	r6, sp, #128	@ 0x80
 8007684:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007688:	2500      	movs	r5, #0
 800768a:	4545      	cmp	r5, r8
 800768c:	dd13      	ble.n	80076b6 <__kernel_rem_pio2+0x86>
 800768e:	9b06      	ldr	r3, [sp, #24]
 8007690:	aa20      	add	r2, sp, #128	@ 0x80
 8007692:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007696:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800769a:	f04f 0800 	mov.w	r8, #0
 800769e:	9b00      	ldr	r3, [sp, #0]
 80076a0:	4598      	cmp	r8, r3
 80076a2:	dc31      	bgt.n	8007708 <__kernel_rem_pio2+0xd8>
 80076a4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8007930 <__kernel_rem_pio2+0x300>
 80076a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80076b0:	462f      	mov	r7, r5
 80076b2:	2600      	movs	r6, #0
 80076b4:	e01b      	b.n	80076ee <__kernel_rem_pio2+0xbe>
 80076b6:	42ef      	cmn	r7, r5
 80076b8:	d407      	bmi.n	80076ca <__kernel_rem_pio2+0x9a>
 80076ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80076be:	f7f8 ff31 	bl	8000524 <__aeabi_i2d>
 80076c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80076c6:	3501      	adds	r5, #1
 80076c8:	e7df      	b.n	800768a <__kernel_rem_pio2+0x5a>
 80076ca:	ec51 0b18 	vmov	r0, r1, d8
 80076ce:	e7f8      	b.n	80076c2 <__kernel_rem_pio2+0x92>
 80076d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80076d8:	f7f8 ff8e 	bl	80005f8 <__aeabi_dmul>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076e4:	f7f8 fdd2 	bl	800028c <__adddf3>
 80076e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076ec:	3601      	adds	r6, #1
 80076ee:	9b05      	ldr	r3, [sp, #20]
 80076f0:	429e      	cmp	r6, r3
 80076f2:	f1a7 0708 	sub.w	r7, r7, #8
 80076f6:	ddeb      	ble.n	80076d0 <__kernel_rem_pio2+0xa0>
 80076f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076fc:	f108 0801 	add.w	r8, r8, #1
 8007700:	ecaa 7b02 	vstmia	sl!, {d7}
 8007704:	3508      	adds	r5, #8
 8007706:	e7ca      	b.n	800769e <__kernel_rem_pio2+0x6e>
 8007708:	9b00      	ldr	r3, [sp, #0]
 800770a:	f8dd 8000 	ldr.w	r8, [sp]
 800770e:	aa0c      	add	r2, sp, #48	@ 0x30
 8007710:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007714:	930a      	str	r3, [sp, #40]	@ 0x28
 8007716:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007718:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800771c:	9309      	str	r3, [sp, #36]	@ 0x24
 800771e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007722:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007724:	ab98      	add	r3, sp, #608	@ 0x260
 8007726:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800772a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800772e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007732:	ac0c      	add	r4, sp, #48	@ 0x30
 8007734:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007736:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800773a:	46a1      	mov	r9, r4
 800773c:	46c2      	mov	sl, r8
 800773e:	f1ba 0f00 	cmp.w	sl, #0
 8007742:	f1a5 0508 	sub.w	r5, r5, #8
 8007746:	dc77      	bgt.n	8007838 <__kernel_rem_pio2+0x208>
 8007748:	4658      	mov	r0, fp
 800774a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800774e:	f000 fac7 	bl	8007ce0 <scalbn>
 8007752:	ec57 6b10 	vmov	r6, r7, d0
 8007756:	2200      	movs	r2, #0
 8007758:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800775c:	4630      	mov	r0, r6
 800775e:	4639      	mov	r1, r7
 8007760:	f7f8 ff4a 	bl	80005f8 <__aeabi_dmul>
 8007764:	ec41 0b10 	vmov	d0, r0, r1
 8007768:	f000 fb3a 	bl	8007de0 <floor>
 800776c:	4b75      	ldr	r3, [pc, #468]	@ (8007944 <__kernel_rem_pio2+0x314>)
 800776e:	ec51 0b10 	vmov	r0, r1, d0
 8007772:	2200      	movs	r2, #0
 8007774:	f7f8 ff40 	bl	80005f8 <__aeabi_dmul>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	4630      	mov	r0, r6
 800777e:	4639      	mov	r1, r7
 8007780:	f7f8 fd82 	bl	8000288 <__aeabi_dsub>
 8007784:	460f      	mov	r7, r1
 8007786:	4606      	mov	r6, r0
 8007788:	f7f9 f9e6 	bl	8000b58 <__aeabi_d2iz>
 800778c:	9002      	str	r0, [sp, #8]
 800778e:	f7f8 fec9 	bl	8000524 <__aeabi_i2d>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	4630      	mov	r0, r6
 8007798:	4639      	mov	r1, r7
 800779a:	f7f8 fd75 	bl	8000288 <__aeabi_dsub>
 800779e:	f1bb 0f00 	cmp.w	fp, #0
 80077a2:	4606      	mov	r6, r0
 80077a4:	460f      	mov	r7, r1
 80077a6:	dd6c      	ble.n	8007882 <__kernel_rem_pio2+0x252>
 80077a8:	f108 31ff 	add.w	r1, r8, #4294967295
 80077ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80077ae:	9d02      	ldr	r5, [sp, #8]
 80077b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80077b4:	f1cb 0018 	rsb	r0, fp, #24
 80077b8:	fa43 f200 	asr.w	r2, r3, r0
 80077bc:	4415      	add	r5, r2
 80077be:	4082      	lsls	r2, r0
 80077c0:	1a9b      	subs	r3, r3, r2
 80077c2:	aa0c      	add	r2, sp, #48	@ 0x30
 80077c4:	9502      	str	r5, [sp, #8]
 80077c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80077ca:	f1cb 0217 	rsb	r2, fp, #23
 80077ce:	fa43 f902 	asr.w	r9, r3, r2
 80077d2:	f1b9 0f00 	cmp.w	r9, #0
 80077d6:	dd64      	ble.n	80078a2 <__kernel_rem_pio2+0x272>
 80077d8:	9b02      	ldr	r3, [sp, #8]
 80077da:	2200      	movs	r2, #0
 80077dc:	3301      	adds	r3, #1
 80077de:	9302      	str	r3, [sp, #8]
 80077e0:	4615      	mov	r5, r2
 80077e2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80077e6:	4590      	cmp	r8, r2
 80077e8:	f300 80b8 	bgt.w	800795c <__kernel_rem_pio2+0x32c>
 80077ec:	f1bb 0f00 	cmp.w	fp, #0
 80077f0:	dd07      	ble.n	8007802 <__kernel_rem_pio2+0x1d2>
 80077f2:	f1bb 0f01 	cmp.w	fp, #1
 80077f6:	f000 80bf 	beq.w	8007978 <__kernel_rem_pio2+0x348>
 80077fa:	f1bb 0f02 	cmp.w	fp, #2
 80077fe:	f000 80c6 	beq.w	800798e <__kernel_rem_pio2+0x35e>
 8007802:	f1b9 0f02 	cmp.w	r9, #2
 8007806:	d14c      	bne.n	80078a2 <__kernel_rem_pio2+0x272>
 8007808:	4632      	mov	r2, r6
 800780a:	463b      	mov	r3, r7
 800780c:	494e      	ldr	r1, [pc, #312]	@ (8007948 <__kernel_rem_pio2+0x318>)
 800780e:	2000      	movs	r0, #0
 8007810:	f7f8 fd3a 	bl	8000288 <__aeabi_dsub>
 8007814:	4606      	mov	r6, r0
 8007816:	460f      	mov	r7, r1
 8007818:	2d00      	cmp	r5, #0
 800781a:	d042      	beq.n	80078a2 <__kernel_rem_pio2+0x272>
 800781c:	4658      	mov	r0, fp
 800781e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8007938 <__kernel_rem_pio2+0x308>
 8007822:	f000 fa5d 	bl	8007ce0 <scalbn>
 8007826:	4630      	mov	r0, r6
 8007828:	4639      	mov	r1, r7
 800782a:	ec53 2b10 	vmov	r2, r3, d0
 800782e:	f7f8 fd2b 	bl	8000288 <__aeabi_dsub>
 8007832:	4606      	mov	r6, r0
 8007834:	460f      	mov	r7, r1
 8007836:	e034      	b.n	80078a2 <__kernel_rem_pio2+0x272>
 8007838:	4b44      	ldr	r3, [pc, #272]	@ (800794c <__kernel_rem_pio2+0x31c>)
 800783a:	2200      	movs	r2, #0
 800783c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007840:	f7f8 feda 	bl	80005f8 <__aeabi_dmul>
 8007844:	f7f9 f988 	bl	8000b58 <__aeabi_d2iz>
 8007848:	f7f8 fe6c 	bl	8000524 <__aeabi_i2d>
 800784c:	4b40      	ldr	r3, [pc, #256]	@ (8007950 <__kernel_rem_pio2+0x320>)
 800784e:	2200      	movs	r2, #0
 8007850:	4606      	mov	r6, r0
 8007852:	460f      	mov	r7, r1
 8007854:	f7f8 fed0 	bl	80005f8 <__aeabi_dmul>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007860:	f7f8 fd12 	bl	8000288 <__aeabi_dsub>
 8007864:	f7f9 f978 	bl	8000b58 <__aeabi_d2iz>
 8007868:	e9d5 2300 	ldrd	r2, r3, [r5]
 800786c:	f849 0b04 	str.w	r0, [r9], #4
 8007870:	4639      	mov	r1, r7
 8007872:	4630      	mov	r0, r6
 8007874:	f7f8 fd0a 	bl	800028c <__adddf3>
 8007878:	f10a 3aff 	add.w	sl, sl, #4294967295
 800787c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007880:	e75d      	b.n	800773e <__kernel_rem_pio2+0x10e>
 8007882:	d107      	bne.n	8007894 <__kernel_rem_pio2+0x264>
 8007884:	f108 33ff 	add.w	r3, r8, #4294967295
 8007888:	aa0c      	add	r2, sp, #48	@ 0x30
 800788a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800788e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8007892:	e79e      	b.n	80077d2 <__kernel_rem_pio2+0x1a2>
 8007894:	4b2f      	ldr	r3, [pc, #188]	@ (8007954 <__kernel_rem_pio2+0x324>)
 8007896:	2200      	movs	r2, #0
 8007898:	f7f9 f934 	bl	8000b04 <__aeabi_dcmpge>
 800789c:	2800      	cmp	r0, #0
 800789e:	d143      	bne.n	8007928 <__kernel_rem_pio2+0x2f8>
 80078a0:	4681      	mov	r9, r0
 80078a2:	2200      	movs	r2, #0
 80078a4:	2300      	movs	r3, #0
 80078a6:	4630      	mov	r0, r6
 80078a8:	4639      	mov	r1, r7
 80078aa:	f7f9 f90d 	bl	8000ac8 <__aeabi_dcmpeq>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f000 80bf 	beq.w	8007a32 <__kernel_rem_pio2+0x402>
 80078b4:	f108 33ff 	add.w	r3, r8, #4294967295
 80078b8:	2200      	movs	r2, #0
 80078ba:	9900      	ldr	r1, [sp, #0]
 80078bc:	428b      	cmp	r3, r1
 80078be:	da6e      	bge.n	800799e <__kernel_rem_pio2+0x36e>
 80078c0:	2a00      	cmp	r2, #0
 80078c2:	f000 8089 	beq.w	80079d8 <__kernel_rem_pio2+0x3a8>
 80078c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80078ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80078cc:	f1ab 0b18 	sub.w	fp, fp, #24
 80078d0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d0f6      	beq.n	80078c6 <__kernel_rem_pio2+0x296>
 80078d8:	4658      	mov	r0, fp
 80078da:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8007938 <__kernel_rem_pio2+0x308>
 80078de:	f000 f9ff 	bl	8007ce0 <scalbn>
 80078e2:	f108 0301 	add.w	r3, r8, #1
 80078e6:	00da      	lsls	r2, r3, #3
 80078e8:	9205      	str	r2, [sp, #20]
 80078ea:	ec55 4b10 	vmov	r4, r5, d0
 80078ee:	aa70      	add	r2, sp, #448	@ 0x1c0
 80078f0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800794c <__kernel_rem_pio2+0x31c>
 80078f4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80078f8:	4646      	mov	r6, r8
 80078fa:	f04f 0a00 	mov.w	sl, #0
 80078fe:	2e00      	cmp	r6, #0
 8007900:	f280 80cf 	bge.w	8007aa2 <__kernel_rem_pio2+0x472>
 8007904:	4644      	mov	r4, r8
 8007906:	2c00      	cmp	r4, #0
 8007908:	f2c0 80fd 	blt.w	8007b06 <__kernel_rem_pio2+0x4d6>
 800790c:	4b12      	ldr	r3, [pc, #72]	@ (8007958 <__kernel_rem_pio2+0x328>)
 800790e:	461f      	mov	r7, r3
 8007910:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007912:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007916:	9306      	str	r3, [sp, #24]
 8007918:	f04f 0a00 	mov.w	sl, #0
 800791c:	f04f 0b00 	mov.w	fp, #0
 8007920:	2600      	movs	r6, #0
 8007922:	eba8 0504 	sub.w	r5, r8, r4
 8007926:	e0e2      	b.n	8007aee <__kernel_rem_pio2+0x4be>
 8007928:	f04f 0902 	mov.w	r9, #2
 800792c:	e754      	b.n	80077d8 <__kernel_rem_pio2+0x1a8>
 800792e:	bf00      	nop
	...
 800793c:	3ff00000 	.word	0x3ff00000
 8007940:	080088f8 	.word	0x080088f8
 8007944:	40200000 	.word	0x40200000
 8007948:	3ff00000 	.word	0x3ff00000
 800794c:	3e700000 	.word	0x3e700000
 8007950:	41700000 	.word	0x41700000
 8007954:	3fe00000 	.word	0x3fe00000
 8007958:	080088b8 	.word	0x080088b8
 800795c:	f854 3b04 	ldr.w	r3, [r4], #4
 8007960:	b945      	cbnz	r5, 8007974 <__kernel_rem_pio2+0x344>
 8007962:	b123      	cbz	r3, 800796e <__kernel_rem_pio2+0x33e>
 8007964:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8007968:	f844 3c04 	str.w	r3, [r4, #-4]
 800796c:	2301      	movs	r3, #1
 800796e:	3201      	adds	r2, #1
 8007970:	461d      	mov	r5, r3
 8007972:	e738      	b.n	80077e6 <__kernel_rem_pio2+0x1b6>
 8007974:	1acb      	subs	r3, r1, r3
 8007976:	e7f7      	b.n	8007968 <__kernel_rem_pio2+0x338>
 8007978:	f108 32ff 	add.w	r2, r8, #4294967295
 800797c:	ab0c      	add	r3, sp, #48	@ 0x30
 800797e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007982:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007986:	a90c      	add	r1, sp, #48	@ 0x30
 8007988:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800798c:	e739      	b.n	8007802 <__kernel_rem_pio2+0x1d2>
 800798e:	f108 32ff 	add.w	r2, r8, #4294967295
 8007992:	ab0c      	add	r3, sp, #48	@ 0x30
 8007994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007998:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800799c:	e7f3      	b.n	8007986 <__kernel_rem_pio2+0x356>
 800799e:	a90c      	add	r1, sp, #48	@ 0x30
 80079a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	430a      	orrs	r2, r1
 80079a8:	e787      	b.n	80078ba <__kernel_rem_pio2+0x28a>
 80079aa:	3401      	adds	r4, #1
 80079ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80079b0:	2a00      	cmp	r2, #0
 80079b2:	d0fa      	beq.n	80079aa <__kernel_rem_pio2+0x37a>
 80079b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80079ba:	eb0d 0503 	add.w	r5, sp, r3
 80079be:	9b06      	ldr	r3, [sp, #24]
 80079c0:	aa20      	add	r2, sp, #128	@ 0x80
 80079c2:	4443      	add	r3, r8
 80079c4:	f108 0701 	add.w	r7, r8, #1
 80079c8:	3d98      	subs	r5, #152	@ 0x98
 80079ca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80079ce:	4444      	add	r4, r8
 80079d0:	42bc      	cmp	r4, r7
 80079d2:	da04      	bge.n	80079de <__kernel_rem_pio2+0x3ae>
 80079d4:	46a0      	mov	r8, r4
 80079d6:	e6a2      	b.n	800771e <__kernel_rem_pio2+0xee>
 80079d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079da:	2401      	movs	r4, #1
 80079dc:	e7e6      	b.n	80079ac <__kernel_rem_pio2+0x37c>
 80079de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80079e4:	f7f8 fd9e 	bl	8000524 <__aeabi_i2d>
 80079e8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8007cb0 <__kernel_rem_pio2+0x680>
 80079ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 80079f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80079f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079f8:	46b2      	mov	sl, r6
 80079fa:	f04f 0800 	mov.w	r8, #0
 80079fe:	9b05      	ldr	r3, [sp, #20]
 8007a00:	4598      	cmp	r8, r3
 8007a02:	dd05      	ble.n	8007a10 <__kernel_rem_pio2+0x3e0>
 8007a04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a08:	3701      	adds	r7, #1
 8007a0a:	eca5 7b02 	vstmia	r5!, {d7}
 8007a0e:	e7df      	b.n	80079d0 <__kernel_rem_pio2+0x3a0>
 8007a10:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8007a14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007a18:	f7f8 fdee 	bl	80005f8 <__aeabi_dmul>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a24:	f7f8 fc32 	bl	800028c <__adddf3>
 8007a28:	f108 0801 	add.w	r8, r8, #1
 8007a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a30:	e7e5      	b.n	80079fe <__kernel_rem_pio2+0x3ce>
 8007a32:	f1cb 0000 	rsb	r0, fp, #0
 8007a36:	ec47 6b10 	vmov	d0, r6, r7
 8007a3a:	f000 f951 	bl	8007ce0 <scalbn>
 8007a3e:	ec55 4b10 	vmov	r4, r5, d0
 8007a42:	4b9d      	ldr	r3, [pc, #628]	@ (8007cb8 <__kernel_rem_pio2+0x688>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	4620      	mov	r0, r4
 8007a48:	4629      	mov	r1, r5
 8007a4a:	f7f9 f85b 	bl	8000b04 <__aeabi_dcmpge>
 8007a4e:	b300      	cbz	r0, 8007a92 <__kernel_rem_pio2+0x462>
 8007a50:	4b9a      	ldr	r3, [pc, #616]	@ (8007cbc <__kernel_rem_pio2+0x68c>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	4620      	mov	r0, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	f7f8 fdce 	bl	80005f8 <__aeabi_dmul>
 8007a5c:	f7f9 f87c 	bl	8000b58 <__aeabi_d2iz>
 8007a60:	4606      	mov	r6, r0
 8007a62:	f7f8 fd5f 	bl	8000524 <__aeabi_i2d>
 8007a66:	4b94      	ldr	r3, [pc, #592]	@ (8007cb8 <__kernel_rem_pio2+0x688>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f7f8 fdc5 	bl	80005f8 <__aeabi_dmul>
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4602      	mov	r2, r0
 8007a72:	4629      	mov	r1, r5
 8007a74:	4620      	mov	r0, r4
 8007a76:	f7f8 fc07 	bl	8000288 <__aeabi_dsub>
 8007a7a:	f7f9 f86d 	bl	8000b58 <__aeabi_d2iz>
 8007a7e:	ab0c      	add	r3, sp, #48	@ 0x30
 8007a80:	f10b 0b18 	add.w	fp, fp, #24
 8007a84:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007a88:	f108 0801 	add.w	r8, r8, #1
 8007a8c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007a90:	e722      	b.n	80078d8 <__kernel_rem_pio2+0x2a8>
 8007a92:	4620      	mov	r0, r4
 8007a94:	4629      	mov	r1, r5
 8007a96:	f7f9 f85f 	bl	8000b58 <__aeabi_d2iz>
 8007a9a:	ab0c      	add	r3, sp, #48	@ 0x30
 8007a9c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007aa0:	e71a      	b.n	80078d8 <__kernel_rem_pio2+0x2a8>
 8007aa2:	ab0c      	add	r3, sp, #48	@ 0x30
 8007aa4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007aa8:	f7f8 fd3c 	bl	8000524 <__aeabi_i2d>
 8007aac:	4622      	mov	r2, r4
 8007aae:	462b      	mov	r3, r5
 8007ab0:	f7f8 fda2 	bl	80005f8 <__aeabi_dmul>
 8007ab4:	4652      	mov	r2, sl
 8007ab6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8007aba:	465b      	mov	r3, fp
 8007abc:	4620      	mov	r0, r4
 8007abe:	4629      	mov	r1, r5
 8007ac0:	f7f8 fd9a 	bl	80005f8 <__aeabi_dmul>
 8007ac4:	3e01      	subs	r6, #1
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	460d      	mov	r5, r1
 8007aca:	e718      	b.n	80078fe <__kernel_rem_pio2+0x2ce>
 8007acc:	9906      	ldr	r1, [sp, #24]
 8007ace:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8007ad2:	9106      	str	r1, [sp, #24]
 8007ad4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007ad8:	f7f8 fd8e 	bl	80005f8 <__aeabi_dmul>
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4650      	mov	r0, sl
 8007ae2:	4659      	mov	r1, fp
 8007ae4:	f7f8 fbd2 	bl	800028c <__adddf3>
 8007ae8:	3601      	adds	r6, #1
 8007aea:	4682      	mov	sl, r0
 8007aec:	468b      	mov	fp, r1
 8007aee:	9b00      	ldr	r3, [sp, #0]
 8007af0:	429e      	cmp	r6, r3
 8007af2:	dc01      	bgt.n	8007af8 <__kernel_rem_pio2+0x4c8>
 8007af4:	42b5      	cmp	r5, r6
 8007af6:	dae9      	bge.n	8007acc <__kernel_rem_pio2+0x49c>
 8007af8:	ab48      	add	r3, sp, #288	@ 0x120
 8007afa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007afe:	e9c5 ab00 	strd	sl, fp, [r5]
 8007b02:	3c01      	subs	r4, #1
 8007b04:	e6ff      	b.n	8007906 <__kernel_rem_pio2+0x2d6>
 8007b06:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	dc0b      	bgt.n	8007b24 <__kernel_rem_pio2+0x4f4>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	dc39      	bgt.n	8007b84 <__kernel_rem_pio2+0x554>
 8007b10:	d05d      	beq.n	8007bce <__kernel_rem_pio2+0x59e>
 8007b12:	9b02      	ldr	r3, [sp, #8]
 8007b14:	f003 0007 	and.w	r0, r3, #7
 8007b18:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8007b1c:	ecbd 8b02 	vpop	{d8}
 8007b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b24:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d1f3      	bne.n	8007b12 <__kernel_rem_pio2+0x4e2>
 8007b2a:	9b05      	ldr	r3, [sp, #20]
 8007b2c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007b30:	eb0d 0403 	add.w	r4, sp, r3
 8007b34:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8007b38:	4625      	mov	r5, r4
 8007b3a:	46c2      	mov	sl, r8
 8007b3c:	f1ba 0f00 	cmp.w	sl, #0
 8007b40:	f1a5 0508 	sub.w	r5, r5, #8
 8007b44:	dc6b      	bgt.n	8007c1e <__kernel_rem_pio2+0x5ee>
 8007b46:	4645      	mov	r5, r8
 8007b48:	2d01      	cmp	r5, #1
 8007b4a:	f1a4 0408 	sub.w	r4, r4, #8
 8007b4e:	f300 8087 	bgt.w	8007c60 <__kernel_rem_pio2+0x630>
 8007b52:	9c05      	ldr	r4, [sp, #20]
 8007b54:	ab48      	add	r3, sp, #288	@ 0x120
 8007b56:	441c      	add	r4, r3
 8007b58:	2000      	movs	r0, #0
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	f1b8 0f01 	cmp.w	r8, #1
 8007b60:	f300 809c 	bgt.w	8007c9c <__kernel_rem_pio2+0x66c>
 8007b64:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8007b68:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8007b6c:	f1b9 0f00 	cmp.w	r9, #0
 8007b70:	f040 80a6 	bne.w	8007cc0 <__kernel_rem_pio2+0x690>
 8007b74:	9b04      	ldr	r3, [sp, #16]
 8007b76:	e9c3 7800 	strd	r7, r8, [r3]
 8007b7a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007b7e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007b82:	e7c6      	b.n	8007b12 <__kernel_rem_pio2+0x4e2>
 8007b84:	9d05      	ldr	r5, [sp, #20]
 8007b86:	ab48      	add	r3, sp, #288	@ 0x120
 8007b88:	441d      	add	r5, r3
 8007b8a:	4644      	mov	r4, r8
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	2100      	movs	r1, #0
 8007b90:	2c00      	cmp	r4, #0
 8007b92:	da35      	bge.n	8007c00 <__kernel_rem_pio2+0x5d0>
 8007b94:	f1b9 0f00 	cmp.w	r9, #0
 8007b98:	d038      	beq.n	8007c0c <__kernel_rem_pio2+0x5dc>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007ba0:	9c04      	ldr	r4, [sp, #16]
 8007ba2:	e9c4 2300 	strd	r2, r3, [r4]
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8007bae:	f7f8 fb6b 	bl	8000288 <__aeabi_dsub>
 8007bb2:	ad4a      	add	r5, sp, #296	@ 0x128
 8007bb4:	2401      	movs	r4, #1
 8007bb6:	45a0      	cmp	r8, r4
 8007bb8:	da2b      	bge.n	8007c12 <__kernel_rem_pio2+0x5e2>
 8007bba:	f1b9 0f00 	cmp.w	r9, #0
 8007bbe:	d002      	beq.n	8007bc6 <__kernel_rem_pio2+0x596>
 8007bc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	9b04      	ldr	r3, [sp, #16]
 8007bc8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007bcc:	e7a1      	b.n	8007b12 <__kernel_rem_pio2+0x4e2>
 8007bce:	9c05      	ldr	r4, [sp, #20]
 8007bd0:	ab48      	add	r3, sp, #288	@ 0x120
 8007bd2:	441c      	add	r4, r3
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	f1b8 0f00 	cmp.w	r8, #0
 8007bdc:	da09      	bge.n	8007bf2 <__kernel_rem_pio2+0x5c2>
 8007bde:	f1b9 0f00 	cmp.w	r9, #0
 8007be2:	d002      	beq.n	8007bea <__kernel_rem_pio2+0x5ba>
 8007be4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007be8:	4619      	mov	r1, r3
 8007bea:	9b04      	ldr	r3, [sp, #16]
 8007bec:	e9c3 0100 	strd	r0, r1, [r3]
 8007bf0:	e78f      	b.n	8007b12 <__kernel_rem_pio2+0x4e2>
 8007bf2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007bf6:	f7f8 fb49 	bl	800028c <__adddf3>
 8007bfa:	f108 38ff 	add.w	r8, r8, #4294967295
 8007bfe:	e7eb      	b.n	8007bd8 <__kernel_rem_pio2+0x5a8>
 8007c00:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007c04:	f7f8 fb42 	bl	800028c <__adddf3>
 8007c08:	3c01      	subs	r4, #1
 8007c0a:	e7c1      	b.n	8007b90 <__kernel_rem_pio2+0x560>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	e7c6      	b.n	8007ba0 <__kernel_rem_pio2+0x570>
 8007c12:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007c16:	f7f8 fb39 	bl	800028c <__adddf3>
 8007c1a:	3401      	adds	r4, #1
 8007c1c:	e7cb      	b.n	8007bb6 <__kernel_rem_pio2+0x586>
 8007c1e:	ed95 7b00 	vldr	d7, [r5]
 8007c22:	ed8d 7b00 	vstr	d7, [sp]
 8007c26:	ed95 7b02 	vldr	d7, [r5, #8]
 8007c2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c2e:	ec53 2b17 	vmov	r2, r3, d7
 8007c32:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007c36:	f7f8 fb29 	bl	800028c <__adddf3>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	4606      	mov	r6, r0
 8007c40:	460f      	mov	r7, r1
 8007c42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c46:	f7f8 fb1f 	bl	8000288 <__aeabi_dsub>
 8007c4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007c4e:	f7f8 fb1d 	bl	800028c <__adddf3>
 8007c52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c56:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8007c5a:	e9c5 6700 	strd	r6, r7, [r5]
 8007c5e:	e76d      	b.n	8007b3c <__kernel_rem_pio2+0x50c>
 8007c60:	ed94 7b00 	vldr	d7, [r4]
 8007c64:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8007c68:	ec51 0b17 	vmov	r0, r1, d7
 8007c6c:	4652      	mov	r2, sl
 8007c6e:	465b      	mov	r3, fp
 8007c70:	ed8d 7b00 	vstr	d7, [sp]
 8007c74:	f7f8 fb0a 	bl	800028c <__adddf3>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	460f      	mov	r7, r1
 8007c80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c84:	f7f8 fb00 	bl	8000288 <__aeabi_dsub>
 8007c88:	4652      	mov	r2, sl
 8007c8a:	465b      	mov	r3, fp
 8007c8c:	f7f8 fafe 	bl	800028c <__adddf3>
 8007c90:	3d01      	subs	r5, #1
 8007c92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007c96:	e9c4 6700 	strd	r6, r7, [r4]
 8007c9a:	e755      	b.n	8007b48 <__kernel_rem_pio2+0x518>
 8007c9c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007ca0:	f7f8 faf4 	bl	800028c <__adddf3>
 8007ca4:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ca8:	e758      	b.n	8007b5c <__kernel_rem_pio2+0x52c>
 8007caa:	bf00      	nop
 8007cac:	f3af 8000 	nop.w
	...
 8007cb8:	41700000 	.word	0x41700000
 8007cbc:	3e700000 	.word	0x3e700000
 8007cc0:	9b04      	ldr	r3, [sp, #16]
 8007cc2:	9a04      	ldr	r2, [sp, #16]
 8007cc4:	601f      	str	r7, [r3, #0]
 8007cc6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8007cca:	605c      	str	r4, [r3, #4]
 8007ccc:	609d      	str	r5, [r3, #8]
 8007cce:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007cd2:	60d3      	str	r3, [r2, #12]
 8007cd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007cd8:	6110      	str	r0, [r2, #16]
 8007cda:	6153      	str	r3, [r2, #20]
 8007cdc:	e719      	b.n	8007b12 <__kernel_rem_pio2+0x4e2>
 8007cde:	bf00      	nop

08007ce0 <scalbn>:
 8007ce0:	b570      	push	{r4, r5, r6, lr}
 8007ce2:	ec55 4b10 	vmov	r4, r5, d0
 8007ce6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007cea:	4606      	mov	r6, r0
 8007cec:	462b      	mov	r3, r5
 8007cee:	b991      	cbnz	r1, 8007d16 <scalbn+0x36>
 8007cf0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007cf4:	4323      	orrs	r3, r4
 8007cf6:	d03d      	beq.n	8007d74 <scalbn+0x94>
 8007cf8:	4b35      	ldr	r3, [pc, #212]	@ (8007dd0 <scalbn+0xf0>)
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f7f8 fc7a 	bl	80005f8 <__aeabi_dmul>
 8007d04:	4b33      	ldr	r3, [pc, #204]	@ (8007dd4 <scalbn+0xf4>)
 8007d06:	429e      	cmp	r6, r3
 8007d08:	4604      	mov	r4, r0
 8007d0a:	460d      	mov	r5, r1
 8007d0c:	da0f      	bge.n	8007d2e <scalbn+0x4e>
 8007d0e:	a328      	add	r3, pc, #160	@ (adr r3, 8007db0 <scalbn+0xd0>)
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	e01e      	b.n	8007d54 <scalbn+0x74>
 8007d16:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007d1a:	4291      	cmp	r1, r2
 8007d1c:	d10b      	bne.n	8007d36 <scalbn+0x56>
 8007d1e:	4622      	mov	r2, r4
 8007d20:	4620      	mov	r0, r4
 8007d22:	4629      	mov	r1, r5
 8007d24:	f7f8 fab2 	bl	800028c <__adddf3>
 8007d28:	4604      	mov	r4, r0
 8007d2a:	460d      	mov	r5, r1
 8007d2c:	e022      	b.n	8007d74 <scalbn+0x94>
 8007d2e:	460b      	mov	r3, r1
 8007d30:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007d34:	3936      	subs	r1, #54	@ 0x36
 8007d36:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007d3a:	4296      	cmp	r6, r2
 8007d3c:	dd0d      	ble.n	8007d5a <scalbn+0x7a>
 8007d3e:	2d00      	cmp	r5, #0
 8007d40:	a11d      	add	r1, pc, #116	@ (adr r1, 8007db8 <scalbn+0xd8>)
 8007d42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d46:	da02      	bge.n	8007d4e <scalbn+0x6e>
 8007d48:	a11d      	add	r1, pc, #116	@ (adr r1, 8007dc0 <scalbn+0xe0>)
 8007d4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d4e:	a31a      	add	r3, pc, #104	@ (adr r3, 8007db8 <scalbn+0xd8>)
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	f7f8 fc50 	bl	80005f8 <__aeabi_dmul>
 8007d58:	e7e6      	b.n	8007d28 <scalbn+0x48>
 8007d5a:	1872      	adds	r2, r6, r1
 8007d5c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007d60:	428a      	cmp	r2, r1
 8007d62:	dcec      	bgt.n	8007d3e <scalbn+0x5e>
 8007d64:	2a00      	cmp	r2, #0
 8007d66:	dd08      	ble.n	8007d7a <scalbn+0x9a>
 8007d68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007d6c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007d70:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007d74:	ec45 4b10 	vmov	d0, r4, r5
 8007d78:	bd70      	pop	{r4, r5, r6, pc}
 8007d7a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007d7e:	da08      	bge.n	8007d92 <scalbn+0xb2>
 8007d80:	2d00      	cmp	r5, #0
 8007d82:	a10b      	add	r1, pc, #44	@ (adr r1, 8007db0 <scalbn+0xd0>)
 8007d84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d88:	dac1      	bge.n	8007d0e <scalbn+0x2e>
 8007d8a:	a10f      	add	r1, pc, #60	@ (adr r1, 8007dc8 <scalbn+0xe8>)
 8007d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d90:	e7bd      	b.n	8007d0e <scalbn+0x2e>
 8007d92:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007d96:	3236      	adds	r2, #54	@ 0x36
 8007d98:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007d9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007da0:	4620      	mov	r0, r4
 8007da2:	4b0d      	ldr	r3, [pc, #52]	@ (8007dd8 <scalbn+0xf8>)
 8007da4:	4629      	mov	r1, r5
 8007da6:	2200      	movs	r2, #0
 8007da8:	e7d4      	b.n	8007d54 <scalbn+0x74>
 8007daa:	bf00      	nop
 8007dac:	f3af 8000 	nop.w
 8007db0:	c2f8f359 	.word	0xc2f8f359
 8007db4:	01a56e1f 	.word	0x01a56e1f
 8007db8:	8800759c 	.word	0x8800759c
 8007dbc:	7e37e43c 	.word	0x7e37e43c
 8007dc0:	8800759c 	.word	0x8800759c
 8007dc4:	fe37e43c 	.word	0xfe37e43c
 8007dc8:	c2f8f359 	.word	0xc2f8f359
 8007dcc:	81a56e1f 	.word	0x81a56e1f
 8007dd0:	43500000 	.word	0x43500000
 8007dd4:	ffff3cb0 	.word	0xffff3cb0
 8007dd8:	3c900000 	.word	0x3c900000
 8007ddc:	00000000 	.word	0x00000000

08007de0 <floor>:
 8007de0:	ec51 0b10 	vmov	r0, r1, d0
 8007de4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007df0:	2e13      	cmp	r6, #19
 8007df2:	460c      	mov	r4, r1
 8007df4:	4605      	mov	r5, r0
 8007df6:	4680      	mov	r8, r0
 8007df8:	dc34      	bgt.n	8007e64 <floor+0x84>
 8007dfa:	2e00      	cmp	r6, #0
 8007dfc:	da17      	bge.n	8007e2e <floor+0x4e>
 8007dfe:	a332      	add	r3, pc, #200	@ (adr r3, 8007ec8 <floor+0xe8>)
 8007e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e04:	f7f8 fa42 	bl	800028c <__adddf3>
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f7f8 fe84 	bl	8000b18 <__aeabi_dcmpgt>
 8007e10:	b150      	cbz	r0, 8007e28 <floor+0x48>
 8007e12:	2c00      	cmp	r4, #0
 8007e14:	da55      	bge.n	8007ec2 <floor+0xe2>
 8007e16:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8007e1a:	432c      	orrs	r4, r5
 8007e1c:	2500      	movs	r5, #0
 8007e1e:	42ac      	cmp	r4, r5
 8007e20:	4c2b      	ldr	r4, [pc, #172]	@ (8007ed0 <floor+0xf0>)
 8007e22:	bf08      	it	eq
 8007e24:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007e28:	4621      	mov	r1, r4
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	e023      	b.n	8007e76 <floor+0x96>
 8007e2e:	4f29      	ldr	r7, [pc, #164]	@ (8007ed4 <floor+0xf4>)
 8007e30:	4137      	asrs	r7, r6
 8007e32:	ea01 0307 	and.w	r3, r1, r7
 8007e36:	4303      	orrs	r3, r0
 8007e38:	d01d      	beq.n	8007e76 <floor+0x96>
 8007e3a:	a323      	add	r3, pc, #140	@ (adr r3, 8007ec8 <floor+0xe8>)
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	f7f8 fa24 	bl	800028c <__adddf3>
 8007e44:	2200      	movs	r2, #0
 8007e46:	2300      	movs	r3, #0
 8007e48:	f7f8 fe66 	bl	8000b18 <__aeabi_dcmpgt>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d0eb      	beq.n	8007e28 <floor+0x48>
 8007e50:	2c00      	cmp	r4, #0
 8007e52:	bfbe      	ittt	lt
 8007e54:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8007e58:	4133      	asrlt	r3, r6
 8007e5a:	18e4      	addlt	r4, r4, r3
 8007e5c:	ea24 0407 	bic.w	r4, r4, r7
 8007e60:	2500      	movs	r5, #0
 8007e62:	e7e1      	b.n	8007e28 <floor+0x48>
 8007e64:	2e33      	cmp	r6, #51	@ 0x33
 8007e66:	dd0a      	ble.n	8007e7e <floor+0x9e>
 8007e68:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8007e6c:	d103      	bne.n	8007e76 <floor+0x96>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	f7f8 fa0b 	bl	800028c <__adddf3>
 8007e76:	ec41 0b10 	vmov	d0, r0, r1
 8007e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e7e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8007e82:	f04f 37ff 	mov.w	r7, #4294967295
 8007e86:	40df      	lsrs	r7, r3
 8007e88:	4207      	tst	r7, r0
 8007e8a:	d0f4      	beq.n	8007e76 <floor+0x96>
 8007e8c:	a30e      	add	r3, pc, #56	@ (adr r3, 8007ec8 <floor+0xe8>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	f7f8 f9fb 	bl	800028c <__adddf3>
 8007e96:	2200      	movs	r2, #0
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f7f8 fe3d 	bl	8000b18 <__aeabi_dcmpgt>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d0c2      	beq.n	8007e28 <floor+0x48>
 8007ea2:	2c00      	cmp	r4, #0
 8007ea4:	da0a      	bge.n	8007ebc <floor+0xdc>
 8007ea6:	2e14      	cmp	r6, #20
 8007ea8:	d101      	bne.n	8007eae <floor+0xce>
 8007eaa:	3401      	adds	r4, #1
 8007eac:	e006      	b.n	8007ebc <floor+0xdc>
 8007eae:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	40b3      	lsls	r3, r6
 8007eb6:	441d      	add	r5, r3
 8007eb8:	4545      	cmp	r5, r8
 8007eba:	d3f6      	bcc.n	8007eaa <floor+0xca>
 8007ebc:	ea25 0507 	bic.w	r5, r5, r7
 8007ec0:	e7b2      	b.n	8007e28 <floor+0x48>
 8007ec2:	2500      	movs	r5, #0
 8007ec4:	462c      	mov	r4, r5
 8007ec6:	e7af      	b.n	8007e28 <floor+0x48>
 8007ec8:	8800759c 	.word	0x8800759c
 8007ecc:	7e37e43c 	.word	0x7e37e43c
 8007ed0:	bff00000 	.word	0xbff00000
 8007ed4:	000fffff 	.word	0x000fffff

08007ed8 <_gettimeofday>:
 8007ed8:	4b02      	ldr	r3, [pc, #8]	@ (8007ee4 <_gettimeofday+0xc>)
 8007eda:	2258      	movs	r2, #88	@ 0x58
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee2:	4770      	bx	lr
 8007ee4:	20000588 	.word	0x20000588

08007ee8 <_init>:
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	bf00      	nop
 8007eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eee:	bc08      	pop	{r3}
 8007ef0:	469e      	mov	lr, r3
 8007ef2:	4770      	bx	lr

08007ef4 <_fini>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	bf00      	nop
 8007ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efa:	bc08      	pop	{r3}
 8007efc:	469e      	mov	lr, r3
 8007efe:	4770      	bx	lr
