
DOOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08006b30  08006b30  00007b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007180  08007180  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  08007180  08007180  00008180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007188  08007188  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007188  08007188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800718c  0800718c  0000818c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007190  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009080  2**0
                  CONTENTS
 10 .bss          000004a8  20000080  20000080  00009080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000528  20000528  00009080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000641e  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a5f  00000000  00000000  0000f4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  00010f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005d9  00000000  00000000  00011708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c471  00000000  00000000  00011ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a937  00000000  00000000  0002e152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1966  00000000  00000000  00038a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000da3ef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b5c  00000000  00000000  000da434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  000dcf90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b18 	.word	0x08006b18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08006b18 	.word	0x08006b18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <initPolygon>:
Player enemy;
int boundX = 1000;
int boundY = 1000;

// Function to initialize a polygon
void initPolygon(Polygon *polygon, int16_t *vertices, int16_t numVertices, int16_t color) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	4611      	mov	r1, r2
 8000c54:	461a      	mov	r2, r3
 8000c56:	460b      	mov	r3, r1
 8000c58:	80fb      	strh	r3, [r7, #6]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	80bb      	strh	r3, [r7, #4]
    polygon->vertices = (int16_t *)malloc(numVertices * 3 * sizeof(int16_t));
 8000c5e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c62:	4613      	mov	r3, r2
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	4413      	add	r3, r2
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 fc18 	bl	80044a0 <malloc>
 8000c70:	4603      	mov	r3, r0
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	601a      	str	r2, [r3, #0]
    if (polygon->vertices == NULL) {
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d105      	bne.n	8000c8c <initPolygon+0x44>
        printf("Error allocating memory for polygon vertices.\n");
 8000c80:	4814      	ldr	r0, [pc, #80]	@ (8000cd4 <initPolygon+0x8c>)
 8000c82:	f003 fddb 	bl	800483c <puts>
        exit(EXIT_FAILURE);
 8000c86:	2001      	movs	r0, #1
 8000c88:	f003 fbf8 	bl	800447c <exit>
    }
    for (int i = 0; i < numVertices * 3; i++) {
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	e00e      	b.n	8000cb0 <initPolygon+0x68>
        polygon->vertices[i] = vertices[i];
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	441a      	add	r2, r3
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	6819      	ldr	r1, [r3, #0]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ca8:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < numVertices * 3; i++) {
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	4413      	add	r3, r2
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	dbe8      	blt.n	8000c92 <initPolygon+0x4a>
    }
    polygon->numVertices = numVertices;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	88fa      	ldrh	r2, [r7, #6]
 8000cc4:	809a      	strh	r2, [r3, #4]
    polygon->color = color;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	88ba      	ldrh	r2, [r7, #4]
 8000cca:	80da      	strh	r2, [r3, #6]
}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	08006b30 	.word	0x08006b30

08000cd8 <addPolygon>:

// Function to add a new polygon to the polygons array
void addPolygon(int16_t *vertices, int16_t numVertices, int16_t color) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	803b      	strh	r3, [r7, #0]
    if (polygonCount >= MAX_POLYGONS) {
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <addPolygon+0x48>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b63      	cmp	r3, #99	@ 0x63
 8000cee:	dd03      	ble.n	8000cf8 <addPolygon+0x20>
        printf("Cannot add more polygons. Maximum limit reached.\n");
 8000cf0:	480c      	ldr	r0, [pc, #48]	@ (8000d24 <addPolygon+0x4c>)
 8000cf2:	f003 fda3 	bl	800483c <puts>
        return;
 8000cf6:	e010      	b.n	8000d1a <addPolygon+0x42>
    }
    initPolygon(&polygons[polygonCount], vertices, numVertices, color);
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <addPolygon+0x48>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <addPolygon+0x50>)
 8000d00:	1898      	adds	r0, r3, r2
 8000d02:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d06:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	f7ff ff9c 	bl	8000c48 <initPolygon>
    polygonCount++;
 8000d10:	4b03      	ldr	r3, [pc, #12]	@ (8000d20 <addPolygon+0x48>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3301      	adds	r3, #1
 8000d16:	4a02      	ldr	r2, [pc, #8]	@ (8000d20 <addPolygon+0x48>)
 8000d18:	6013      	str	r3, [r2, #0]
}
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200003bc 	.word	0x200003bc
 8000d24:	08006b60 	.word	0x08006b60
 8000d28:	2000009c 	.word	0x2000009c

08000d2c <initPolygons>:

    polygonCount--;
}

// Function to initialize polygons from preset map
void initPolygons() {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b09a      	sub	sp, #104	@ 0x68
 8000d30:	af00      	add	r7, sp, #0

	//arena s pouzitim polyline
	for(int8_t i=0; i<5; i++) {
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000d38:	e06d      	b.n	8000e16 <initPolygons+0xea>
		int16_t EastWall3[] = {200+200*i, 0, 0,   200*i, 0, 0,   200*i, 0, 100,   200+200*i, 0, 100};
 8000d3a:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000d3e:	3301      	adds	r3, #1
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	461a      	mov	r2, r3
 8000d44:	0092      	lsls	r2, r2, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	461a      	mov	r2, r3
 8000d4a:	0091      	lsls	r1, r2, #2
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4413      	add	r3, r2
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8000d68:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	461a      	mov	r2, r3
 8000d70:	0092      	lsls	r2, r2, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	461a      	mov	r2, r3
 8000d76:	0091      	lsls	r1, r2, #2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	b21b      	sxth	r3, r3
 8000d84:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8000d94:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	0092      	lsls	r2, r2, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	461a      	mov	r2, r3
 8000da2:	0091      	lsls	r1, r2, #2
 8000da4:	461a      	mov	r2, r3
 8000da6:	460b      	mov	r3, r1
 8000da8:	4413      	add	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8000db4:	2300      	movs	r3, #0
 8000db6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8000dba:	2364      	movs	r3, #100	@ 0x64
 8000dbc:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8000dc0:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	461a      	mov	r2, r3
 8000dca:	0092      	lsls	r2, r2, #2
 8000dcc:	4413      	add	r3, r2
 8000dce:	461a      	mov	r2, r3
 8000dd0:	0091      	lsls	r1, r2, #2
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8000de2:	2300      	movs	r3, #0
 8000de4:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8000de8:	2364      	movs	r3, #100	@ 0x64
 8000dea:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
		addPolygon(EastWall3, 4, decodeRgbValue(255, 255, 0)); // east
 8000dee:	2200      	movs	r2, #0
 8000df0:	21ff      	movs	r1, #255	@ 0xff
 8000df2:	20ff      	movs	r0, #255	@ 0xff
 8000df4:	f001 fc5a 	bl	80026ac <decodeRgbValue>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e00:	2104      	movs	r1, #4
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff68 	bl	8000cd8 <addPolygon>
	for(int8_t i=0; i<5; i++) {
 8000e08:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000e16:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	dd8d      	ble.n	8000d3a <initPolygons+0xe>
	}
	for(int8_t i=0; i<5; i++) {
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8000e24:	e06b      	b.n	8000efe <initPolygons+0x1d2>
		int16_t EastWall4[] = {1000, 200+200*i, 0,   1000, 200*i, 0,   1000, 200*i, 100,   1000, 200+200*i, 100};
 8000e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8000e2c:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000e30:	3301      	adds	r3, #1
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	461a      	mov	r2, r3
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	0091      	lsls	r1, r2, #2
 8000e3e:	461a      	mov	r2, r3
 8000e40:	460b      	mov	r3, r1
 8000e42:	4413      	add	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8000e50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e54:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8000e56:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	0092      	lsls	r2, r2, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	461a      	mov	r2, r3
 8000e64:	0091      	lsls	r1, r2, #2
 8000e66:	461a      	mov	r2, r3
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	b21b      	sxth	r3, r3
 8000e72:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8000e74:	2300      	movs	r3, #0
 8000e76:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8000e78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e7c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8000e80:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	461a      	mov	r2, r3
 8000e88:	0092      	lsls	r2, r2, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	0091      	lsls	r1, r2, #2
 8000e90:	461a      	mov	r2, r3
 8000e92:	460b      	mov	r3, r1
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8000ea0:	2364      	movs	r3, #100	@ 0x64
 8000ea2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8000ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eaa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000eae:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	0092      	lsls	r2, r2, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	0091      	lsls	r1, r2, #2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8000ed0:	2364      	movs	r3, #100	@ 0x64
 8000ed2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		addPolygon(EastWall4, 4, decodeRgbValue(255, 255, 0)); // north
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	21ff      	movs	r1, #255	@ 0xff
 8000eda:	20ff      	movs	r0, #255	@ 0xff
 8000edc:	f001 fbe6 	bl	80026ac <decodeRgbValue>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	b21a      	sxth	r2, r3
 8000ee4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000ee8:	2104      	movs	r1, #4
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fef4 	bl	8000cd8 <addPolygon>
	for(int8_t i=0; i<5; i++) {
 8000ef0:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8000efe:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	dd8f      	ble.n	8000e26 <initPolygons+0xfa>
	}
	for(int8_t i=0; i<5; i++) {
 8000f06:	2300      	movs	r3, #0
 8000f08:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8000f0c:	e06b      	b.n	8000fe6 <initPolygons+0x2ba>
		int16_t EastWall3[] = {800-200*i, 1000, 0,   1000-200*i, 1000, 0,   1000-200*i, 1000, 100,   800-200*i, 1000, 100};
 8000f0e:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	461a      	mov	r2, r3
 8000f16:	0212      	lsls	r2, r2, #8
 8000f18:	1ad2      	subs	r2, r2, r3
 8000f1a:	0092      	lsls	r2, r2, #2
 8000f1c:	441a      	add	r2, r3
 8000f1e:	00d2      	lsls	r2, r2, #3
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	83bb      	strh	r3, [r7, #28]
 8000f30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f34:	83fb      	strh	r3, [r7, #30]
 8000f36:	2300      	movs	r3, #0
 8000f38:	843b      	strh	r3, [r7, #32]
 8000f3a:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	0212      	lsls	r2, r2, #8
 8000f44:	1ad2      	subs	r2, r2, r3
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	441a      	add	r2, r3
 8000f4a:	00d2      	lsls	r2, r2, #3
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000f5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f60:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000f62:	2300      	movs	r3, #0
 8000f64:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000f66:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	0212      	lsls	r2, r2, #8
 8000f70:	1ad2      	subs	r2, r2, r3
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	441a      	add	r2, r3
 8000f76:	00d2      	lsls	r2, r2, #3
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	853b      	strh	r3, [r7, #40]	@ 0x28
 8000f88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f8c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000f8e:	2364      	movs	r3, #100	@ 0x64
 8000f90:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8000f92:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	0212      	lsls	r2, r2, #8
 8000f9c:	1ad2      	subs	r2, r2, r3
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	441a      	add	r2, r3
 8000fa2:	00d2      	lsls	r2, r2, #3
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	b21b      	sxth	r3, r3
 8000fb2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000fb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb8:	863b      	strh	r3, [r7, #48]	@ 0x30
 8000fba:	2364      	movs	r3, #100	@ 0x64
 8000fbc:	867b      	strh	r3, [r7, #50]	@ 0x32
		addPolygon(EastWall3, 4, decodeRgbValue(255, 255, 0)); // west
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	21ff      	movs	r1, #255	@ 0xff
 8000fc2:	20ff      	movs	r0, #255	@ 0xff
 8000fc4:	f001 fb72 	bl	80026ac <decodeRgbValue>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fe80 	bl	8000cd8 <addPolygon>
	for(int8_t i=0; i<5; i++) {
 8000fd8:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	3301      	adds	r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8000fe6:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	dd8f      	ble.n	8000f0e <initPolygons+0x1e2>
	}
	for(int8_t i=0; i<5; i++) {
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8000ff4:	e066      	b.n	80010c4 <initPolygons+0x398>
		int16_t EastWall4[] = {0, 800-200*i, 0,   0, 1000-200*i, 0,   0, 1000-200*i, 100,   0, 800-200*i, 100};
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	80bb      	strh	r3, [r7, #4]
 8000ffa:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	0212      	lsls	r2, r2, #8
 8001004:	1ad2      	subs	r2, r2, r3
 8001006:	0092      	lsls	r2, r2, #2
 8001008:	441a      	add	r2, r3
 800100a:	00d2      	lsls	r2, r2, #3
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	b29b      	uxth	r3, r3
 8001012:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8001016:	b29b      	uxth	r3, r3
 8001018:	b21b      	sxth	r3, r3
 800101a:	80fb      	strh	r3, [r7, #6]
 800101c:	2300      	movs	r3, #0
 800101e:	813b      	strh	r3, [r7, #8]
 8001020:	2300      	movs	r3, #0
 8001022:	817b      	strh	r3, [r7, #10]
 8001024:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001028:	b29b      	uxth	r3, r3
 800102a:	461a      	mov	r2, r3
 800102c:	0212      	lsls	r2, r2, #8
 800102e:	1ad2      	subs	r2, r2, r3
 8001030:	0092      	lsls	r2, r2, #2
 8001032:	441a      	add	r2, r3
 8001034:	00d2      	lsls	r2, r2, #3
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	b29b      	uxth	r3, r3
 800103c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001040:	b29b      	uxth	r3, r3
 8001042:	b21b      	sxth	r3, r3
 8001044:	81bb      	strh	r3, [r7, #12]
 8001046:	2300      	movs	r3, #0
 8001048:	81fb      	strh	r3, [r7, #14]
 800104a:	2300      	movs	r3, #0
 800104c:	823b      	strh	r3, [r7, #16]
 800104e:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 8001052:	b29b      	uxth	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	0212      	lsls	r2, r2, #8
 8001058:	1ad2      	subs	r2, r2, r3
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	441a      	add	r2, r3
 800105e:	00d2      	lsls	r2, r2, #3
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	b29b      	uxth	r3, r3
 8001066:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800106a:	b29b      	uxth	r3, r3
 800106c:	b21b      	sxth	r3, r3
 800106e:	827b      	strh	r3, [r7, #18]
 8001070:	2364      	movs	r3, #100	@ 0x64
 8001072:	82bb      	strh	r3, [r7, #20]
 8001074:	2300      	movs	r3, #0
 8001076:	82fb      	strh	r3, [r7, #22]
 8001078:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 800107c:	b29b      	uxth	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	0212      	lsls	r2, r2, #8
 8001082:	1ad2      	subs	r2, r2, r3
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	441a      	add	r2, r3
 8001088:	00d2      	lsls	r2, r2, #3
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	b29b      	uxth	r3, r3
 8001090:	f503 7348 	add.w	r3, r3, #800	@ 0x320
 8001094:	b29b      	uxth	r3, r3
 8001096:	b21b      	sxth	r3, r3
 8001098:	833b      	strh	r3, [r7, #24]
 800109a:	2364      	movs	r3, #100	@ 0x64
 800109c:	837b      	strh	r3, [r7, #26]
		addPolygon(EastWall4, 4, decodeRgbValue(255, 255, 0)); // south
 800109e:	2200      	movs	r2, #0
 80010a0:	21ff      	movs	r1, #255	@ 0xff
 80010a2:	20ff      	movs	r0, #255	@ 0xff
 80010a4:	f001 fb02 	bl	80026ac <decodeRgbValue>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b21a      	sxth	r2, r3
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2104      	movs	r1, #4
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fe11 	bl	8000cd8 <addPolygon>
	for(int8_t i=0; i<5; i++) {
 80010b6:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	3301      	adds	r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80010c4:	f997 3064 	ldrsb.w	r3, [r7, #100]	@ 0x64
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	dd94      	ble.n	8000ff6 <initPolygons+0x2ca>
	}

}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3768      	adds	r7, #104	@ 0x68
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <initPlayer>:
        free(polygons[i].vertices);
    }
}

// Function to initialize the player
void initPlayer() {
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
	player.x = 100;        // Initial X position
 80010dc:	4b0b      	ldr	r3, [pc, #44]	@ (800110c <initPlayer+0x34>)
 80010de:	4a0c      	ldr	r2, [pc, #48]	@ (8001110 <initPlayer+0x38>)
 80010e0:	601a      	str	r2, [r3, #0]
    player.y = 100;        // Initial Y position
 80010e2:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <initPlayer+0x34>)
 80010e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <initPlayer+0x38>)
 80010e6:	605a      	str	r2, [r3, #4]
    player.z = 50;         // Initial Z position
 80010e8:	4b08      	ldr	r3, [pc, #32]	@ (800110c <initPlayer+0x34>)
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <initPlayer+0x3c>)
 80010ec:	609a      	str	r2, [r3, #8]
    player.rotation = 0.5; // Initial rotation angle
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <initPlayer+0x34>)
 80010f0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80010f4:	60da      	str	r2, [r3, #12]
    player.health = 100;    // Starting health
 80010f6:	4b05      	ldr	r3, [pc, #20]	@ (800110c <initPlayer+0x34>)
 80010f8:	2264      	movs	r2, #100	@ 0x64
 80010fa:	821a      	strh	r2, [r3, #16]
    player.ammo = 50;       // Starting ammo
 80010fc:	4b03      	ldr	r3, [pc, #12]	@ (800110c <initPlayer+0x34>)
 80010fe:	2232      	movs	r2, #50	@ 0x32
 8001100:	825a      	strh	r2, [r3, #18]
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	200003c0 	.word	0x200003c0
 8001110:	42c80000 	.word	0x42c80000
 8001114:	42480000 	.word	0x42480000

08001118 <movePlayer>:

// este to nefunguje uplne na osi Y
void movePlayer(Player *player, float stepX, float stepY) {
 8001118:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800111c:	b084      	sub	sp, #16
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	ed87 0a02 	vstr	s0, [r7, #8]
 8001126:	edc7 0a01 	vstr	s1, [r7, #4]
	player->x += stepX*cos(player->rotation);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fa0a 	bl	8000548 <__aeabi_f2d>
 8001134:	4604      	mov	r4, r0
 8001136:	460d      	mov	r5, r1
 8001138:	68b8      	ldr	r0, [r7, #8]
 800113a:	f7ff fa05 	bl	8000548 <__aeabi_f2d>
 800113e:	4680      	mov	r8, r0
 8001140:	4689      	mov	r9, r1
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9fe 	bl	8000548 <__aeabi_f2d>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	ec43 2b10 	vmov	d0, r2, r3
 8001154:	f004 fb80 	bl	8005858 <cos>
 8001158:	ec53 2b10 	vmov	r2, r3, d0
 800115c:	4640      	mov	r0, r8
 800115e:	4649      	mov	r1, r9
 8001160:	f7ff fa4a 	bl	80005f8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4620      	mov	r0, r4
 800116a:	4629      	mov	r1, r5
 800116c:	f7ff f88e 	bl	800028c <__adddf3>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	f7ff fd16 	bl	8000ba8 <__aeabi_d2f>
 800117c:	4602      	mov	r2, r0
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	601a      	str	r2, [r3, #0]
	player->y += stepX*sin(player->rotation);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f9de 	bl	8000548 <__aeabi_f2d>
 800118c:	4604      	mov	r4, r0
 800118e:	460d      	mov	r5, r1
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f7ff f9d9 	bl	8000548 <__aeabi_f2d>
 8001196:	4680      	mov	r8, r0
 8001198:	4689      	mov	r9, r1
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9d2 	bl	8000548 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	ec43 2b10 	vmov	d0, r2, r3
 80011ac:	f004 fbb0 	bl	8005910 <sin>
 80011b0:	ec53 2b10 	vmov	r2, r3, d0
 80011b4:	4640      	mov	r0, r8
 80011b6:	4649      	mov	r1, r9
 80011b8:	f7ff fa1e 	bl	80005f8 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff f862 	bl	800028c <__adddf3>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fcea 	bl	8000ba8 <__aeabi_d2f>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	605a      	str	r2, [r3, #4]
	player->x += stepY*sin(player->rotation);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9b2 	bl	8000548 <__aeabi_f2d>
 80011e4:	4604      	mov	r4, r0
 80011e6:	460d      	mov	r5, r1
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff f9ad 	bl	8000548 <__aeabi_f2d>
 80011ee:	4680      	mov	r8, r0
 80011f0:	4689      	mov	r9, r1
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f9a6 	bl	8000548 <__aeabi_f2d>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	ec43 2b10 	vmov	d0, r2, r3
 8001204:	f004 fb84 	bl	8005910 <sin>
 8001208:	ec53 2b10 	vmov	r2, r3, d0
 800120c:	4640      	mov	r0, r8
 800120e:	4649      	mov	r1, r9
 8001210:	f7ff f9f2 	bl	80005f8 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff f836 	bl	800028c <__adddf3>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fcbe 	bl	8000ba8 <__aeabi_d2f>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	601a      	str	r2, [r3, #0]
	player->y += stepY*cos(player->rotation);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f986 	bl	8000548 <__aeabi_f2d>
 800123c:	4604      	mov	r4, r0
 800123e:	460d      	mov	r5, r1
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff f981 	bl	8000548 <__aeabi_f2d>
 8001246:	4680      	mov	r8, r0
 8001248:	4689      	mov	r9, r1
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f97a 	bl	8000548 <__aeabi_f2d>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	ec43 2b10 	vmov	d0, r2, r3
 800125c:	f004 fafc 	bl	8005858 <cos>
 8001260:	ec53 2b10 	vmov	r2, r3, d0
 8001264:	4640      	mov	r0, r8
 8001266:	4649      	mov	r1, r9
 8001268:	f7ff f9c6 	bl	80005f8 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f80a 	bl	800028c <__adddf3>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fc92 	bl	8000ba8 <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	605a      	str	r2, [r3, #4]
	if ((player->x > boundX)||(player->x < 0)) {	//when hitting wall the player slides
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	ed93 7a00 	vldr	s14, [r3]
 8001290:	4b43      	ldr	r3, [pc, #268]	@ (80013a0 <movePlayer+0x288>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a4:	dc07      	bgt.n	80012b6 <movePlayer+0x19e>
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b4:	d52b      	bpl.n	800130e <movePlayer+0x1f6>
		player->x -= stepX*cos(player->rotation);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f944 	bl	8000548 <__aeabi_f2d>
 80012c0:	4604      	mov	r4, r0
 80012c2:	460d      	mov	r5, r1
 80012c4:	68b8      	ldr	r0, [r7, #8]
 80012c6:	f7ff f93f 	bl	8000548 <__aeabi_f2d>
 80012ca:	4680      	mov	r8, r0
 80012cc:	4689      	mov	r9, r1
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f938 	bl	8000548 <__aeabi_f2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	ec43 2b10 	vmov	d0, r2, r3
 80012e0:	f004 faba 	bl	8005858 <cos>
 80012e4:	ec53 2b10 	vmov	r2, r3, d0
 80012e8:	4640      	mov	r0, r8
 80012ea:	4649      	mov	r1, r9
 80012ec:	f7ff f984 	bl	80005f8 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4620      	mov	r0, r4
 80012f6:	4629      	mov	r1, r5
 80012f8:	f7fe ffc6 	bl	8000288 <__aeabi_dsub>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f7ff fc50 	bl	8000ba8 <__aeabi_d2f>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	601a      	str	r2, [r3, #0]
	}
	if ((player->y > boundY)||(player->y < 0)) {
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	ed93 7a01 	vldr	s14, [r3, #4]
 8001314:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <movePlayer+0x28c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	ee07 3a90 	vmov	s15, r3
 800131c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001320:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001328:	dc08      	bgt.n	800133c <movePlayer+0x224>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001330:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001338:	d400      	bmi.n	800133c <movePlayer+0x224>
			player->y -= stepX*sin(player->rotation);
	}
}
 800133a:	e02b      	b.n	8001394 <movePlayer+0x27c>
			player->y -= stepX*sin(player->rotation);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f901 	bl	8000548 <__aeabi_f2d>
 8001346:	4604      	mov	r4, r0
 8001348:	460d      	mov	r5, r1
 800134a:	68b8      	ldr	r0, [r7, #8]
 800134c:	f7ff f8fc 	bl	8000548 <__aeabi_f2d>
 8001350:	4680      	mov	r8, r0
 8001352:	4689      	mov	r9, r1
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f8f5 	bl	8000548 <__aeabi_f2d>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	ec43 2b10 	vmov	d0, r2, r3
 8001366:	f004 fad3 	bl	8005910 <sin>
 800136a:	ec53 2b10 	vmov	r2, r3, d0
 800136e:	4640      	mov	r0, r8
 8001370:	4649      	mov	r1, r9
 8001372:	f7ff f941 	bl	80005f8 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4620      	mov	r0, r4
 800137c:	4629      	mov	r1, r5
 800137e:	f7fe ff83 	bl	8000288 <__aeabi_dsub>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f7ff fc0d 	bl	8000ba8 <__aeabi_d2f>
 800138e:	4602      	mov	r2, r0
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	605a      	str	r2, [r3, #4]
}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800139e:	bf00      	nop
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000004 	.word	0x20000004

080013a8 <rotatePlayer>:

void rotatePlayer(Player *player, float angle) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	ed87 0a00 	vstr	s0, [r7]
	player->rotation += angle;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80013ba:	edd7 7a00 	vldr	s15, [r7]
 80013be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	edc3 7a03 	vstr	s15, [r3, #12]
	if (player->rotation > 3.1416) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8bb 	bl	8000548 <__aeabi_f2d>
 80013d2:	a321      	add	r3, pc, #132	@ (adr r3, 8001458 <rotatePlayer+0xb0>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	f7ff fb9e 	bl	8000b18 <__aeabi_dcmpgt>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d012      	beq.n	8001408 <rotatePlayer+0x60>
		player->rotation -= 6.2832;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff f8ae 	bl	8000548 <__aeabi_f2d>
 80013ec:	a31c      	add	r3, pc, #112	@ (adr r3, 8001460 <rotatePlayer+0xb8>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7fe ff49 	bl	8000288 <__aeabi_dsub>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f7ff fbd3 	bl	8000ba8 <__aeabi_d2f>
 8001402:	4602      	mov	r2, r0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	60da      	str	r2, [r3, #12]
	}
	if (player->rotation < -3.1416) {
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f89b 	bl	8000548 <__aeabi_f2d>
 8001412:	a315      	add	r3, pc, #84	@ (adr r3, 8001468 <rotatePlayer+0xc0>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff fb60 	bl	8000adc <__aeabi_dcmplt>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d100      	bne.n	8001424 <rotatePlayer+0x7c>
		player->rotation += 6.2832;
	}
}
 8001422:	e012      	b.n	800144a <rotatePlayer+0xa2>
		player->rotation += 6.2832;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f88d 	bl	8000548 <__aeabi_f2d>
 800142e:	a30c      	add	r3, pc, #48	@ (adr r3, 8001460 <rotatePlayer+0xb8>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7fe ff2a 	bl	800028c <__adddf3>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fbb2 	bl	8000ba8 <__aeabi_d2f>
 8001444:	4602      	mov	r2, r0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	60da      	str	r2, [r3, #12]
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	f3af 8000 	nop.w
 8001458:	2e48e8a7 	.word	0x2e48e8a7
 800145c:	400921ff 	.word	0x400921ff
 8001460:	2e48e8a7 	.word	0x2e48e8a7
 8001464:	401921ff 	.word	0x401921ff
 8001468:	2e48e8a7 	.word	0x2e48e8a7
 800146c:	c00921ff 	.word	0xc00921ff

08001470 <startNewGame>:

void startNewGame(int16_t difficility){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
	initPolygons(0);
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff fc56 	bl	8000d2c <initPolygons>
	initPlayer(0);
 8001480:	2000      	movs	r0, #0
 8001482:	f7ff fe29 	bl	80010d8 <initPlayer>
	gameLoop();
 8001486:	f000 f805 	bl	8001494 <gameLoop>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <gameLoop>:

void gameLoop(){
 8001494:	b5b0      	push	{r4, r5, r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af02      	add	r7, sp, #8
	// in this loop we walk down the hallway and at the end we turn back
	int8_t step = 5;	// kazdych 10 pixelov bude bodka
 800149a:	2305      	movs	r3, #5
 800149c:	71fb      	strb	r3, [r7, #7]

	lcdPutS("test 3D rendera:", 220, 10, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 800149e:	221f      	movs	r2, #31
 80014a0:	211f      	movs	r1, #31
 80014a2:	201f      	movs	r0, #31
 80014a4:	f001 f902 	bl	80026ac <decodeRgbValue>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461c      	mov	r4, r3
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	2000      	movs	r0, #0
 80014b2:	f001 f8fb 	bl	80026ac <decodeRgbValue>
 80014b6:	4603      	mov	r3, r0
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	4623      	mov	r3, r4
 80014bc:	220a      	movs	r2, #10
 80014be:	21dc      	movs	r1, #220	@ 0xdc
 80014c0:	4864      	ldr	r0, [pc, #400]	@ (8001654 <gameLoop+0x1c0>)
 80014c2:	f001 f90f 	bl	80026e4 <lcdPutS>
	lcdRectangle(20, 225, 300, 250, decodeRgbValue(255, 255, 255)); //dolny status bar
 80014c6:	22ff      	movs	r2, #255	@ 0xff
 80014c8:	21ff      	movs	r1, #255	@ 0xff
 80014ca:	20ff      	movs	r0, #255	@ 0xff
 80014cc:	f001 f8ee 	bl	80026ac <decodeRgbValue>
 80014d0:	4603      	mov	r3, r0
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	23fa      	movs	r3, #250	@ 0xfa
 80014d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014da:	21e1      	movs	r1, #225	@ 0xe1
 80014dc:	2014      	movs	r0, #20
 80014de:	f000 fde6 	bl	80020ae <lcdRectangle>
	lcdCircle(160,232,5,decodeRgbValue(255, 255, 255)); //akysi kruh, v povodnej doom je tam hlava hraca
 80014e2:	22ff      	movs	r2, #255	@ 0xff
 80014e4:	21ff      	movs	r1, #255	@ 0xff
 80014e6:	20ff      	movs	r0, #255	@ 0xff
 80014e8:	f001 f8e0 	bl	80026ac <decodeRgbValue>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2205      	movs	r2, #5
 80014f0:	21e8      	movs	r1, #232	@ 0xe8
 80014f2:	20a0      	movs	r0, #160	@ 0xa0
 80014f4:	f000 fec2 	bl	800227c <lcdCircle>
	int16_t kills2win = 1; // podmienka na skoncenie levelu, zavisi od obtiaznosti
 80014f8:	2301      	movs	r3, #1
 80014fa:	80bb      	strh	r3, [r7, #4]
	int16_t kills = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	807b      	strh	r3, [r7, #2]

	while(kills < kills2win){
 8001500:	e09b      	b.n	800163a <gameLoop+0x1a6>


		// vykreslovanie mapy
		for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e02d      	b.n	8001564 <gameLoop+0xd0>
			lcd3DPolyline(polygons[i].vertices, polygons[i].numVertices, polygons[i].color, player.x, player.y, player.z, player.rotation, 1, step);
 8001508:	4a53      	ldr	r2, [pc, #332]	@ (8001658 <gameLoop+0x1c4>)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001510:	4a51      	ldr	r2, [pc, #324]	@ (8001658 <gameLoop+0x1c4>)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800151c:	4a4e      	ldr	r2, [pc, #312]	@ (8001658 <gameLoop+0x1c4>)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4413      	add	r3, r2
 8001524:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001528:	b29a      	uxth	r2, r3
 800152a:	4b4c      	ldr	r3, [pc, #304]	@ (800165c <gameLoop+0x1c8>)
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	4b4a      	ldr	r3, [pc, #296]	@ (800165c <gameLoop+0x1c8>)
 8001532:	ed93 7a01 	vldr	s14, [r3, #4]
 8001536:	4b49      	ldr	r3, [pc, #292]	@ (800165c <gameLoop+0x1c8>)
 8001538:	edd3 6a02 	vldr	s13, [r3, #8]
 800153c:	4b47      	ldr	r3, [pc, #284]	@ (800165c <gameLoop+0x1c8>)
 800153e:	ed93 6a03 	vldr	s12, [r3, #12]
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2301      	movs	r3, #1
 800154a:	eef0 1a46 	vmov.f32	s3, s12
 800154e:	eeb0 1a66 	vmov.f32	s2, s13
 8001552:	eef0 0a47 	vmov.f32	s1, s14
 8001556:	eeb0 0a67 	vmov.f32	s0, s15
 800155a:	f001 fb7b 	bl	8002c54 <lcd3DPolyline>
		for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3301      	adds	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	4b3e      	ldr	r3, [pc, #248]	@ (8001660 <gameLoop+0x1cc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	429a      	cmp	r2, r3
 800156c:	dbcc      	blt.n	8001508 <gameLoop+0x74>
		}
		for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	e02f      	b.n	80015d4 <gameLoop+0x140>
			lcd3DPolyline(polygons[i].vertices, polygons[i].numVertices, decodeRgbValue(0, 0, 0), player.x, player.y, player.z, player.rotation, 1, step);
 8001574:	4a38      	ldr	r2, [pc, #224]	@ (8001658 <gameLoop+0x1c4>)
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800157c:	4a36      	ldr	r2, [pc, #216]	@ (8001658 <gameLoop+0x1c4>)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4413      	add	r3, r2
 8001584:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	2000      	movs	r0, #0
 800158e:	f001 f88d 	bl	80026ac <decodeRgbValue>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	4b31      	ldr	r3, [pc, #196]	@ (800165c <gameLoop+0x1c8>)
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	4b2f      	ldr	r3, [pc, #188]	@ (800165c <gameLoop+0x1c8>)
 800159e:	ed93 7a01 	vldr	s14, [r3, #4]
 80015a2:	4b2e      	ldr	r3, [pc, #184]	@ (800165c <gameLoop+0x1c8>)
 80015a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80015a8:	4b2c      	ldr	r3, [pc, #176]	@ (800165c <gameLoop+0x1c8>)
 80015aa:	ed93 6a03 	vldr	s12, [r3, #12]
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2301      	movs	r3, #1
 80015b6:	eef0 1a46 	vmov.f32	s3, s12
 80015ba:	eeb0 1a66 	vmov.f32	s2, s13
 80015be:	eef0 0a47 	vmov.f32	s1, s14
 80015c2:	eeb0 0a67 	vmov.f32	s0, s15
 80015c6:	4629      	mov	r1, r5
 80015c8:	4620      	mov	r0, r4
 80015ca:	f001 fb43 	bl	8002c54 <lcd3DPolyline>
		for (int i = 0; i < polygonCount; i++) {	//nakresli mapu so stenami
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	3301      	adds	r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
 80015d4:	4b22      	ldr	r3, [pc, #136]	@ (8001660 <gameLoop+0x1cc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	429a      	cmp	r2, r3
 80015dc:	dbca      	blt.n	8001574 <gameLoop+0xe0>


		//cez joystick
		// treba zistit v akom formate su vystupy z jousticku a ake maju hodnoty
		// domnievam za, ze je to od 0 do nieco, asi 255.
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) > 603){
 80015de:	2102      	movs	r1, #2
 80015e0:	4820      	ldr	r0, [pc, #128]	@ (8001664 <gameLoop+0x1d0>)
 80015e2:	f002 fcd1 	bl	8003f88 <HAL_GPIO_ReadPin>
			movePlayer(&player, 50, 0);
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) < 503){
 80015e6:	2102      	movs	r1, #2
 80015e8:	481e      	ldr	r0, [pc, #120]	@ (8001664 <gameLoop+0x1d0>)
 80015ea:	f002 fccd 	bl	8003f88 <HAL_GPIO_ReadPin>
			movePlayer(&player, -50, 0);
 80015ee:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8001668 <gameLoop+0x1d4>
 80015f2:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 800166c <gameLoop+0x1d8>
 80015f6:	4819      	ldr	r0, [pc, #100]	@ (800165c <gameLoop+0x1c8>)
 80015f8:	f7ff fd8e 	bl	8001118 <movePlayer>
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0) > 603){
 80015fc:	2101      	movs	r1, #1
 80015fe:	4819      	ldr	r0, [pc, #100]	@ (8001664 <gameLoop+0x1d0>)
 8001600:	f002 fcc2 	bl	8003f88 <HAL_GPIO_ReadPin>
			movePlayer(&player, 50, 0);
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0) < 503){
 8001604:	2101      	movs	r1, #1
 8001606:	4817      	ldr	r0, [pc, #92]	@ (8001664 <gameLoop+0x1d0>)
 8001608:	f002 fcbe 	bl	8003f88 <HAL_GPIO_ReadPin>
			movePlayer(&player, -50, 0);
 800160c:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8001668 <gameLoop+0x1d4>
 8001610:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800166c <gameLoop+0x1d8>
 8001614:	4811      	ldr	r0, [pc, #68]	@ (800165c <gameLoop+0x1c8>)
 8001616:	f7ff fd7f 	bl	8001118 <movePlayer>
		}
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) == GPIO_PIN_RESET){
 800161a:	2102      	movs	r1, #2
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <gameLoop+0x1d0>)
 800161e:	f002 fcb3 	bl	8003f88 <HAL_GPIO_ReadPin>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d104      	bne.n	8001632 <gameLoop+0x19e>
			rotatePlayer(&player, +3.1416/10);
 8001628:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8001670 <gameLoop+0x1dc>
 800162c:	480b      	ldr	r0, [pc, #44]	@ (800165c <gameLoop+0x1c8>)
 800162e:	f7ff febb 	bl	80013a8 <rotatePlayer>
		}

		//nejako takto si predstavujem menu pocas hry
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0) < 0){
 8001632:	2101      	movs	r1, #1
 8001634:	480b      	ldr	r0, [pc, #44]	@ (8001664 <gameLoop+0x1d0>)
 8001636:	f002 fca7 	bl	8003f88 <HAL_GPIO_ReadPin>
	while(kills < kills2win){
 800163a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800163e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	f6ff af5d 	blt.w	8001502 <gameLoop+0x6e>
			// gamemenu();
		}


	}
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bdb0      	pop	{r4, r5, r7, pc}
 8001652:	bf00      	nop
 8001654:	08006bac 	.word	0x08006bac
 8001658:	2000009c 	.word	0x2000009c
 800165c:	200003c0 	.word	0x200003c0
 8001660:	200003bc 	.word	0x200003bc
 8001664:	48000400 	.word	0x48000400
 8001668:	00000000 	.word	0x00000000
 800166c:	c2480000 	.word	0xc2480000
 8001670:	3ea0d994 	.word	0x3ea0d994

08001674 <LL_SYSCFG_EnableFastModePlus>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <LL_SYSCFG_EnableFastModePlus+0x20>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4904      	ldr	r1, [pc, #16]	@ (8001694 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4313      	orrs	r3, r2
 8001686:	600b      	str	r3, [r1, #0]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	40010000 	.word	0x40010000

08001698 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80016bc:	4b08      	ldr	r3, [pc, #32]	@ (80016e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	4907      	ldr	r1, [pc, #28]	@ (80016e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016ca:	695a      	ldr	r2, [r3, #20]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4013      	ands	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	40021000 	.word	0x40021000

080016e4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0

	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ea:	463b      	mov	r3, r7
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
 80016f8:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80016fa:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80016fe:	f7ff ffd9 	bl	80016b4 <LL_AHB1_GRP1_EnableClock>
	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001702:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001706:	f7ff ffd5 	bl	80016b4 <LL_AHB1_GRP1_EnableClock>
	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800170a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800170e:	f7ff ffd1 	bl	80016b4 <LL_AHB1_GRP1_EnableClock>

	  /**/
	  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4);
 8001712:	2118      	movs	r1, #24
 8001714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001718:	f7ff ffbe 	bl	8001698 <LL_GPIO_ResetOutputPin>

	  /**/
	  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6);
 800171c:	2170      	movs	r1, #112	@ 0x70
 800171e:	4821      	ldr	r0, [pc, #132]	@ (80017a4 <MX_GPIO_Init+0xc0>)
 8001720:	f7ff ffba 	bl	8001698 <LL_GPIO_ResetOutputPin>

	  /**/
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4;
 8001724:	2318      	movs	r3, #24
 8001726:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001728:	2301      	movs	r3, #1
 800172a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
	  //GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	463b      	mov	r3, r7
 800173a:	4619      	mov	r1, r3
 800173c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001740:	f002 fd3f 	bl	80041c2 <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_7;
 8001744:	238b      	movs	r3, #139	@ 0x8b
 8001746:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001750:	463b      	mov	r3, r7
 8001752:	4619      	mov	r1, r3
 8001754:	4813      	ldr	r0, [pc, #76]	@ (80017a4 <MX_GPIO_Init+0xc0>)
 8001756:	f002 fd34 	bl	80041c2 <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 800175a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800175e:	603b      	str	r3, [r7, #0]
	                          |LL_GPIO_PIN_12;
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	463b      	mov	r3, r7
 800176a:	4619      	mov	r1, r3
 800176c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001770:	f002 fd27 	bl	80041c2 <LL_GPIO_Init>

	  /**/
	  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6;
 8001774:	2370      	movs	r3, #112	@ 0x70
 8001776:	603b      	str	r3, [r7, #0]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001778:	2301      	movs	r3, #1
 800177a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
	  //GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
	  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001788:	463b      	mov	r3, r7
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_GPIO_Init+0xc0>)
 800178e:	f002 fd18 	bl	80041c2 <LL_GPIO_Init>

	  /**/
	  LL_SYSCFG_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8001792:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8001796:	f7ff ff6d 	bl	8001674 <LL_SYSCFG_EnableFastModePlus>

}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	48000400 	.word	0x48000400

080017a8 <lcdReset>:

// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	res_reset();
 80017ac:	f002 faa6 	bl	8003cfc <res_reset>
	LL_mDelay(100);
 80017b0:	2064      	movs	r0, #100	@ 0x64
 80017b2:	f002 fe2d 	bl	8004410 <LL_mDelay>

	res_set();
 80017b6:	f002 fa98 	bl	8003cea <res_set>
	LL_mDelay(100);
 80017ba:	2064      	movs	r0, #100	@ 0x64
 80017bc:	f002 fe28 	bl	8004410 <LL_mDelay>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address) //urcuje obsah nasledujucich write data/parameter
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
	cd_reset();
 80017ce:	f002 fa7b 	bl	8003cc8 <cd_reset>
	cs_reset();
 80017d2:	f002 fa5d 	bl	8003c90 <cs_reset>
	readWriteSPI1(address);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f002 fa25 	bl	8003c28 <readWriteSPI1>
	cs_set();
 80017de:	f002 fa4d 	bl	8003c7c <cs_set>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <lcdWriteParameter>:

void lcdWriteParameter(int8_t parameter) //tymto sa zapisuju rozne veci
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
	cd_set();
 80017f4:	f002 fa5e 	bl	8003cb4 <cd_set>
	cs_reset();
 80017f8:	f002 fa4a 	bl	8003c90 <cs_reset>
	readWriteSPI1(parameter);
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 fa12 	bl	8003c28 <readWriteSPI1>
	cs_set();
 8001804:	f002 fa3a 	bl	8003c7c <cs_set>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2)  //tymto sa zapisuje farba
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	460a      	mov	r2, r1
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	4613      	mov	r3, r2
 800181e:	71bb      	strb	r3, [r7, #6]
	cd_set();
 8001820:	f002 fa48 	bl	8003cb4 <cd_set>
	cs_reset();
 8001824:	f002 fa34 	bl	8003c90 <cs_reset>
	readWriteSPI1(dataByte1); //posielame samostatne dva bajty o farbe
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	4618      	mov	r0, r3
 800182c:	f002 f9fc 	bl	8003c28 <readWriteSPI1>
	readWriteSPI1(dataByte2);
 8001830:	79bb      	ldrb	r3, [r7, #6]
 8001832:	4618      	mov	r0, r3
 8001834:	f002 f9f8 	bl	8003c28 <readWriteSPI1>
	cs_set();
 8001838:	f002 fa20 	bl	8003c7c <cs_set>
}
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <lcdInitialise>:

void lcdInitialise(uint8_t orientation)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD


	// Hardware reset the LCD
	lcdReset();
 800184e:	f7ff ffab 	bl	80017a8 <lcdReset>

    lcdWriteCommand(EXIT_SLEEP_MODE);
 8001852:	2011      	movs	r0, #17
 8001854:	f7ff ffb6 	bl	80017c4 <lcdWriteCommand>
    LL_mDelay(100); //Delay(10000); // Wait for the screen to wake up
 8001858:	2064      	movs	r0, #100	@ 0x64
 800185a:	f002 fdd9 	bl	8004410 <LL_mDelay>

    lcdWriteCommand(SET_PIXEL_FORMAT);
 800185e:	203a      	movs	r0, #58	@ 0x3a
 8001860:	f7ff ffb0 	bl	80017c4 <lcdWriteCommand>
    lcdWriteParameter(0x05); // 16 bits per pixel
 8001864:	2005      	movs	r0, #5
 8001866:	f7ff ffc0 	bl	80017ea <lcdWriteParameter>

    lcdWriteCommand(SET_GAMMA_CURVE);
 800186a:	2026      	movs	r0, #38	@ 0x26
 800186c:	f7ff ffaa 	bl	80017c4 <lcdWriteCommand>
    lcdWriteParameter(0x04); // Select gamma curve 3
 8001870:	2004      	movs	r0, #4
 8001872:	f7ff ffba 	bl	80017ea <lcdWriteParameter>

    lcdWriteCommand(GAM_R_SEL);
 8001876:	20f2      	movs	r0, #242	@ 0xf2
 8001878:	f7ff ffa4 	bl	80017c4 <lcdWriteCommand>
    lcdWriteParameter(0x01); // Gamma adjustment enabled
 800187c:	2001      	movs	r0, #1
 800187e:	f7ff ffb4 	bl	80017ea <lcdWriteParameter>

    lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 8001882:	20e0      	movs	r0, #224	@ 0xe0
 8001884:	f7ff ff9e 	bl	80017c4 <lcdWriteCommand>
    lcdWriteParameter(0x3f); // 1st Parameter
 8001888:	203f      	movs	r0, #63	@ 0x3f
 800188a:	f7ff ffae 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x25); // 2nd Parameter
 800188e:	2025      	movs	r0, #37	@ 0x25
 8001890:	f7ff ffab 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x1c); // 3rd Parameter
 8001894:	201c      	movs	r0, #28
 8001896:	f7ff ffa8 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x1e); // 4th Parameter
 800189a:	201e      	movs	r0, #30
 800189c:	f7ff ffa5 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x20); // 5th Parameter
 80018a0:	2020      	movs	r0, #32
 80018a2:	f7ff ffa2 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x12); // 6th Parameter
 80018a6:	2012      	movs	r0, #18
 80018a8:	f7ff ff9f 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 7th Parameter
 80018ac:	202a      	movs	r0, #42	@ 0x2a
 80018ae:	f7ff ff9c 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x90); // 8th Parameter
 80018b2:	f06f 006f 	mvn.w	r0, #111	@ 0x6f
 80018b6:	f7ff ff98 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x24); // 9th Parameter
 80018ba:	2024      	movs	r0, #36	@ 0x24
 80018bc:	f7ff ff95 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x11); // 10th Parameter
 80018c0:	2011      	movs	r0, #17
 80018c2:	f7ff ff92 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x00); // 11th Parameter
 80018c6:	2000      	movs	r0, #0
 80018c8:	f7ff ff8f 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x00); // 12th Parameter
 80018cc:	2000      	movs	r0, #0
 80018ce:	f7ff ff8c 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x00); // 13th Parameter
 80018d2:	2000      	movs	r0, #0
 80018d4:	f7ff ff89 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x00); // 14th Parameter
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff ff86 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x00); // 15th Parameter
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff ff83 	bl	80017ea <lcdWriteParameter>

    lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 80018e4:	20e1      	movs	r0, #225	@ 0xe1
 80018e6:	f7ff ff6d 	bl	80017c4 <lcdWriteCommand>
    lcdWriteParameter(0x20); // 1st Parameter
 80018ea:	2020      	movs	r0, #32
 80018ec:	f7ff ff7d 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x20); // 2nd Parameter
 80018f0:	2020      	movs	r0, #32
 80018f2:	f7ff ff7a 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x20); // 3rd Parameter
 80018f6:	2020      	movs	r0, #32
 80018f8:	f7ff ff77 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x20); // 4th Parameter
 80018fc:	2020      	movs	r0, #32
 80018fe:	f7ff ff74 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x05); // 5th Parameter
 8001902:	2005      	movs	r0, #5
 8001904:	f7ff ff71 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x00); // 6th Parameter
 8001908:	2000      	movs	r0, #0
 800190a:	f7ff ff6e 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x15); // 7th Parameter
 800190e:	2015      	movs	r0, #21
 8001910:	f7ff ff6b 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0xa7); // 8th Parameter
 8001914:	f06f 0058 	mvn.w	r0, #88	@ 0x58
 8001918:	f7ff ff67 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x3d); // 9th Parameter
 800191c:	203d      	movs	r0, #61	@ 0x3d
 800191e:	f7ff ff64 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x18); // 10th Parameter
 8001922:	2018      	movs	r0, #24
 8001924:	f7ff ff61 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x25); // 11th Parameter
 8001928:	2025      	movs	r0, #37	@ 0x25
 800192a:	f7ff ff5e 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 12th Parameter
 800192e:	202a      	movs	r0, #42	@ 0x2a
 8001930:	f7ff ff5b 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 13th Parameter
 8001934:	202b      	movs	r0, #43	@ 0x2b
 8001936:	f7ff ff58 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 14th Parameter
 800193a:	202b      	movs	r0, #43	@ 0x2b
 800193c:	f7ff ff55 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x3a); // 15th Parameter
 8001940:	203a      	movs	r0, #58	@ 0x3a
 8001942:	f7ff ff52 	bl	80017ea <lcdWriteParameter>

    lcdWriteCommand(FRAME_RATE_CONTROL1);
 8001946:	20b1      	movs	r0, #177	@ 0xb1
 8001948:	f7ff ff3c 	bl	80017c4 <lcdWriteCommand>
    lcdWriteParameter(0x08); // DIVA = 8
 800194c:	2008      	movs	r0, #8
 800194e:	f7ff ff4c 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x08); // VPA = 8
 8001952:	2008      	movs	r0, #8
 8001954:	f7ff ff49 	bl	80017ea <lcdWriteParameter>

    lcdWriteCommand(DISPLAY_INVERSION);
 8001958:	20b4      	movs	r0, #180	@ 0xb4
 800195a:	f7ff ff33 	bl	80017c4 <lcdWriteCommand>
    lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 800195e:	2007      	movs	r0, #7
 8001960:	f7ff ff43 	bl	80017ea <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL1);
 8001964:	20c0      	movs	r0, #192	@ 0xc0
 8001966:	f7ff ff2d 	bl	80017c4 <lcdWriteCommand>
    lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 800196a:	200a      	movs	r0, #10
 800196c:	f7ff ff3d 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 8001970:	2002      	movs	r0, #2
 8001972:	f7ff ff3a 	bl	80017ea <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL2);
 8001976:	20c1      	movs	r0, #193	@ 0xc1
 8001978:	f7ff ff24 	bl	80017c4 <lcdWriteCommand>
    lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 800197c:	2002      	movs	r0, #2
 800197e:	f7ff ff34 	bl	80017ea <lcdWriteParameter>

    lcdWriteCommand(VCOM_CONTROL1);
 8001982:	20c5      	movs	r0, #197	@ 0xc5
 8001984:	f7ff ff1e 	bl	80017c4 <lcdWriteCommand>
    lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 8001988:	2050      	movs	r0, #80	@ 0x50
 800198a:	f7ff ff2e 	bl	80017ea <lcdWriteParameter>
    lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 800198e:	205b      	movs	r0, #91	@ 0x5b
 8001990:	f7ff ff2b 	bl	80017ea <lcdWriteParameter>

    lcdWriteCommand(VCOM_OFFSET_CONTROL);
 8001994:	20c7      	movs	r0, #199	@ 0xc7
 8001996:	f7ff ff15 	bl	80017c4 <lcdWriteCommand>
    lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 800199a:	2040      	movs	r0, #64	@ 0x40
 800199c:	f7ff ff25 	bl	80017ea <lcdWriteParameter>

    // here we set orientation for every pixel (first we define addresses)
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 80019a0:	202a      	movs	r0, #42	@ 0x2a
 80019a2:	f7ff ff0f 	bl	80017c4 <lcdWriteCommand>
	lcdWriteParameter(0x00); // X high start byte
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff ff1f 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0x00); // X low start byte
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff ff1c 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0x01); // X high end byte
 80019b2:	2001      	movs	r0, #1
 80019b4:	f7ff ff19 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0x3F); // X low end byte - 319
 80019b8:	203f      	movs	r0, #63	@ 0x3f
 80019ba:	f7ff ff16 	bl	80017ea <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS);
 80019be:	202b      	movs	r0, #43	@ 0x2b
 80019c0:	f7ff ff00 	bl	80017c4 <lcdWriteCommand>
	lcdWriteParameter(0x00); // Y high start byte
 80019c4:	2000      	movs	r0, #0
 80019c6:	f7ff ff10 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0x00); // Y low start byte
 80019ca:	2000      	movs	r0, #0
 80019cc:	f7ff ff0d 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0x00); // Y high end byte
 80019d0:	2000      	movs	r0, #0
 80019d2:	f7ff ff0a 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0xEF); // Y low end byte (239, 0x00EF in hex)
 80019d6:	f06f 0010 	mvn.w	r0, #16
 80019da:	f7ff ff06 	bl	80017ea <lcdWriteParameter>

	// Select display orientation
    lcdWriteCommand(SET_ADDRESS_MODE);
 80019de:	2036      	movs	r0, #54	@ 0x36
 80019e0:	f7ff fef0 	bl	80017c4 <lcdWriteCommand>
	lcdWriteParameter(orientation);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fefe 	bl	80017ea <lcdWriteParameter>

	// Set the display to on
    lcdWriteCommand(SET_DISPLAY_ON);
 80019ee:	2029      	movs	r0, #41	@ 0x29
 80019f0:	f7ff fee8 	bl	80017c4 <lcdWriteCommand>
    lcdWriteCommand(WRITE_MEMORY_START);
 80019f4:	202c      	movs	r0, #44	@ 0x2c
 80019f6:	f7ff fee5 	bl	80017c4 <lcdWriteCommand>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <lcdClearDisplay>:

// LCD graphics functions -----------------------------------------------------------------------------------

void lcdClearDisplay(uint16_t colour)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
	uint32_t pixel;

	// Set the column address to 0-319
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 8001a0e:	202a      	movs	r0, #42	@ 0x2a
 8001a10:	f7ff fed8 	bl	80017c4 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff fee8 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff fee5 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0x01);
 8001a20:	2001      	movs	r0, #1
 8001a22:	f7ff fee2 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0x3F);
 8001a26:	203f      	movs	r0, #63	@ 0x3f
 8001a28:	f7ff fedf 	bl	80017ea <lcdWriteParameter>

	// Set the page address to 0-239
	lcdWriteCommand(SET_PAGE_ADDRESS);
 8001a2c:	202b      	movs	r0, #43	@ 0x2b
 8001a2e:	f7ff fec9 	bl	80017c4 <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7ff fed9 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f7ff fed6 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff fed3 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0xEF);
 8001a44:	f06f 0010 	mvn.w	r0, #16
 8001a48:	f7ff fecf 	bl	80017ea <lcdWriteParameter>

	// Plot the pixels
	lcdWriteCommand(WRITE_MEMORY_START);
 8001a4c:	202c      	movs	r0, #44	@ 0x2c
 8001a4e:	f7ff feb9 	bl	80017c4 <lcdWriteCommand>
	for(pixel = 0; pixel < 76799; pixel++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	e00c      	b.n	8001a72 <lcdClearDisplay+0x6e>
	{
		lcdWriteData(colour >> 8, colour);
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	0a1b      	lsrs	r3, r3, #8
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	88fa      	ldrh	r2, [r7, #6]
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fed2 	bl	8001810 <lcdWriteData>
	for(pixel = 0; pixel < 76799; pixel++)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4a03      	ldr	r2, [pc, #12]	@ (8001a84 <lcdClearDisplay+0x80>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d9ee      	bls.n	8001a58 <lcdClearDisplay+0x54>
	}

}
 8001a7a:	bf00      	nop
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	00012bfe 	.word	0x00012bfe

08001a88 <lcdPlot>:

// changing a single pixel on display
void lcdPlot(int16_t x, int16_t y, uint16_t colour)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
 8001a92:	460b      	mov	r3, r1
 8001a94:	80bb      	strh	r3, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	807b      	strh	r3, [r7, #2]
	// Horizontal Address Start Position
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 8001a9a:	202a      	movs	r0, #42	@ 0x2a
 8001a9c:	f7ff fe92 	bl	80017c4 <lcdWriteCommand>
	lcdWriteParameter(x >> 8);
 8001aa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa4:	121b      	asrs	r3, r3, #8
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fe9d 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(x);
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	b25b      	sxtb	r3, r3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fe98 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0x01);
 8001aba:	2001      	movs	r0, #1
 8001abc:	f7ff fe95 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0x3F);//319
 8001ac0:	203f      	movs	r0, #63	@ 0x3f
 8001ac2:	f7ff fe92 	bl	80017ea <lcdWriteParameter>

	// Vertical Address end Position
	lcdWriteCommand(SET_PAGE_ADDRESS);
 8001ac6:	202b      	movs	r0, #43	@ 0x2b
 8001ac8:	f7ff fe7c 	bl	80017c4 <lcdWriteCommand>
	lcdWriteParameter(y >> 8);
 8001acc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ad0:	121b      	asrs	r3, r3, #8
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fe87 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(y);
 8001adc:	88bb      	ldrh	r3, [r7, #4]
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fe82 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7ff fe7f 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0xEF);//239
 8001aec:	f06f 0010 	mvn.w	r0, #16
 8001af0:	f7ff fe7b 	bl	80017ea <lcdWriteParameter>

	// Plot the point
	lcdWriteCommand(WRITE_MEMORY_START);
 8001af4:	202c      	movs	r0, #44	@ 0x2c
 8001af6:	f7ff fe65 	bl	80017c4 <lcdWriteCommand>
	lcdWriteData(colour >> 8, colour);
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	887a      	ldrh	r2, [r7, #2]
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fe81 	bl	8001810 <lcdWriteData>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <lcdLine>:

void lcdLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8001b16:	b590      	push	{r4, r7, lr}
 8001b18:	b08b      	sub	sp, #44	@ 0x2c
 8001b1a:	af02      	add	r7, sp, #8
 8001b1c:	4604      	mov	r4, r0
 8001b1e:	4608      	mov	r0, r1
 8001b20:	4611      	mov	r1, r2
 8001b22:	461a      	mov	r2, r3
 8001b24:	4623      	mov	r3, r4
 8001b26:	80fb      	strh	r3, [r7, #6]
 8001b28:	4603      	mov	r3, r0
 8001b2a:	80bb      	strh	r3, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
 8001b30:	4613      	mov	r3, r2
 8001b32:	803b      	strh	r3, [r7, #0]
	if(x0 == x1){ //vodorovna ciara optimalizovane
 8001b34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d10d      	bne.n	8001b5c <lcdLine+0x46>
		lcdFilledRectangle(x0, y0, x1, y1, colour);
 8001b40:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001b44:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001b48:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b4c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001b50:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4623      	mov	r3, r4
 8001b56:	f000 faf1 	bl	800213c <lcdFilledRectangle>
		return;
 8001b5a:	e10a      	b.n	8001d72 <lcdLine+0x25c>
	}
	else if(y0 == y1){ //zvisla ciara optimalizovane
 8001b5c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b60:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d10d      	bne.n	8001b84 <lcdLine+0x6e>
		lcdFilledRectangle(x0, y0, x1, y1, colour);
 8001b68:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001b6c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001b70:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001b74:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001b78:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4623      	mov	r3, r4
 8001b7e:	f000 fadd 	bl	800213c <lcdFilledRectangle>
		return;
 8001b82:	e0f6      	b.n	8001d72 <lcdLine+0x25c>
	}

	int16_t dy = y1 - y0;
 8001b84:	883a      	ldrh	r2, [r7, #0]
 8001b86:	88bb      	ldrh	r3, [r7, #4]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	83fb      	strh	r3, [r7, #30]
	int16_t dx = x1 - x0;
 8001b8e:	887a      	ldrh	r2, [r7, #2]
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	83bb      	strh	r3, [r7, #28]
	int16_t stepx, stepy;

	if (dy < 0) //derivacie musia byt kladne
 8001b98:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	da07      	bge.n	8001bb0 <lcdLine+0x9a>
	{
		dy = -dy; stepy = -1;
 8001ba0:	8bfb      	ldrh	r3, [r7, #30]
 8001ba2:	425b      	negs	r3, r3
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	83fb      	strh	r3, [r7, #30]
 8001ba8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bac:	833b      	strh	r3, [r7, #24]
 8001bae:	e001      	b.n	8001bb4 <lcdLine+0x9e>
	}
	else stepy = 1;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	833b      	strh	r3, [r7, #24]

	if (dx < 0) //derivacie musia byt kladne
 8001bb4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	da07      	bge.n	8001bcc <lcdLine+0xb6>
	{
		dx = -dx; stepx = -1;
 8001bbc:	8bbb      	ldrh	r3, [r7, #28]
 8001bbe:	425b      	negs	r3, r3
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	83bb      	strh	r3, [r7, #28]
 8001bc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bc8:	837b      	strh	r3, [r7, #26]
 8001bca:	e001      	b.n	8001bd0 <lcdLine+0xba>
	}
	else stepx = 1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	837b      	strh	r3, [r7, #26]

	dy <<= 1;	//dy*2
 8001bd0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	83fb      	strh	r3, [r7, #30]
	dx <<= 1;	//dx*2
 8001bd8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	83bb      	strh	r3, [r7, #28]

	lcdPlot(x0, y0, colour);	//zaciatocny pixel
 8001be0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001be2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ff4c 	bl	8001a88 <lcdPlot>
	uint16_t partialLineStartCoord = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	82fb      	strh	r3, [r7, #22]

	if (dx > dy) {  //menej nez 45 stupnov
 8001bf4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001bf8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dd59      	ble.n	8001cb4 <lcdLine+0x19e>
		partialLineStartCoord = x0-1;
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	82fb      	strh	r3, [r7, #22]
		int fraction = dy - (dx >> 1);	//dy-(dx/2)
 8001c06:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001c0a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001c0e:	1052      	asrs	r2, r2, #1
 8001c10:	b212      	sxth	r2, r2
 8001c12:	1a9b      	subs	r3, r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
		while (x0 != x1)
 8001c16:	e02f      	b.n	8001c78 <lcdLine+0x162>
		{

			if (fraction >= 0) //when we move up 1 pixel on Y axis
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	db22      	blt.n	8001c64 <lcdLine+0x14e>
			{
				if((y0>0)&&(y0<255)) {
 8001c1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	dd12      	ble.n	8001c4c <lcdLine+0x136>
 8001c26:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c2a:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c2c:	dc0e      	bgt.n	8001c4c <lcdLine+0x136>
					lcdFilledRectangle(partialLineStartCoord+1, y0, x0, y0, colour);
 8001c2e:	8afb      	ldrh	r3, [r7, #22]
 8001c30:	3301      	adds	r3, #1
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	b218      	sxth	r0, r3
 8001c36:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001c3a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c3e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c42:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	4623      	mov	r3, r4
 8001c48:	f000 fa78 	bl	800213c <lcdFilledRectangle>
				}
				partialLineStartCoord = x0;
 8001c4c:	88fb      	ldrh	r3, [r7, #6]
 8001c4e:	82fb      	strh	r3, [r7, #22]
				y0 += stepy;
 8001c50:	88ba      	ldrh	r2, [r7, #4]
 8001c52:	8b3b      	ldrh	r3, [r7, #24]
 8001c54:	4413      	add	r3, r2
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	80bb      	strh	r3, [r7, #4]
				fraction -= dx;
 8001c5a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	613b      	str	r3, [r7, #16]
			}
			x0 += stepx;
 8001c64:	88fa      	ldrh	r2, [r7, #6]
 8001c66:	8b7b      	ldrh	r3, [r7, #26]
 8001c68:	4413      	add	r3, r2
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	80fb      	strh	r3, [r7, #6]
			fraction += dy;
 8001c6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4413      	add	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
		while (x0 != x1)
 8001c78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c7c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d1c9      	bne.n	8001c18 <lcdLine+0x102>
		}
		if((y0>0)&&(y0<255)) {
 8001c84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	dd72      	ble.n	8001d72 <lcdLine+0x25c>
 8001c8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c90:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c92:	dc6e      	bgt.n	8001d72 <lcdLine+0x25c>
			lcdFilledRectangle(partialLineStartCoord+1, y0, x0, y0, colour);
 8001c94:	8afb      	ldrh	r3, [r7, #22]
 8001c96:	3301      	adds	r3, #1
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	b218      	sxth	r0, r3
 8001c9c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001ca0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001ca4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001ca8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	4623      	mov	r3, r4
 8001cae:	f000 fa45 	bl	800213c <lcdFilledRectangle>
 8001cb2:	e05e      	b.n	8001d72 <lcdLine+0x25c>
		}
	}
	else			//viac nez 45 stupnov
	{
		partialLineStartCoord = y0-1;
 8001cb4:	88bb      	ldrh	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	82fb      	strh	r3, [r7, #22]
		int fraction = dx - (dy >> 1);
 8001cba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cbe:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001cc2:	1052      	asrs	r2, r2, #1
 8001cc4:	b212      	sxth	r2, r2
 8001cc6:	1a9b      	subs	r3, r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
		while (y0 != y1)
 8001cca:	e032      	b.n	8001d32 <lcdLine+0x21c>
		{
			if (fraction >= 0)	//when we move up 1 pixel on X axis
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db25      	blt.n	8001d1e <lcdLine+0x208>
			{
				if((y0>0)&&(y0<255)&&(partialLineStartCoord+1>0)&&(partialLineStartCoord+1<255)) {
 8001cd2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	dd15      	ble.n	8001d06 <lcdLine+0x1f0>
 8001cda:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cde:	2bfe      	cmp	r3, #254	@ 0xfe
 8001ce0:	dc11      	bgt.n	8001d06 <lcdLine+0x1f0>
 8001ce2:	8afb      	ldrh	r3, [r7, #22]
 8001ce4:	2bfd      	cmp	r3, #253	@ 0xfd
 8001ce6:	d80e      	bhi.n	8001d06 <lcdLine+0x1f0>
					lcdFilledRectangle(x0, partialLineStartCoord+1, x0, y0, colour);
 8001ce8:	8afb      	ldrh	r3, [r7, #22]
 8001cea:	3301      	adds	r3, #1
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	b219      	sxth	r1, r3
 8001cf0:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001cf4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cf8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001cfc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	4623      	mov	r3, r4
 8001d02:	f000 fa1b 	bl	800213c <lcdFilledRectangle>
				}
				partialLineStartCoord = y0;
 8001d06:	88bb      	ldrh	r3, [r7, #4]
 8001d08:	82fb      	strh	r3, [r7, #22]
				x0 += stepx;
 8001d0a:	88fa      	ldrh	r2, [r7, #6]
 8001d0c:	8b7b      	ldrh	r3, [r7, #26]
 8001d0e:	4413      	add	r3, r2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 8001d14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	60fb      	str	r3, [r7, #12]
			}
			y0 += stepy;
 8001d1e:	88ba      	ldrh	r2, [r7, #4]
 8001d20:	8b3b      	ldrh	r3, [r7, #24]
 8001d22:	4413      	add	r3, r2
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	80bb      	strh	r3, [r7, #4]
			fraction += dx;
 8001d28:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4413      	add	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
		while (y0 != y1)
 8001d32:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001d36:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d1c6      	bne.n	8001ccc <lcdLine+0x1b6>
		}
		if((y0>0)&&(y0<255)&&(partialLineStartCoord+1>0)&&(partialLineStartCoord+1<255)) {
 8001d3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	dd15      	ble.n	8001d72 <lcdLine+0x25c>
 8001d46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d4a:	2bfe      	cmp	r3, #254	@ 0xfe
 8001d4c:	dc11      	bgt.n	8001d72 <lcdLine+0x25c>
 8001d4e:	8afb      	ldrh	r3, [r7, #22]
 8001d50:	2bfd      	cmp	r3, #253	@ 0xfd
 8001d52:	d80e      	bhi.n	8001d72 <lcdLine+0x25c>
			lcdFilledRectangle(x0, partialLineStartCoord+1, x0, y0, colour);
 8001d54:	8afb      	ldrh	r3, [r7, #22]
 8001d56:	3301      	adds	r3, #1
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	b219      	sxth	r1, r3
 8001d5c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001d60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d64:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d68:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	4623      	mov	r3, r4
 8001d6e:	f000 f9e5 	bl	800213c <lcdFilledRectangle>
		}
	}
}
 8001d72:	3724      	adds	r7, #36	@ 0x24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd90      	pop	{r4, r7, pc}

08001d78 <lcdDottedLine>:

void lcdDottedLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour, uint16_t step)
{
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b089      	sub	sp, #36	@ 0x24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4604      	mov	r4, r0
 8001d80:	4608      	mov	r0, r1
 8001d82:	4611      	mov	r1, r2
 8001d84:	461a      	mov	r2, r3
 8001d86:	4623      	mov	r3, r4
 8001d88:	80fb      	strh	r3, [r7, #6]
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80bb      	strh	r3, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	807b      	strh	r3, [r7, #2]
 8001d92:	4613      	mov	r3, r2
 8001d94:	803b      	strh	r3, [r7, #0]
	int16_t dy = y1 - y0;
 8001d96:	883a      	ldrh	r2, [r7, #0]
 8001d98:	88bb      	ldrh	r3, [r7, #4]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	83fb      	strh	r3, [r7, #30]
	int16_t dx = x1 - x0;
 8001da0:	887a      	ldrh	r2, [r7, #2]
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	83bb      	strh	r3, [r7, #28]
	int16_t stepx, stepy;
	int16_t delta = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	82fb      	strh	r3, [r7, #22]
	int16_t astep = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	817b      	strh	r3, [r7, #10]
	int16_t stp = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	82bb      	strh	r3, [r7, #20]

	if (dy < 0)
 8001db6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	da07      	bge.n	8001dce <lcdDottedLine+0x56>
	{
		dy = -dy; stepy = -1;
 8001dbe:	8bfb      	ldrh	r3, [r7, #30]
 8001dc0:	425b      	negs	r3, r3
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	83fb      	strh	r3, [r7, #30]
 8001dc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001dca:	833b      	strh	r3, [r7, #24]
 8001dcc:	e001      	b.n	8001dd2 <lcdDottedLine+0x5a>
	}
	else stepy = 1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	833b      	strh	r3, [r7, #24]

 	if (dx < 0)
 8001dd2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	da07      	bge.n	8001dea <lcdDottedLine+0x72>
	{
		dx = -dx; stepx = -1;
 8001dda:	8bbb      	ldrh	r3, [r7, #28]
 8001ddc:	425b      	negs	r3, r3
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	83bb      	strh	r3, [r7, #28]
 8001de2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001de6:	837b      	strh	r3, [r7, #26]
 8001de8:	e001      	b.n	8001dee <lcdDottedLine+0x76>
	}
	else stepx = 1;
 8001dea:	2301      	movs	r3, #1
 8001dec:	837b      	strh	r3, [r7, #26]

	dy <<= 1;
 8001dee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	83fb      	strh	r3, [r7, #30]
	dx <<= 1;
 8001df6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	83bb      	strh	r3, [r7, #28]

	if (dx > dy) {
 8001dfe:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001e02:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	dd59      	ble.n	8001ebe <lcdDottedLine+0x146>
		int fraction = dy - (dx >> 1);
 8001e0a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e0e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001e12:	1052      	asrs	r2, r2, #1
 8001e14:	b212      	sxth	r2, r2
 8001e16:	1a9b      	subs	r3, r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
		delta = abs(x0 - x1);
 8001e1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bfb8      	it	lt
 8001e28:	425b      	neglt	r3, r3
 8001e2a:	82fb      	strh	r3, [r7, #22]
		astep = abs(stepx);
 8001e2c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	bfb8      	it	lt
 8001e34:	425b      	neglt	r3, r3
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	817b      	strh	r3, [r7, #10]
		while (delta > 0)
 8001e3a:	e03b      	b.n	8001eb4 <lcdDottedLine+0x13c>
		{
			if (fraction >= 0)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db09      	blt.n	8001e56 <lcdDottedLine+0xde>
			{
				y0 += stepy;
 8001e42:	88ba      	ldrh	r2, [r7, #4]
 8001e44:	8b3b      	ldrh	r3, [r7, #24]
 8001e46:	4413      	add	r3, r2
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	80bb      	strh	r3, [r7, #4]
				fraction -= dx;
 8001e4c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	613b      	str	r3, [r7, #16]
			}
			if((stp%step==0)&&(y0>0)&&(y0<255)) {
 8001e56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001e5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e60:	fb01 f202 	mul.w	r2, r1, r2
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10f      	bne.n	8001e8a <lcdDottedLine+0x112>
 8001e6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	dd0b      	ble.n	8001e8a <lcdDottedLine+0x112>
 8001e72:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e76:	2bfe      	cmp	r3, #254	@ 0xfe
 8001e78:	dc07      	bgt.n	8001e8a <lcdDottedLine+0x112>
				lcdPlot(x0, y0, colour);
 8001e7a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001e7c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fdff 	bl	8001a88 <lcdPlot>
			}
   			x0 += stepx;
 8001e8a:	88fa      	ldrh	r2, [r7, #6]
 8001e8c:	8b7b      	ldrh	r3, [r7, #26]
 8001e8e:	4413      	add	r3, r2
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	80fb      	strh	r3, [r7, #6]
   			delta = delta - astep;
 8001e94:	8afa      	ldrh	r2, [r7, #22]
 8001e96:	897b      	ldrh	r3, [r7, #10]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	82fb      	strh	r3, [r7, #22]
   			fraction += dy;
 8001e9e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
   			stp++;
 8001ea8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3301      	adds	r3, #1
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	82bb      	strh	r3, [r7, #20]
		while (delta > 0)
 8001eb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	dcbf      	bgt.n	8001e3c <lcdDottedLine+0xc4>
			delta = delta - astep;
			fraction += dx;
			stp++;
		}
	}
}
 8001ebc:	e058      	b.n	8001f70 <lcdDottedLine+0x1f8>
		int fraction = dx - (dy >> 1);
 8001ebe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ec2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001ec6:	1052      	asrs	r2, r2, #1
 8001ec8:	b212      	sxth	r2, r2
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	60fb      	str	r3, [r7, #12]
		delta = abs(y0 - y1);
 8001ece:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ed2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bfb8      	it	lt
 8001edc:	425b      	neglt	r3, r3
 8001ede:	82fb      	strh	r3, [r7, #22]
		astep = abs(stepy);
 8001ee0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bfb8      	it	lt
 8001ee8:	425b      	neglt	r3, r3
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	817b      	strh	r3, [r7, #10]
		while (delta > 0)
 8001eee:	e03b      	b.n	8001f68 <lcdDottedLine+0x1f0>
			if (fraction >= 0)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db09      	blt.n	8001f0a <lcdDottedLine+0x192>
				x0 += stepx;
 8001ef6:	88fa      	ldrh	r2, [r7, #6]
 8001ef8:	8b7b      	ldrh	r3, [r7, #26]
 8001efa:	4413      	add	r3, r2
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 8001f00:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	60fb      	str	r3, [r7, #12]
			if((stp%step==0)&&(y0>0)&&(y0<255)) {
 8001f0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f0e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f10:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f14:	fb01 f202 	mul.w	r2, r1, r2
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10f      	bne.n	8001f3e <lcdDottedLine+0x1c6>
 8001f1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	dd0b      	ble.n	8001f3e <lcdDottedLine+0x1c6>
 8001f26:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f2a:	2bfe      	cmp	r3, #254	@ 0xfe
 8001f2c:	dc07      	bgt.n	8001f3e <lcdDottedLine+0x1c6>
				lcdPlot(x0, y0, colour);
 8001f2e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001f30:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fda5 	bl	8001a88 <lcdPlot>
			y0 += stepy;
 8001f3e:	88ba      	ldrh	r2, [r7, #4]
 8001f40:	8b3b      	ldrh	r3, [r7, #24]
 8001f42:	4413      	add	r3, r2
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	80bb      	strh	r3, [r7, #4]
			delta = delta - astep;
 8001f48:	8afa      	ldrh	r2, [r7, #22]
 8001f4a:	897b      	ldrh	r3, [r7, #10]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	82fb      	strh	r3, [r7, #22]
			fraction += dx;
 8001f52:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4413      	add	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
			stp++;
 8001f5c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3301      	adds	r3, #1
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	82bb      	strh	r3, [r7, #20]
		while (delta > 0)
 8001f68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	dcbf      	bgt.n	8001ef0 <lcdDottedLine+0x178>
}
 8001f70:	bf00      	nop
 8001f72:	3724      	adds	r7, #36	@ 0x24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd90      	pop	{r4, r7, pc}

08001f78 <lcdPolyline>:

void lcdPolyline(int16_t *points, int16_t lines, uint16_t colour)
{
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b089      	sub	sp, #36	@ 0x24
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
 8001f84:	4613      	mov	r3, r2
 8001f86:	803b      	strh	r3, [r7, #0]
	for(int16_t i = 0; i<lines-1; i++){
 8001f88:	2300      	movs	r3, #0
 8001f8a:	82fb      	strh	r3, [r7, #22]
 8001f8c:	e032      	b.n	8001ff4 <lcdPolyline+0x7c>
		int16_t x0 = points[2*i];
 8001f8e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	4413      	add	r3, r2
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	82bb      	strh	r3, [r7, #20]
		int16_t y0 = points[2*i + 1];
 8001f9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	827b      	strh	r3, [r7, #18]
		int16_t x1 = points[2*(i+1)];
 8001fac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	823b      	strh	r3, [r7, #16]
		int16_t y1 = points[2*(i+1) + 1];
 8001fbc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	81fb      	strh	r3, [r7, #14]
		lcdLine(x0, y0, x1, y1, colour);
 8001fce:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8001fd2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001fd6:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001fda:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8001fde:	883b      	ldrh	r3, [r7, #0]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	4623      	mov	r3, r4
 8001fe4:	f7ff fd97 	bl	8001b16 <lcdLine>
	for(int16_t i = 0; i<lines-1; i++){
 8001fe8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	82fb      	strh	r3, [r7, #22]
 8001ff4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001ff8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	429a      	cmp	r2, r3
 8002000:	dbc5      	blt.n	8001f8e <lcdPolyline+0x16>
	}
}
 8002002:	bf00      	nop
 8002004:	bf00      	nop
 8002006:	371c      	adds	r7, #28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd90      	pop	{r4, r7, pc}

0800200c <lcdDottedPolyline>:
void lcdDottedPolyline(int16_t *points, int16_t lines, uint16_t colour, uint16_t step)
{
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b08b      	sub	sp, #44	@ 0x2c
 8002010:	af02      	add	r7, sp, #8
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	4608      	mov	r0, r1
 8002016:	4611      	mov	r1, r2
 8002018:	461a      	mov	r2, r3
 800201a:	4603      	mov	r3, r0
 800201c:	817b      	strh	r3, [r7, #10]
 800201e:	460b      	mov	r3, r1
 8002020:	813b      	strh	r3, [r7, #8]
 8002022:	4613      	mov	r3, r2
 8002024:	80fb      	strh	r3, [r7, #6]
	for(int16_t i = 0; i<lines-1; i++){
 8002026:	2300      	movs	r3, #0
 8002028:	83fb      	strh	r3, [r7, #30]
 800202a:	e034      	b.n	8002096 <lcdDottedPolyline+0x8a>
		int16_t x0 = points[2*i];
 800202c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4413      	add	r3, r2
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	83bb      	strh	r3, [r7, #28]
		int16_t y0 = points[2*i + 1];
 800203a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4413      	add	r3, r2
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	837b      	strh	r3, [r7, #26]
		int16_t x1 = points[2*(i+1)];
 800204a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800204e:	3301      	adds	r3, #1
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4413      	add	r3, r2
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	833b      	strh	r3, [r7, #24]
		int16_t y1 = points[2*(i+1) + 1];
 800205a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800205e:	3301      	adds	r3, #1
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	3302      	adds	r3, #2
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	82fb      	strh	r3, [r7, #22]
		lcdDottedLine(x0, y0, x1, y1, colour, step);
 800206c:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8002070:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002074:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8002078:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	893b      	ldrh	r3, [r7, #8]
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	4623      	mov	r3, r4
 8002086:	f7ff fe77 	bl	8001d78 <lcdDottedLine>
	for(int16_t i = 0; i<lines-1; i++){
 800208a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800208e:	b29b      	uxth	r3, r3
 8002090:	3301      	adds	r3, #1
 8002092:	b29b      	uxth	r3, r3
 8002094:	83fb      	strh	r3, [r7, #30]
 8002096:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800209a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800209e:	3b01      	subs	r3, #1
 80020a0:	429a      	cmp	r2, r3
 80020a2:	dbc3      	blt.n	800202c <lcdDottedPolyline+0x20>
	}
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3724      	adds	r7, #36	@ 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}

080020ae <lcdRectangle>:

// Draw a rectangle between x0, y0 and x1, y1
void lcdRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 80020ae:	b590      	push	{r4, r7, lr}
 80020b0:	b085      	sub	sp, #20
 80020b2:	af02      	add	r7, sp, #8
 80020b4:	4604      	mov	r4, r0
 80020b6:	4608      	mov	r0, r1
 80020b8:	4611      	mov	r1, r2
 80020ba:	461a      	mov	r2, r3
 80020bc:	4623      	mov	r3, r4
 80020be:	80fb      	strh	r3, [r7, #6]
 80020c0:	4603      	mov	r3, r0
 80020c2:	80bb      	strh	r3, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
 80020c8:	4613      	mov	r3, r2
 80020ca:	803b      	strh	r3, [r7, #0]
	lcdLine(x0, y0, x0, y1, colour);
 80020cc:	f9b7 4000 	ldrsh.w	r4, [r7]
 80020d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80020d8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80020dc:	8b3b      	ldrh	r3, [r7, #24]
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	4623      	mov	r3, r4
 80020e2:	f7ff fd18 	bl	8001b16 <lcdLine>
	lcdLine(x0, y1, x1, y1, colour);
 80020e6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80020ea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80020ee:	f9b7 1000 	ldrsh.w	r1, [r7]
 80020f2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80020f6:	8b3b      	ldrh	r3, [r7, #24]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	4623      	mov	r3, r4
 80020fc:	f7ff fd0b 	bl	8001b16 <lcdLine>
	lcdLine(x1, y0, x1, y1, colour);
 8002100:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002104:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002108:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800210c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8002110:	8b3b      	ldrh	r3, [r7, #24]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	4623      	mov	r3, r4
 8002116:	f7ff fcfe 	bl	8001b16 <lcdLine>
	lcdLine(x0, y0, x1, y0, colour);
 800211a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800211e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002122:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002126:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800212a:	8b3b      	ldrh	r3, [r7, #24]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	4623      	mov	r3, r4
 8002130:	f7ff fcf1 	bl	8001b16 <lcdLine>
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	bd90      	pop	{r4, r7, pc}

0800213c <lcdFilledRectangle>:
	lcdDottedLine(x0, y0, x1, y0, colour, step);
}

// Draw a filled rectangle
void lcdFilledRectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	4604      	mov	r4, r0
 8002144:	4608      	mov	r0, r1
 8002146:	4611      	mov	r1, r2
 8002148:	461a      	mov	r2, r3
 800214a:	4623      	mov	r3, r4
 800214c:	80fb      	strh	r3, [r7, #6]
 800214e:	4603      	mov	r3, r0
 8002150:	80bb      	strh	r3, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	807b      	strh	r3, [r7, #2]
 8002156:	4613      	mov	r3, r2
 8002158:	803b      	strh	r3, [r7, #0]
	uint32_t pixels;
	int16_t pom = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	817b      	strh	r3, [r7, #10]
	if (x0>x1){	//x1 must be greater than x0
 800215e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002162:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002166:	429a      	cmp	r2, r3
 8002168:	dd05      	ble.n	8002176 <lcdFilledRectangle+0x3a>
		pom = x0;
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	817b      	strh	r3, [r7, #10]
		x0 = x1;
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	80fb      	strh	r3, [r7, #6]
		x1 = pom;
 8002172:	897b      	ldrh	r3, [r7, #10]
 8002174:	807b      	strh	r3, [r7, #2]
	}
	if (y0>y1){	//y1 must be greater than y0
 8002176:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800217a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800217e:	429a      	cmp	r2, r3
 8002180:	dd05      	ble.n	800218e <lcdFilledRectangle+0x52>
		pom = y0;
 8002182:	88bb      	ldrh	r3, [r7, #4]
 8002184:	817b      	strh	r3, [r7, #10]
		y0 = y1;
 8002186:	883b      	ldrh	r3, [r7, #0]
 8002188:	80bb      	strh	r3, [r7, #4]
		y1 = pom;
 800218a:	897b      	ldrh	r3, [r7, #10]
 800218c:	803b      	strh	r3, [r7, #0]
	}

	if((y1>0)&&(y0<255)){	//to prevent plotting nonsense
 800218e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002192:	2b00      	cmp	r3, #0
 8002194:	dd6e      	ble.n	8002274 <lcdFilledRectangle+0x138>
 8002196:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800219a:	2bfe      	cmp	r3, #254	@ 0xfe
 800219c:	dc6a      	bgt.n	8002274 <lcdFilledRectangle+0x138>
		if(y0<0) {	//
 800219e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	da01      	bge.n	80021aa <lcdFilledRectangle+0x6e>
			y0 = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	80bb      	strh	r3, [r7, #4]
		}
		if(y1>255) {
 80021aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80021ae:	2bff      	cmp	r3, #255	@ 0xff
 80021b0:	dd01      	ble.n	80021b6 <lcdFilledRectangle+0x7a>
			y1 = 255;
 80021b2:	23ff      	movs	r3, #255	@ 0xff
 80021b4:	803b      	strh	r3, [r7, #0]
		}
		// To speed up plotting we define a x window with the width of the
		// rectangle and then just output the required number of bytes to
		// fill down to the end point
		lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 80021b6:	202a      	movs	r0, #42	@ 0x2a
 80021b8:	f7ff fb04 	bl	80017c4 <lcdWriteCommand>
		lcdWriteParameter(x0 >> 8);
 80021bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c0:	121b      	asrs	r3, r3, #8
 80021c2:	b21b      	sxth	r3, r3
 80021c4:	b25b      	sxtb	r3, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fb0f 	bl	80017ea <lcdWriteParameter>
		lcdWriteParameter(x0);
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	b25b      	sxtb	r3, r3
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fb0a 	bl	80017ea <lcdWriteParameter>
		lcdWriteParameter(x1 >> 8);
 80021d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021da:	121b      	asrs	r3, r3, #8
 80021dc:	b21b      	sxth	r3, r3
 80021de:	b25b      	sxtb	r3, r3
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fb02 	bl	80017ea <lcdWriteParameter>
		lcdWriteParameter(x1);
 80021e6:	887b      	ldrh	r3, [r7, #2]
 80021e8:	b25b      	sxtb	r3, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fafd 	bl	80017ea <lcdWriteParameter>

		lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 80021f0:	202b      	movs	r0, #43	@ 0x2b
 80021f2:	f7ff fae7 	bl	80017c4 <lcdWriteCommand>
		lcdWriteParameter(y0 >> 8);
 80021f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021fa:	121b      	asrs	r3, r3, #8
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff faf2 	bl	80017ea <lcdWriteParameter>
		lcdWriteParameter(y0);
 8002206:	88bb      	ldrh	r3, [r7, #4]
 8002208:	b25b      	sxtb	r3, r3
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff faed 	bl	80017ea <lcdWriteParameter>
		lcdWriteParameter(y1 >> 8);
 8002210:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002214:	121b      	asrs	r3, r3, #8
 8002216:	b21b      	sxth	r3, r3
 8002218:	b25b      	sxtb	r3, r3
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fae5 	bl	80017ea <lcdWriteParameter>
		lcdWriteParameter(y1);
 8002220:	883b      	ldrh	r3, [r7, #0]
 8002222:	b25b      	sxtb	r3, r3
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fae0 	bl	80017ea <lcdWriteParameter>

		lcdWriteCommand(WRITE_MEMORY_START);
 800222a:	202c      	movs	r0, #44	@ 0x2c
 800222c:	f7ff faca 	bl	80017c4 <lcdWriteCommand>
		for (pixels = 0; pixels < (((x1+1) - x0) * ((y1+1) - y0)); pixels++)
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e00c      	b.n	8002250 <lcdFilledRectangle+0x114>
				lcdWriteData(colour >> 8, colour);
 8002236:	8c3b      	ldrh	r3, [r7, #32]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	b29b      	uxth	r3, r3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	8c3a      	ldrh	r2, [r7, #32]
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fae3 	bl	8001810 <lcdWriteData>
		for (pixels = 0; pixels < (((x1+1) - x0) * ((y1+1) - y0)); pixels++)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	3301      	adds	r3, #1
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002260:	1c51      	adds	r1, r2, #1
 8002262:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002266:	1a8a      	subs	r2, r1, r2
 8002268:	fb02 f303 	mul.w	r3, r2, r3
 800226c:	461a      	mov	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4293      	cmp	r3, r2
 8002272:	d3e0      	bcc.n	8002236 <lcdFilledRectangle+0xfa>
	}
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	bd90      	pop	{r4, r7, pc}

0800227c <lcdCircle>:
		lcdFilledDottedTriangle( pointsT, colour, step );
	}
}

void lcdCircle(int16_t xCentre, int16_t yCentre, int16_t radius, uint16_t colour)
{
 800227c:	b590      	push	{r4, r7, lr}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	4604      	mov	r4, r0
 8002284:	4608      	mov	r0, r1
 8002286:	4611      	mov	r1, r2
 8002288:	461a      	mov	r2, r3
 800228a:	4623      	mov	r3, r4
 800228c:	80fb      	strh	r3, [r7, #6]
 800228e:	4603      	mov	r3, r0
 8002290:	80bb      	strh	r3, [r7, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	807b      	strh	r3, [r7, #2]
 8002296:	4613      	mov	r3, r2
 8002298:	803b      	strh	r3, [r7, #0]
	int16_t x = 0, y = radius;
 800229a:	2300      	movs	r3, #0
 800229c:	81fb      	strh	r3, [r7, #14]
 800229e:	887b      	ldrh	r3, [r7, #2]
 80022a0:	81bb      	strh	r3, [r7, #12]
	int16_t d = 3 - (2 * radius);
 80022a2:	887b      	ldrh	r3, [r7, #2]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	f1c3 0303 	rsb	r3, r3, #3
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	817b      	strh	r3, [r7, #10]

    while(x <= y)
 80022b0:	e095      	b.n	80023de <lcdCircle+0x162>
	{
		lcdPlot(xCentre + x, yCentre + y, colour);
 80022b2:	88fa      	ldrh	r2, [r7, #6]
 80022b4:	89fb      	ldrh	r3, [r7, #14]
 80022b6:	4413      	add	r3, r2
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	b218      	sxth	r0, r3
 80022bc:	88ba      	ldrh	r2, [r7, #4]
 80022be:	89bb      	ldrh	r3, [r7, #12]
 80022c0:	4413      	add	r3, r2
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	883a      	ldrh	r2, [r7, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	f7ff fbdd 	bl	8001a88 <lcdPlot>
		lcdPlot(xCentre + y, yCentre + x, colour);
 80022ce:	88fa      	ldrh	r2, [r7, #6]
 80022d0:	89bb      	ldrh	r3, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	b218      	sxth	r0, r3
 80022d8:	88ba      	ldrh	r2, [r7, #4]
 80022da:	89fb      	ldrh	r3, [r7, #14]
 80022dc:	4413      	add	r3, r2
 80022de:	b29b      	uxth	r3, r3
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	883a      	ldrh	r2, [r7, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	f7ff fbcf 	bl	8001a88 <lcdPlot>
		lcdPlot(xCentre - x, yCentre + y, colour);
 80022ea:	88fa      	ldrh	r2, [r7, #6]
 80022ec:	89fb      	ldrh	r3, [r7, #14]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	b218      	sxth	r0, r3
 80022f4:	88ba      	ldrh	r2, [r7, #4]
 80022f6:	89bb      	ldrh	r3, [r7, #12]
 80022f8:	4413      	add	r3, r2
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	b21b      	sxth	r3, r3
 80022fe:	883a      	ldrh	r2, [r7, #0]
 8002300:	4619      	mov	r1, r3
 8002302:	f7ff fbc1 	bl	8001a88 <lcdPlot>
		lcdPlot(xCentre + y, yCentre - x, colour);
 8002306:	88fa      	ldrh	r2, [r7, #6]
 8002308:	89bb      	ldrh	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	b29b      	uxth	r3, r3
 800230e:	b218      	sxth	r0, r3
 8002310:	88ba      	ldrh	r2, [r7, #4]
 8002312:	89fb      	ldrh	r3, [r7, #14]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	b29b      	uxth	r3, r3
 8002318:	b21b      	sxth	r3, r3
 800231a:	883a      	ldrh	r2, [r7, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	f7ff fbb3 	bl	8001a88 <lcdPlot>
		lcdPlot(xCentre - x, yCentre - y, colour);
 8002322:	88fa      	ldrh	r2, [r7, #6]
 8002324:	89fb      	ldrh	r3, [r7, #14]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	b29b      	uxth	r3, r3
 800232a:	b218      	sxth	r0, r3
 800232c:	88ba      	ldrh	r2, [r7, #4]
 800232e:	89bb      	ldrh	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	b29b      	uxth	r3, r3
 8002334:	b21b      	sxth	r3, r3
 8002336:	883a      	ldrh	r2, [r7, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	f7ff fba5 	bl	8001a88 <lcdPlot>
		lcdPlot(xCentre - y, yCentre - x, colour);
 800233e:	88fa      	ldrh	r2, [r7, #6]
 8002340:	89bb      	ldrh	r3, [r7, #12]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	b29b      	uxth	r3, r3
 8002346:	b218      	sxth	r0, r3
 8002348:	88ba      	ldrh	r2, [r7, #4]
 800234a:	89fb      	ldrh	r3, [r7, #14]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	b29b      	uxth	r3, r3
 8002350:	b21b      	sxth	r3, r3
 8002352:	883a      	ldrh	r2, [r7, #0]
 8002354:	4619      	mov	r1, r3
 8002356:	f7ff fb97 	bl	8001a88 <lcdPlot>
		lcdPlot(xCentre + x, yCentre - y, colour);
 800235a:	88fa      	ldrh	r2, [r7, #6]
 800235c:	89fb      	ldrh	r3, [r7, #14]
 800235e:	4413      	add	r3, r2
 8002360:	b29b      	uxth	r3, r3
 8002362:	b218      	sxth	r0, r3
 8002364:	88ba      	ldrh	r2, [r7, #4]
 8002366:	89bb      	ldrh	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	b29b      	uxth	r3, r3
 800236c:	b21b      	sxth	r3, r3
 800236e:	883a      	ldrh	r2, [r7, #0]
 8002370:	4619      	mov	r1, r3
 8002372:	f7ff fb89 	bl	8001a88 <lcdPlot>
		lcdPlot(xCentre - y, yCentre + x, colour);
 8002376:	88fa      	ldrh	r2, [r7, #6]
 8002378:	89bb      	ldrh	r3, [r7, #12]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	b29b      	uxth	r3, r3
 800237e:	b218      	sxth	r0, r3
 8002380:	88ba      	ldrh	r2, [r7, #4]
 8002382:	89fb      	ldrh	r3, [r7, #14]
 8002384:	4413      	add	r3, r2
 8002386:	b29b      	uxth	r3, r3
 8002388:	b21b      	sxth	r3, r3
 800238a:	883a      	ldrh	r2, [r7, #0]
 800238c:	4619      	mov	r1, r3
 800238e:	f7ff fb7b 	bl	8001a88 <lcdPlot>

		if (d < 0) d += (4 * x) + 6;
 8002392:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002396:	2b00      	cmp	r3, #0
 8002398:	da09      	bge.n	80023ae <lcdCircle+0x132>
 800239a:	89fb      	ldrh	r3, [r7, #14]
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	b29a      	uxth	r2, r3
 80023a0:	897b      	ldrh	r3, [r7, #10]
 80023a2:	4413      	add	r3, r2
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3306      	adds	r3, #6
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	817b      	strh	r3, [r7, #10]
 80023ac:	e011      	b.n	80023d2 <lcdCircle+0x156>
		else
		{
			d += (4 * (x - y)) + 10;
 80023ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80023b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	b29a      	uxth	r2, r3
 80023be:	897b      	ldrh	r3, [r7, #10]
 80023c0:	4413      	add	r3, r2
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	330a      	adds	r3, #10
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	817b      	strh	r3, [r7, #10]
			y -= 1;
 80023ca:	89bb      	ldrh	r3, [r7, #12]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	81bb      	strh	r3, [r7, #12]
		}

		x++;
 80023d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3301      	adds	r3, #1
 80023da:	b29b      	uxth	r3, r3
 80023dc:	81fb      	strh	r3, [r7, #14]
    while(x <= y)
 80023de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80023e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	f77f af63 	ble.w	80022b2 <lcdCircle+0x36>
	}
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd90      	pop	{r4, r7, pc}
	...

080023f8 <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, int16_t x, int16_t y, uint16_t fgColour, uint16_t bgColour)
{
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4604      	mov	r4, r0
 8002400:	4608      	mov	r0, r1
 8002402:	4611      	mov	r1, r2
 8002404:	461a      	mov	r2, r3
 8002406:	4623      	mov	r3, r4
 8002408:	71fb      	strb	r3, [r7, #7]
 800240a:	4603      	mov	r3, r0
 800240c:	80bb      	strh	r3, [r7, #4]
 800240e:	460b      	mov	r3, r1
 8002410:	807b      	strh	r3, [r7, #2]
 8002412:	4613      	mov	r3, r2
 8002414:	803b      	strh	r3, [r7, #0]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8002416:	202a      	movs	r0, #42	@ 0x2a
 8002418:	f7ff f9d4 	bl	80017c4 <lcdWriteCommand>
	lcdWriteParameter(x >> 8);
 800241c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002420:	121b      	asrs	r3, r3, #8
 8002422:	b21b      	sxth	r3, r3
 8002424:	b25b      	sxtb	r3, r3
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff f9df 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(x);
 800242c:	88bb      	ldrh	r3, [r7, #4]
 800242e:	b25b      	sxtb	r3, r3
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff f9da 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter((x+5) >> 8);
 8002436:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800243a:	3305      	adds	r3, #5
 800243c:	121b      	asrs	r3, r3, #8
 800243e:	b25b      	sxtb	r3, r3
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff f9d2 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(x+5);
 8002446:	88bb      	ldrh	r3, [r7, #4]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	3305      	adds	r3, #5
 800244c:	b2db      	uxtb	r3, r3
 800244e:	b25b      	sxtb	r3, r3
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff f9ca 	bl	80017ea <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8002456:	202b      	movs	r0, #43	@ 0x2b
 8002458:	f7ff f9b4 	bl	80017c4 <lcdWriteCommand>
	lcdWriteParameter(y >> 8);
 800245c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002460:	121b      	asrs	r3, r3, #8
 8002462:	b21b      	sxth	r3, r3
 8002464:	b25b      	sxtb	r3, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff f9bf 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(y);
 800246c:	887b      	ldrh	r3, [r7, #2]
 800246e:	b25b      	sxtb	r3, r3
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff f9ba 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8002476:	2000      	movs	r0, #0
 8002478:	f7ff f9b7 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0xEF);
 800247c:	f06f 0010 	mvn.w	r0, #16
 8002480:	f7ff f9b3 	bl	80017ea <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8002484:	202c      	movs	r0, #44	@ 0x2c
 8002486:	f7ff f99d 	bl	80017c4 <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++)
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
 800248e:	e036      	b.n	80024fe <lcdPutCh+0x106>
	{
		for (column = 0; column < 6; column++)
 8002490:	2300      	movs	r3, #0
 8002492:	73bb      	strb	r3, [r7, #14]
 8002494:	e02d      	b.n	80024f2 <lcdPutCh+0xfa>
		{
			// Calculate the mirrored column index
			uint8_t mirroredColumn = 5 - column;
 8002496:	7bbb      	ldrb	r3, [r7, #14]
 8002498:	f1c3 0305 	rsb	r3, r3, #5
 800249c:	737b      	strb	r3, [r7, #13]
			// Check the bit corresponding to the current row in the mirrored column
			if ((fontus[character][mirroredColumn]) & (1 << row))
 800249e:	79fa      	ldrb	r2, [r7, #7]
 80024a0:	7b79      	ldrb	r1, [r7, #13]
 80024a2:	481b      	ldr	r0, [pc, #108]	@ (8002510 <lcdPutCh+0x118>)
 80024a4:	4613      	mov	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4403      	add	r3, r0
 80024ae:	440b      	add	r3, r1
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	fa42 f303 	asr.w	r3, r2, r3
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <lcdPutCh+0xe0>
				lcdWriteData(fgColour >> 8, fgColour);
 80024c2:	883b      	ldrh	r3, [r7, #0]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	883a      	ldrh	r2, [r7, #0]
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff f99d 	bl	8001810 <lcdWriteData>
 80024d6:	e009      	b.n	80024ec <lcdPutCh+0xf4>
			else
				lcdWriteData(bgColour >> 8, bgColour);
 80024d8:	8c3b      	ldrh	r3, [r7, #32]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	b29b      	uxth	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	8c3a      	ldrh	r2, [r7, #32]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff f992 	bl	8001810 <lcdWriteData>
		for (column = 0; column < 6; column++)
 80024ec:	7bbb      	ldrb	r3, [r7, #14]
 80024ee:	3301      	adds	r3, #1
 80024f0:	73bb      	strb	r3, [r7, #14]
 80024f2:	7bbb      	ldrb	r3, [r7, #14]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d9ce      	bls.n	8002496 <lcdPutCh+0x9e>
	for (row = 0; row < 8; row++)
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	3301      	adds	r3, #1
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	2b07      	cmp	r3, #7
 8002502:	d9c5      	bls.n	8002490 <lcdPutCh+0x98>
		}
	}
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bd90      	pop	{r4, r7, pc}
 800250e:	bf00      	nop
 8002510:	08006c30 	.word	0x08006c30

08002514 <lcdPutChSized>:

void lcdPutChSized(unsigned char character, int16_t x, int16_t y, uint16_t fgColour, uint16_t bgColour, uint8_t size)
{
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b087      	sub	sp, #28
 8002518:	af02      	add	r7, sp, #8
 800251a:	4604      	mov	r4, r0
 800251c:	4608      	mov	r0, r1
 800251e:	4611      	mov	r1, r2
 8002520:	461a      	mov	r2, r3
 8002522:	4623      	mov	r3, r4
 8002524:	71fb      	strb	r3, [r7, #7]
 8002526:	4603      	mov	r3, r0
 8002528:	80bb      	strh	r3, [r7, #4]
 800252a:	460b      	mov	r3, r1
 800252c:	807b      	strh	r3, [r7, #2]
 800252e:	4613      	mov	r3, r2
 8002530:	803b      	strh	r3, [r7, #0]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 8002532:	202a      	movs	r0, #42	@ 0x2a
 8002534:	f7ff f946 	bl	80017c4 <lcdWriteCommand>
	lcdWriteParameter(x >> 8);
 8002538:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800253c:	121b      	asrs	r3, r3, #8
 800253e:	b21b      	sxth	r3, r3
 8002540:	b25b      	sxtb	r3, r3
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff f951 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(x);
 8002548:	88bb      	ldrh	r3, [r7, #4]
 800254a:	b25b      	sxtb	r3, r3
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff f94c 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter((x+5*size) >> 8);
 8002552:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002556:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	440b      	add	r3, r1
 8002562:	121b      	asrs	r3, r3, #8
 8002564:	b25b      	sxtb	r3, r3
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff f93f 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(x+5*size);
 800256c:	88bb      	ldrh	r3, [r7, #4]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002574:	4619      	mov	r1, r3
 8002576:	0089      	lsls	r1, r1, #2
 8002578:	440b      	add	r3, r1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	4413      	add	r3, r2
 800257e:	b2db      	uxtb	r3, r3
 8002580:	b25b      	sxtb	r3, r3
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff f931 	bl	80017ea <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8002588:	202b      	movs	r0, #43	@ 0x2b
 800258a:	f7ff f91b 	bl	80017c4 <lcdWriteCommand>
	lcdWriteParameter(y >> 8);
 800258e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002592:	121b      	asrs	r3, r3, #8
 8002594:	b21b      	sxth	r3, r3
 8002596:	b25b      	sxtb	r3, r3
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff f926 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(y);
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	b25b      	sxtb	r3, r3
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff f921 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7ff f91e 	bl	80017ea <lcdWriteParameter>
	lcdWriteParameter(0xEF);
 80025ae:	f06f 0010 	mvn.w	r0, #16
 80025b2:	f7ff f91a 	bl	80017ea <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 80025b6:	202c      	movs	r0, #44	@ 0x2c
 80025b8:	f7ff f904 	bl	80017c4 <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8*size; row+=size)
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]
 80025c0:	e067      	b.n	8002692 <lcdPutChSized+0x17e>
	{
		for (column = 0; column < 6*size; column+=size)
 80025c2:	2300      	movs	r3, #0
 80025c4:	73bb      	strb	r3, [r7, #14]
 80025c6:	e056      	b.n	8002676 <lcdPutChSized+0x162>
		{
			uint8_t mirroredColumn = 5*size - column;
 80025c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80025cc:	461a      	mov	r2, r3
 80025ce:	0092      	lsls	r2, r2, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	7bbb      	ldrb	r3, [r7, #14]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	737b      	strb	r3, [r7, #13]
			if ((fontus[character][(uint8_t)(mirroredColumn/size)]) & (1 << (uint8_t)(row/size)))
 80025da:	79fa      	ldrb	r2, [r7, #7]
 80025dc:	7b79      	ldrb	r1, [r7, #13]
 80025de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80025e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	4618      	mov	r0, r3
 80025ea:	492f      	ldr	r1, [pc, #188]	@ (80026a8 <lcdPutChSized+0x194>)
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	440b      	add	r3, r1
 80025f6:	4403      	add	r3, r0
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	4619      	mov	r1, r3
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002602:	fbb2 f3f3 	udiv	r3, r2, r3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	fa41 f303 	asr.w	r3, r1, r3
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d02b      	beq.n	800266c <lcdPutChSized+0x158>
				lcdFilledRectangle(x+column, y+row, x+column+size-1, y+row+size-1, fgColour);
 8002614:	7bbb      	ldrb	r3, [r7, #14]
 8002616:	b29a      	uxth	r2, r3
 8002618:	88bb      	ldrh	r3, [r7, #4]
 800261a:	4413      	add	r3, r2
 800261c:	b29b      	uxth	r3, r3
 800261e:	b218      	sxth	r0, r3
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	b29a      	uxth	r2, r3
 8002624:	887b      	ldrh	r3, [r7, #2]
 8002626:	4413      	add	r3, r2
 8002628:	b29b      	uxth	r3, r3
 800262a:	b219      	sxth	r1, r3
 800262c:	7bbb      	ldrb	r3, [r7, #14]
 800262e:	b29a      	uxth	r2, r3
 8002630:	88bb      	ldrh	r3, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	b29a      	uxth	r2, r3
 8002636:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800263a:	b29b      	uxth	r3, r3
 800263c:	4413      	add	r3, r2
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29b      	uxth	r3, r3
 8002644:	b21c      	sxth	r4, r3
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	b29a      	uxth	r2, r3
 800264a:	887b      	ldrh	r3, [r7, #2]
 800264c:	4413      	add	r3, r2
 800264e:	b29a      	uxth	r2, r3
 8002650:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002654:	b29b      	uxth	r3, r3
 8002656:	4413      	add	r3, r2
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29b      	uxth	r3, r3
 800265e:	b21a      	sxth	r2, r3
 8002660:	883b      	ldrh	r3, [r7, #0]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	4613      	mov	r3, r2
 8002666:	4622      	mov	r2, r4
 8002668:	f7ff fd68 	bl	800213c <lcdFilledRectangle>
		for (column = 0; column < 6*size; column+=size)
 800266c:	7bba      	ldrb	r2, [r7, #14]
 800266e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002672:	4413      	add	r3, r2
 8002674:	73bb      	strb	r3, [r7, #14]
 8002676:	7bb9      	ldrb	r1, [r7, #14]
 8002678:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4299      	cmp	r1, r3
 8002686:	db9f      	blt.n	80025c8 <lcdPutChSized+0xb4>
	for (row = 0; row < 8*size; row+=size)
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800268e:	4413      	add	r3, r2
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	429a      	cmp	r2, r3
 800269c:	db91      	blt.n	80025c2 <lcdPutChSized+0xae>
		}
	}
}
 800269e:	bf00      	nop
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd90      	pop	{r4, r7, pc}
 80026a8:	08006c30 	.word	0x08006c30

080026ac <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	71fb      	strb	r3, [r7, #7]
 80026b6:	460b      	mov	r3, r1
 80026b8:	71bb      	strb	r3, [r7, #6]
 80026ba:	4613      	mov	r3, r2
 80026bc:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 80026be:	797b      	ldrb	r3, [r7, #5]
 80026c0:	02db      	lsls	r3, r3, #11
 80026c2:	b21a      	sxth	r2, r3
 80026c4:	79bb      	ldrb	r3, [r7, #6]
 80026c6:	019b      	lsls	r3, r3, #6
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	4313      	orrs	r3, r2
 80026cc:	b21a      	sxth	r2, r3
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	b21b      	sxth	r3, r3
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b21b      	sxth	r3, r3
 80026d6:	b29b      	uxth	r3, r3
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <lcdPutS>:
// it easy to place text
uint8_t lcdTextY(uint8_t y) { return y*8; }

// Plot a string of characters to the LCD
void lcdPutS(const char *string, int16_t x, int16_t y, uint16_t fgColour, uint16_t bgColour)
{
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b089      	sub	sp, #36	@ 0x24
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	4608      	mov	r0, r1
 80026ee:	4611      	mov	r1, r2
 80026f0:	461a      	mov	r2, r3
 80026f2:	4603      	mov	r3, r0
 80026f4:	817b      	strh	r3, [r7, #10]
 80026f6:	460b      	mov	r3, r1
 80026f8:	813b      	strh	r3, [r7, #8]
 80026fa:	4613      	mov	r3, r2
 80026fc:	80fb      	strh	r3, [r7, #6]
	int16_t origin = x;
 80026fe:	897b      	ldrh	r3, [r7, #10]
 8002700:	82bb      	strh	r3, [r7, #20]
	int16_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8002702:	2300      	movs	r3, #0
 8002704:	82fb      	strh	r3, [r7, #22]
 8002706:	e026      	b.n	8002756 <lcdPutS+0x72>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x < 10)
 8002708:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800270c:	2b09      	cmp	r3, #9
 800270e:	dc05      	bgt.n	800271c <lcdPutS+0x38>
		{
			x = origin;
 8002710:	8abb      	ldrh	r3, [r7, #20]
 8002712:	817b      	strh	r3, [r7, #10]
			y += 8;
 8002714:	893b      	ldrh	r3, [r7, #8]
 8002716:	3308      	adds	r3, #8
 8002718:	b29b      	uxth	r3, r3
 800271a:	813b      	strh	r3, [r7, #8]
		}

		// If we move past the bottom of the screen just exit
		if (y > 230) break;
 800271c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002720:	2be6      	cmp	r3, #230	@ 0xe6
 8002722:	dc21      	bgt.n	8002768 <lcdPutS+0x84>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 8002724:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	7818      	ldrb	r0, [r3, #0]
 800272e:	88fc      	ldrh	r4, [r7, #6]
 8002730:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002734:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002738:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	4623      	mov	r3, r4
 800273e:	f7ff fe5b 	bl	80023f8 <lcdPutCh>
		x -= 6;
 8002742:	897b      	ldrh	r3, [r7, #10]
 8002744:	3b06      	subs	r3, #6
 8002746:	b29b      	uxth	r3, r3
 8002748:	817b      	strh	r3, [r7, #10]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 800274a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800274e:	b29b      	uxth	r3, r3
 8002750:	3301      	adds	r3, #1
 8002752:	b29b      	uxth	r3, r3
 8002754:	82fb      	strh	r3, [r7, #22]
 8002756:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7fd fd38 	bl	80001d0 <strlen>
 8002760:	4603      	mov	r3, r0
 8002762:	429c      	cmp	r4, r3
 8002764:	d3d0      	bcc.n	8002708 <lcdPutS+0x24>
	}
}
 8002766:	e000      	b.n	800276a <lcdPutS+0x86>
		if (y > 230) break;
 8002768:	bf00      	nop
}
 800276a:	bf00      	nop
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	bd90      	pop	{r4, r7, pc}

08002772 <lcdPutSSized>:

// Plot a string of characters to the LCD
void lcdPutSSized(const char *string, int16_t x, int16_t y, uint16_t fgColour, uint16_t bgColour, uint8_t size)
{
 8002772:	b590      	push	{r4, r7, lr}
 8002774:	b089      	sub	sp, #36	@ 0x24
 8002776:	af02      	add	r7, sp, #8
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	4608      	mov	r0, r1
 800277c:	4611      	mov	r1, r2
 800277e:	461a      	mov	r2, r3
 8002780:	4603      	mov	r3, r0
 8002782:	817b      	strh	r3, [r7, #10]
 8002784:	460b      	mov	r3, r1
 8002786:	813b      	strh	r3, [r7, #8]
 8002788:	4613      	mov	r3, r2
 800278a:	80fb      	strh	r3, [r7, #6]
	x = x-size*6;
 800278c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002790:	b29b      	uxth	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	897b      	ldrh	r3, [r7, #10]
 800279e:	4413      	add	r3, r2
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	817b      	strh	r3, [r7, #10]
	int16_t origin = x;
 80027a4:	897b      	ldrh	r3, [r7, #10]
 80027a6:	82bb      	strh	r3, [r7, #20]
	int16_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	82fb      	strh	r3, [r7, #22]
 80027ac:	e056      	b.n	800285c <lcdPutSSized+0xea>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x < 1*size)
 80027ae:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80027b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80027b6:	429a      	cmp	r2, r3
 80027b8:	da0a      	bge.n	80027d0 <lcdPutSSized+0x5e>
		{
			x = origin;
 80027ba:	8abb      	ldrh	r3, [r7, #20]
 80027bc:	817b      	strh	r3, [r7, #10]
			y += 8*size;
 80027be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	893b      	ldrh	r3, [r7, #8]
 80027ca:	4413      	add	r3, r2
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	813b      	strh	r3, [r7, #8]
		}

		// If we move past the bottom of the screen just exit
		if (y > (239-6*size)) break;
 80027d0:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80027d4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80027d8:	4613      	mov	r3, r2
 80027da:	0092      	lsls	r2, r2, #2
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	33ef      	adds	r3, #239	@ 0xef
 80027e2:	4299      	cmp	r1, r3
 80027e4:	dc43      	bgt.n	800286e <lcdPutSSized+0xfc>

		// Plot the current character
		lcdPutChSized(string[characterNumber], x, y, fgColour, bgColour, size);
 80027e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4413      	add	r3, r2
 80027ee:	7818      	ldrb	r0, [r3, #0]
 80027f0:	88fc      	ldrh	r4, [r7, #6]
 80027f2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80027f6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80027fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	4623      	mov	r3, r4
 8002806:	f7ff fe85 	bl	8002514 <lcdPutChSized>
		if ((x-6*size)>0) x -= 6*size;
 800280a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800280e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002812:	4613      	mov	r3, r2
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	440b      	add	r3, r1
 800281c:	2b00      	cmp	r3, #0
 800281e:	dd0c      	ble.n	800283a <lcdPutSSized+0xc8>
 8002820:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002824:	b29b      	uxth	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	897b      	ldrh	r3, [r7, #10]
 8002832:	4413      	add	r3, r2
 8002834:	b29b      	uxth	r3, r3
 8002836:	817b      	strh	r3, [r7, #10]
 8002838:	e00a      	b.n	8002850 <lcdPutSSized+0xde>
		else
		{
			x = origin;
 800283a:	8abb      	ldrh	r3, [r7, #20]
 800283c:	817b      	strh	r3, [r7, #10]
			y += 8*size;
 800283e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002842:	b29b      	uxth	r3, r3
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	b29a      	uxth	r2, r3
 8002848:	893b      	ldrh	r3, [r7, #8]
 800284a:	4413      	add	r3, r2
 800284c:	b29b      	uxth	r3, r3
 800284e:	813b      	strh	r3, [r7, #8]
	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8002850:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002854:	b29b      	uxth	r3, r3
 8002856:	3301      	adds	r3, #1
 8002858:	b29b      	uxth	r3, r3
 800285a:	82fb      	strh	r3, [r7, #22]
 800285c:	f9b7 4016 	ldrsh.w	r4, [r7, #22]
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f7fd fcb5 	bl	80001d0 <strlen>
 8002866:	4603      	mov	r3, r0
 8002868:	429c      	cmp	r4, r3
 800286a:	d3a0      	bcc.n	80027ae <lcdPutSSized+0x3c>
		}
	}
}
 800286c:	e000      	b.n	8002870 <lcdPutSSized+0xfe>
		if (y > (239-6*size)) break;
 800286e:	bf00      	nop
}
 8002870:	bf00      	nop
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	bd90      	pop	{r4, r7, pc}

08002878 <threeDto2D>:

uint8_t threeDto2D(int16_t *points, float *playerCoord, float alpha, float *twoDCoords) {
 8002878:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800287c:	b090      	sub	sp, #64	@ 0x40
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	ed87 0a01 	vstr	s0, [r7, #4]
 8002888:	603a      	str	r2, [r7, #0]
	//points je 1D obsahuje X Y Z bodu
	float_t dx = (float_t)((float)(points[0]) - playerCoord[0]);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002890:	ee07 3a90 	vmov	s15, r3
 8002894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	edd3 7a00 	vldr	s15, [r3]
 800289e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	float_t dy = (float_t)((float)(points[1]) - playerCoord[1]);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	3302      	adds	r3, #2
 80028aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	3304      	adds	r3, #4
 80028ba:	edd3 7a00 	vldr	s15, [r3]
 80028be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float_t dz = (float_t)((float)(points[2]) - playerCoord[2]);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3304      	adds	r3, #4
 80028ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ce:	ee07 3a90 	vmov	s15, r3
 80028d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	3308      	adds	r3, #8
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	//float_t vz = sqrt(dx^2 + dy^2 + dz^2);	//vzdialenost od bodu euklidovska
	float_t vzh = sqrt((dx*dx) + (dy*dy));		//vzdialenost od bodu na xy osi
 80028e6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80028ea:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80028ee:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80028f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fa:	ee17 0a90 	vmov	r0, s15
 80028fe:	f7fd fe23 	bl	8000548 <__aeabi_f2d>
 8002902:	4602      	mov	r2, r0
 8002904:	460b      	mov	r3, r1
 8002906:	ec43 2b10 	vmov	d0, r2, r3
 800290a:	f002 fde1 	bl	80054d0 <sqrt>
 800290e:	ec53 2b10 	vmov	r2, r3, d0
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7fe f947 	bl	8000ba8 <__aeabi_d2f>
 800291a:	4603      	mov	r3, r0
 800291c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	//alfa je vlastne horizontalne natocenie kamery
	//beta je absolutne horizontalne natocenie telesa voci kamere
	float_t beta = atan(dy/dx) + (dx<=0)*3.1416*((alpha>0)-(alpha<=0));
 800291e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002922:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002926:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800292a:	ee16 0a90 	vmov	r0, s13
 800292e:	f7fd fe0b 	bl	8000548 <__aeabi_f2d>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	ec43 2b10 	vmov	d0, r2, r3
 800293a:	f002 fdf5 	bl	8005528 <atan>
 800293e:	ec59 8b10 	vmov	r8, r9, d0
 8002942:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002946:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294e:	d803      	bhi.n	8002958 <threeDto2D+0xe0>
 8002950:	f04f 0000 	mov.w	r0, #0
 8002954:	49bc      	ldr	r1, [pc, #752]	@ (8002c48 <threeDto2D+0x3d0>)
 8002956:	e003      	b.n	8002960 <threeDto2D+0xe8>
 8002958:	f04f 0000 	mov.w	r0, #0
 800295c:	f04f 0100 	mov.w	r1, #0
 8002960:	a3ad      	add	r3, pc, #692	@ (adr r3, 8002c18 <threeDto2D+0x3a0>)
 8002962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002966:	f7fd fe47 	bl	80005f8 <__aeabi_dmul>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4614      	mov	r4, r2
 8002970:	461d      	mov	r5, r3
 8002972:	edd7 7a01 	vldr	s15, [r7, #4]
 8002976:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297e:	bfcc      	ite	gt
 8002980:	2301      	movgt	r3, #1
 8002982:	2300      	movle	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	edd7 7a01 	vldr	s15, [r7, #4]
 800298c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002994:	bf94      	ite	ls
 8002996:	2301      	movls	r3, #1
 8002998:	2300      	movhi	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fdc0 	bl	8000524 <__aeabi_i2d>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4620      	mov	r0, r4
 80029aa:	4629      	mov	r1, r5
 80029ac:	f7fd fe24 	bl	80005f8 <__aeabi_dmul>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4640      	mov	r0, r8
 80029b6:	4649      	mov	r1, r9
 80029b8:	f7fd fc68 	bl	800028c <__adddf3>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f7fe f8f0 	bl	8000ba8 <__aeabi_d2f>
 80029c8:	4603      	mov	r3, r0
 80029ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	float_t gamma = beta - alpha;	//relativne horizontalne natocenie telesa voci kamere
 80029cc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80029d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80029d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	uint8_t success = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if((gamma>-1.5707)&&(gamma<1.5707)) {
 80029e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029e4:	f7fd fdb0 	bl	8000548 <__aeabi_f2d>
 80029e8:	a38d      	add	r3, pc, #564	@ (adr r3, 8002c20 <threeDto2D+0x3a8>)
 80029ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ee:	f7fe f893 	bl	8000b18 <__aeabi_dcmpgt>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00d      	beq.n	8002a14 <threeDto2D+0x19c>
 80029f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029fa:	f7fd fda5 	bl	8000548 <__aeabi_f2d>
 80029fe:	a38a      	add	r3, pc, #552	@ (adr r3, 8002c28 <threeDto2D+0x3b0>)
 8002a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a04:	f7fe f86a 	bl	8000adc <__aeabi_dcmplt>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <threeDto2D+0x19c>
		success = 1;	//ak je bod za kamerou, tak je to zle, este som to nedomyslel
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}

	float_t beta2 = atan(dz/vzh);	//kolmost telesa voci kamere
 8002a14:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002a18:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002a1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a20:	ee16 0a90 	vmov	r0, s13
 8002a24:	f7fd fd90 	bl	8000548 <__aeabi_f2d>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	ec43 2b10 	vmov	d0, r2, r3
 8002a30:	f002 fd7a 	bl	8005528 <atan>
 8002a34:	ec53 2b10 	vmov	r2, r3, d0
 8002a38:	4610      	mov	r0, r2
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	f7fe f8b4 	bl	8000ba8 <__aeabi_d2f>
 8002a40:	4603      	mov	r3, r0
 8002a42:	623b      	str	r3, [r7, #32]

	//beta3 - absolutna kolmost, gamma3 - relativna kolmost telesa voci kamere
	float_t beta3 = atan(dz/(vzh*cos(gamma))) + ((-1.57 > gamma)||(gamma > 1.57))*3.1416*((dz>0)-(dz<=0));
 8002a44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a46:	f7fd fd7f 	bl	8000548 <__aeabi_f2d>
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	460d      	mov	r5, r1
 8002a4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a50:	f7fd fd7a 	bl	8000548 <__aeabi_f2d>
 8002a54:	4680      	mov	r8, r0
 8002a56:	4689      	mov	r9, r1
 8002a58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a5a:	f7fd fd75 	bl	8000548 <__aeabi_f2d>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	ec43 2b10 	vmov	d0, r2, r3
 8002a66:	f002 fef7 	bl	8005858 <cos>
 8002a6a:	ec53 2b10 	vmov	r2, r3, d0
 8002a6e:	4640      	mov	r0, r8
 8002a70:	4649      	mov	r1, r9
 8002a72:	f7fd fdc1 	bl	80005f8 <__aeabi_dmul>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	f7fd fee5 	bl	800084c <__aeabi_ddiv>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	ec43 2b17 	vmov	d7, r2, r3
 8002a8a:	eeb0 0a47 	vmov.f32	s0, s14
 8002a8e:	eef0 0a67 	vmov.f32	s1, s15
 8002a92:	f002 fd49 	bl	8005528 <atan>
 8002a96:	ec59 8b10 	vmov	r8, r9, d0
 8002a9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a9c:	f7fd fd54 	bl	8000548 <__aeabi_f2d>
 8002aa0:	a363      	add	r3, pc, #396	@ (adr r3, 8002c30 <threeDto2D+0x3b8>)
 8002aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa6:	f7fe f819 	bl	8000adc <__aeabi_dcmplt>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <threeDto2D+0x24e>
 8002ab0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ab2:	f7fd fd49 	bl	8000548 <__aeabi_f2d>
 8002ab6:	a360      	add	r3, pc, #384	@ (adr r3, 8002c38 <threeDto2D+0x3c0>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f7fe f82c 	bl	8000b18 <__aeabi_dcmpgt>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <threeDto2D+0x252>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <threeDto2D+0x254>
 8002aca:	2300      	movs	r3, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fd29 	bl	8000524 <__aeabi_i2d>
 8002ad2:	a351      	add	r3, pc, #324	@ (adr r3, 8002c18 <threeDto2D+0x3a0>)
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f7fd fd8e 	bl	80005f8 <__aeabi_dmul>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4614      	mov	r4, r2
 8002ae2:	461d      	mov	r5, r3
 8002ae4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002ae8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af0:	bfcc      	ite	gt
 8002af2:	2301      	movgt	r3, #1
 8002af4:	2300      	movle	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002afe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b06:	bf94      	ite	ls
 8002b08:	2301      	movls	r3, #1
 8002b0a:	2300      	movhi	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7fd fd07 	bl	8000524 <__aeabi_i2d>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	f7fd fd6b 	bl	80005f8 <__aeabi_dmul>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4640      	mov	r0, r8
 8002b28:	4649      	mov	r1, r9
 8002b2a:	f7fd fbaf 	bl	800028c <__adddf3>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4610      	mov	r0, r2
 8002b34:	4619      	mov	r1, r3
 8002b36:	f7fe f837 	bl	8000ba8 <__aeabi_d2f>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	61fb      	str	r3, [r7, #28]
	float_t alfa2 = 0; //zatial nie je potreba
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	61bb      	str	r3, [r7, #24]
	float_t gamma3 = beta3 - alfa2;
 8002b44:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b48:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b50:	edc7 7a05 	vstr	s15, [r7, #20]

	// zo ziskanych uhlov vypocitame suradnice na obrazovke, 2 najdolezitejsie vzorce
	//twoDCoords[0] = 160+160*( 1.27 * sin(gamma) * cos(beta2) );	//povodne
	//twoDCoords[0] = 160+160*( 1.7 *fabs(gamma)*sin(gamma) * cos(beta2) ); //nieco je v pohode, ale nie
	twoDCoords[0] = 160+160*( 1.27 * gamma * cos(beta2) );	//tiez moze byt
 8002b54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002b56:	f7fd fcf7 	bl	8000548 <__aeabi_f2d>
 8002b5a:	a339      	add	r3, pc, #228	@ (adr r3, 8002c40 <threeDto2D+0x3c8>)
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	f7fd fd4a 	bl	80005f8 <__aeabi_dmul>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4614      	mov	r4, r2
 8002b6a:	461d      	mov	r5, r3
 8002b6c:	6a38      	ldr	r0, [r7, #32]
 8002b6e:	f7fd fceb 	bl	8000548 <__aeabi_f2d>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	ec43 2b10 	vmov	d0, r2, r3
 8002b7a:	f002 fe6d 	bl	8005858 <cos>
 8002b7e:	ec53 2b10 	vmov	r2, r3, d0
 8002b82:	4620      	mov	r0, r4
 8002b84:	4629      	mov	r1, r5
 8002b86:	f7fd fd37 	bl	80005f8 <__aeabi_dmul>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4610      	mov	r0, r2
 8002b90:	4619      	mov	r1, r3
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	4b2d      	ldr	r3, [pc, #180]	@ (8002c4c <threeDto2D+0x3d4>)
 8002b98:	f7fd fd2e 	bl	80005f8 <__aeabi_dmul>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	4b28      	ldr	r3, [pc, #160]	@ (8002c4c <threeDto2D+0x3d4>)
 8002baa:	f7fd fb6f 	bl	800028c <__adddf3>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f7fd fff7 	bl	8000ba8 <__aeabi_d2f>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	601a      	str	r2, [r3, #0]
	//twoDCoords[0] = 160+160*( 1.27 * gamma ); //jednoduche a funguje
	twoDCoords[1] = 120-160*( gamma3*1.27 ); //1.27
 8002bc0:	6978      	ldr	r0, [r7, #20]
 8002bc2:	f7fd fcc1 	bl	8000548 <__aeabi_f2d>
 8002bc6:	a31e      	add	r3, pc, #120	@ (adr r3, 8002c40 <threeDto2D+0x3c8>)
 8002bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bcc:	f7fd fd14 	bl	80005f8 <__aeabi_dmul>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <threeDto2D+0x3d4>)
 8002bde:	f7fd fd0b 	bl	80005f8 <__aeabi_dmul>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	f04f 0000 	mov.w	r0, #0
 8002bea:	4919      	ldr	r1, [pc, #100]	@ (8002c50 <threeDto2D+0x3d8>)
 8002bec:	f7fd fb4c 	bl	8000288 <__aeabi_dsub>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	1d1c      	adds	r4, r3, #4
 8002bfc:	f7fd ffd4 	bl	8000ba8 <__aeabi_d2f>
 8002c00:	4603      	mov	r3, r0
 8002c02:	6023      	str	r3, [r4, #0]

	return success;
 8002c04:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3740      	adds	r7, #64	@ 0x40
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c12:	bf00      	nop
 8002c14:	f3af 8000 	nop.w
 8002c18:	2e48e8a7 	.word	0x2e48e8a7
 8002c1c:	400921ff 	.word	0x400921ff
 8002c20:	52bd3c36 	.word	0x52bd3c36
 8002c24:	bff92196 	.word	0xbff92196
 8002c28:	52bd3c36 	.word	0x52bd3c36
 8002c2c:	3ff92196 	.word	0x3ff92196
 8002c30:	51eb851f 	.word	0x51eb851f
 8002c34:	bff91eb8 	.word	0xbff91eb8
 8002c38:	51eb851f 	.word	0x51eb851f
 8002c3c:	3ff91eb8 	.word	0x3ff91eb8
 8002c40:	851eb852 	.word	0x851eb852
 8002c44:	3ff451eb 	.word	0x3ff451eb
 8002c48:	3ff00000 	.word	0x3ff00000
 8002c4c:	40640000 	.word	0x40640000
 8002c50:	405e0000 	.word	0x405e0000

08002c54 <lcd3DPolyline>:
			break;
		}
	}
}

void lcd3DPolyline(int16_t *points, int16_t sides, uint16_t colour, float px, float py, float pz, float alpha, int8_t dotted, int8_t step){
 8002c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c58:	b093      	sub	sp, #76	@ 0x4c
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	61f8      	str	r0, [r7, #28]
 8002c5e:	4608      	mov	r0, r1
 8002c60:	4611      	mov	r1, r2
 8002c62:	ed87 0a05 	vstr	s0, [r7, #20]
 8002c66:	edc7 0a04 	vstr	s1, [r7, #16]
 8002c6a:	ed87 1a03 	vstr	s2, [r7, #12]
 8002c6e:	edc7 1a02 	vstr	s3, [r7, #8]
 8002c72:	461a      	mov	r2, r3
 8002c74:	4603      	mov	r3, r0
 8002c76:	837b      	strh	r3, [r7, #26]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	833b      	strh	r3, [r7, #24]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	71fb      	strb	r3, [r7, #7]
 8002c80:	466b      	mov	r3, sp
 8002c82:	461e      	mov	r6, r3
	int16_t polygonFormat[2*sides];
 8002c84:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c88:	0059      	lsls	r1, r3, #1
 8002c8a:	1e4b      	subs	r3, r1, #1
 8002c8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c8e:	460a      	mov	r2, r1
 8002c90:	2300      	movs	r3, #0
 8002c92:	4690      	mov	r8, r2
 8002c94:	4699      	mov	r9, r3
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8002ca2:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8002ca6:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8002caa:	460a      	mov	r2, r1
 8002cac:	2300      	movs	r3, #0
 8002cae:	4614      	mov	r4, r2
 8002cb0:	461d      	mov	r5, r3
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	012b      	lsls	r3, r5, #4
 8002cbc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002cc0:	0122      	lsls	r2, r4, #4
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	3307      	adds	r3, #7
 8002cc8:	08db      	lsrs	r3, r3, #3
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	ebad 0d03 	sub.w	sp, sp, r3
 8002cd0:	466b      	mov	r3, sp
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	float_t playerCoord[3] = {px, py, pz};
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	633b      	str	r3, [r7, #48]	@ 0x30
	float twoDCoords[2];  // Temporary array for results
	uint8_t success = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	for(int16_t i=0; i<sides; i++){
 8002cec:	2300      	movs	r3, #0
 8002cee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002cf2:	e03c      	b.n	8002d6e <lcd3DPolyline+0x11a>
		success = threeDto2D(&points[3 * i], playerCoord, alpha, twoDCoords);
 8002cf4:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	461a      	mov	r2, r3
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	4413      	add	r3, r2
 8002d06:	f107 0220 	add.w	r2, r7, #32
 8002d0a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002d0e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fdb0 	bl	8002878 <threeDto2D>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		if(!success) return;	//if any point is behing camera it doesn't plot the object
 8002d1e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <lcd3DPolyline+0xd6>
 8002d26:	46b5      	mov	sp, r6
 8002d28:	e07b      	b.n	8002e22 <lcd3DPolyline+0x1ce>
		polygonFormat[2 * i] = (int16_t)(twoDCoords[0]);
 8002d2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d2e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002d32:	005a      	lsls	r2, r3, #1
 8002d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d38:	ee17 3a90 	vmov	r3, s15
 8002d3c:	b219      	sxth	r1, r3
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d40:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		polygonFormat[2 * i + 1] = (int16_t)(twoDCoords[1]);
 8002d44:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d48:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d54:	ee17 3a90 	vmov	r3, s15
 8002d58:	b219      	sxth	r1, r3
 8002d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d5c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int16_t i=0; i<sides; i++){
 8002d60:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8002d6e:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 8002d72:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	dbbc      	blt.n	8002cf4 <lcd3DPolyline+0xa0>
	}
	int16_t xRes = 320;
 8002d7a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002d7e:	873b      	strh	r3, [r7, #56]	@ 0x38
	int16_t yRes = 240;
 8002d80:	23f0      	movs	r3, #240	@ 0xf0
 8002d82:	86fb      	strh	r3, [r7, #54]	@ 0x36
	for(int8_t i=0; i<sides; i++) {
 8002d84:	2300      	movs	r3, #0
 8002d86:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002d8a:	e042      	b.n	8002e12 <lcd3DPolyline+0x1be>
		if( (polygonFormat[2*i] > 0)&&(polygonFormat[2*i] < xRes)&&(polygonFormat[2*i+1] > 0)&&(polygonFormat[2*i+1] < yRes) ) {
 8002d8c:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8002d90:	005a      	lsls	r2, r3, #1
 8002d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d94:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	dd33      	ble.n	8002e04 <lcd3DPolyline+0x1b0>
 8002d9c:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8002da0:	005a      	lsls	r2, r3, #1
 8002da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002da8:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 8002dac:	429a      	cmp	r2, r3
 8002dae:	dd29      	ble.n	8002e04 <lcd3DPolyline+0x1b0>
 8002db0:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dba:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	dd20      	ble.n	8002e04 <lcd3DPolyline+0x1b0>
 8002dc2:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dcc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002dd0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	dd15      	ble.n	8002e04 <lcd3DPolyline+0x1b0>
			if(!dotted) {
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d107      	bne.n	8002df0 <lcd3DPolyline+0x19c>
				lcdPolyline( polygonFormat, sides, colour);
 8002de0:	8b3a      	ldrh	r2, [r7, #24]
 8002de2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002de6:	4619      	mov	r1, r3
 8002de8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002dea:	f7ff f8c5 	bl	8001f78 <lcdPolyline>
			}
			else{
				lcdDottedPolyline( polygonFormat, sides, colour, step);
			}
			break;
 8002dee:	e017      	b.n	8002e20 <lcd3DPolyline+0x1cc>
				lcdDottedPolyline( polygonFormat, sides, colour, step);
 8002df0:	f997 3068 	ldrsb.w	r3, [r7, #104]	@ 0x68
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	8b3a      	ldrh	r2, [r7, #24]
 8002df8:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8002dfc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002dfe:	f7ff f905 	bl	800200c <lcdDottedPolyline>
			break;
 8002e02:	e00d      	b.n	8002e20 <lcd3DPolyline+0x1cc>
	for(int8_t i=0; i<sides; i++) {
 8002e04:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8002e12:	f997 3045 	ldrsb.w	r3, [r7, #69]	@ 0x45
 8002e16:	b21b      	sxth	r3, r3
 8002e18:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	dcb5      	bgt.n	8002d8c <lcd3DPolyline+0x138>
 8002e20:	46b5      	mov	sp, r6
		}
	}
}
 8002e22:	374c      	adds	r7, #76	@ 0x4c
 8002e24:	46bd      	mov	sp, r7
 8002e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e70 <__NVIC_SetPriorityGrouping+0x44>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e48:	4013      	ands	r3, r2
 8002e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e5e:	4a04      	ldr	r2, [pc, #16]	@ (8002e70 <__NVIC_SetPriorityGrouping+0x44>)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	60d3      	str	r3, [r2, #12]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002e7c:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <LL_FLASH_SetLatency+0x24>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 0207 	bic.w	r2, r3, #7
 8002e84:	4904      	ldr	r1, [pc, #16]	@ (8002e98 <LL_FLASH_SetLatency+0x24>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	600b      	str	r3, [r1, #0]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	40022000 	.word	0x40022000

08002e9c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002ea0:	4b04      	ldr	r3, [pc, #16]	@ (8002eb4 <LL_FLASH_GetLatency+0x18>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40022000 	.word	0x40022000

08002eb8 <LL_GPIO_IsInputPinSet>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	bf0c      	ite	eq
 8002ed0:	2301      	moveq	r3, #1
 8002ed2:	2300      	movne	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002eec:	4b08      	ldr	r3, [pc, #32]	@ (8002f10 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	4907      	ldr	r1, [pc, #28]	@ (8002f10 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002ef8:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002efa:	69da      	ldr	r2, [r3, #28]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4013      	ands	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f02:	68fb      	ldr	r3, [r7, #12]
}
 8002f04:	bf00      	nop
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	40021000 	.word	0x40021000

08002f14 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f1c:	4b08      	ldr	r3, [pc, #32]	@ (8002f40 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002f1e:	699a      	ldr	r2, [r3, #24]
 8002f20:	4907      	ldr	r1, [pc, #28]	@ (8002f40 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f28:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f32:	68fb      	ldr	r3, [r7, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40021000 	.word	0x40021000

08002f44 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d106      	bne.n	8002f60 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002f52:	4b09      	ldr	r3, [pc, #36]	@ (8002f78 <LL_SYSTICK_SetClkSource+0x34>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a08      	ldr	r2, [pc, #32]	@ (8002f78 <LL_SYSTICK_SetClkSource+0x34>)
 8002f58:	f043 0304 	orr.w	r3, r3, #4
 8002f5c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8002f5e:	e005      	b.n	8002f6c <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8002f60:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <LL_SYSTICK_SetClkSource+0x34>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a04      	ldr	r2, [pc, #16]	@ (8002f78 <LL_SYSTICK_SetClkSource+0x34>)
 8002f66:	f023 0304 	bic.w	r3, r3, #4
 8002f6a:	6013      	str	r3, [r2, #0]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000e010 	.word	0xe000e010

08002f7c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002f80:	4b05      	ldr	r3, [pc, #20]	@ (8002f98 <LL_RCC_HSI_Enable+0x1c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a04      	ldr	r2, [pc, #16]	@ (8002f98 <LL_RCC_HSI_Enable+0x1c>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6013      	str	r3, [r2, #0]
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40021000 	.word	0x40021000

08002f9c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002fa0:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <LL_RCC_HSI_IsReady+0x20>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	40021000 	.word	0x40021000

08002fc0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8002fc8:	4b07      	ldr	r3, [pc, #28]	@ (8002fe8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4904      	ldr	r1, [pc, #16]	@ (8002fe8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	600b      	str	r3, [r1, #0]
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000

08002fec <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ff4:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <LL_RCC_SetSysClkSource+0x24>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f023 0203 	bic.w	r2, r3, #3
 8002ffc:	4904      	ldr	r1, [pc, #16]	@ (8003010 <LL_RCC_SetSysClkSource+0x24>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	40021000 	.word	0x40021000

08003014 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003018:	4b04      	ldr	r3, [pc, #16]	@ (800302c <LL_RCC_GetSysClkSource+0x18>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 030c 	and.w	r3, r3, #12
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000

08003030 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003038:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <LL_RCC_SetAHBPrescaler+0x24>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003040:	4904      	ldr	r1, [pc, #16]	@ (8003054 <LL_RCC_SetAHBPrescaler+0x24>)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	40021000 	.word	0x40021000

08003058 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003060:	4b06      	ldr	r3, [pc, #24]	@ (800307c <LL_RCC_SetAPB1Prescaler+0x24>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003068:	4904      	ldr	r1, [pc, #16]	@ (800307c <LL_RCC_SetAPB1Prescaler+0x24>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	40021000 	.word	0x40021000

08003080 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003088:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003090:	4904      	ldr	r1, [pc, #16]	@ (80030a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	40021000 	.word	0x40021000

080030a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80030ae:	2001      	movs	r0, #1
 80030b0:	f7ff ff30 	bl	8002f14 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80030b4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80030b8:	f7ff ff14 	bl	8002ee4 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030bc:	2003      	movs	r0, #3
 80030be:	f7ff feb5 	bl	8002e2c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030c2:	f000 f82d 	bl	8003120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030c6:	f7fe fb0d 	bl	80016e4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80030ca:	f000 fd4b 	bl	8003b64 <MX_SPI1_Init>

  initCD_Pin();
 80030ce:	f000 fde9 	bl	8003ca4 <initCD_Pin>
  initCS_Pin();
 80030d2:	f000 fdcd 	bl	8003c70 <initCS_Pin>
  initRES_Pin();
 80030d6:	f000 fe01 	bl	8003cdc <initRES_Pin>

  LL_mDelay(1);
 80030da:	2001      	movs	r0, #1
 80030dc:	f001 f998 	bl	8004410 <LL_mDelay>

  uint8_t buttonD4_val = 1;		//NOT NEEDED NOW
 80030e0:	2301      	movs	r3, #1
 80030e2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 2 */
  lcdInitialise(LCD_ORIENTATION3);
 80030e4:	20c0      	movs	r0, #192	@ 0xc0
 80030e6:	f7fe fbad 	bl	8001844 <lcdInitialise>
  lcdClearDisplay(decodeRgbValue(0, 0, 0));
 80030ea:	2200      	movs	r2, #0
 80030ec:	2100      	movs	r1, #0
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7ff fadc 	bl	80026ac <decodeRgbValue>
 80030f4:	4603      	mov	r3, r0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe fc84 	bl	8001a04 <lcdClearDisplay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//buttonD4_val = LL_GPIO_ReadInputPort(LL_GPIO_PIN_ALL);

	buttonD4_val = LL_GPIO_IsInputPinSet(GPIOB,GPIO_PIN_4);
 80030fc:	2110      	movs	r1, #16
 80030fe:	4807      	ldr	r0, [pc, #28]	@ (800311c <main+0x74>)
 8003100:	f7ff feda 	bl	8002eb8 <LL_GPIO_IsInputPinSet>
 8003104:	4603      	mov	r3, r0
 8003106:	71fb      	strb	r3, [r7, #7]
	if(buttonD4_val == 0)
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f6      	bne.n	80030fc <main+0x54>
	{
	  menu();
 800310e:	f000 f845 	bl	800319c <menu>
	  LL_mDelay(300);
 8003112:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8003116:	f001 f97b 	bl	8004410 <LL_mDelay>
	buttonD4_val = LL_GPIO_IsInputPinSet(GPIOB,GPIO_PIN_4);
 800311a:	e7ef      	b.n	80030fc <main+0x54>
 800311c:	48000400 	.word	0x48000400

08003120 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8003124:	2000      	movs	r0, #0
 8003126:	f7ff fea5 	bl	8002e74 <LL_FLASH_SetLatency>

	  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800312a:	f7ff feb7 	bl	8002e9c <LL_FLASH_GetLatency>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <SystemClock_Config+0x18>
	  {
	  Error_Handler();
 8003134:	f000 f82a 	bl	800318c <Error_Handler>
	  }
	  LL_RCC_HSI_Enable();
 8003138:	f7ff ff20 	bl	8002f7c <LL_RCC_HSI_Enable>

	   // Wait till HSI is ready
	  while(LL_RCC_HSI_IsReady() != 1)
 800313c:	bf00      	nop
 800313e:	f7ff ff2d 	bl	8002f9c <LL_RCC_HSI_IsReady>
 8003142:	4603      	mov	r3, r0
 8003144:	2b01      	cmp	r3, #1
 8003146:	d1fa      	bne.n	800313e <SystemClock_Config+0x1e>
	  {

	  }
	  LL_RCC_HSI_SetCalibTrimming(16);
 8003148:	2010      	movs	r0, #16
 800314a:	f7ff ff39 	bl	8002fc0 <LL_RCC_HSI_SetCalibTrimming>
	  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800314e:	2000      	movs	r0, #0
 8003150:	f7ff ff6e 	bl	8003030 <LL_RCC_SetAHBPrescaler>
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8003154:	2000      	movs	r0, #0
 8003156:	f7ff ff7f 	bl	8003058 <LL_RCC_SetAPB1Prescaler>
	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800315a:	2000      	movs	r0, #0
 800315c:	f7ff ff90 	bl	8003080 <LL_RCC_SetAPB2Prescaler>
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8003160:	2000      	movs	r0, #0
 8003162:	f7ff ff43 	bl	8002fec <LL_RCC_SetSysClkSource>

	   // Wait till System clock is ready
	  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8003166:	bf00      	nop
 8003168:	f7ff ff54 	bl	8003014 <LL_RCC_GetSysClkSource>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1fa      	bne.n	8003168 <SystemClock_Config+0x48>
	  {

	  }
	  LL_Init1msTick(8000000);
 8003172:	4805      	ldr	r0, [pc, #20]	@ (8003188 <SystemClock_Config+0x68>)
 8003174:	f001 f93e 	bl	80043f4 <LL_Init1msTick>
	  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8003178:	2004      	movs	r0, #4
 800317a:	f7ff fee3 	bl	8002f44 <LL_SYSTICK_SetClkSource>
	  LL_SetSystemCoreClock(8000000);
 800317e:	4802      	ldr	r0, [pc, #8]	@ (8003188 <SystemClock_Config+0x68>)
 8003180:	f001 f96c 	bl	800445c <LL_SetSystemCoreClock>
}
 8003184:	bf00      	nop
 8003186:	bd80      	pop	{r7, pc}
 8003188:	007a1200 	.word	0x007a1200

0800318c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <menu>:

#include "ili9163.h"
#include "gameLogic.h"
#include "spi.h"

void menu(){
 800319c:	b590      	push	{r4, r7, lr}
 800319e:	b093      	sub	sp, #76	@ 0x4c
 80031a0:	af02      	add	r7, sp, #8
	int16_t difficulity = 1;		//v options sa bude dat menit
 80031a2:	2301      	movs	r3, #1
 80031a4:	877b      	strh	r3, [r7, #58]	@ 0x3a

	lcdPutSSized("DOOM", 215, 0, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),8);
 80031a6:	221f      	movs	r2, #31
 80031a8:	211f      	movs	r1, #31
 80031aa:	201f      	movs	r0, #31
 80031ac:	f7ff fa7e 	bl	80026ac <decodeRgbValue>
 80031b0:	4603      	mov	r3, r0
 80031b2:	461c      	mov	r4, r3
 80031b4:	2200      	movs	r2, #0
 80031b6:	2100      	movs	r1, #0
 80031b8:	2000      	movs	r0, #0
 80031ba:	f7ff fa77 	bl	80026ac <decodeRgbValue>
 80031be:	4603      	mov	r3, r0
 80031c0:	461a      	mov	r2, r3
 80031c2:	2308      	movs	r3, #8
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	9200      	str	r2, [sp, #0]
 80031c8:	4623      	mov	r3, r4
 80031ca:	2200      	movs	r2, #0
 80031cc:	21d7      	movs	r1, #215	@ 0xd7
 80031ce:	48a3      	ldr	r0, [pc, #652]	@ (800345c <menu+0x2c0>)
 80031d0:	f7ff facf 	bl	8002772 <lcdPutSSized>
	lcdPutSSized("NEW GAME", 180, 64, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80031d4:	221f      	movs	r2, #31
 80031d6:	211f      	movs	r1, #31
 80031d8:	201f      	movs	r0, #31
 80031da:	f7ff fa67 	bl	80026ac <decodeRgbValue>
 80031de:	4603      	mov	r3, r0
 80031e0:	461c      	mov	r4, r3
 80031e2:	2200      	movs	r2, #0
 80031e4:	2100      	movs	r1, #0
 80031e6:	2000      	movs	r0, #0
 80031e8:	f7ff fa60 	bl	80026ac <decodeRgbValue>
 80031ec:	4603      	mov	r3, r0
 80031ee:	461a      	mov	r2, r3
 80031f0:	2302      	movs	r3, #2
 80031f2:	9301      	str	r3, [sp, #4]
 80031f4:	9200      	str	r2, [sp, #0]
 80031f6:	4623      	mov	r3, r4
 80031f8:	2240      	movs	r2, #64	@ 0x40
 80031fa:	21b4      	movs	r1, #180	@ 0xb4
 80031fc:	4898      	ldr	r0, [pc, #608]	@ (8003460 <menu+0x2c4>)
 80031fe:	f7ff fab8 	bl	8002772 <lcdPutSSized>
	lcdPutSSized("OPTIONS", 180, 80, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8003202:	221f      	movs	r2, #31
 8003204:	211f      	movs	r1, #31
 8003206:	201f      	movs	r0, #31
 8003208:	f7ff fa50 	bl	80026ac <decodeRgbValue>
 800320c:	4603      	mov	r3, r0
 800320e:	461c      	mov	r4, r3
 8003210:	2200      	movs	r2, #0
 8003212:	2100      	movs	r1, #0
 8003214:	2000      	movs	r0, #0
 8003216:	f7ff fa49 	bl	80026ac <decodeRgbValue>
 800321a:	4603      	mov	r3, r0
 800321c:	461a      	mov	r2, r3
 800321e:	2302      	movs	r3, #2
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	9200      	str	r2, [sp, #0]
 8003224:	4623      	mov	r3, r4
 8003226:	2250      	movs	r2, #80	@ 0x50
 8003228:	21b4      	movs	r1, #180	@ 0xb4
 800322a:	488e      	ldr	r0, [pc, #568]	@ (8003464 <menu+0x2c8>)
 800322c:	f7ff faa1 	bl	8002772 <lcdPutSSized>
	lcdPutSSized("LOAD GAME", 180, 96, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8003230:	221f      	movs	r2, #31
 8003232:	211f      	movs	r1, #31
 8003234:	201f      	movs	r0, #31
 8003236:	f7ff fa39 	bl	80026ac <decodeRgbValue>
 800323a:	4603      	mov	r3, r0
 800323c:	461c      	mov	r4, r3
 800323e:	2200      	movs	r2, #0
 8003240:	2100      	movs	r1, #0
 8003242:	2000      	movs	r0, #0
 8003244:	f7ff fa32 	bl	80026ac <decodeRgbValue>
 8003248:	4603      	mov	r3, r0
 800324a:	461a      	mov	r2, r3
 800324c:	2302      	movs	r3, #2
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	9200      	str	r2, [sp, #0]
 8003252:	4623      	mov	r3, r4
 8003254:	2260      	movs	r2, #96	@ 0x60
 8003256:	21b4      	movs	r1, #180	@ 0xb4
 8003258:	4883      	ldr	r0, [pc, #524]	@ (8003468 <menu+0x2cc>)
 800325a:	f7ff fa8a 	bl	8002772 <lcdPutSSized>
	lcdPutSSized("SAVE GAME", 180, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 800325e:	221f      	movs	r2, #31
 8003260:	211f      	movs	r1, #31
 8003262:	201f      	movs	r0, #31
 8003264:	f7ff fa22 	bl	80026ac <decodeRgbValue>
 8003268:	4603      	mov	r3, r0
 800326a:	461c      	mov	r4, r3
 800326c:	2200      	movs	r2, #0
 800326e:	2100      	movs	r1, #0
 8003270:	2000      	movs	r0, #0
 8003272:	f7ff fa1b 	bl	80026ac <decodeRgbValue>
 8003276:	4603      	mov	r3, r0
 8003278:	461a      	mov	r2, r3
 800327a:	2302      	movs	r3, #2
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	9200      	str	r2, [sp, #0]
 8003280:	4623      	mov	r3, r4
 8003282:	2270      	movs	r2, #112	@ 0x70
 8003284:	21b4      	movs	r1, #180	@ 0xb4
 8003286:	4879      	ldr	r0, [pc, #484]	@ (800346c <menu+0x2d0>)
 8003288:	f7ff fa73 	bl	8002772 <lcdPutSSized>
	lcdPutSSized("READ THIS!", 180, 128, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 800328c:	221f      	movs	r2, #31
 800328e:	211f      	movs	r1, #31
 8003290:	201f      	movs	r0, #31
 8003292:	f7ff fa0b 	bl	80026ac <decodeRgbValue>
 8003296:	4603      	mov	r3, r0
 8003298:	461c      	mov	r4, r3
 800329a:	2200      	movs	r2, #0
 800329c:	2100      	movs	r1, #0
 800329e:	2000      	movs	r0, #0
 80032a0:	f7ff fa04 	bl	80026ac <decodeRgbValue>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461a      	mov	r2, r3
 80032a8:	2302      	movs	r3, #2
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	9200      	str	r2, [sp, #0]
 80032ae:	4623      	mov	r3, r4
 80032b0:	2280      	movs	r2, #128	@ 0x80
 80032b2:	21b4      	movs	r1, #180	@ 0xb4
 80032b4:	486e      	ldr	r0, [pc, #440]	@ (8003470 <menu+0x2d4>)
 80032b6:	f7ff fa5c 	bl	8002772 <lcdPutSSized>
	lcdPutSSized("QUIT GAME", 180, 144, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80032ba:	221f      	movs	r2, #31
 80032bc:	211f      	movs	r1, #31
 80032be:	201f      	movs	r0, #31
 80032c0:	f7ff f9f4 	bl	80026ac <decodeRgbValue>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461c      	mov	r4, r3
 80032c8:	2200      	movs	r2, #0
 80032ca:	2100      	movs	r1, #0
 80032cc:	2000      	movs	r0, #0
 80032ce:	f7ff f9ed 	bl	80026ac <decodeRgbValue>
 80032d2:	4603      	mov	r3, r0
 80032d4:	461a      	mov	r2, r3
 80032d6:	2302      	movs	r3, #2
 80032d8:	9301      	str	r3, [sp, #4]
 80032da:	9200      	str	r2, [sp, #0]
 80032dc:	4623      	mov	r3, r4
 80032de:	2290      	movs	r2, #144	@ 0x90
 80032e0:	21b4      	movs	r1, #180	@ 0xb4
 80032e2:	4864      	ldr	r0, [pc, #400]	@ (8003474 <menu+0x2d8>)
 80032e4:	f7ff fa45 	bl	8002772 <lcdPutSSized>

	int16_t ammo = 24;
 80032e8:	2318      	movs	r3, #24
 80032ea:	873b      	strh	r3, [r7, #56]	@ 0x38
	int16_t health = 78;
 80032ec:	234e      	movs	r3, #78	@ 0x4e
 80032ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
	int16_t armor = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	86bb      	strh	r3, [r7, #52]	@ 0x34
	char ammoText[16];
	char healthText[16];
	char armorText[16];


	lcdPutS("AMMO", 250, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 80032f4:	221f      	movs	r2, #31
 80032f6:	211f      	movs	r1, #31
 80032f8:	201f      	movs	r0, #31
 80032fa:	f7ff f9d7 	bl	80026ac <decodeRgbValue>
 80032fe:	4603      	mov	r3, r0
 8003300:	461c      	mov	r4, r3
 8003302:	2200      	movs	r2, #0
 8003304:	2100      	movs	r1, #0
 8003306:	2000      	movs	r0, #0
 8003308:	f7ff f9d0 	bl	80026ac <decodeRgbValue>
 800330c:	4603      	mov	r3, r0
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	4623      	mov	r3, r4
 8003312:	22e6      	movs	r2, #230	@ 0xe6
 8003314:	21fa      	movs	r1, #250	@ 0xfa
 8003316:	4858      	ldr	r0, [pc, #352]	@ (8003478 <menu+0x2dc>)
 8003318:	f7ff f9e4 	bl	80026e4 <lcdPutS>
	sprintf(ammoText, "%d", ammo);
 800331c:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 8003320:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003324:	4955      	ldr	r1, [pc, #340]	@ (800347c <menu+0x2e0>)
 8003326:	4618      	mov	r0, r3
 8003328:	f001 fa90 	bl	800484c <siprintf>
	lcdPutS(ammoText, 240, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 800332c:	221f      	movs	r2, #31
 800332e:	211f      	movs	r1, #31
 8003330:	201f      	movs	r0, #31
 8003332:	f7ff f9bb 	bl	80026ac <decodeRgbValue>
 8003336:	4603      	mov	r3, r0
 8003338:	461c      	mov	r4, r3
 800333a:	2200      	movs	r2, #0
 800333c:	2100      	movs	r1, #0
 800333e:	2000      	movs	r0, #0
 8003340:	f7ff f9b4 	bl	80026ac <decodeRgbValue>
 8003344:	4603      	mov	r3, r0
 8003346:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	4623      	mov	r3, r4
 800334e:	22de      	movs	r2, #222	@ 0xde
 8003350:	21f0      	movs	r1, #240	@ 0xf0
 8003352:	f7ff f9c7 	bl	80026e4 <lcdPutS>

	lcdPutS("HEALTH", 145, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 8003356:	221f      	movs	r2, #31
 8003358:	211f      	movs	r1, #31
 800335a:	201f      	movs	r0, #31
 800335c:	f7ff f9a6 	bl	80026ac <decodeRgbValue>
 8003360:	4603      	mov	r3, r0
 8003362:	461c      	mov	r4, r3
 8003364:	2200      	movs	r2, #0
 8003366:	2100      	movs	r1, #0
 8003368:	2000      	movs	r0, #0
 800336a:	f7ff f99f 	bl	80026ac <decodeRgbValue>
 800336e:	4603      	mov	r3, r0
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	4623      	mov	r3, r4
 8003374:	22e6      	movs	r2, #230	@ 0xe6
 8003376:	2191      	movs	r1, #145	@ 0x91
 8003378:	4841      	ldr	r0, [pc, #260]	@ (8003480 <menu+0x2e4>)
 800337a:	f7ff f9b3 	bl	80026e4 <lcdPutS>
	sprintf(healthText, "%d%%", health);
 800337e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8003382:	f107 0314 	add.w	r3, r7, #20
 8003386:	493f      	ldr	r1, [pc, #252]	@ (8003484 <menu+0x2e8>)
 8003388:	4618      	mov	r0, r3
 800338a:	f001 fa5f 	bl	800484c <siprintf>
	lcdPutS(healthText, 125, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 800338e:	221f      	movs	r2, #31
 8003390:	211f      	movs	r1, #31
 8003392:	201f      	movs	r0, #31
 8003394:	f7ff f98a 	bl	80026ac <decodeRgbValue>
 8003398:	4603      	mov	r3, r0
 800339a:	461c      	mov	r4, r3
 800339c:	2200      	movs	r2, #0
 800339e:	2100      	movs	r1, #0
 80033a0:	2000      	movs	r0, #0
 80033a2:	f7ff f983 	bl	80026ac <decodeRgbValue>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f107 0014 	add.w	r0, r7, #20
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	4623      	mov	r3, r4
 80033b0:	22de      	movs	r2, #222	@ 0xde
 80033b2:	217d      	movs	r1, #125	@ 0x7d
 80033b4:	f7ff f996 	bl	80026e4 <lcdPutS>

	lcdPutS("ARMOR", 35, 230, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 80033b8:	221f      	movs	r2, #31
 80033ba:	211f      	movs	r1, #31
 80033bc:	201f      	movs	r0, #31
 80033be:	f7ff f975 	bl	80026ac <decodeRgbValue>
 80033c2:	4603      	mov	r3, r0
 80033c4:	461c      	mov	r4, r3
 80033c6:	2200      	movs	r2, #0
 80033c8:	2100      	movs	r1, #0
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7ff f96e 	bl	80026ac <decodeRgbValue>
 80033d0:	4603      	mov	r3, r0
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	4623      	mov	r3, r4
 80033d6:	22e6      	movs	r2, #230	@ 0xe6
 80033d8:	2123      	movs	r1, #35	@ 0x23
 80033da:	482b      	ldr	r0, [pc, #172]	@ (8003488 <menu+0x2ec>)
 80033dc:	f7ff f982 	bl	80026e4 <lcdPutS>
	sprintf(armorText, "%d%%", armor);
 80033e0:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	@ 0x34
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	4927      	ldr	r1, [pc, #156]	@ (8003484 <menu+0x2e8>)
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 fa2f 	bl	800484c <siprintf>
	lcdPutS(armorText, 20, 222, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0));
 80033ee:	221f      	movs	r2, #31
 80033f0:	211f      	movs	r1, #31
 80033f2:	201f      	movs	r0, #31
 80033f4:	f7ff f95a 	bl	80026ac <decodeRgbValue>
 80033f8:	4603      	mov	r3, r0
 80033fa:	461c      	mov	r4, r3
 80033fc:	2200      	movs	r2, #0
 80033fe:	2100      	movs	r1, #0
 8003400:	2000      	movs	r0, #0
 8003402:	f7ff f953 	bl	80026ac <decodeRgbValue>
 8003406:	4603      	mov	r3, r0
 8003408:	1d38      	adds	r0, r7, #4
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	4623      	mov	r3, r4
 800340e:	22de      	movs	r2, #222	@ 0xde
 8003410:	2114      	movs	r1, #20
 8003412:	f7ff f967 	bl	80026e4 <lcdPutS>

		int select = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	63fb      	str	r3, [r7, #60]	@ 0x3c
		while(select != 6)	//main menu cycle
 800341a:	e171      	b.n	8003700 <menu+0x564>
		{

			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) == GPIO_PIN_RESET)	//choose lower option
 800341c:	2102      	movs	r1, #2
 800341e:	481b      	ldr	r0, [pc, #108]	@ (800348c <menu+0x2f0>)
 8003420:	f000 fdb2 	bl	8003f88 <HAL_GPIO_ReadPin>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10b      	bne.n	8003442 <menu+0x2a6>
			{
				if(select == 0)
 800342a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d102      	bne.n	8003436 <menu+0x29a>
					select = 5;
 8003430:	2305      	movs	r3, #5
 8003432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003434:	e005      	b.n	8003442 <menu+0x2a6>
				else if(select != 0)
 8003436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <menu+0x2a6>
					select--;
 800343c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800343e:	3b01      	subs	r3, #1
 8003440:	63fb      	str	r3, [r7, #60]	@ 0x3c
			}

			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0) == GPIO_PIN_RESET)	//choose option above
 8003442:	2101      	movs	r1, #1
 8003444:	4811      	ldr	r0, [pc, #68]	@ (800348c <menu+0x2f0>)
 8003446:	f000 fd9f 	bl	8003f88 <HAL_GPIO_ReadPin>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d125      	bne.n	800349c <menu+0x300>
			{
				if(select == 5)
 8003450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003452:	2b05      	cmp	r3, #5
 8003454:	d11c      	bne.n	8003490 <menu+0x2f4>
					select = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800345a:	e01f      	b.n	800349c <menu+0x300>
 800345c:	08006bc0 	.word	0x08006bc0
 8003460:	08006bc8 	.word	0x08006bc8
 8003464:	08006bd4 	.word	0x08006bd4
 8003468:	08006bdc 	.word	0x08006bdc
 800346c:	08006be8 	.word	0x08006be8
 8003470:	08006bf4 	.word	0x08006bf4
 8003474:	08006c00 	.word	0x08006c00
 8003478:	08006c0c 	.word	0x08006c0c
 800347c:	08006c14 	.word	0x08006c14
 8003480:	08006c18 	.word	0x08006c18
 8003484:	08006c20 	.word	0x08006c20
 8003488:	08006c28 	.word	0x08006c28
 800348c:	48000400 	.word	0x48000400
				else if(select != 5)
 8003490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003492:	2b05      	cmp	r3, #5
 8003494:	d002      	beq.n	800349c <menu+0x300>
					select++;
 8003496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003498:	3301      	adds	r3, #1
 800349a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			}

			if(select == 0)
 800349c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d12d      	bne.n	80034fe <menu+0x362>
			{
				lcdPutSSized("NEW GAME", 180, 64, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 80034a2:	2200      	movs	r2, #0
 80034a4:	2100      	movs	r1, #0
 80034a6:	2000      	movs	r0, #0
 80034a8:	f7ff f900 	bl	80026ac <decodeRgbValue>
 80034ac:	4603      	mov	r3, r0
 80034ae:	461c      	mov	r4, r3
 80034b0:	2200      	movs	r2, #0
 80034b2:	2100      	movs	r1, #0
 80034b4:	2000      	movs	r0, #0
 80034b6:	f7ff f8f9 	bl	80026ac <decodeRgbValue>
 80034ba:	4603      	mov	r3, r0
 80034bc:	461a      	mov	r2, r3
 80034be:	2302      	movs	r3, #2
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	9200      	str	r2, [sp, #0]
 80034c4:	4623      	mov	r3, r4
 80034c6:	2240      	movs	r2, #64	@ 0x40
 80034c8:	21b4      	movs	r1, #180	@ 0xb4
 80034ca:	48d8      	ldr	r0, [pc, #864]	@ (800382c <menu+0x690>)
 80034cc:	f7ff f951 	bl	8002772 <lcdPutSSized>
				lcdPutSSized("NEW GAME", 180, 64, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80034d0:	221f      	movs	r2, #31
 80034d2:	211f      	movs	r1, #31
 80034d4:	201f      	movs	r0, #31
 80034d6:	f7ff f8e9 	bl	80026ac <decodeRgbValue>
 80034da:	4603      	mov	r3, r0
 80034dc:	461c      	mov	r4, r3
 80034de:	2200      	movs	r2, #0
 80034e0:	2100      	movs	r1, #0
 80034e2:	2000      	movs	r0, #0
 80034e4:	f7ff f8e2 	bl	80026ac <decodeRgbValue>
 80034e8:	4603      	mov	r3, r0
 80034ea:	461a      	mov	r2, r3
 80034ec:	2302      	movs	r3, #2
 80034ee:	9301      	str	r3, [sp, #4]
 80034f0:	9200      	str	r2, [sp, #0]
 80034f2:	4623      	mov	r3, r4
 80034f4:	2240      	movs	r2, #64	@ 0x40
 80034f6:	21b4      	movs	r1, #180	@ 0xb4
 80034f8:	48cc      	ldr	r0, [pc, #816]	@ (800382c <menu+0x690>)
 80034fa:	f7ff f93a 	bl	8002772 <lcdPutSSized>
			}
			if(select == 1)
 80034fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d12d      	bne.n	8003560 <menu+0x3c4>
			{
				lcdPutSSized("OPTIONS", 180, 80, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8003504:	2200      	movs	r2, #0
 8003506:	2100      	movs	r1, #0
 8003508:	2000      	movs	r0, #0
 800350a:	f7ff f8cf 	bl	80026ac <decodeRgbValue>
 800350e:	4603      	mov	r3, r0
 8003510:	461c      	mov	r4, r3
 8003512:	2200      	movs	r2, #0
 8003514:	2100      	movs	r1, #0
 8003516:	2000      	movs	r0, #0
 8003518:	f7ff f8c8 	bl	80026ac <decodeRgbValue>
 800351c:	4603      	mov	r3, r0
 800351e:	461a      	mov	r2, r3
 8003520:	2302      	movs	r3, #2
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	9200      	str	r2, [sp, #0]
 8003526:	4623      	mov	r3, r4
 8003528:	2250      	movs	r2, #80	@ 0x50
 800352a:	21b4      	movs	r1, #180	@ 0xb4
 800352c:	48c0      	ldr	r0, [pc, #768]	@ (8003830 <menu+0x694>)
 800352e:	f7ff f920 	bl	8002772 <lcdPutSSized>
				lcdPutSSized("OPTIONS", 180, 80, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8003532:	221f      	movs	r2, #31
 8003534:	211f      	movs	r1, #31
 8003536:	201f      	movs	r0, #31
 8003538:	f7ff f8b8 	bl	80026ac <decodeRgbValue>
 800353c:	4603      	mov	r3, r0
 800353e:	461c      	mov	r4, r3
 8003540:	2200      	movs	r2, #0
 8003542:	2100      	movs	r1, #0
 8003544:	2000      	movs	r0, #0
 8003546:	f7ff f8b1 	bl	80026ac <decodeRgbValue>
 800354a:	4603      	mov	r3, r0
 800354c:	461a      	mov	r2, r3
 800354e:	2302      	movs	r3, #2
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	9200      	str	r2, [sp, #0]
 8003554:	4623      	mov	r3, r4
 8003556:	2250      	movs	r2, #80	@ 0x50
 8003558:	21b4      	movs	r1, #180	@ 0xb4
 800355a:	48b5      	ldr	r0, [pc, #724]	@ (8003830 <menu+0x694>)
 800355c:	f7ff f909 	bl	8002772 <lcdPutSSized>
			}
			if(select == 2)
 8003560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003562:	2b02      	cmp	r3, #2
 8003564:	d12d      	bne.n	80035c2 <menu+0x426>
			{
				lcdPutSSized("LOAD GAME", 180, 96, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8003566:	2200      	movs	r2, #0
 8003568:	2100      	movs	r1, #0
 800356a:	2000      	movs	r0, #0
 800356c:	f7ff f89e 	bl	80026ac <decodeRgbValue>
 8003570:	4603      	mov	r3, r0
 8003572:	461c      	mov	r4, r3
 8003574:	2200      	movs	r2, #0
 8003576:	2100      	movs	r1, #0
 8003578:	2000      	movs	r0, #0
 800357a:	f7ff f897 	bl	80026ac <decodeRgbValue>
 800357e:	4603      	mov	r3, r0
 8003580:	461a      	mov	r2, r3
 8003582:	2302      	movs	r3, #2
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	9200      	str	r2, [sp, #0]
 8003588:	4623      	mov	r3, r4
 800358a:	2260      	movs	r2, #96	@ 0x60
 800358c:	21b4      	movs	r1, #180	@ 0xb4
 800358e:	48a9      	ldr	r0, [pc, #676]	@ (8003834 <menu+0x698>)
 8003590:	f7ff f8ef 	bl	8002772 <lcdPutSSized>
				lcdPutSSized("LOAD GAME", 180, 96, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8003594:	221f      	movs	r2, #31
 8003596:	211f      	movs	r1, #31
 8003598:	201f      	movs	r0, #31
 800359a:	f7ff f887 	bl	80026ac <decodeRgbValue>
 800359e:	4603      	mov	r3, r0
 80035a0:	461c      	mov	r4, r3
 80035a2:	2200      	movs	r2, #0
 80035a4:	2100      	movs	r1, #0
 80035a6:	2000      	movs	r0, #0
 80035a8:	f7ff f880 	bl	80026ac <decodeRgbValue>
 80035ac:	4603      	mov	r3, r0
 80035ae:	461a      	mov	r2, r3
 80035b0:	2302      	movs	r3, #2
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	9200      	str	r2, [sp, #0]
 80035b6:	4623      	mov	r3, r4
 80035b8:	2260      	movs	r2, #96	@ 0x60
 80035ba:	21b4      	movs	r1, #180	@ 0xb4
 80035bc:	489d      	ldr	r0, [pc, #628]	@ (8003834 <menu+0x698>)
 80035be:	f7ff f8d8 	bl	8002772 <lcdPutSSized>
			}
			if(select == 3)
 80035c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d12d      	bne.n	8003624 <menu+0x488>
			{
				lcdPutSSized("SAVE GAME", 180, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 80035c8:	2200      	movs	r2, #0
 80035ca:	2100      	movs	r1, #0
 80035cc:	2000      	movs	r0, #0
 80035ce:	f7ff f86d 	bl	80026ac <decodeRgbValue>
 80035d2:	4603      	mov	r3, r0
 80035d4:	461c      	mov	r4, r3
 80035d6:	2200      	movs	r2, #0
 80035d8:	2100      	movs	r1, #0
 80035da:	2000      	movs	r0, #0
 80035dc:	f7ff f866 	bl	80026ac <decodeRgbValue>
 80035e0:	4603      	mov	r3, r0
 80035e2:	461a      	mov	r2, r3
 80035e4:	2302      	movs	r3, #2
 80035e6:	9301      	str	r3, [sp, #4]
 80035e8:	9200      	str	r2, [sp, #0]
 80035ea:	4623      	mov	r3, r4
 80035ec:	2270      	movs	r2, #112	@ 0x70
 80035ee:	21b4      	movs	r1, #180	@ 0xb4
 80035f0:	4891      	ldr	r0, [pc, #580]	@ (8003838 <menu+0x69c>)
 80035f2:	f7ff f8be 	bl	8002772 <lcdPutSSized>
				lcdPutSSized("SAVE GAME", 180, 112, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80035f6:	221f      	movs	r2, #31
 80035f8:	211f      	movs	r1, #31
 80035fa:	201f      	movs	r0, #31
 80035fc:	f7ff f856 	bl	80026ac <decodeRgbValue>
 8003600:	4603      	mov	r3, r0
 8003602:	461c      	mov	r4, r3
 8003604:	2200      	movs	r2, #0
 8003606:	2100      	movs	r1, #0
 8003608:	2000      	movs	r0, #0
 800360a:	f7ff f84f 	bl	80026ac <decodeRgbValue>
 800360e:	4603      	mov	r3, r0
 8003610:	461a      	mov	r2, r3
 8003612:	2302      	movs	r3, #2
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	9200      	str	r2, [sp, #0]
 8003618:	4623      	mov	r3, r4
 800361a:	2270      	movs	r2, #112	@ 0x70
 800361c:	21b4      	movs	r1, #180	@ 0xb4
 800361e:	4886      	ldr	r0, [pc, #536]	@ (8003838 <menu+0x69c>)
 8003620:	f7ff f8a7 	bl	8002772 <lcdPutSSized>
			}
			if(select == 4)
 8003624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003626:	2b04      	cmp	r3, #4
 8003628:	d12d      	bne.n	8003686 <menu+0x4ea>
			{
				lcdPutSSized("READ THIS!", 180, 128, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 800362a:	2200      	movs	r2, #0
 800362c:	2100      	movs	r1, #0
 800362e:	2000      	movs	r0, #0
 8003630:	f7ff f83c 	bl	80026ac <decodeRgbValue>
 8003634:	4603      	mov	r3, r0
 8003636:	461c      	mov	r4, r3
 8003638:	2200      	movs	r2, #0
 800363a:	2100      	movs	r1, #0
 800363c:	2000      	movs	r0, #0
 800363e:	f7ff f835 	bl	80026ac <decodeRgbValue>
 8003642:	4603      	mov	r3, r0
 8003644:	461a      	mov	r2, r3
 8003646:	2302      	movs	r3, #2
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	9200      	str	r2, [sp, #0]
 800364c:	4623      	mov	r3, r4
 800364e:	2280      	movs	r2, #128	@ 0x80
 8003650:	21b4      	movs	r1, #180	@ 0xb4
 8003652:	487a      	ldr	r0, [pc, #488]	@ (800383c <menu+0x6a0>)
 8003654:	f7ff f88d 	bl	8002772 <lcdPutSSized>
				lcdPutSSized("READ THIS!", 180, 128, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 8003658:	221f      	movs	r2, #31
 800365a:	211f      	movs	r1, #31
 800365c:	201f      	movs	r0, #31
 800365e:	f7ff f825 	bl	80026ac <decodeRgbValue>
 8003662:	4603      	mov	r3, r0
 8003664:	461c      	mov	r4, r3
 8003666:	2200      	movs	r2, #0
 8003668:	2100      	movs	r1, #0
 800366a:	2000      	movs	r0, #0
 800366c:	f7ff f81e 	bl	80026ac <decodeRgbValue>
 8003670:	4603      	mov	r3, r0
 8003672:	461a      	mov	r2, r3
 8003674:	2302      	movs	r3, #2
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	9200      	str	r2, [sp, #0]
 800367a:	4623      	mov	r3, r4
 800367c:	2280      	movs	r2, #128	@ 0x80
 800367e:	21b4      	movs	r1, #180	@ 0xb4
 8003680:	486e      	ldr	r0, [pc, #440]	@ (800383c <menu+0x6a0>)
 8003682:	f7ff f876 	bl	8002772 <lcdPutSSized>
			}
			if(select == 5)
 8003686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003688:	2b05      	cmp	r3, #5
 800368a:	d12d      	bne.n	80036e8 <menu+0x54c>
			{
				lcdPutSSized("QUIT GAME", 180, 144, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 800368c:	2200      	movs	r2, #0
 800368e:	2100      	movs	r1, #0
 8003690:	2000      	movs	r0, #0
 8003692:	f7ff f80b 	bl	80026ac <decodeRgbValue>
 8003696:	4603      	mov	r3, r0
 8003698:	461c      	mov	r4, r3
 800369a:	2200      	movs	r2, #0
 800369c:	2100      	movs	r1, #0
 800369e:	2000      	movs	r0, #0
 80036a0:	f7ff f804 	bl	80026ac <decodeRgbValue>
 80036a4:	4603      	mov	r3, r0
 80036a6:	461a      	mov	r2, r3
 80036a8:	2302      	movs	r3, #2
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	9200      	str	r2, [sp, #0]
 80036ae:	4623      	mov	r3, r4
 80036b0:	2290      	movs	r2, #144	@ 0x90
 80036b2:	21b4      	movs	r1, #180	@ 0xb4
 80036b4:	4862      	ldr	r0, [pc, #392]	@ (8003840 <menu+0x6a4>)
 80036b6:	f7ff f85c 	bl	8002772 <lcdPutSSized>
				lcdPutSSized("QUIT GAME", 180, 144, decodeRgbValue(31, 31, 31), decodeRgbValue(0, 0, 0),2);
 80036ba:	221f      	movs	r2, #31
 80036bc:	211f      	movs	r1, #31
 80036be:	201f      	movs	r0, #31
 80036c0:	f7fe fff4 	bl	80026ac <decodeRgbValue>
 80036c4:	4603      	mov	r3, r0
 80036c6:	461c      	mov	r4, r3
 80036c8:	2200      	movs	r2, #0
 80036ca:	2100      	movs	r1, #0
 80036cc:	2000      	movs	r0, #0
 80036ce:	f7fe ffed 	bl	80026ac <decodeRgbValue>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	2302      	movs	r3, #2
 80036d8:	9301      	str	r3, [sp, #4]
 80036da:	9200      	str	r2, [sp, #0]
 80036dc:	4623      	mov	r3, r4
 80036de:	2290      	movs	r2, #144	@ 0x90
 80036e0:	21b4      	movs	r1, #180	@ 0xb4
 80036e2:	4857      	ldr	r0, [pc, #348]	@ (8003840 <menu+0x6a4>)
 80036e4:	f7ff f845 	bl	8002772 <lcdPutSSized>
			}

			//confirm your option
			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1) == GPIO_PIN_RESET && select == 0)
 80036e8:	2102      	movs	r1, #2
 80036ea:	4856      	ldr	r0, [pc, #344]	@ (8003844 <menu+0x6a8>)
 80036ec:	f000 fc4c 	bl	8003f88 <HAL_GPIO_ReadPin>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d104      	bne.n	8003700 <menu+0x564>
 80036f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <menu+0x564>
				select = 6;
 80036fc:	2306      	movs	r3, #6
 80036fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		while(select != 6)	//main menu cycle
 8003700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003702:	2b06      	cmp	r3, #6
 8003704:	f47f ae8a 	bne.w	800341c <menu+0x280>


		}

	//delete the menu
	lcdPutSSized("DOOM", 215, 0, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),8);
 8003708:	2200      	movs	r2, #0
 800370a:	2100      	movs	r1, #0
 800370c:	2000      	movs	r0, #0
 800370e:	f7fe ffcd 	bl	80026ac <decodeRgbValue>
 8003712:	4603      	mov	r3, r0
 8003714:	461c      	mov	r4, r3
 8003716:	2200      	movs	r2, #0
 8003718:	2100      	movs	r1, #0
 800371a:	2000      	movs	r0, #0
 800371c:	f7fe ffc6 	bl	80026ac <decodeRgbValue>
 8003720:	4603      	mov	r3, r0
 8003722:	461a      	mov	r2, r3
 8003724:	2308      	movs	r3, #8
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	9200      	str	r2, [sp, #0]
 800372a:	4623      	mov	r3, r4
 800372c:	2200      	movs	r2, #0
 800372e:	21d7      	movs	r1, #215	@ 0xd7
 8003730:	4845      	ldr	r0, [pc, #276]	@ (8003848 <menu+0x6ac>)
 8003732:	f7ff f81e 	bl	8002772 <lcdPutSSized>
	lcdPutSSized("NEW GAME", 180, 64, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8003736:	2200      	movs	r2, #0
 8003738:	2100      	movs	r1, #0
 800373a:	2000      	movs	r0, #0
 800373c:	f7fe ffb6 	bl	80026ac <decodeRgbValue>
 8003740:	4603      	mov	r3, r0
 8003742:	461c      	mov	r4, r3
 8003744:	2200      	movs	r2, #0
 8003746:	2100      	movs	r1, #0
 8003748:	2000      	movs	r0, #0
 800374a:	f7fe ffaf 	bl	80026ac <decodeRgbValue>
 800374e:	4603      	mov	r3, r0
 8003750:	461a      	mov	r2, r3
 8003752:	2302      	movs	r3, #2
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	9200      	str	r2, [sp, #0]
 8003758:	4623      	mov	r3, r4
 800375a:	2240      	movs	r2, #64	@ 0x40
 800375c:	21b4      	movs	r1, #180	@ 0xb4
 800375e:	4833      	ldr	r0, [pc, #204]	@ (800382c <menu+0x690>)
 8003760:	f7ff f807 	bl	8002772 <lcdPutSSized>
	lcdPutSSized("OPTIONS", 180, 80, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8003764:	2200      	movs	r2, #0
 8003766:	2100      	movs	r1, #0
 8003768:	2000      	movs	r0, #0
 800376a:	f7fe ff9f 	bl	80026ac <decodeRgbValue>
 800376e:	4603      	mov	r3, r0
 8003770:	461c      	mov	r4, r3
 8003772:	2200      	movs	r2, #0
 8003774:	2100      	movs	r1, #0
 8003776:	2000      	movs	r0, #0
 8003778:	f7fe ff98 	bl	80026ac <decodeRgbValue>
 800377c:	4603      	mov	r3, r0
 800377e:	461a      	mov	r2, r3
 8003780:	2302      	movs	r3, #2
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	9200      	str	r2, [sp, #0]
 8003786:	4623      	mov	r3, r4
 8003788:	2250      	movs	r2, #80	@ 0x50
 800378a:	21b4      	movs	r1, #180	@ 0xb4
 800378c:	4828      	ldr	r0, [pc, #160]	@ (8003830 <menu+0x694>)
 800378e:	f7fe fff0 	bl	8002772 <lcdPutSSized>
	lcdPutSSized("LOAD GAME", 180, 96, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 8003792:	2200      	movs	r2, #0
 8003794:	2100      	movs	r1, #0
 8003796:	2000      	movs	r0, #0
 8003798:	f7fe ff88 	bl	80026ac <decodeRgbValue>
 800379c:	4603      	mov	r3, r0
 800379e:	461c      	mov	r4, r3
 80037a0:	2200      	movs	r2, #0
 80037a2:	2100      	movs	r1, #0
 80037a4:	2000      	movs	r0, #0
 80037a6:	f7fe ff81 	bl	80026ac <decodeRgbValue>
 80037aa:	4603      	mov	r3, r0
 80037ac:	461a      	mov	r2, r3
 80037ae:	2302      	movs	r3, #2
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	9200      	str	r2, [sp, #0]
 80037b4:	4623      	mov	r3, r4
 80037b6:	2260      	movs	r2, #96	@ 0x60
 80037b8:	21b4      	movs	r1, #180	@ 0xb4
 80037ba:	481e      	ldr	r0, [pc, #120]	@ (8003834 <menu+0x698>)
 80037bc:	f7fe ffd9 	bl	8002772 <lcdPutSSized>
	lcdPutSSized("SAVE GAME", 180, 112, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 80037c0:	2200      	movs	r2, #0
 80037c2:	2100      	movs	r1, #0
 80037c4:	2000      	movs	r0, #0
 80037c6:	f7fe ff71 	bl	80026ac <decodeRgbValue>
 80037ca:	4603      	mov	r3, r0
 80037cc:	461c      	mov	r4, r3
 80037ce:	2200      	movs	r2, #0
 80037d0:	2100      	movs	r1, #0
 80037d2:	2000      	movs	r0, #0
 80037d4:	f7fe ff6a 	bl	80026ac <decodeRgbValue>
 80037d8:	4603      	mov	r3, r0
 80037da:	461a      	mov	r2, r3
 80037dc:	2302      	movs	r3, #2
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	9200      	str	r2, [sp, #0]
 80037e2:	4623      	mov	r3, r4
 80037e4:	2270      	movs	r2, #112	@ 0x70
 80037e6:	21b4      	movs	r1, #180	@ 0xb4
 80037e8:	4813      	ldr	r0, [pc, #76]	@ (8003838 <menu+0x69c>)
 80037ea:	f7fe ffc2 	bl	8002772 <lcdPutSSized>
	lcdPutSSized("READ THIS!", 180, 128, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 80037ee:	2200      	movs	r2, #0
 80037f0:	2100      	movs	r1, #0
 80037f2:	2000      	movs	r0, #0
 80037f4:	f7fe ff5a 	bl	80026ac <decodeRgbValue>
 80037f8:	4603      	mov	r3, r0
 80037fa:	461c      	mov	r4, r3
 80037fc:	2200      	movs	r2, #0
 80037fe:	2100      	movs	r1, #0
 8003800:	2000      	movs	r0, #0
 8003802:	f7fe ff53 	bl	80026ac <decodeRgbValue>
 8003806:	4603      	mov	r3, r0
 8003808:	461a      	mov	r2, r3
 800380a:	2302      	movs	r3, #2
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	9200      	str	r2, [sp, #0]
 8003810:	4623      	mov	r3, r4
 8003812:	2280      	movs	r2, #128	@ 0x80
 8003814:	21b4      	movs	r1, #180	@ 0xb4
 8003816:	4809      	ldr	r0, [pc, #36]	@ (800383c <menu+0x6a0>)
 8003818:	f7fe ffab 	bl	8002772 <lcdPutSSized>
	lcdPutSSized("QUIT GAME", 180, 144, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0),2);
 800381c:	2200      	movs	r2, #0
 800381e:	2100      	movs	r1, #0
 8003820:	2000      	movs	r0, #0
 8003822:	f7fe ff43 	bl	80026ac <decodeRgbValue>
 8003826:	4603      	mov	r3, r0
 8003828:	461c      	mov	r4, r3
 800382a:	e00f      	b.n	800384c <menu+0x6b0>
 800382c:	08006bc8 	.word	0x08006bc8
 8003830:	08006bd4 	.word	0x08006bd4
 8003834:	08006bdc 	.word	0x08006bdc
 8003838:	08006be8 	.word	0x08006be8
 800383c:	08006bf4 	.word	0x08006bf4
 8003840:	08006c00 	.word	0x08006c00
 8003844:	48000400 	.word	0x48000400
 8003848:	08006bc0 	.word	0x08006bc0
 800384c:	2200      	movs	r2, #0
 800384e:	2100      	movs	r1, #0
 8003850:	2000      	movs	r0, #0
 8003852:	f7fe ff2b 	bl	80026ac <decodeRgbValue>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	2302      	movs	r3, #2
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	9200      	str	r2, [sp, #0]
 8003860:	4623      	mov	r3, r4
 8003862:	2290      	movs	r2, #144	@ 0x90
 8003864:	21b4      	movs	r1, #180	@ 0xb4
 8003866:	484e      	ldr	r0, [pc, #312]	@ (80039a0 <menu+0x804>)
 8003868:	f7fe ff83 	bl	8002772 <lcdPutSSized>

	lcdPutS("AMMO", 250, 230, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 800386c:	2200      	movs	r2, #0
 800386e:	2100      	movs	r1, #0
 8003870:	2000      	movs	r0, #0
 8003872:	f7fe ff1b 	bl	80026ac <decodeRgbValue>
 8003876:	4603      	mov	r3, r0
 8003878:	461c      	mov	r4, r3
 800387a:	2200      	movs	r2, #0
 800387c:	2100      	movs	r1, #0
 800387e:	2000      	movs	r0, #0
 8003880:	f7fe ff14 	bl	80026ac <decodeRgbValue>
 8003884:	4603      	mov	r3, r0
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	4623      	mov	r3, r4
 800388a:	22e6      	movs	r2, #230	@ 0xe6
 800388c:	21fa      	movs	r1, #250	@ 0xfa
 800388e:	4845      	ldr	r0, [pc, #276]	@ (80039a4 <menu+0x808>)
 8003890:	f7fe ff28 	bl	80026e4 <lcdPutS>
	sprintf(ammoText, "%d", ammo);
 8003894:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 8003898:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800389c:	4942      	ldr	r1, [pc, #264]	@ (80039a8 <menu+0x80c>)
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 ffd4 	bl	800484c <siprintf>
	lcdPutS(ammoText, 240, 222, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 80038a4:	2200      	movs	r2, #0
 80038a6:	2100      	movs	r1, #0
 80038a8:	2000      	movs	r0, #0
 80038aa:	f7fe feff 	bl	80026ac <decodeRgbValue>
 80038ae:	4603      	mov	r3, r0
 80038b0:	461c      	mov	r4, r3
 80038b2:	2200      	movs	r2, #0
 80038b4:	2100      	movs	r1, #0
 80038b6:	2000      	movs	r0, #0
 80038b8:	f7fe fef8 	bl	80026ac <decodeRgbValue>
 80038bc:	4603      	mov	r3, r0
 80038be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	4623      	mov	r3, r4
 80038c6:	22de      	movs	r2, #222	@ 0xde
 80038c8:	21f0      	movs	r1, #240	@ 0xf0
 80038ca:	f7fe ff0b 	bl	80026e4 <lcdPutS>

	lcdPutS("HEALTH", 145, 230, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 80038ce:	2200      	movs	r2, #0
 80038d0:	2100      	movs	r1, #0
 80038d2:	2000      	movs	r0, #0
 80038d4:	f7fe feea 	bl	80026ac <decodeRgbValue>
 80038d8:	4603      	mov	r3, r0
 80038da:	461c      	mov	r4, r3
 80038dc:	2200      	movs	r2, #0
 80038de:	2100      	movs	r1, #0
 80038e0:	2000      	movs	r0, #0
 80038e2:	f7fe fee3 	bl	80026ac <decodeRgbValue>
 80038e6:	4603      	mov	r3, r0
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	4623      	mov	r3, r4
 80038ec:	22e6      	movs	r2, #230	@ 0xe6
 80038ee:	2191      	movs	r1, #145	@ 0x91
 80038f0:	482e      	ldr	r0, [pc, #184]	@ (80039ac <menu+0x810>)
 80038f2:	f7fe fef7 	bl	80026e4 <lcdPutS>
	sprintf(healthText, "%d%%", health);
 80038f6:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80038fa:	f107 0314 	add.w	r3, r7, #20
 80038fe:	492c      	ldr	r1, [pc, #176]	@ (80039b0 <menu+0x814>)
 8003900:	4618      	mov	r0, r3
 8003902:	f000 ffa3 	bl	800484c <siprintf>
	lcdPutS(healthText, 125, 222, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8003906:	2200      	movs	r2, #0
 8003908:	2100      	movs	r1, #0
 800390a:	2000      	movs	r0, #0
 800390c:	f7fe fece 	bl	80026ac <decodeRgbValue>
 8003910:	4603      	mov	r3, r0
 8003912:	461c      	mov	r4, r3
 8003914:	2200      	movs	r2, #0
 8003916:	2100      	movs	r1, #0
 8003918:	2000      	movs	r0, #0
 800391a:	f7fe fec7 	bl	80026ac <decodeRgbValue>
 800391e:	4603      	mov	r3, r0
 8003920:	f107 0014 	add.w	r0, r7, #20
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	4623      	mov	r3, r4
 8003928:	22de      	movs	r2, #222	@ 0xde
 800392a:	217d      	movs	r1, #125	@ 0x7d
 800392c:	f7fe feda 	bl	80026e4 <lcdPutS>

	lcdPutS("ARMOR", 35, 230, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8003930:	2200      	movs	r2, #0
 8003932:	2100      	movs	r1, #0
 8003934:	2000      	movs	r0, #0
 8003936:	f7fe feb9 	bl	80026ac <decodeRgbValue>
 800393a:	4603      	mov	r3, r0
 800393c:	461c      	mov	r4, r3
 800393e:	2200      	movs	r2, #0
 8003940:	2100      	movs	r1, #0
 8003942:	2000      	movs	r0, #0
 8003944:	f7fe feb2 	bl	80026ac <decodeRgbValue>
 8003948:	4603      	mov	r3, r0
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	4623      	mov	r3, r4
 800394e:	22e6      	movs	r2, #230	@ 0xe6
 8003950:	2123      	movs	r1, #35	@ 0x23
 8003952:	4818      	ldr	r0, [pc, #96]	@ (80039b4 <menu+0x818>)
 8003954:	f7fe fec6 	bl	80026e4 <lcdPutS>
	sprintf(armorText, "%d%%", armor);
 8003958:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	@ 0x34
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	4914      	ldr	r1, [pc, #80]	@ (80039b0 <menu+0x814>)
 8003960:	4618      	mov	r0, r3
 8003962:	f000 ff73 	bl	800484c <siprintf>
	lcdPutS(armorText, 20, 222, decodeRgbValue(0, 0, 0), decodeRgbValue(0, 0, 0));
 8003966:	2200      	movs	r2, #0
 8003968:	2100      	movs	r1, #0
 800396a:	2000      	movs	r0, #0
 800396c:	f7fe fe9e 	bl	80026ac <decodeRgbValue>
 8003970:	4603      	mov	r3, r0
 8003972:	461c      	mov	r4, r3
 8003974:	2200      	movs	r2, #0
 8003976:	2100      	movs	r1, #0
 8003978:	2000      	movs	r0, #0
 800397a:	f7fe fe97 	bl	80026ac <decodeRgbValue>
 800397e:	4603      	mov	r3, r0
 8003980:	1d38      	adds	r0, r7, #4
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	4623      	mov	r3, r4
 8003986:	22de      	movs	r2, #222	@ 0xde
 8003988:	2114      	movs	r1, #20
 800398a:	f7fe feab 	bl	80026e4 <lcdPutS>

	startNewGame(difficulity);
 800398e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8003992:	4618      	mov	r0, r3
 8003994:	f7fd fd6c 	bl	8001470 <startNewGame>
}
 8003998:	bf00      	nop
 800399a:	3744      	adds	r7, #68	@ 0x44
 800399c:	46bd      	mov	sp, r7
 800399e:	bd90      	pop	{r4, r7, pc}
 80039a0:	08006c00 	.word	0x08006c00
 80039a4:	08006c0c 	.word	0x08006c0c
 80039a8:	08006c14 	.word	0x08006c14
 80039ac:	08006c18 	.word	0x08006c18
 80039b0:	08006c20 	.word	0x08006c20
 80039b4:	08006c28 	.word	0x08006c28

080039b8 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	601a      	str	r2, [r3, #0]
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f023 0210 	bic.w	r2, r3, #16
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	605a      	str	r2, [r3, #4]
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f043 0208 	orr.w	r2, r3, #8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	605a      	str	r2, [r3, #4]
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f023 0208 	bic.w	r2, r3, #8
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	605a      	str	r2, [r3, #4]
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d101      	bne.n	8003a7c <LL_SPI_IsActiveFlag_TXE+0x18>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <LL_SPI_IsActiveFlag_TXE+0x1a>
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	330c      	adds	r3, #12
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	b2db      	uxtb	r3, r3
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b085      	sub	sp, #20
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8003abe:	bf00      	nop
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <LL_GPIO_SetOutputPin>:
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	619a      	str	r2, [r3, #24]
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <LL_GPIO_ResetOutputPin>:
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <LL_AHB1_GRP1_EnableClock>:
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8003b0c:	4b08      	ldr	r3, [pc, #32]	@ (8003b30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	4907      	ldr	r1, [pc, #28]	@ (8003b30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003b18:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b1a:	695a      	ldr	r2, [r3, #20]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b22:	68fb      	ldr	r3, [r7, #12]
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	40021000 	.word	0x40021000

08003b34 <LL_APB2_GRP1_EnableClock>:
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003b3c:	4b08      	ldr	r3, [pc, #32]	@ (8003b60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	4907      	ldr	r1, [pc, #28]	@ (8003b60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003b48:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b4a:	699a      	ldr	r2, [r3, #24]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b52:	68fb      	ldr	r3, [r7, #12]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	40021000 	.word	0x40021000

08003b64 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b090      	sub	sp, #64	@ 0x40
 8003b68:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003b6a:	f107 0318 	add.w	r3, r7, #24
 8003b6e:	2228      	movs	r2, #40	@ 0x28
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 ff62 	bl	8004a3c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b78:	463b      	mov	r3, r7
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	605a      	str	r2, [r3, #4]
 8003b80:	609a      	str	r2, [r3, #8]
 8003b82:	60da      	str	r2, [r3, #12]
 8003b84:	611a      	str	r2, [r3, #16]
 8003b86:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003b88:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003b8c:	f7ff ffd2 	bl	8003b34 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003b90:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8003b94:	f7ff ffb6 	bl	8003b04 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003b98:	23e0      	movs	r3, #224	@ 0xe0
 8003b9a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003bac:	2305      	movs	r3, #5
 8003bae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bb0:	463b      	mov	r3, r7
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bb8:	f000 fb03 	bl	80041c2 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003bc0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003bc4:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003bc6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003bca:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003bd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  // rychlost prenosu ovplyvnuje
  SPI_InitStruct.BaudRate =  LL_SPI_BAUDRATEPRESCALER_DIV2; //najrychlejsie
 8003bda:	2300      	movs	r3, #0
 8003bdc:	633b      	str	r3, [r7, #48]	@ 0x30
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32; //250kBps povodne
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV64; //125kBps
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128; //pomalsie
  //SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV256; //najpomalsie
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003bde:	2300      	movs	r3, #0
 8003be0:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003be2:	2300      	movs	r3, #0
 8003be4:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 7;
 8003be6:	2307      	movs	r3, #7
 8003be8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  SPI1->CR2 |= 1 << 12;
 8003bea:	4b0e      	ldr	r3, [pc, #56]	@ (8003c24 <MX_SPI1_Init+0xc0>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	4a0d      	ldr	r2, [pc, #52]	@ (8003c24 <MX_SPI1_Init+0xc0>)
 8003bf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003bf4:	6053      	str	r3, [r2, #4]

  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003bf6:	f107 0318 	add.w	r3, r7, #24
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4809      	ldr	r0, [pc, #36]	@ (8003c24 <MX_SPI1_Init+0xc0>)
 8003bfe:	f000 fb86 	bl	800430e <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003c02:	2100      	movs	r1, #0
 8003c04:	4807      	ldr	r0, [pc, #28]	@ (8003c24 <MX_SPI1_Init+0xc0>)
 8003c06:	f7ff fee7 	bl	80039d8 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI1);
 8003c0a:	4806      	ldr	r0, [pc, #24]	@ (8003c24 <MX_SPI1_Init+0xc0>)
 8003c0c:	f7ff ff07 	bl	8003a1e <LL_SPI_DisableNSSPulseMgt>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8003c10:	4804      	ldr	r0, [pc, #16]	@ (8003c24 <MX_SPI1_Init+0xc0>)
 8003c12:	f7ff fef4 	bl	80039fe <LL_SPI_EnableNSSPulseMgt>
  LL_SPI_Enable(SPI1);
 8003c16:	4803      	ldr	r0, [pc, #12]	@ (8003c24 <MX_SPI1_Init+0xc0>)
 8003c18:	f7ff fece 	bl	80039b8 <LL_SPI_Enable>

}
 8003c1c:	bf00      	nop
 8003c1e:	3740      	adds	r7, #64	@ 0x40
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40013000 	.word	0x40013000

08003c28 <readWriteSPI1>:


unsigned char readWriteSPI1(unsigned char txData)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	71fb      	strb	r3, [r7, #7]
	unsigned char  rxData;

	LL_SPI_TransmitData8(SPI1, (uint8_t)txData);
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	4619      	mov	r1, r3
 8003c36:	480d      	ldr	r0, [pc, #52]	@ (8003c6c <readWriteSPI1+0x44>)
 8003c38:	f7ff ff35 	bl	8003aa6 <LL_SPI_TransmitData8>
	while(LL_SPI_IsActiveFlag_TXE(SPI1) != SET);
 8003c3c:	bf00      	nop
 8003c3e:	480b      	ldr	r0, [pc, #44]	@ (8003c6c <readWriteSPI1+0x44>)
 8003c40:	f7ff ff10 	bl	8003a64 <LL_SPI_IsActiveFlag_TXE>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d1f9      	bne.n	8003c3e <readWriteSPI1+0x16>

	// wait until RXNE = 1
	while(LL_SPI_IsActiveFlag_RXNE(SPI1) != SET);
 8003c4a:	bf00      	nop
 8003c4c:	4807      	ldr	r0, [pc, #28]	@ (8003c6c <readWriteSPI1+0x44>)
 8003c4e:	f7ff fef6 	bl	8003a3e <LL_SPI_IsActiveFlag_RXNE>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d1f9      	bne.n	8003c4c <readWriteSPI1+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = LL_SPI_ReceiveData8(SPI1);
 8003c58:	4804      	ldr	r0, [pc, #16]	@ (8003c6c <readWriteSPI1+0x44>)
 8003c5a:	f7ff ff16 	bl	8003a8a <LL_SPI_ReceiveData8>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	73fb      	strb	r3, [r7, #15]

	return rxData;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40013000 	.word	0x40013000

08003c70 <initCS_Pin>:

void initCS_Pin(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
	cs_set();
 8003c74:	f000 f802 	bl	8003c7c <cs_set>
}
 8003c78:	bf00      	nop
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <cs_set>:

void cs_set(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8003c80:	2120      	movs	r1, #32
 8003c82:	4802      	ldr	r0, [pc, #8]	@ (8003c8c <cs_set+0x10>)
 8003c84:	f7ff ff21 	bl	8003aca <LL_GPIO_SetOutputPin>
}
 8003c88:	bf00      	nop
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	48000400 	.word	0x48000400

08003c90 <cs_reset>:

void cs_reset(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8003c94:	2120      	movs	r1, #32
 8003c96:	4802      	ldr	r0, [pc, #8]	@ (8003ca0 <cs_reset+0x10>)
 8003c98:	f7ff ff25 	bl	8003ae6 <LL_GPIO_ResetOutputPin>
}
 8003c9c:	bf00      	nop
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	48000400 	.word	0x48000400

08003ca4 <initCD_Pin>:

void initCD_Pin(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	*/
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <cd_set>:

void cd_set(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8003cb8:	2140      	movs	r1, #64	@ 0x40
 8003cba:	4802      	ldr	r0, [pc, #8]	@ (8003cc4 <cd_set+0x10>)
 8003cbc:	f7ff ff05 	bl	8003aca <LL_GPIO_SetOutputPin>
}
 8003cc0:	bf00      	nop
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	48000400 	.word	0x48000400

08003cc8 <cd_reset>:

void cd_reset(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8003ccc:	2140      	movs	r1, #64	@ 0x40
 8003cce:	4802      	ldr	r0, [pc, #8]	@ (8003cd8 <cd_reset+0x10>)
 8003cd0:	f7ff ff09 	bl	8003ae6 <LL_GPIO_ResetOutputPin>
}
 8003cd4:	bf00      	nop
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	48000400 	.word	0x48000400

08003cdc <initRES_Pin>:

void initRES_Pin(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	*/
}
 8003ce0:	bf00      	nop
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <res_set>:

void res_set(void)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8003cee:	2108      	movs	r1, #8
 8003cf0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cf4:	f7ff fee9 	bl	8003aca <LL_GPIO_SetOutputPin>
}
 8003cf8:	bf00      	nop
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <res_reset>:

void res_reset(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8003d00:	2108      	movs	r1, #8
 8003d02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d06:	f7ff feee 	bl	8003ae6 <LL_GPIO_ResetOutputPin>
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d12:	bf00      	nop
 8003d14:	e7fd      	b.n	8003d12 <NMI_Handler+0x4>

08003d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d16:	b480      	push	{r7}
 8003d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d1a:	bf00      	nop
 8003d1c:	e7fd      	b.n	8003d1a <HardFault_Handler+0x4>

08003d1e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d22:	bf00      	nop
 8003d24:	e7fd      	b.n	8003d22 <MemManage_Handler+0x4>

08003d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d26:	b480      	push	{r7}
 8003d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d2a:	bf00      	nop
 8003d2c:	e7fd      	b.n	8003d2a <BusFault_Handler+0x4>

08003d2e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d32:	bf00      	nop
 8003d34:	e7fd      	b.n	8003d32 <UsageFault_Handler+0x4>

08003d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d36:	b480      	push	{r7}
 8003d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d3a:	bf00      	nop
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d52:	b480      	push	{r7}
 8003d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d56:	bf00      	nop
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d64:	f000 f8fc 	bl	8003f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d68:	bf00      	nop
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d76:	f000 febf 	bl	8004af8 <__errno>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2216      	movs	r2, #22
 8003d7e:	601a      	str	r2, [r3, #0]
  return -1;
 8003d80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <_exit>:

void _exit (int status)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d94:	f04f 31ff 	mov.w	r1, #4294967295
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ffe7 	bl	8003d6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d9e:	bf00      	nop
 8003da0:	e7fd      	b.n	8003d9e <_exit+0x12>

08003da2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b086      	sub	sp, #24
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	e00a      	b.n	8003dca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003db4:	f3af 8000 	nop.w
 8003db8:	4601      	mov	r1, r0
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	60ba      	str	r2, [r7, #8]
 8003dc0:	b2ca      	uxtb	r2, r1
 8003dc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	dbf0      	blt.n	8003db4 <_read+0x12>
  }

  return len;
 8003dd2:	687b      	ldr	r3, [r7, #4]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	e009      	b.n	8003e02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	60ba      	str	r2, [r7, #8]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	dbf1      	blt.n	8003dee <_write+0x12>
  }
  return len;
 8003e0a:	687b      	ldr	r3, [r7, #4]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_close>:

int _close(int file)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e3c:	605a      	str	r2, [r3, #4]
  return 0;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <_isatty>:

int _isatty(int file)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e54:	2301      	movs	r3, #1
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b085      	sub	sp, #20
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e84:	4a14      	ldr	r2, [pc, #80]	@ (8003ed8 <_sbrk+0x5c>)
 8003e86:	4b15      	ldr	r3, [pc, #84]	@ (8003edc <_sbrk+0x60>)
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e90:	4b13      	ldr	r3, [pc, #76]	@ (8003ee0 <_sbrk+0x64>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d102      	bne.n	8003e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e98:	4b11      	ldr	r3, [pc, #68]	@ (8003ee0 <_sbrk+0x64>)
 8003e9a:	4a12      	ldr	r2, [pc, #72]	@ (8003ee4 <_sbrk+0x68>)
 8003e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <_sbrk+0x64>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d207      	bcs.n	8003ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003eac:	f000 fe24 	bl	8004af8 <__errno>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	220c      	movs	r2, #12
 8003eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eba:	e009      	b.n	8003ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ebc:	4b08      	ldr	r3, [pc, #32]	@ (8003ee0 <_sbrk+0x64>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ec2:	4b07      	ldr	r3, [pc, #28]	@ (8003ee0 <_sbrk+0x64>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4413      	add	r3, r2
 8003eca:	4a05      	ldr	r2, [pc, #20]	@ (8003ee0 <_sbrk+0x64>)
 8003ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ece:	68fb      	ldr	r3, [r7, #12]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20003000 	.word	0x20003000
 8003edc:	00000400 	.word	0x00000400
 8003ee0:	200003d4 	.word	0x200003d4
 8003ee4:	20000528 	.word	0x20000528

08003ee8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003eec:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <SystemInit+0x20>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef2:	4a05      	ldr	r2, [pc, #20]	@ (8003f08 <SystemInit+0x20>)
 8003ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	e000ed00 	.word	0xe000ed00

08003f0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f44 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f10:	f7ff ffea 	bl	8003ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f14:	480c      	ldr	r0, [pc, #48]	@ (8003f48 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f16:	490d      	ldr	r1, [pc, #52]	@ (8003f4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f18:	4a0d      	ldr	r2, [pc, #52]	@ (8003f50 <LoopForever+0xe>)
  movs r3, #0
 8003f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f1c:	e002      	b.n	8003f24 <LoopCopyDataInit>

08003f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f22:	3304      	adds	r3, #4

08003f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f28:	d3f9      	bcc.n	8003f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f2c:	4c0a      	ldr	r4, [pc, #40]	@ (8003f58 <LoopForever+0x16>)
  movs r3, #0
 8003f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f30:	e001      	b.n	8003f36 <LoopFillZerobss>

08003f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f34:	3204      	adds	r2, #4

08003f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f38:	d3fb      	bcc.n	8003f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f3a:	f000 fde3 	bl	8004b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f3e:	f7ff f8b3 	bl	80030a8 <main>

08003f42 <LoopForever>:

LoopForever:
    b LoopForever
 8003f42:	e7fe      	b.n	8003f42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f44:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f4c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003f50:	08007190 	.word	0x08007190
  ldr r2, =_sbss
 8003f54:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003f58:	20000528 	.word	0x20000528

08003f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f5c:	e7fe      	b.n	8003f5c <ADC1_2_IRQHandler>
	...

08003f60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f64:	4b06      	ldr	r3, [pc, #24]	@ (8003f80 <HAL_IncTick+0x20>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <HAL_IncTick+0x24>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4413      	add	r3, r2
 8003f70:	4a04      	ldr	r2, [pc, #16]	@ (8003f84 <HAL_IncTick+0x24>)
 8003f72:	6013      	str	r3, [r2, #0]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	2000000c 	.word	0x2000000c
 8003f84:	200003d8 	.word	0x200003d8

08003f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	887b      	ldrh	r3, [r7, #2]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
 8003fa4:	e001      	b.n	8003faa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <LL_GPIO_SetPinMode>:
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b089      	sub	sp, #36	@ 0x24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	fa93 f3a3 	rbit	r3, r3
 8003fd2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	2103      	movs	r1, #3
 8003fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	401a      	ands	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	fa93 f3a3 	rbit	r3, r3
 8003ff2:	61bb      	str	r3, [r7, #24]
  return result;
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	fab3 f383 	clz	r3, r3
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	fa01 f303 	lsl.w	r3, r1, r3
 8004004:	431a      	orrs	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	601a      	str	r2, [r3, #0]
}
 800400a:	bf00      	nop
 800400c:	3724      	adds	r7, #36	@ 0x24
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <LL_GPIO_SetPinOutputType>:
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	60f8      	str	r0, [r7, #12]
 800401e:	60b9      	str	r1, [r7, #8]
 8004020:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	43db      	mvns	r3, r3
 800402a:	401a      	ands	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	fb01 f303 	mul.w	r3, r1, r3
 8004034:	431a      	orrs	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	605a      	str	r2, [r3, #4]
}
 800403a:	bf00      	nop
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <LL_GPIO_SetPinSpeed>:
{
 8004046:	b480      	push	{r7}
 8004048:	b089      	sub	sp, #36	@ 0x24
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	fa93 f3a3 	rbit	r3, r3
 8004060:	613b      	str	r3, [r7, #16]
  return result;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	fab3 f383 	clz	r3, r3
 8004068:	b2db      	uxtb	r3, r3
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	2103      	movs	r1, #3
 800406e:	fa01 f303 	lsl.w	r3, r1, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	401a      	ands	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	fa93 f3a3 	rbit	r3, r3
 8004080:	61bb      	str	r3, [r7, #24]
  return result;
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	fab3 f383 	clz	r3, r3
 8004088:	b2db      	uxtb	r3, r3
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	fa01 f303 	lsl.w	r3, r1, r3
 8004092:	431a      	orrs	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	609a      	str	r2, [r3, #8]
}
 8004098:	bf00      	nop
 800409a:	3724      	adds	r7, #36	@ 0x24
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <LL_GPIO_SetPinPull>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	b089      	sub	sp, #36	@ 0x24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	fa93 f3a3 	rbit	r3, r3
 80040be:	613b      	str	r3, [r7, #16]
  return result;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	fab3 f383 	clz	r3, r3
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	2103      	movs	r1, #3
 80040cc:	fa01 f303 	lsl.w	r3, r1, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	401a      	ands	r2, r3
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	61bb      	str	r3, [r7, #24]
  return result;
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	fab3 f383 	clz	r3, r3
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	fa01 f303 	lsl.w	r3, r1, r3
 80040f0:	431a      	orrs	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	60da      	str	r2, [r3, #12]
}
 80040f6:	bf00      	nop
 80040f8:	3724      	adds	r7, #36	@ 0x24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <LL_GPIO_SetAFPin_0_7>:
{
 8004102:	b480      	push	{r7}
 8004104:	b089      	sub	sp, #36	@ 0x24
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1a      	ldr	r2, [r3, #32]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	fa93 f3a3 	rbit	r3, r3
 800411c:	613b      	str	r3, [r7, #16]
  return result;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	fab3 f383 	clz	r3, r3
 8004124:	b2db      	uxtb	r3, r3
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	210f      	movs	r1, #15
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	401a      	ands	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	61bb      	str	r3, [r7, #24]
  return result;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	fab3 f383 	clz	r3, r3
 8004144:	b2db      	uxtb	r3, r3
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	431a      	orrs	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	621a      	str	r2, [r3, #32]
}
 8004154:	bf00      	nop
 8004156:	3724      	adds	r7, #36	@ 0x24
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <LL_GPIO_SetAFPin_8_15>:
{
 8004160:	b480      	push	{r7}
 8004162:	b089      	sub	sp, #36	@ 0x24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	0a1b      	lsrs	r3, r3, #8
 8004174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	fa93 f3a3 	rbit	r3, r3
 800417c:	613b      	str	r3, [r7, #16]
  return result;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	fab3 f383 	clz	r3, r3
 8004184:	b2db      	uxtb	r3, r3
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	210f      	movs	r1, #15
 800418a:	fa01 f303 	lsl.w	r3, r1, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	401a      	ands	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	0a1b      	lsrs	r3, r3, #8
 8004196:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	fa93 f3a3 	rbit	r3, r3
 800419e:	61bb      	str	r3, [r7, #24]
  return result;
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	fab3 f383 	clz	r3, r3
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	fa01 f303 	lsl.w	r3, r1, r3
 80041b0:	431a      	orrs	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80041b6:	bf00      	nop
 80041b8:	3724      	adds	r7, #36	@ 0x24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b088      	sub	sp, #32
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	fa93 f3a3 	rbit	r3, r3
 80041d8:	613b      	str	r3, [r7, #16]
  return result;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	fab3 f383 	clz	r3, r3
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80041e4:	e051      	b.n	800428a <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	2101      	movs	r1, #1
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	fa01 f303 	lsl.w	r3, r1, r3
 80041f2:	4013      	ands	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d043      	beq.n	8004284 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d003      	beq.n	800420c <LL_GPIO_Init+0x4a>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	2b02      	cmp	r3, #2
 800420a:	d10e      	bne.n	800422a <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	461a      	mov	r2, r3
 8004212:	69b9      	ldr	r1, [r7, #24]
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff ff16 	bl	8004046 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6819      	ldr	r1, [r3, #0]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	461a      	mov	r2, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff fef6 	bl	8004016 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	461a      	mov	r2, r3
 8004230:	69b9      	ldr	r1, [r7, #24]
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7ff ff36 	bl	80040a4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d11a      	bne.n	8004276 <LL_GPIO_Init+0xb4>
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	fa93 f3a3 	rbit	r3, r3
 800424a:	60bb      	str	r3, [r7, #8]
  return result;
 800424c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800424e:	fab3 f383 	clz	r3, r3
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b07      	cmp	r3, #7
 8004256:	d807      	bhi.n	8004268 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	461a      	mov	r2, r3
 800425e:	69b9      	ldr	r1, [r7, #24]
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7ff ff4e 	bl	8004102 <LL_GPIO_SetAFPin_0_7>
 8004266:	e006      	b.n	8004276 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	461a      	mov	r2, r3
 800426e:	69b9      	ldr	r1, [r7, #24]
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff75 	bl	8004160 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	461a      	mov	r2, r3
 800427c:	69b9      	ldr	r1, [r7, #24]
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff fe9a 	bl	8003fb8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	3301      	adds	r3, #1
 8004288:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1a6      	bne.n	80041e6 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <LL_SPI_IsEnabled>:
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b2:	2b40      	cmp	r3, #64	@ 0x40
 80042b4:	d101      	bne.n	80042ba <LL_SPI_IsEnabled+0x18>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <LL_SPI_IsEnabled+0x1a>
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <LL_SPI_SetRxFIFOThreshold>:
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	431a      	orrs	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	605a      	str	r2, [r3, #4]
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <LL_SPI_SetCRCPolynomial>:
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	611a      	str	r2, [r3, #16]
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7ff ffc0 	bl	80042a2 <LL_SPI_IsEnabled>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d145      	bne.n	80043b4 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004330:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	6811      	ldr	r1, [r2, #0]
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	6852      	ldr	r2, [r2, #4]
 800433c:	4311      	orrs	r1, r2
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	68d2      	ldr	r2, [r2, #12]
 8004342:	4311      	orrs	r1, r2
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	6912      	ldr	r2, [r2, #16]
 8004348:	4311      	orrs	r1, r2
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	6952      	ldr	r2, [r2, #20]
 800434e:	4311      	orrs	r1, r2
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	6992      	ldr	r2, [r2, #24]
 8004354:	4311      	orrs	r1, r2
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	69d2      	ldr	r2, [r2, #28]
 800435a:	4311      	orrs	r1, r2
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	6a12      	ldr	r2, [r2, #32]
 8004360:	430a      	orrs	r2, r1
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004370:	f023 0304 	bic.w	r3, r3, #4
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	6891      	ldr	r1, [r2, #8]
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	6952      	ldr	r2, [r2, #20]
 800437c:	0c12      	lsrs	r2, r2, #16
 800437e:	430a      	orrs	r2, r1
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800438e:	d204      	bcs.n	800439a <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8004390:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff ff97 	bl	80042c8 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043a2:	d105      	bne.n	80043b0 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a8:	4619      	mov	r1, r3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff ff9f 	bl	80042ee <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80043b0:	2300      	movs	r3, #0
 80043b2:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d2:	4a07      	ldr	r2, [pc, #28]	@ (80043f0 <LL_InitTick+0x30>)
 80043d4:	3b01      	subs	r3, #1
 80043d6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80043d8:	4b05      	ldr	r3, [pc, #20]	@ (80043f0 <LL_InitTick+0x30>)
 80043da:	2200      	movs	r2, #0
 80043dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043de:	4b04      	ldr	r3, [pc, #16]	@ (80043f0 <LL_InitTick+0x30>)
 80043e0:	2205      	movs	r2, #5
 80043e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	e000e010 	.word	0xe000e010

080043f4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80043fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ffdd 	bl	80043c0 <LL_InitTick>
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004418:	4b0f      	ldr	r3, [pc, #60]	@ (8004458 <LL_mDelay+0x48>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800441e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004426:	d00c      	beq.n	8004442 <LL_mDelay+0x32>
  {
    Delay++;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3301      	adds	r3, #1
 800442c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800442e:	e008      	b.n	8004442 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004430:	4b09      	ldr	r3, [pc, #36]	@ (8004458 <LL_mDelay+0x48>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <LL_mDelay+0x32>
    {
      Delay--;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3b01      	subs	r3, #1
 8004440:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f3      	bne.n	8004430 <LL_mDelay+0x20>
    }
  }
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	e000e010 	.word	0xe000e010

0800445c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004464:	4a04      	ldr	r2, [pc, #16]	@ (8004478 <LL_SetSystemCoreClock+0x1c>)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6013      	str	r3, [r2, #0]
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000008 	.word	0x20000008

0800447c <exit>:
 800447c:	b508      	push	{r3, lr}
 800447e:	4b06      	ldr	r3, [pc, #24]	@ (8004498 <exit+0x1c>)
 8004480:	4604      	mov	r4, r0
 8004482:	b113      	cbz	r3, 800448a <exit+0xe>
 8004484:	2100      	movs	r1, #0
 8004486:	f3af 8000 	nop.w
 800448a:	4b04      	ldr	r3, [pc, #16]	@ (800449c <exit+0x20>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	b103      	cbz	r3, 8004492 <exit+0x16>
 8004490:	4798      	blx	r3
 8004492:	4620      	mov	r0, r4
 8004494:	f7ff fc7a 	bl	8003d8c <_exit>
 8004498:	00000000 	.word	0x00000000
 800449c:	2000051c 	.word	0x2000051c

080044a0 <malloc>:
 80044a0:	4b02      	ldr	r3, [pc, #8]	@ (80044ac <malloc+0xc>)
 80044a2:	4601      	mov	r1, r0
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	f000 b825 	b.w	80044f4 <_malloc_r>
 80044aa:	bf00      	nop
 80044ac:	2000001c 	.word	0x2000001c

080044b0 <sbrk_aligned>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	4e0f      	ldr	r6, [pc, #60]	@ (80044f0 <sbrk_aligned+0x40>)
 80044b4:	460c      	mov	r4, r1
 80044b6:	6831      	ldr	r1, [r6, #0]
 80044b8:	4605      	mov	r5, r0
 80044ba:	b911      	cbnz	r1, 80044c2 <sbrk_aligned+0x12>
 80044bc:	f000 fafa 	bl	8004ab4 <_sbrk_r>
 80044c0:	6030      	str	r0, [r6, #0]
 80044c2:	4621      	mov	r1, r4
 80044c4:	4628      	mov	r0, r5
 80044c6:	f000 faf5 	bl	8004ab4 <_sbrk_r>
 80044ca:	1c43      	adds	r3, r0, #1
 80044cc:	d103      	bne.n	80044d6 <sbrk_aligned+0x26>
 80044ce:	f04f 34ff 	mov.w	r4, #4294967295
 80044d2:	4620      	mov	r0, r4
 80044d4:	bd70      	pop	{r4, r5, r6, pc}
 80044d6:	1cc4      	adds	r4, r0, #3
 80044d8:	f024 0403 	bic.w	r4, r4, #3
 80044dc:	42a0      	cmp	r0, r4
 80044de:	d0f8      	beq.n	80044d2 <sbrk_aligned+0x22>
 80044e0:	1a21      	subs	r1, r4, r0
 80044e2:	4628      	mov	r0, r5
 80044e4:	f000 fae6 	bl	8004ab4 <_sbrk_r>
 80044e8:	3001      	adds	r0, #1
 80044ea:	d1f2      	bne.n	80044d2 <sbrk_aligned+0x22>
 80044ec:	e7ef      	b.n	80044ce <sbrk_aligned+0x1e>
 80044ee:	bf00      	nop
 80044f0:	200003dc 	.word	0x200003dc

080044f4 <_malloc_r>:
 80044f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044f8:	1ccd      	adds	r5, r1, #3
 80044fa:	f025 0503 	bic.w	r5, r5, #3
 80044fe:	3508      	adds	r5, #8
 8004500:	2d0c      	cmp	r5, #12
 8004502:	bf38      	it	cc
 8004504:	250c      	movcc	r5, #12
 8004506:	2d00      	cmp	r5, #0
 8004508:	4606      	mov	r6, r0
 800450a:	db01      	blt.n	8004510 <_malloc_r+0x1c>
 800450c:	42a9      	cmp	r1, r5
 800450e:	d904      	bls.n	800451a <_malloc_r+0x26>
 8004510:	230c      	movs	r3, #12
 8004512:	6033      	str	r3, [r6, #0]
 8004514:	2000      	movs	r0, #0
 8004516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800451a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045f0 <_malloc_r+0xfc>
 800451e:	f000 f869 	bl	80045f4 <__malloc_lock>
 8004522:	f8d8 3000 	ldr.w	r3, [r8]
 8004526:	461c      	mov	r4, r3
 8004528:	bb44      	cbnz	r4, 800457c <_malloc_r+0x88>
 800452a:	4629      	mov	r1, r5
 800452c:	4630      	mov	r0, r6
 800452e:	f7ff ffbf 	bl	80044b0 <sbrk_aligned>
 8004532:	1c43      	adds	r3, r0, #1
 8004534:	4604      	mov	r4, r0
 8004536:	d158      	bne.n	80045ea <_malloc_r+0xf6>
 8004538:	f8d8 4000 	ldr.w	r4, [r8]
 800453c:	4627      	mov	r7, r4
 800453e:	2f00      	cmp	r7, #0
 8004540:	d143      	bne.n	80045ca <_malloc_r+0xd6>
 8004542:	2c00      	cmp	r4, #0
 8004544:	d04b      	beq.n	80045de <_malloc_r+0xea>
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	4639      	mov	r1, r7
 800454a:	4630      	mov	r0, r6
 800454c:	eb04 0903 	add.w	r9, r4, r3
 8004550:	f000 fab0 	bl	8004ab4 <_sbrk_r>
 8004554:	4581      	cmp	r9, r0
 8004556:	d142      	bne.n	80045de <_malloc_r+0xea>
 8004558:	6821      	ldr	r1, [r4, #0]
 800455a:	1a6d      	subs	r5, r5, r1
 800455c:	4629      	mov	r1, r5
 800455e:	4630      	mov	r0, r6
 8004560:	f7ff ffa6 	bl	80044b0 <sbrk_aligned>
 8004564:	3001      	adds	r0, #1
 8004566:	d03a      	beq.n	80045de <_malloc_r+0xea>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	442b      	add	r3, r5
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	f8d8 3000 	ldr.w	r3, [r8]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	bb62      	cbnz	r2, 80045d0 <_malloc_r+0xdc>
 8004576:	f8c8 7000 	str.w	r7, [r8]
 800457a:	e00f      	b.n	800459c <_malloc_r+0xa8>
 800457c:	6822      	ldr	r2, [r4, #0]
 800457e:	1b52      	subs	r2, r2, r5
 8004580:	d420      	bmi.n	80045c4 <_malloc_r+0xd0>
 8004582:	2a0b      	cmp	r2, #11
 8004584:	d917      	bls.n	80045b6 <_malloc_r+0xc2>
 8004586:	1961      	adds	r1, r4, r5
 8004588:	42a3      	cmp	r3, r4
 800458a:	6025      	str	r5, [r4, #0]
 800458c:	bf18      	it	ne
 800458e:	6059      	strne	r1, [r3, #4]
 8004590:	6863      	ldr	r3, [r4, #4]
 8004592:	bf08      	it	eq
 8004594:	f8c8 1000 	streq.w	r1, [r8]
 8004598:	5162      	str	r2, [r4, r5]
 800459a:	604b      	str	r3, [r1, #4]
 800459c:	4630      	mov	r0, r6
 800459e:	f000 f82f 	bl	8004600 <__malloc_unlock>
 80045a2:	f104 000b 	add.w	r0, r4, #11
 80045a6:	1d23      	adds	r3, r4, #4
 80045a8:	f020 0007 	bic.w	r0, r0, #7
 80045ac:	1ac2      	subs	r2, r0, r3
 80045ae:	bf1c      	itt	ne
 80045b0:	1a1b      	subne	r3, r3, r0
 80045b2:	50a3      	strne	r3, [r4, r2]
 80045b4:	e7af      	b.n	8004516 <_malloc_r+0x22>
 80045b6:	6862      	ldr	r2, [r4, #4]
 80045b8:	42a3      	cmp	r3, r4
 80045ba:	bf0c      	ite	eq
 80045bc:	f8c8 2000 	streq.w	r2, [r8]
 80045c0:	605a      	strne	r2, [r3, #4]
 80045c2:	e7eb      	b.n	800459c <_malloc_r+0xa8>
 80045c4:	4623      	mov	r3, r4
 80045c6:	6864      	ldr	r4, [r4, #4]
 80045c8:	e7ae      	b.n	8004528 <_malloc_r+0x34>
 80045ca:	463c      	mov	r4, r7
 80045cc:	687f      	ldr	r7, [r7, #4]
 80045ce:	e7b6      	b.n	800453e <_malloc_r+0x4a>
 80045d0:	461a      	mov	r2, r3
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	42a3      	cmp	r3, r4
 80045d6:	d1fb      	bne.n	80045d0 <_malloc_r+0xdc>
 80045d8:	2300      	movs	r3, #0
 80045da:	6053      	str	r3, [r2, #4]
 80045dc:	e7de      	b.n	800459c <_malloc_r+0xa8>
 80045de:	230c      	movs	r3, #12
 80045e0:	6033      	str	r3, [r6, #0]
 80045e2:	4630      	mov	r0, r6
 80045e4:	f000 f80c 	bl	8004600 <__malloc_unlock>
 80045e8:	e794      	b.n	8004514 <_malloc_r+0x20>
 80045ea:	6005      	str	r5, [r0, #0]
 80045ec:	e7d6      	b.n	800459c <_malloc_r+0xa8>
 80045ee:	bf00      	nop
 80045f0:	200003e0 	.word	0x200003e0

080045f4 <__malloc_lock>:
 80045f4:	4801      	ldr	r0, [pc, #4]	@ (80045fc <__malloc_lock+0x8>)
 80045f6:	f000 baaa 	b.w	8004b4e <__retarget_lock_acquire_recursive>
 80045fa:	bf00      	nop
 80045fc:	20000524 	.word	0x20000524

08004600 <__malloc_unlock>:
 8004600:	4801      	ldr	r0, [pc, #4]	@ (8004608 <__malloc_unlock+0x8>)
 8004602:	f000 baa5 	b.w	8004b50 <__retarget_lock_release_recursive>
 8004606:	bf00      	nop
 8004608:	20000524 	.word	0x20000524

0800460c <std>:
 800460c:	2300      	movs	r3, #0
 800460e:	b510      	push	{r4, lr}
 8004610:	4604      	mov	r4, r0
 8004612:	e9c0 3300 	strd	r3, r3, [r0]
 8004616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800461a:	6083      	str	r3, [r0, #8]
 800461c:	8181      	strh	r1, [r0, #12]
 800461e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004620:	81c2      	strh	r2, [r0, #14]
 8004622:	6183      	str	r3, [r0, #24]
 8004624:	4619      	mov	r1, r3
 8004626:	2208      	movs	r2, #8
 8004628:	305c      	adds	r0, #92	@ 0x5c
 800462a:	f000 fa07 	bl	8004a3c <memset>
 800462e:	4b0d      	ldr	r3, [pc, #52]	@ (8004664 <std+0x58>)
 8004630:	6263      	str	r3, [r4, #36]	@ 0x24
 8004632:	4b0d      	ldr	r3, [pc, #52]	@ (8004668 <std+0x5c>)
 8004634:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004636:	4b0d      	ldr	r3, [pc, #52]	@ (800466c <std+0x60>)
 8004638:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800463a:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <std+0x64>)
 800463c:	6323      	str	r3, [r4, #48]	@ 0x30
 800463e:	4b0d      	ldr	r3, [pc, #52]	@ (8004674 <std+0x68>)
 8004640:	6224      	str	r4, [r4, #32]
 8004642:	429c      	cmp	r4, r3
 8004644:	d006      	beq.n	8004654 <std+0x48>
 8004646:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800464a:	4294      	cmp	r4, r2
 800464c:	d002      	beq.n	8004654 <std+0x48>
 800464e:	33d0      	adds	r3, #208	@ 0xd0
 8004650:	429c      	cmp	r4, r3
 8004652:	d105      	bne.n	8004660 <std+0x54>
 8004654:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800465c:	f000 ba76 	b.w	8004b4c <__retarget_lock_init_recursive>
 8004660:	bd10      	pop	{r4, pc}
 8004662:	bf00      	nop
 8004664:	0800488d 	.word	0x0800488d
 8004668:	080048af 	.word	0x080048af
 800466c:	080048e7 	.word	0x080048e7
 8004670:	0800490b 	.word	0x0800490b
 8004674:	200003e4 	.word	0x200003e4

08004678 <stdio_exit_handler>:
 8004678:	4a02      	ldr	r2, [pc, #8]	@ (8004684 <stdio_exit_handler+0xc>)
 800467a:	4903      	ldr	r1, [pc, #12]	@ (8004688 <stdio_exit_handler+0x10>)
 800467c:	4803      	ldr	r0, [pc, #12]	@ (800468c <stdio_exit_handler+0x14>)
 800467e:	f000 b869 	b.w	8004754 <_fwalk_sglue>
 8004682:	bf00      	nop
 8004684:	20000010 	.word	0x20000010
 8004688:	080052bd 	.word	0x080052bd
 800468c:	20000020 	.word	0x20000020

08004690 <cleanup_stdio>:
 8004690:	6841      	ldr	r1, [r0, #4]
 8004692:	4b0c      	ldr	r3, [pc, #48]	@ (80046c4 <cleanup_stdio+0x34>)
 8004694:	4299      	cmp	r1, r3
 8004696:	b510      	push	{r4, lr}
 8004698:	4604      	mov	r4, r0
 800469a:	d001      	beq.n	80046a0 <cleanup_stdio+0x10>
 800469c:	f000 fe0e 	bl	80052bc <_fflush_r>
 80046a0:	68a1      	ldr	r1, [r4, #8]
 80046a2:	4b09      	ldr	r3, [pc, #36]	@ (80046c8 <cleanup_stdio+0x38>)
 80046a4:	4299      	cmp	r1, r3
 80046a6:	d002      	beq.n	80046ae <cleanup_stdio+0x1e>
 80046a8:	4620      	mov	r0, r4
 80046aa:	f000 fe07 	bl	80052bc <_fflush_r>
 80046ae:	68e1      	ldr	r1, [r4, #12]
 80046b0:	4b06      	ldr	r3, [pc, #24]	@ (80046cc <cleanup_stdio+0x3c>)
 80046b2:	4299      	cmp	r1, r3
 80046b4:	d004      	beq.n	80046c0 <cleanup_stdio+0x30>
 80046b6:	4620      	mov	r0, r4
 80046b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046bc:	f000 bdfe 	b.w	80052bc <_fflush_r>
 80046c0:	bd10      	pop	{r4, pc}
 80046c2:	bf00      	nop
 80046c4:	200003e4 	.word	0x200003e4
 80046c8:	2000044c 	.word	0x2000044c
 80046cc:	200004b4 	.word	0x200004b4

080046d0 <global_stdio_init.part.0>:
 80046d0:	b510      	push	{r4, lr}
 80046d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004700 <global_stdio_init.part.0+0x30>)
 80046d4:	4c0b      	ldr	r4, [pc, #44]	@ (8004704 <global_stdio_init.part.0+0x34>)
 80046d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004708 <global_stdio_init.part.0+0x38>)
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	4620      	mov	r0, r4
 80046dc:	2200      	movs	r2, #0
 80046de:	2104      	movs	r1, #4
 80046e0:	f7ff ff94 	bl	800460c <std>
 80046e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80046e8:	2201      	movs	r2, #1
 80046ea:	2109      	movs	r1, #9
 80046ec:	f7ff ff8e 	bl	800460c <std>
 80046f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80046f4:	2202      	movs	r2, #2
 80046f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046fa:	2112      	movs	r1, #18
 80046fc:	f7ff bf86 	b.w	800460c <std>
 8004700:	2000051c 	.word	0x2000051c
 8004704:	200003e4 	.word	0x200003e4
 8004708:	08004679 	.word	0x08004679

0800470c <__sfp_lock_acquire>:
 800470c:	4801      	ldr	r0, [pc, #4]	@ (8004714 <__sfp_lock_acquire+0x8>)
 800470e:	f000 ba1e 	b.w	8004b4e <__retarget_lock_acquire_recursive>
 8004712:	bf00      	nop
 8004714:	20000525 	.word	0x20000525

08004718 <__sfp_lock_release>:
 8004718:	4801      	ldr	r0, [pc, #4]	@ (8004720 <__sfp_lock_release+0x8>)
 800471a:	f000 ba19 	b.w	8004b50 <__retarget_lock_release_recursive>
 800471e:	bf00      	nop
 8004720:	20000525 	.word	0x20000525

08004724 <__sinit>:
 8004724:	b510      	push	{r4, lr}
 8004726:	4604      	mov	r4, r0
 8004728:	f7ff fff0 	bl	800470c <__sfp_lock_acquire>
 800472c:	6a23      	ldr	r3, [r4, #32]
 800472e:	b11b      	cbz	r3, 8004738 <__sinit+0x14>
 8004730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004734:	f7ff bff0 	b.w	8004718 <__sfp_lock_release>
 8004738:	4b04      	ldr	r3, [pc, #16]	@ (800474c <__sinit+0x28>)
 800473a:	6223      	str	r3, [r4, #32]
 800473c:	4b04      	ldr	r3, [pc, #16]	@ (8004750 <__sinit+0x2c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f5      	bne.n	8004730 <__sinit+0xc>
 8004744:	f7ff ffc4 	bl	80046d0 <global_stdio_init.part.0>
 8004748:	e7f2      	b.n	8004730 <__sinit+0xc>
 800474a:	bf00      	nop
 800474c:	08004691 	.word	0x08004691
 8004750:	2000051c 	.word	0x2000051c

08004754 <_fwalk_sglue>:
 8004754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004758:	4607      	mov	r7, r0
 800475a:	4688      	mov	r8, r1
 800475c:	4614      	mov	r4, r2
 800475e:	2600      	movs	r6, #0
 8004760:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004764:	f1b9 0901 	subs.w	r9, r9, #1
 8004768:	d505      	bpl.n	8004776 <_fwalk_sglue+0x22>
 800476a:	6824      	ldr	r4, [r4, #0]
 800476c:	2c00      	cmp	r4, #0
 800476e:	d1f7      	bne.n	8004760 <_fwalk_sglue+0xc>
 8004770:	4630      	mov	r0, r6
 8004772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004776:	89ab      	ldrh	r3, [r5, #12]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d907      	bls.n	800478c <_fwalk_sglue+0x38>
 800477c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004780:	3301      	adds	r3, #1
 8004782:	d003      	beq.n	800478c <_fwalk_sglue+0x38>
 8004784:	4629      	mov	r1, r5
 8004786:	4638      	mov	r0, r7
 8004788:	47c0      	blx	r8
 800478a:	4306      	orrs	r6, r0
 800478c:	3568      	adds	r5, #104	@ 0x68
 800478e:	e7e9      	b.n	8004764 <_fwalk_sglue+0x10>

08004790 <_puts_r>:
 8004790:	6a03      	ldr	r3, [r0, #32]
 8004792:	b570      	push	{r4, r5, r6, lr}
 8004794:	6884      	ldr	r4, [r0, #8]
 8004796:	4605      	mov	r5, r0
 8004798:	460e      	mov	r6, r1
 800479a:	b90b      	cbnz	r3, 80047a0 <_puts_r+0x10>
 800479c:	f7ff ffc2 	bl	8004724 <__sinit>
 80047a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047a2:	07db      	lsls	r3, r3, #31
 80047a4:	d405      	bmi.n	80047b2 <_puts_r+0x22>
 80047a6:	89a3      	ldrh	r3, [r4, #12]
 80047a8:	0598      	lsls	r0, r3, #22
 80047aa:	d402      	bmi.n	80047b2 <_puts_r+0x22>
 80047ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047ae:	f000 f9ce 	bl	8004b4e <__retarget_lock_acquire_recursive>
 80047b2:	89a3      	ldrh	r3, [r4, #12]
 80047b4:	0719      	lsls	r1, r3, #28
 80047b6:	d502      	bpl.n	80047be <_puts_r+0x2e>
 80047b8:	6923      	ldr	r3, [r4, #16]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d135      	bne.n	800482a <_puts_r+0x9a>
 80047be:	4621      	mov	r1, r4
 80047c0:	4628      	mov	r0, r5
 80047c2:	f000 f8e5 	bl	8004990 <__swsetup_r>
 80047c6:	b380      	cbz	r0, 800482a <_puts_r+0x9a>
 80047c8:	f04f 35ff 	mov.w	r5, #4294967295
 80047cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047ce:	07da      	lsls	r2, r3, #31
 80047d0:	d405      	bmi.n	80047de <_puts_r+0x4e>
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	059b      	lsls	r3, r3, #22
 80047d6:	d402      	bmi.n	80047de <_puts_r+0x4e>
 80047d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047da:	f000 f9b9 	bl	8004b50 <__retarget_lock_release_recursive>
 80047de:	4628      	mov	r0, r5
 80047e0:	bd70      	pop	{r4, r5, r6, pc}
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	da04      	bge.n	80047f0 <_puts_r+0x60>
 80047e6:	69a2      	ldr	r2, [r4, #24]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	dc17      	bgt.n	800481c <_puts_r+0x8c>
 80047ec:	290a      	cmp	r1, #10
 80047ee:	d015      	beq.n	800481c <_puts_r+0x8c>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	6022      	str	r2, [r4, #0]
 80047f6:	7019      	strb	r1, [r3, #0]
 80047f8:	68a3      	ldr	r3, [r4, #8]
 80047fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047fe:	3b01      	subs	r3, #1
 8004800:	60a3      	str	r3, [r4, #8]
 8004802:	2900      	cmp	r1, #0
 8004804:	d1ed      	bne.n	80047e2 <_puts_r+0x52>
 8004806:	2b00      	cmp	r3, #0
 8004808:	da11      	bge.n	800482e <_puts_r+0x9e>
 800480a:	4622      	mov	r2, r4
 800480c:	210a      	movs	r1, #10
 800480e:	4628      	mov	r0, r5
 8004810:	f000 f87f 	bl	8004912 <__swbuf_r>
 8004814:	3001      	adds	r0, #1
 8004816:	d0d7      	beq.n	80047c8 <_puts_r+0x38>
 8004818:	250a      	movs	r5, #10
 800481a:	e7d7      	b.n	80047cc <_puts_r+0x3c>
 800481c:	4622      	mov	r2, r4
 800481e:	4628      	mov	r0, r5
 8004820:	f000 f877 	bl	8004912 <__swbuf_r>
 8004824:	3001      	adds	r0, #1
 8004826:	d1e7      	bne.n	80047f8 <_puts_r+0x68>
 8004828:	e7ce      	b.n	80047c8 <_puts_r+0x38>
 800482a:	3e01      	subs	r6, #1
 800482c:	e7e4      	b.n	80047f8 <_puts_r+0x68>
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	6022      	str	r2, [r4, #0]
 8004834:	220a      	movs	r2, #10
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	e7ee      	b.n	8004818 <_puts_r+0x88>
	...

0800483c <puts>:
 800483c:	4b02      	ldr	r3, [pc, #8]	@ (8004848 <puts+0xc>)
 800483e:	4601      	mov	r1, r0
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	f7ff bfa5 	b.w	8004790 <_puts_r>
 8004846:	bf00      	nop
 8004848:	2000001c 	.word	0x2000001c

0800484c <siprintf>:
 800484c:	b40e      	push	{r1, r2, r3}
 800484e:	b500      	push	{lr}
 8004850:	b09c      	sub	sp, #112	@ 0x70
 8004852:	ab1d      	add	r3, sp, #116	@ 0x74
 8004854:	9002      	str	r0, [sp, #8]
 8004856:	9006      	str	r0, [sp, #24]
 8004858:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800485c:	4809      	ldr	r0, [pc, #36]	@ (8004884 <siprintf+0x38>)
 800485e:	9107      	str	r1, [sp, #28]
 8004860:	9104      	str	r1, [sp, #16]
 8004862:	4909      	ldr	r1, [pc, #36]	@ (8004888 <siprintf+0x3c>)
 8004864:	f853 2b04 	ldr.w	r2, [r3], #4
 8004868:	9105      	str	r1, [sp, #20]
 800486a:	6800      	ldr	r0, [r0, #0]
 800486c:	9301      	str	r3, [sp, #4]
 800486e:	a902      	add	r1, sp, #8
 8004870:	f000 fa16 	bl	8004ca0 <_svfiprintf_r>
 8004874:	9b02      	ldr	r3, [sp, #8]
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
 800487a:	b01c      	add	sp, #112	@ 0x70
 800487c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004880:	b003      	add	sp, #12
 8004882:	4770      	bx	lr
 8004884:	2000001c 	.word	0x2000001c
 8004888:	ffff0208 	.word	0xffff0208

0800488c <__sread>:
 800488c:	b510      	push	{r4, lr}
 800488e:	460c      	mov	r4, r1
 8004890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004894:	f000 f8fc 	bl	8004a90 <_read_r>
 8004898:	2800      	cmp	r0, #0
 800489a:	bfab      	itete	ge
 800489c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800489e:	89a3      	ldrhlt	r3, [r4, #12]
 80048a0:	181b      	addge	r3, r3, r0
 80048a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80048a6:	bfac      	ite	ge
 80048a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80048aa:	81a3      	strhlt	r3, [r4, #12]
 80048ac:	bd10      	pop	{r4, pc}

080048ae <__swrite>:
 80048ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b2:	461f      	mov	r7, r3
 80048b4:	898b      	ldrh	r3, [r1, #12]
 80048b6:	05db      	lsls	r3, r3, #23
 80048b8:	4605      	mov	r5, r0
 80048ba:	460c      	mov	r4, r1
 80048bc:	4616      	mov	r6, r2
 80048be:	d505      	bpl.n	80048cc <__swrite+0x1e>
 80048c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c4:	2302      	movs	r3, #2
 80048c6:	2200      	movs	r2, #0
 80048c8:	f000 f8d0 	bl	8004a6c <_lseek_r>
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048d6:	81a3      	strh	r3, [r4, #12]
 80048d8:	4632      	mov	r2, r6
 80048da:	463b      	mov	r3, r7
 80048dc:	4628      	mov	r0, r5
 80048de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048e2:	f000 b8f7 	b.w	8004ad4 <_write_r>

080048e6 <__sseek>:
 80048e6:	b510      	push	{r4, lr}
 80048e8:	460c      	mov	r4, r1
 80048ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ee:	f000 f8bd 	bl	8004a6c <_lseek_r>
 80048f2:	1c43      	adds	r3, r0, #1
 80048f4:	89a3      	ldrh	r3, [r4, #12]
 80048f6:	bf15      	itete	ne
 80048f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004902:	81a3      	strheq	r3, [r4, #12]
 8004904:	bf18      	it	ne
 8004906:	81a3      	strhne	r3, [r4, #12]
 8004908:	bd10      	pop	{r4, pc}

0800490a <__sclose>:
 800490a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800490e:	f000 b89d 	b.w	8004a4c <_close_r>

08004912 <__swbuf_r>:
 8004912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004914:	460e      	mov	r6, r1
 8004916:	4614      	mov	r4, r2
 8004918:	4605      	mov	r5, r0
 800491a:	b118      	cbz	r0, 8004924 <__swbuf_r+0x12>
 800491c:	6a03      	ldr	r3, [r0, #32]
 800491e:	b90b      	cbnz	r3, 8004924 <__swbuf_r+0x12>
 8004920:	f7ff ff00 	bl	8004724 <__sinit>
 8004924:	69a3      	ldr	r3, [r4, #24]
 8004926:	60a3      	str	r3, [r4, #8]
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	071a      	lsls	r2, r3, #28
 800492c:	d501      	bpl.n	8004932 <__swbuf_r+0x20>
 800492e:	6923      	ldr	r3, [r4, #16]
 8004930:	b943      	cbnz	r3, 8004944 <__swbuf_r+0x32>
 8004932:	4621      	mov	r1, r4
 8004934:	4628      	mov	r0, r5
 8004936:	f000 f82b 	bl	8004990 <__swsetup_r>
 800493a:	b118      	cbz	r0, 8004944 <__swbuf_r+0x32>
 800493c:	f04f 37ff 	mov.w	r7, #4294967295
 8004940:	4638      	mov	r0, r7
 8004942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	6922      	ldr	r2, [r4, #16]
 8004948:	1a98      	subs	r0, r3, r2
 800494a:	6963      	ldr	r3, [r4, #20]
 800494c:	b2f6      	uxtb	r6, r6
 800494e:	4283      	cmp	r3, r0
 8004950:	4637      	mov	r7, r6
 8004952:	dc05      	bgt.n	8004960 <__swbuf_r+0x4e>
 8004954:	4621      	mov	r1, r4
 8004956:	4628      	mov	r0, r5
 8004958:	f000 fcb0 	bl	80052bc <_fflush_r>
 800495c:	2800      	cmp	r0, #0
 800495e:	d1ed      	bne.n	800493c <__swbuf_r+0x2a>
 8004960:	68a3      	ldr	r3, [r4, #8]
 8004962:	3b01      	subs	r3, #1
 8004964:	60a3      	str	r3, [r4, #8]
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	6022      	str	r2, [r4, #0]
 800496c:	701e      	strb	r6, [r3, #0]
 800496e:	6962      	ldr	r2, [r4, #20]
 8004970:	1c43      	adds	r3, r0, #1
 8004972:	429a      	cmp	r2, r3
 8004974:	d004      	beq.n	8004980 <__swbuf_r+0x6e>
 8004976:	89a3      	ldrh	r3, [r4, #12]
 8004978:	07db      	lsls	r3, r3, #31
 800497a:	d5e1      	bpl.n	8004940 <__swbuf_r+0x2e>
 800497c:	2e0a      	cmp	r6, #10
 800497e:	d1df      	bne.n	8004940 <__swbuf_r+0x2e>
 8004980:	4621      	mov	r1, r4
 8004982:	4628      	mov	r0, r5
 8004984:	f000 fc9a 	bl	80052bc <_fflush_r>
 8004988:	2800      	cmp	r0, #0
 800498a:	d0d9      	beq.n	8004940 <__swbuf_r+0x2e>
 800498c:	e7d6      	b.n	800493c <__swbuf_r+0x2a>
	...

08004990 <__swsetup_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4b29      	ldr	r3, [pc, #164]	@ (8004a38 <__swsetup_r+0xa8>)
 8004994:	4605      	mov	r5, r0
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	460c      	mov	r4, r1
 800499a:	b118      	cbz	r0, 80049a4 <__swsetup_r+0x14>
 800499c:	6a03      	ldr	r3, [r0, #32]
 800499e:	b90b      	cbnz	r3, 80049a4 <__swsetup_r+0x14>
 80049a0:	f7ff fec0 	bl	8004724 <__sinit>
 80049a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a8:	0719      	lsls	r1, r3, #28
 80049aa:	d422      	bmi.n	80049f2 <__swsetup_r+0x62>
 80049ac:	06da      	lsls	r2, r3, #27
 80049ae:	d407      	bmi.n	80049c0 <__swsetup_r+0x30>
 80049b0:	2209      	movs	r2, #9
 80049b2:	602a      	str	r2, [r5, #0]
 80049b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049b8:	81a3      	strh	r3, [r4, #12]
 80049ba:	f04f 30ff 	mov.w	r0, #4294967295
 80049be:	e033      	b.n	8004a28 <__swsetup_r+0x98>
 80049c0:	0758      	lsls	r0, r3, #29
 80049c2:	d512      	bpl.n	80049ea <__swsetup_r+0x5a>
 80049c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049c6:	b141      	cbz	r1, 80049da <__swsetup_r+0x4a>
 80049c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049cc:	4299      	cmp	r1, r3
 80049ce:	d002      	beq.n	80049d6 <__swsetup_r+0x46>
 80049d0:	4628      	mov	r0, r5
 80049d2:	f000 f8bf 	bl	8004b54 <_free_r>
 80049d6:	2300      	movs	r3, #0
 80049d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80049da:	89a3      	ldrh	r3, [r4, #12]
 80049dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80049e0:	81a3      	strh	r3, [r4, #12]
 80049e2:	2300      	movs	r3, #0
 80049e4:	6063      	str	r3, [r4, #4]
 80049e6:	6923      	ldr	r3, [r4, #16]
 80049e8:	6023      	str	r3, [r4, #0]
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	f043 0308 	orr.w	r3, r3, #8
 80049f0:	81a3      	strh	r3, [r4, #12]
 80049f2:	6923      	ldr	r3, [r4, #16]
 80049f4:	b94b      	cbnz	r3, 8004a0a <__swsetup_r+0x7a>
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80049fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a00:	d003      	beq.n	8004a0a <__swsetup_r+0x7a>
 8004a02:	4621      	mov	r1, r4
 8004a04:	4628      	mov	r0, r5
 8004a06:	f000 fca7 	bl	8005358 <__smakebuf_r>
 8004a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a0e:	f013 0201 	ands.w	r2, r3, #1
 8004a12:	d00a      	beq.n	8004a2a <__swsetup_r+0x9a>
 8004a14:	2200      	movs	r2, #0
 8004a16:	60a2      	str	r2, [r4, #8]
 8004a18:	6962      	ldr	r2, [r4, #20]
 8004a1a:	4252      	negs	r2, r2
 8004a1c:	61a2      	str	r2, [r4, #24]
 8004a1e:	6922      	ldr	r2, [r4, #16]
 8004a20:	b942      	cbnz	r2, 8004a34 <__swsetup_r+0xa4>
 8004a22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004a26:	d1c5      	bne.n	80049b4 <__swsetup_r+0x24>
 8004a28:	bd38      	pop	{r3, r4, r5, pc}
 8004a2a:	0799      	lsls	r1, r3, #30
 8004a2c:	bf58      	it	pl
 8004a2e:	6962      	ldrpl	r2, [r4, #20]
 8004a30:	60a2      	str	r2, [r4, #8]
 8004a32:	e7f4      	b.n	8004a1e <__swsetup_r+0x8e>
 8004a34:	2000      	movs	r0, #0
 8004a36:	e7f7      	b.n	8004a28 <__swsetup_r+0x98>
 8004a38:	2000001c 	.word	0x2000001c

08004a3c <memset>:
 8004a3c:	4402      	add	r2, r0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d100      	bne.n	8004a46 <memset+0xa>
 8004a44:	4770      	bx	lr
 8004a46:	f803 1b01 	strb.w	r1, [r3], #1
 8004a4a:	e7f9      	b.n	8004a40 <memset+0x4>

08004a4c <_close_r>:
 8004a4c:	b538      	push	{r3, r4, r5, lr}
 8004a4e:	4d06      	ldr	r5, [pc, #24]	@ (8004a68 <_close_r+0x1c>)
 8004a50:	2300      	movs	r3, #0
 8004a52:	4604      	mov	r4, r0
 8004a54:	4608      	mov	r0, r1
 8004a56:	602b      	str	r3, [r5, #0]
 8004a58:	f7ff f9dc 	bl	8003e14 <_close>
 8004a5c:	1c43      	adds	r3, r0, #1
 8004a5e:	d102      	bne.n	8004a66 <_close_r+0x1a>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	b103      	cbz	r3, 8004a66 <_close_r+0x1a>
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	bd38      	pop	{r3, r4, r5, pc}
 8004a68:	20000520 	.word	0x20000520

08004a6c <_lseek_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4d07      	ldr	r5, [pc, #28]	@ (8004a8c <_lseek_r+0x20>)
 8004a70:	4604      	mov	r4, r0
 8004a72:	4608      	mov	r0, r1
 8004a74:	4611      	mov	r1, r2
 8004a76:	2200      	movs	r2, #0
 8004a78:	602a      	str	r2, [r5, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f7ff f9f1 	bl	8003e62 <_lseek>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	d102      	bne.n	8004a8a <_lseek_r+0x1e>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	b103      	cbz	r3, 8004a8a <_lseek_r+0x1e>
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
 8004a8c:	20000520 	.word	0x20000520

08004a90 <_read_r>:
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	4d07      	ldr	r5, [pc, #28]	@ (8004ab0 <_read_r+0x20>)
 8004a94:	4604      	mov	r4, r0
 8004a96:	4608      	mov	r0, r1
 8004a98:	4611      	mov	r1, r2
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	602a      	str	r2, [r5, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f7ff f97f 	bl	8003da2 <_read>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	d102      	bne.n	8004aae <_read_r+0x1e>
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	b103      	cbz	r3, 8004aae <_read_r+0x1e>
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	bd38      	pop	{r3, r4, r5, pc}
 8004ab0:	20000520 	.word	0x20000520

08004ab4 <_sbrk_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4d06      	ldr	r5, [pc, #24]	@ (8004ad0 <_sbrk_r+0x1c>)
 8004ab8:	2300      	movs	r3, #0
 8004aba:	4604      	mov	r4, r0
 8004abc:	4608      	mov	r0, r1
 8004abe:	602b      	str	r3, [r5, #0]
 8004ac0:	f7ff f9dc 	bl	8003e7c <_sbrk>
 8004ac4:	1c43      	adds	r3, r0, #1
 8004ac6:	d102      	bne.n	8004ace <_sbrk_r+0x1a>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	b103      	cbz	r3, 8004ace <_sbrk_r+0x1a>
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	bd38      	pop	{r3, r4, r5, pc}
 8004ad0:	20000520 	.word	0x20000520

08004ad4 <_write_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	4d07      	ldr	r5, [pc, #28]	@ (8004af4 <_write_r+0x20>)
 8004ad8:	4604      	mov	r4, r0
 8004ada:	4608      	mov	r0, r1
 8004adc:	4611      	mov	r1, r2
 8004ade:	2200      	movs	r2, #0
 8004ae0:	602a      	str	r2, [r5, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f7ff f97a 	bl	8003ddc <_write>
 8004ae8:	1c43      	adds	r3, r0, #1
 8004aea:	d102      	bne.n	8004af2 <_write_r+0x1e>
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	b103      	cbz	r3, 8004af2 <_write_r+0x1e>
 8004af0:	6023      	str	r3, [r4, #0]
 8004af2:	bd38      	pop	{r3, r4, r5, pc}
 8004af4:	20000520 	.word	0x20000520

08004af8 <__errno>:
 8004af8:	4b01      	ldr	r3, [pc, #4]	@ (8004b00 <__errno+0x8>)
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	2000001c 	.word	0x2000001c

08004b04 <__libc_init_array>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	4d0d      	ldr	r5, [pc, #52]	@ (8004b3c <__libc_init_array+0x38>)
 8004b08:	4c0d      	ldr	r4, [pc, #52]	@ (8004b40 <__libc_init_array+0x3c>)
 8004b0a:	1b64      	subs	r4, r4, r5
 8004b0c:	10a4      	asrs	r4, r4, #2
 8004b0e:	2600      	movs	r6, #0
 8004b10:	42a6      	cmp	r6, r4
 8004b12:	d109      	bne.n	8004b28 <__libc_init_array+0x24>
 8004b14:	4d0b      	ldr	r5, [pc, #44]	@ (8004b44 <__libc_init_array+0x40>)
 8004b16:	4c0c      	ldr	r4, [pc, #48]	@ (8004b48 <__libc_init_array+0x44>)
 8004b18:	f001 fffe 	bl	8006b18 <_init>
 8004b1c:	1b64      	subs	r4, r4, r5
 8004b1e:	10a4      	asrs	r4, r4, #2
 8004b20:	2600      	movs	r6, #0
 8004b22:	42a6      	cmp	r6, r4
 8004b24:	d105      	bne.n	8004b32 <__libc_init_array+0x2e>
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
 8004b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b2c:	4798      	blx	r3
 8004b2e:	3601      	adds	r6, #1
 8004b30:	e7ee      	b.n	8004b10 <__libc_init_array+0xc>
 8004b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b36:	4798      	blx	r3
 8004b38:	3601      	adds	r6, #1
 8004b3a:	e7f2      	b.n	8004b22 <__libc_init_array+0x1e>
 8004b3c:	08007188 	.word	0x08007188
 8004b40:	08007188 	.word	0x08007188
 8004b44:	08007188 	.word	0x08007188
 8004b48:	0800718c 	.word	0x0800718c

08004b4c <__retarget_lock_init_recursive>:
 8004b4c:	4770      	bx	lr

08004b4e <__retarget_lock_acquire_recursive>:
 8004b4e:	4770      	bx	lr

08004b50 <__retarget_lock_release_recursive>:
 8004b50:	4770      	bx	lr
	...

08004b54 <_free_r>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	4605      	mov	r5, r0
 8004b58:	2900      	cmp	r1, #0
 8004b5a:	d041      	beq.n	8004be0 <_free_r+0x8c>
 8004b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b60:	1f0c      	subs	r4, r1, #4
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bfb8      	it	lt
 8004b66:	18e4      	addlt	r4, r4, r3
 8004b68:	f7ff fd44 	bl	80045f4 <__malloc_lock>
 8004b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004be4 <_free_r+0x90>)
 8004b6e:	6813      	ldr	r3, [r2, #0]
 8004b70:	b933      	cbnz	r3, 8004b80 <_free_r+0x2c>
 8004b72:	6063      	str	r3, [r4, #4]
 8004b74:	6014      	str	r4, [r2, #0]
 8004b76:	4628      	mov	r0, r5
 8004b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b7c:	f7ff bd40 	b.w	8004600 <__malloc_unlock>
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	d908      	bls.n	8004b96 <_free_r+0x42>
 8004b84:	6820      	ldr	r0, [r4, #0]
 8004b86:	1821      	adds	r1, r4, r0
 8004b88:	428b      	cmp	r3, r1
 8004b8a:	bf01      	itttt	eq
 8004b8c:	6819      	ldreq	r1, [r3, #0]
 8004b8e:	685b      	ldreq	r3, [r3, #4]
 8004b90:	1809      	addeq	r1, r1, r0
 8004b92:	6021      	streq	r1, [r4, #0]
 8004b94:	e7ed      	b.n	8004b72 <_free_r+0x1e>
 8004b96:	461a      	mov	r2, r3
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	b10b      	cbz	r3, 8004ba0 <_free_r+0x4c>
 8004b9c:	42a3      	cmp	r3, r4
 8004b9e:	d9fa      	bls.n	8004b96 <_free_r+0x42>
 8004ba0:	6811      	ldr	r1, [r2, #0]
 8004ba2:	1850      	adds	r0, r2, r1
 8004ba4:	42a0      	cmp	r0, r4
 8004ba6:	d10b      	bne.n	8004bc0 <_free_r+0x6c>
 8004ba8:	6820      	ldr	r0, [r4, #0]
 8004baa:	4401      	add	r1, r0
 8004bac:	1850      	adds	r0, r2, r1
 8004bae:	4283      	cmp	r3, r0
 8004bb0:	6011      	str	r1, [r2, #0]
 8004bb2:	d1e0      	bne.n	8004b76 <_free_r+0x22>
 8004bb4:	6818      	ldr	r0, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	6053      	str	r3, [r2, #4]
 8004bba:	4408      	add	r0, r1
 8004bbc:	6010      	str	r0, [r2, #0]
 8004bbe:	e7da      	b.n	8004b76 <_free_r+0x22>
 8004bc0:	d902      	bls.n	8004bc8 <_free_r+0x74>
 8004bc2:	230c      	movs	r3, #12
 8004bc4:	602b      	str	r3, [r5, #0]
 8004bc6:	e7d6      	b.n	8004b76 <_free_r+0x22>
 8004bc8:	6820      	ldr	r0, [r4, #0]
 8004bca:	1821      	adds	r1, r4, r0
 8004bcc:	428b      	cmp	r3, r1
 8004bce:	bf04      	itt	eq
 8004bd0:	6819      	ldreq	r1, [r3, #0]
 8004bd2:	685b      	ldreq	r3, [r3, #4]
 8004bd4:	6063      	str	r3, [r4, #4]
 8004bd6:	bf04      	itt	eq
 8004bd8:	1809      	addeq	r1, r1, r0
 8004bda:	6021      	streq	r1, [r4, #0]
 8004bdc:	6054      	str	r4, [r2, #4]
 8004bde:	e7ca      	b.n	8004b76 <_free_r+0x22>
 8004be0:	bd38      	pop	{r3, r4, r5, pc}
 8004be2:	bf00      	nop
 8004be4:	200003e0 	.word	0x200003e0

08004be8 <__ssputs_r>:
 8004be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bec:	688e      	ldr	r6, [r1, #8]
 8004bee:	461f      	mov	r7, r3
 8004bf0:	42be      	cmp	r6, r7
 8004bf2:	680b      	ldr	r3, [r1, #0]
 8004bf4:	4682      	mov	sl, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	4690      	mov	r8, r2
 8004bfa:	d82d      	bhi.n	8004c58 <__ssputs_r+0x70>
 8004bfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c04:	d026      	beq.n	8004c54 <__ssputs_r+0x6c>
 8004c06:	6965      	ldr	r5, [r4, #20]
 8004c08:	6909      	ldr	r1, [r1, #16]
 8004c0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c0e:	eba3 0901 	sub.w	r9, r3, r1
 8004c12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c16:	1c7b      	adds	r3, r7, #1
 8004c18:	444b      	add	r3, r9
 8004c1a:	106d      	asrs	r5, r5, #1
 8004c1c:	429d      	cmp	r5, r3
 8004c1e:	bf38      	it	cc
 8004c20:	461d      	movcc	r5, r3
 8004c22:	0553      	lsls	r3, r2, #21
 8004c24:	d527      	bpl.n	8004c76 <__ssputs_r+0x8e>
 8004c26:	4629      	mov	r1, r5
 8004c28:	f7ff fc64 	bl	80044f4 <_malloc_r>
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	b360      	cbz	r0, 8004c8a <__ssputs_r+0xa2>
 8004c30:	6921      	ldr	r1, [r4, #16]
 8004c32:	464a      	mov	r2, r9
 8004c34:	f000 fc08 	bl	8005448 <memcpy>
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c42:	81a3      	strh	r3, [r4, #12]
 8004c44:	6126      	str	r6, [r4, #16]
 8004c46:	6165      	str	r5, [r4, #20]
 8004c48:	444e      	add	r6, r9
 8004c4a:	eba5 0509 	sub.w	r5, r5, r9
 8004c4e:	6026      	str	r6, [r4, #0]
 8004c50:	60a5      	str	r5, [r4, #8]
 8004c52:	463e      	mov	r6, r7
 8004c54:	42be      	cmp	r6, r7
 8004c56:	d900      	bls.n	8004c5a <__ssputs_r+0x72>
 8004c58:	463e      	mov	r6, r7
 8004c5a:	6820      	ldr	r0, [r4, #0]
 8004c5c:	4632      	mov	r2, r6
 8004c5e:	4641      	mov	r1, r8
 8004c60:	f000 fbb6 	bl	80053d0 <memmove>
 8004c64:	68a3      	ldr	r3, [r4, #8]
 8004c66:	1b9b      	subs	r3, r3, r6
 8004c68:	60a3      	str	r3, [r4, #8]
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	4433      	add	r3, r6
 8004c6e:	6023      	str	r3, [r4, #0]
 8004c70:	2000      	movs	r0, #0
 8004c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c76:	462a      	mov	r2, r5
 8004c78:	f000 fbf4 	bl	8005464 <_realloc_r>
 8004c7c:	4606      	mov	r6, r0
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d1e0      	bne.n	8004c44 <__ssputs_r+0x5c>
 8004c82:	6921      	ldr	r1, [r4, #16]
 8004c84:	4650      	mov	r0, sl
 8004c86:	f7ff ff65 	bl	8004b54 <_free_r>
 8004c8a:	230c      	movs	r3, #12
 8004c8c:	f8ca 3000 	str.w	r3, [sl]
 8004c90:	89a3      	ldrh	r3, [r4, #12]
 8004c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c96:	81a3      	strh	r3, [r4, #12]
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	e7e9      	b.n	8004c72 <__ssputs_r+0x8a>
	...

08004ca0 <_svfiprintf_r>:
 8004ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca4:	4698      	mov	r8, r3
 8004ca6:	898b      	ldrh	r3, [r1, #12]
 8004ca8:	061b      	lsls	r3, r3, #24
 8004caa:	b09d      	sub	sp, #116	@ 0x74
 8004cac:	4607      	mov	r7, r0
 8004cae:	460d      	mov	r5, r1
 8004cb0:	4614      	mov	r4, r2
 8004cb2:	d510      	bpl.n	8004cd6 <_svfiprintf_r+0x36>
 8004cb4:	690b      	ldr	r3, [r1, #16]
 8004cb6:	b973      	cbnz	r3, 8004cd6 <_svfiprintf_r+0x36>
 8004cb8:	2140      	movs	r1, #64	@ 0x40
 8004cba:	f7ff fc1b 	bl	80044f4 <_malloc_r>
 8004cbe:	6028      	str	r0, [r5, #0]
 8004cc0:	6128      	str	r0, [r5, #16]
 8004cc2:	b930      	cbnz	r0, 8004cd2 <_svfiprintf_r+0x32>
 8004cc4:	230c      	movs	r3, #12
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ccc:	b01d      	add	sp, #116	@ 0x74
 8004cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd2:	2340      	movs	r3, #64	@ 0x40
 8004cd4:	616b      	str	r3, [r5, #20]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cda:	2320      	movs	r3, #32
 8004cdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ce0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ce4:	2330      	movs	r3, #48	@ 0x30
 8004ce6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004e84 <_svfiprintf_r+0x1e4>
 8004cea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004cee:	f04f 0901 	mov.w	r9, #1
 8004cf2:	4623      	mov	r3, r4
 8004cf4:	469a      	mov	sl, r3
 8004cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cfa:	b10a      	cbz	r2, 8004d00 <_svfiprintf_r+0x60>
 8004cfc:	2a25      	cmp	r2, #37	@ 0x25
 8004cfe:	d1f9      	bne.n	8004cf4 <_svfiprintf_r+0x54>
 8004d00:	ebba 0b04 	subs.w	fp, sl, r4
 8004d04:	d00b      	beq.n	8004d1e <_svfiprintf_r+0x7e>
 8004d06:	465b      	mov	r3, fp
 8004d08:	4622      	mov	r2, r4
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	f7ff ff6b 	bl	8004be8 <__ssputs_r>
 8004d12:	3001      	adds	r0, #1
 8004d14:	f000 80a7 	beq.w	8004e66 <_svfiprintf_r+0x1c6>
 8004d18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d1a:	445a      	add	r2, fp
 8004d1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 809f 	beq.w	8004e66 <_svfiprintf_r+0x1c6>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d32:	f10a 0a01 	add.w	sl, sl, #1
 8004d36:	9304      	str	r3, [sp, #16]
 8004d38:	9307      	str	r3, [sp, #28]
 8004d3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d40:	4654      	mov	r4, sl
 8004d42:	2205      	movs	r2, #5
 8004d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d48:	484e      	ldr	r0, [pc, #312]	@ (8004e84 <_svfiprintf_r+0x1e4>)
 8004d4a:	f7fb fa49 	bl	80001e0 <memchr>
 8004d4e:	9a04      	ldr	r2, [sp, #16]
 8004d50:	b9d8      	cbnz	r0, 8004d8a <_svfiprintf_r+0xea>
 8004d52:	06d0      	lsls	r0, r2, #27
 8004d54:	bf44      	itt	mi
 8004d56:	2320      	movmi	r3, #32
 8004d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d5c:	0711      	lsls	r1, r2, #28
 8004d5e:	bf44      	itt	mi
 8004d60:	232b      	movmi	r3, #43	@ 0x2b
 8004d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d66:	f89a 3000 	ldrb.w	r3, [sl]
 8004d6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d6c:	d015      	beq.n	8004d9a <_svfiprintf_r+0xfa>
 8004d6e:	9a07      	ldr	r2, [sp, #28]
 8004d70:	4654      	mov	r4, sl
 8004d72:	2000      	movs	r0, #0
 8004d74:	f04f 0c0a 	mov.w	ip, #10
 8004d78:	4621      	mov	r1, r4
 8004d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d7e:	3b30      	subs	r3, #48	@ 0x30
 8004d80:	2b09      	cmp	r3, #9
 8004d82:	d94b      	bls.n	8004e1c <_svfiprintf_r+0x17c>
 8004d84:	b1b0      	cbz	r0, 8004db4 <_svfiprintf_r+0x114>
 8004d86:	9207      	str	r2, [sp, #28]
 8004d88:	e014      	b.n	8004db4 <_svfiprintf_r+0x114>
 8004d8a:	eba0 0308 	sub.w	r3, r0, r8
 8004d8e:	fa09 f303 	lsl.w	r3, r9, r3
 8004d92:	4313      	orrs	r3, r2
 8004d94:	9304      	str	r3, [sp, #16]
 8004d96:	46a2      	mov	sl, r4
 8004d98:	e7d2      	b.n	8004d40 <_svfiprintf_r+0xa0>
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	1d19      	adds	r1, r3, #4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	9103      	str	r1, [sp, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bfbb      	ittet	lt
 8004da6:	425b      	neglt	r3, r3
 8004da8:	f042 0202 	orrlt.w	r2, r2, #2
 8004dac:	9307      	strge	r3, [sp, #28]
 8004dae:	9307      	strlt	r3, [sp, #28]
 8004db0:	bfb8      	it	lt
 8004db2:	9204      	strlt	r2, [sp, #16]
 8004db4:	7823      	ldrb	r3, [r4, #0]
 8004db6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004db8:	d10a      	bne.n	8004dd0 <_svfiprintf_r+0x130>
 8004dba:	7863      	ldrb	r3, [r4, #1]
 8004dbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dbe:	d132      	bne.n	8004e26 <_svfiprintf_r+0x186>
 8004dc0:	9b03      	ldr	r3, [sp, #12]
 8004dc2:	1d1a      	adds	r2, r3, #4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	9203      	str	r2, [sp, #12]
 8004dc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004dcc:	3402      	adds	r4, #2
 8004dce:	9305      	str	r3, [sp, #20]
 8004dd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004e94 <_svfiprintf_r+0x1f4>
 8004dd4:	7821      	ldrb	r1, [r4, #0]
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	4650      	mov	r0, sl
 8004dda:	f7fb fa01 	bl	80001e0 <memchr>
 8004dde:	b138      	cbz	r0, 8004df0 <_svfiprintf_r+0x150>
 8004de0:	9b04      	ldr	r3, [sp, #16]
 8004de2:	eba0 000a 	sub.w	r0, r0, sl
 8004de6:	2240      	movs	r2, #64	@ 0x40
 8004de8:	4082      	lsls	r2, r0
 8004dea:	4313      	orrs	r3, r2
 8004dec:	3401      	adds	r4, #1
 8004dee:	9304      	str	r3, [sp, #16]
 8004df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004df4:	4824      	ldr	r0, [pc, #144]	@ (8004e88 <_svfiprintf_r+0x1e8>)
 8004df6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004dfa:	2206      	movs	r2, #6
 8004dfc:	f7fb f9f0 	bl	80001e0 <memchr>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d036      	beq.n	8004e72 <_svfiprintf_r+0x1d2>
 8004e04:	4b21      	ldr	r3, [pc, #132]	@ (8004e8c <_svfiprintf_r+0x1ec>)
 8004e06:	bb1b      	cbnz	r3, 8004e50 <_svfiprintf_r+0x1b0>
 8004e08:	9b03      	ldr	r3, [sp, #12]
 8004e0a:	3307      	adds	r3, #7
 8004e0c:	f023 0307 	bic.w	r3, r3, #7
 8004e10:	3308      	adds	r3, #8
 8004e12:	9303      	str	r3, [sp, #12]
 8004e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e16:	4433      	add	r3, r6
 8004e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e1a:	e76a      	b.n	8004cf2 <_svfiprintf_r+0x52>
 8004e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e20:	460c      	mov	r4, r1
 8004e22:	2001      	movs	r0, #1
 8004e24:	e7a8      	b.n	8004d78 <_svfiprintf_r+0xd8>
 8004e26:	2300      	movs	r3, #0
 8004e28:	3401      	adds	r4, #1
 8004e2a:	9305      	str	r3, [sp, #20]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	f04f 0c0a 	mov.w	ip, #10
 8004e32:	4620      	mov	r0, r4
 8004e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e38:	3a30      	subs	r2, #48	@ 0x30
 8004e3a:	2a09      	cmp	r2, #9
 8004e3c:	d903      	bls.n	8004e46 <_svfiprintf_r+0x1a6>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0c6      	beq.n	8004dd0 <_svfiprintf_r+0x130>
 8004e42:	9105      	str	r1, [sp, #20]
 8004e44:	e7c4      	b.n	8004dd0 <_svfiprintf_r+0x130>
 8004e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e7f0      	b.n	8004e32 <_svfiprintf_r+0x192>
 8004e50:	ab03      	add	r3, sp, #12
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	462a      	mov	r2, r5
 8004e56:	4b0e      	ldr	r3, [pc, #56]	@ (8004e90 <_svfiprintf_r+0x1f0>)
 8004e58:	a904      	add	r1, sp, #16
 8004e5a:	4638      	mov	r0, r7
 8004e5c:	f3af 8000 	nop.w
 8004e60:	1c42      	adds	r2, r0, #1
 8004e62:	4606      	mov	r6, r0
 8004e64:	d1d6      	bne.n	8004e14 <_svfiprintf_r+0x174>
 8004e66:	89ab      	ldrh	r3, [r5, #12]
 8004e68:	065b      	lsls	r3, r3, #25
 8004e6a:	f53f af2d 	bmi.w	8004cc8 <_svfiprintf_r+0x28>
 8004e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e70:	e72c      	b.n	8004ccc <_svfiprintf_r+0x2c>
 8004e72:	ab03      	add	r3, sp, #12
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	462a      	mov	r2, r5
 8004e78:	4b05      	ldr	r3, [pc, #20]	@ (8004e90 <_svfiprintf_r+0x1f0>)
 8004e7a:	a904      	add	r1, sp, #16
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	f000 f879 	bl	8004f74 <_printf_i>
 8004e82:	e7ed      	b.n	8004e60 <_svfiprintf_r+0x1c0>
 8004e84:	08006f30 	.word	0x08006f30
 8004e88:	08006f3a 	.word	0x08006f3a
 8004e8c:	00000000 	.word	0x00000000
 8004e90:	08004be9 	.word	0x08004be9
 8004e94:	08006f36 	.word	0x08006f36

08004e98 <_printf_common>:
 8004e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e9c:	4616      	mov	r6, r2
 8004e9e:	4698      	mov	r8, r3
 8004ea0:	688a      	ldr	r2, [r1, #8]
 8004ea2:	690b      	ldr	r3, [r1, #16]
 8004ea4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	bfb8      	it	lt
 8004eac:	4613      	movlt	r3, r2
 8004eae:	6033      	str	r3, [r6, #0]
 8004eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004eb4:	4607      	mov	r7, r0
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	b10a      	cbz	r2, 8004ebe <_printf_common+0x26>
 8004eba:	3301      	adds	r3, #1
 8004ebc:	6033      	str	r3, [r6, #0]
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	0699      	lsls	r1, r3, #26
 8004ec2:	bf42      	ittt	mi
 8004ec4:	6833      	ldrmi	r3, [r6, #0]
 8004ec6:	3302      	addmi	r3, #2
 8004ec8:	6033      	strmi	r3, [r6, #0]
 8004eca:	6825      	ldr	r5, [r4, #0]
 8004ecc:	f015 0506 	ands.w	r5, r5, #6
 8004ed0:	d106      	bne.n	8004ee0 <_printf_common+0x48>
 8004ed2:	f104 0a19 	add.w	sl, r4, #25
 8004ed6:	68e3      	ldr	r3, [r4, #12]
 8004ed8:	6832      	ldr	r2, [r6, #0]
 8004eda:	1a9b      	subs	r3, r3, r2
 8004edc:	42ab      	cmp	r3, r5
 8004ede:	dc26      	bgt.n	8004f2e <_printf_common+0x96>
 8004ee0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ee4:	6822      	ldr	r2, [r4, #0]
 8004ee6:	3b00      	subs	r3, #0
 8004ee8:	bf18      	it	ne
 8004eea:	2301      	movne	r3, #1
 8004eec:	0692      	lsls	r2, r2, #26
 8004eee:	d42b      	bmi.n	8004f48 <_printf_common+0xb0>
 8004ef0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ef4:	4641      	mov	r1, r8
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	47c8      	blx	r9
 8004efa:	3001      	adds	r0, #1
 8004efc:	d01e      	beq.n	8004f3c <_printf_common+0xa4>
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	6922      	ldr	r2, [r4, #16]
 8004f02:	f003 0306 	and.w	r3, r3, #6
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	bf02      	ittt	eq
 8004f0a:	68e5      	ldreq	r5, [r4, #12]
 8004f0c:	6833      	ldreq	r3, [r6, #0]
 8004f0e:	1aed      	subeq	r5, r5, r3
 8004f10:	68a3      	ldr	r3, [r4, #8]
 8004f12:	bf0c      	ite	eq
 8004f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f18:	2500      	movne	r5, #0
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	bfc4      	itt	gt
 8004f1e:	1a9b      	subgt	r3, r3, r2
 8004f20:	18ed      	addgt	r5, r5, r3
 8004f22:	2600      	movs	r6, #0
 8004f24:	341a      	adds	r4, #26
 8004f26:	42b5      	cmp	r5, r6
 8004f28:	d11a      	bne.n	8004f60 <_printf_common+0xc8>
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	e008      	b.n	8004f40 <_printf_common+0xa8>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	4652      	mov	r2, sl
 8004f32:	4641      	mov	r1, r8
 8004f34:	4638      	mov	r0, r7
 8004f36:	47c8      	blx	r9
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d103      	bne.n	8004f44 <_printf_common+0xac>
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f44:	3501      	adds	r5, #1
 8004f46:	e7c6      	b.n	8004ed6 <_printf_common+0x3e>
 8004f48:	18e1      	adds	r1, r4, r3
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	2030      	movs	r0, #48	@ 0x30
 8004f4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f52:	4422      	add	r2, r4
 8004f54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	e7c7      	b.n	8004ef0 <_printf_common+0x58>
 8004f60:	2301      	movs	r3, #1
 8004f62:	4622      	mov	r2, r4
 8004f64:	4641      	mov	r1, r8
 8004f66:	4638      	mov	r0, r7
 8004f68:	47c8      	blx	r9
 8004f6a:	3001      	adds	r0, #1
 8004f6c:	d0e6      	beq.n	8004f3c <_printf_common+0xa4>
 8004f6e:	3601      	adds	r6, #1
 8004f70:	e7d9      	b.n	8004f26 <_printf_common+0x8e>
	...

08004f74 <_printf_i>:
 8004f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f78:	7e0f      	ldrb	r7, [r1, #24]
 8004f7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f7c:	2f78      	cmp	r7, #120	@ 0x78
 8004f7e:	4691      	mov	r9, r2
 8004f80:	4680      	mov	r8, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	469a      	mov	sl, r3
 8004f86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f8a:	d807      	bhi.n	8004f9c <_printf_i+0x28>
 8004f8c:	2f62      	cmp	r7, #98	@ 0x62
 8004f8e:	d80a      	bhi.n	8004fa6 <_printf_i+0x32>
 8004f90:	2f00      	cmp	r7, #0
 8004f92:	f000 80d2 	beq.w	800513a <_printf_i+0x1c6>
 8004f96:	2f58      	cmp	r7, #88	@ 0x58
 8004f98:	f000 80b9 	beq.w	800510e <_printf_i+0x19a>
 8004f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fa4:	e03a      	b.n	800501c <_printf_i+0xa8>
 8004fa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004faa:	2b15      	cmp	r3, #21
 8004fac:	d8f6      	bhi.n	8004f9c <_printf_i+0x28>
 8004fae:	a101      	add	r1, pc, #4	@ (adr r1, 8004fb4 <_printf_i+0x40>)
 8004fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fb4:	0800500d 	.word	0x0800500d
 8004fb8:	08005021 	.word	0x08005021
 8004fbc:	08004f9d 	.word	0x08004f9d
 8004fc0:	08004f9d 	.word	0x08004f9d
 8004fc4:	08004f9d 	.word	0x08004f9d
 8004fc8:	08004f9d 	.word	0x08004f9d
 8004fcc:	08005021 	.word	0x08005021
 8004fd0:	08004f9d 	.word	0x08004f9d
 8004fd4:	08004f9d 	.word	0x08004f9d
 8004fd8:	08004f9d 	.word	0x08004f9d
 8004fdc:	08004f9d 	.word	0x08004f9d
 8004fe0:	08005121 	.word	0x08005121
 8004fe4:	0800504b 	.word	0x0800504b
 8004fe8:	080050db 	.word	0x080050db
 8004fec:	08004f9d 	.word	0x08004f9d
 8004ff0:	08004f9d 	.word	0x08004f9d
 8004ff4:	08005143 	.word	0x08005143
 8004ff8:	08004f9d 	.word	0x08004f9d
 8004ffc:	0800504b 	.word	0x0800504b
 8005000:	08004f9d 	.word	0x08004f9d
 8005004:	08004f9d 	.word	0x08004f9d
 8005008:	080050e3 	.word	0x080050e3
 800500c:	6833      	ldr	r3, [r6, #0]
 800500e:	1d1a      	adds	r2, r3, #4
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6032      	str	r2, [r6, #0]
 8005014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005018:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800501c:	2301      	movs	r3, #1
 800501e:	e09d      	b.n	800515c <_printf_i+0x1e8>
 8005020:	6833      	ldr	r3, [r6, #0]
 8005022:	6820      	ldr	r0, [r4, #0]
 8005024:	1d19      	adds	r1, r3, #4
 8005026:	6031      	str	r1, [r6, #0]
 8005028:	0606      	lsls	r6, r0, #24
 800502a:	d501      	bpl.n	8005030 <_printf_i+0xbc>
 800502c:	681d      	ldr	r5, [r3, #0]
 800502e:	e003      	b.n	8005038 <_printf_i+0xc4>
 8005030:	0645      	lsls	r5, r0, #25
 8005032:	d5fb      	bpl.n	800502c <_printf_i+0xb8>
 8005034:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005038:	2d00      	cmp	r5, #0
 800503a:	da03      	bge.n	8005044 <_printf_i+0xd0>
 800503c:	232d      	movs	r3, #45	@ 0x2d
 800503e:	426d      	negs	r5, r5
 8005040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005044:	4859      	ldr	r0, [pc, #356]	@ (80051ac <_printf_i+0x238>)
 8005046:	230a      	movs	r3, #10
 8005048:	e011      	b.n	800506e <_printf_i+0xfa>
 800504a:	6821      	ldr	r1, [r4, #0]
 800504c:	6833      	ldr	r3, [r6, #0]
 800504e:	0608      	lsls	r0, r1, #24
 8005050:	f853 5b04 	ldr.w	r5, [r3], #4
 8005054:	d402      	bmi.n	800505c <_printf_i+0xe8>
 8005056:	0649      	lsls	r1, r1, #25
 8005058:	bf48      	it	mi
 800505a:	b2ad      	uxthmi	r5, r5
 800505c:	2f6f      	cmp	r7, #111	@ 0x6f
 800505e:	4853      	ldr	r0, [pc, #332]	@ (80051ac <_printf_i+0x238>)
 8005060:	6033      	str	r3, [r6, #0]
 8005062:	bf14      	ite	ne
 8005064:	230a      	movne	r3, #10
 8005066:	2308      	moveq	r3, #8
 8005068:	2100      	movs	r1, #0
 800506a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800506e:	6866      	ldr	r6, [r4, #4]
 8005070:	60a6      	str	r6, [r4, #8]
 8005072:	2e00      	cmp	r6, #0
 8005074:	bfa2      	ittt	ge
 8005076:	6821      	ldrge	r1, [r4, #0]
 8005078:	f021 0104 	bicge.w	r1, r1, #4
 800507c:	6021      	strge	r1, [r4, #0]
 800507e:	b90d      	cbnz	r5, 8005084 <_printf_i+0x110>
 8005080:	2e00      	cmp	r6, #0
 8005082:	d04b      	beq.n	800511c <_printf_i+0x1a8>
 8005084:	4616      	mov	r6, r2
 8005086:	fbb5 f1f3 	udiv	r1, r5, r3
 800508a:	fb03 5711 	mls	r7, r3, r1, r5
 800508e:	5dc7      	ldrb	r7, [r0, r7]
 8005090:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005094:	462f      	mov	r7, r5
 8005096:	42bb      	cmp	r3, r7
 8005098:	460d      	mov	r5, r1
 800509a:	d9f4      	bls.n	8005086 <_printf_i+0x112>
 800509c:	2b08      	cmp	r3, #8
 800509e:	d10b      	bne.n	80050b8 <_printf_i+0x144>
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	07df      	lsls	r7, r3, #31
 80050a4:	d508      	bpl.n	80050b8 <_printf_i+0x144>
 80050a6:	6923      	ldr	r3, [r4, #16]
 80050a8:	6861      	ldr	r1, [r4, #4]
 80050aa:	4299      	cmp	r1, r3
 80050ac:	bfde      	ittt	le
 80050ae:	2330      	movle	r3, #48	@ 0x30
 80050b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050b8:	1b92      	subs	r2, r2, r6
 80050ba:	6122      	str	r2, [r4, #16]
 80050bc:	f8cd a000 	str.w	sl, [sp]
 80050c0:	464b      	mov	r3, r9
 80050c2:	aa03      	add	r2, sp, #12
 80050c4:	4621      	mov	r1, r4
 80050c6:	4640      	mov	r0, r8
 80050c8:	f7ff fee6 	bl	8004e98 <_printf_common>
 80050cc:	3001      	adds	r0, #1
 80050ce:	d14a      	bne.n	8005166 <_printf_i+0x1f2>
 80050d0:	f04f 30ff 	mov.w	r0, #4294967295
 80050d4:	b004      	add	sp, #16
 80050d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	f043 0320 	orr.w	r3, r3, #32
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	4833      	ldr	r0, [pc, #204]	@ (80051b0 <_printf_i+0x23c>)
 80050e4:	2778      	movs	r7, #120	@ 0x78
 80050e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	6831      	ldr	r1, [r6, #0]
 80050ee:	061f      	lsls	r7, r3, #24
 80050f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80050f4:	d402      	bmi.n	80050fc <_printf_i+0x188>
 80050f6:	065f      	lsls	r7, r3, #25
 80050f8:	bf48      	it	mi
 80050fa:	b2ad      	uxthmi	r5, r5
 80050fc:	6031      	str	r1, [r6, #0]
 80050fe:	07d9      	lsls	r1, r3, #31
 8005100:	bf44      	itt	mi
 8005102:	f043 0320 	orrmi.w	r3, r3, #32
 8005106:	6023      	strmi	r3, [r4, #0]
 8005108:	b11d      	cbz	r5, 8005112 <_printf_i+0x19e>
 800510a:	2310      	movs	r3, #16
 800510c:	e7ac      	b.n	8005068 <_printf_i+0xf4>
 800510e:	4827      	ldr	r0, [pc, #156]	@ (80051ac <_printf_i+0x238>)
 8005110:	e7e9      	b.n	80050e6 <_printf_i+0x172>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	f023 0320 	bic.w	r3, r3, #32
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	e7f6      	b.n	800510a <_printf_i+0x196>
 800511c:	4616      	mov	r6, r2
 800511e:	e7bd      	b.n	800509c <_printf_i+0x128>
 8005120:	6833      	ldr	r3, [r6, #0]
 8005122:	6825      	ldr	r5, [r4, #0]
 8005124:	6961      	ldr	r1, [r4, #20]
 8005126:	1d18      	adds	r0, r3, #4
 8005128:	6030      	str	r0, [r6, #0]
 800512a:	062e      	lsls	r6, r5, #24
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	d501      	bpl.n	8005134 <_printf_i+0x1c0>
 8005130:	6019      	str	r1, [r3, #0]
 8005132:	e002      	b.n	800513a <_printf_i+0x1c6>
 8005134:	0668      	lsls	r0, r5, #25
 8005136:	d5fb      	bpl.n	8005130 <_printf_i+0x1bc>
 8005138:	8019      	strh	r1, [r3, #0]
 800513a:	2300      	movs	r3, #0
 800513c:	6123      	str	r3, [r4, #16]
 800513e:	4616      	mov	r6, r2
 8005140:	e7bc      	b.n	80050bc <_printf_i+0x148>
 8005142:	6833      	ldr	r3, [r6, #0]
 8005144:	1d1a      	adds	r2, r3, #4
 8005146:	6032      	str	r2, [r6, #0]
 8005148:	681e      	ldr	r6, [r3, #0]
 800514a:	6862      	ldr	r2, [r4, #4]
 800514c:	2100      	movs	r1, #0
 800514e:	4630      	mov	r0, r6
 8005150:	f7fb f846 	bl	80001e0 <memchr>
 8005154:	b108      	cbz	r0, 800515a <_printf_i+0x1e6>
 8005156:	1b80      	subs	r0, r0, r6
 8005158:	6060      	str	r0, [r4, #4]
 800515a:	6863      	ldr	r3, [r4, #4]
 800515c:	6123      	str	r3, [r4, #16]
 800515e:	2300      	movs	r3, #0
 8005160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005164:	e7aa      	b.n	80050bc <_printf_i+0x148>
 8005166:	6923      	ldr	r3, [r4, #16]
 8005168:	4632      	mov	r2, r6
 800516a:	4649      	mov	r1, r9
 800516c:	4640      	mov	r0, r8
 800516e:	47d0      	blx	sl
 8005170:	3001      	adds	r0, #1
 8005172:	d0ad      	beq.n	80050d0 <_printf_i+0x15c>
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	079b      	lsls	r3, r3, #30
 8005178:	d413      	bmi.n	80051a2 <_printf_i+0x22e>
 800517a:	68e0      	ldr	r0, [r4, #12]
 800517c:	9b03      	ldr	r3, [sp, #12]
 800517e:	4298      	cmp	r0, r3
 8005180:	bfb8      	it	lt
 8005182:	4618      	movlt	r0, r3
 8005184:	e7a6      	b.n	80050d4 <_printf_i+0x160>
 8005186:	2301      	movs	r3, #1
 8005188:	4632      	mov	r2, r6
 800518a:	4649      	mov	r1, r9
 800518c:	4640      	mov	r0, r8
 800518e:	47d0      	blx	sl
 8005190:	3001      	adds	r0, #1
 8005192:	d09d      	beq.n	80050d0 <_printf_i+0x15c>
 8005194:	3501      	adds	r5, #1
 8005196:	68e3      	ldr	r3, [r4, #12]
 8005198:	9903      	ldr	r1, [sp, #12]
 800519a:	1a5b      	subs	r3, r3, r1
 800519c:	42ab      	cmp	r3, r5
 800519e:	dcf2      	bgt.n	8005186 <_printf_i+0x212>
 80051a0:	e7eb      	b.n	800517a <_printf_i+0x206>
 80051a2:	2500      	movs	r5, #0
 80051a4:	f104 0619 	add.w	r6, r4, #25
 80051a8:	e7f5      	b.n	8005196 <_printf_i+0x222>
 80051aa:	bf00      	nop
 80051ac:	08006f41 	.word	0x08006f41
 80051b0:	08006f52 	.word	0x08006f52

080051b4 <__sflush_r>:
 80051b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051bc:	0716      	lsls	r6, r2, #28
 80051be:	4605      	mov	r5, r0
 80051c0:	460c      	mov	r4, r1
 80051c2:	d454      	bmi.n	800526e <__sflush_r+0xba>
 80051c4:	684b      	ldr	r3, [r1, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	dc02      	bgt.n	80051d0 <__sflush_r+0x1c>
 80051ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	dd48      	ble.n	8005262 <__sflush_r+0xae>
 80051d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051d2:	2e00      	cmp	r6, #0
 80051d4:	d045      	beq.n	8005262 <__sflush_r+0xae>
 80051d6:	2300      	movs	r3, #0
 80051d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80051dc:	682f      	ldr	r7, [r5, #0]
 80051de:	6a21      	ldr	r1, [r4, #32]
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	d030      	beq.n	8005246 <__sflush_r+0x92>
 80051e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80051e6:	89a3      	ldrh	r3, [r4, #12]
 80051e8:	0759      	lsls	r1, r3, #29
 80051ea:	d505      	bpl.n	80051f8 <__sflush_r+0x44>
 80051ec:	6863      	ldr	r3, [r4, #4]
 80051ee:	1ad2      	subs	r2, r2, r3
 80051f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051f2:	b10b      	cbz	r3, 80051f8 <__sflush_r+0x44>
 80051f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051f6:	1ad2      	subs	r2, r2, r3
 80051f8:	2300      	movs	r3, #0
 80051fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051fc:	6a21      	ldr	r1, [r4, #32]
 80051fe:	4628      	mov	r0, r5
 8005200:	47b0      	blx	r6
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	d106      	bne.n	8005216 <__sflush_r+0x62>
 8005208:	6829      	ldr	r1, [r5, #0]
 800520a:	291d      	cmp	r1, #29
 800520c:	d82b      	bhi.n	8005266 <__sflush_r+0xb2>
 800520e:	4a2a      	ldr	r2, [pc, #168]	@ (80052b8 <__sflush_r+0x104>)
 8005210:	410a      	asrs	r2, r1
 8005212:	07d6      	lsls	r6, r2, #31
 8005214:	d427      	bmi.n	8005266 <__sflush_r+0xb2>
 8005216:	2200      	movs	r2, #0
 8005218:	6062      	str	r2, [r4, #4]
 800521a:	04d9      	lsls	r1, r3, #19
 800521c:	6922      	ldr	r2, [r4, #16]
 800521e:	6022      	str	r2, [r4, #0]
 8005220:	d504      	bpl.n	800522c <__sflush_r+0x78>
 8005222:	1c42      	adds	r2, r0, #1
 8005224:	d101      	bne.n	800522a <__sflush_r+0x76>
 8005226:	682b      	ldr	r3, [r5, #0]
 8005228:	b903      	cbnz	r3, 800522c <__sflush_r+0x78>
 800522a:	6560      	str	r0, [r4, #84]	@ 0x54
 800522c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800522e:	602f      	str	r7, [r5, #0]
 8005230:	b1b9      	cbz	r1, 8005262 <__sflush_r+0xae>
 8005232:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005236:	4299      	cmp	r1, r3
 8005238:	d002      	beq.n	8005240 <__sflush_r+0x8c>
 800523a:	4628      	mov	r0, r5
 800523c:	f7ff fc8a 	bl	8004b54 <_free_r>
 8005240:	2300      	movs	r3, #0
 8005242:	6363      	str	r3, [r4, #52]	@ 0x34
 8005244:	e00d      	b.n	8005262 <__sflush_r+0xae>
 8005246:	2301      	movs	r3, #1
 8005248:	4628      	mov	r0, r5
 800524a:	47b0      	blx	r6
 800524c:	4602      	mov	r2, r0
 800524e:	1c50      	adds	r0, r2, #1
 8005250:	d1c9      	bne.n	80051e6 <__sflush_r+0x32>
 8005252:	682b      	ldr	r3, [r5, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0c6      	beq.n	80051e6 <__sflush_r+0x32>
 8005258:	2b1d      	cmp	r3, #29
 800525a:	d001      	beq.n	8005260 <__sflush_r+0xac>
 800525c:	2b16      	cmp	r3, #22
 800525e:	d11e      	bne.n	800529e <__sflush_r+0xea>
 8005260:	602f      	str	r7, [r5, #0]
 8005262:	2000      	movs	r0, #0
 8005264:	e022      	b.n	80052ac <__sflush_r+0xf8>
 8005266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800526a:	b21b      	sxth	r3, r3
 800526c:	e01b      	b.n	80052a6 <__sflush_r+0xf2>
 800526e:	690f      	ldr	r7, [r1, #16]
 8005270:	2f00      	cmp	r7, #0
 8005272:	d0f6      	beq.n	8005262 <__sflush_r+0xae>
 8005274:	0793      	lsls	r3, r2, #30
 8005276:	680e      	ldr	r6, [r1, #0]
 8005278:	bf08      	it	eq
 800527a:	694b      	ldreq	r3, [r1, #20]
 800527c:	600f      	str	r7, [r1, #0]
 800527e:	bf18      	it	ne
 8005280:	2300      	movne	r3, #0
 8005282:	eba6 0807 	sub.w	r8, r6, r7
 8005286:	608b      	str	r3, [r1, #8]
 8005288:	f1b8 0f00 	cmp.w	r8, #0
 800528c:	dde9      	ble.n	8005262 <__sflush_r+0xae>
 800528e:	6a21      	ldr	r1, [r4, #32]
 8005290:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005292:	4643      	mov	r3, r8
 8005294:	463a      	mov	r2, r7
 8005296:	4628      	mov	r0, r5
 8005298:	47b0      	blx	r6
 800529a:	2800      	cmp	r0, #0
 800529c:	dc08      	bgt.n	80052b0 <__sflush_r+0xfc>
 800529e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052a6:	81a3      	strh	r3, [r4, #12]
 80052a8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b0:	4407      	add	r7, r0
 80052b2:	eba8 0800 	sub.w	r8, r8, r0
 80052b6:	e7e7      	b.n	8005288 <__sflush_r+0xd4>
 80052b8:	dfbffffe 	.word	0xdfbffffe

080052bc <_fflush_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	690b      	ldr	r3, [r1, #16]
 80052c0:	4605      	mov	r5, r0
 80052c2:	460c      	mov	r4, r1
 80052c4:	b913      	cbnz	r3, 80052cc <_fflush_r+0x10>
 80052c6:	2500      	movs	r5, #0
 80052c8:	4628      	mov	r0, r5
 80052ca:	bd38      	pop	{r3, r4, r5, pc}
 80052cc:	b118      	cbz	r0, 80052d6 <_fflush_r+0x1a>
 80052ce:	6a03      	ldr	r3, [r0, #32]
 80052d0:	b90b      	cbnz	r3, 80052d6 <_fflush_r+0x1a>
 80052d2:	f7ff fa27 	bl	8004724 <__sinit>
 80052d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0f3      	beq.n	80052c6 <_fflush_r+0xa>
 80052de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80052e0:	07d0      	lsls	r0, r2, #31
 80052e2:	d404      	bmi.n	80052ee <_fflush_r+0x32>
 80052e4:	0599      	lsls	r1, r3, #22
 80052e6:	d402      	bmi.n	80052ee <_fflush_r+0x32>
 80052e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052ea:	f7ff fc30 	bl	8004b4e <__retarget_lock_acquire_recursive>
 80052ee:	4628      	mov	r0, r5
 80052f0:	4621      	mov	r1, r4
 80052f2:	f7ff ff5f 	bl	80051b4 <__sflush_r>
 80052f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052f8:	07da      	lsls	r2, r3, #31
 80052fa:	4605      	mov	r5, r0
 80052fc:	d4e4      	bmi.n	80052c8 <_fflush_r+0xc>
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	059b      	lsls	r3, r3, #22
 8005302:	d4e1      	bmi.n	80052c8 <_fflush_r+0xc>
 8005304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005306:	f7ff fc23 	bl	8004b50 <__retarget_lock_release_recursive>
 800530a:	e7dd      	b.n	80052c8 <_fflush_r+0xc>

0800530c <__swhatbuf_r>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	460c      	mov	r4, r1
 8005310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005314:	2900      	cmp	r1, #0
 8005316:	b096      	sub	sp, #88	@ 0x58
 8005318:	4615      	mov	r5, r2
 800531a:	461e      	mov	r6, r3
 800531c:	da0d      	bge.n	800533a <__swhatbuf_r+0x2e>
 800531e:	89a3      	ldrh	r3, [r4, #12]
 8005320:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005324:	f04f 0100 	mov.w	r1, #0
 8005328:	bf14      	ite	ne
 800532a:	2340      	movne	r3, #64	@ 0x40
 800532c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005330:	2000      	movs	r0, #0
 8005332:	6031      	str	r1, [r6, #0]
 8005334:	602b      	str	r3, [r5, #0]
 8005336:	b016      	add	sp, #88	@ 0x58
 8005338:	bd70      	pop	{r4, r5, r6, pc}
 800533a:	466a      	mov	r2, sp
 800533c:	f000 f862 	bl	8005404 <_fstat_r>
 8005340:	2800      	cmp	r0, #0
 8005342:	dbec      	blt.n	800531e <__swhatbuf_r+0x12>
 8005344:	9901      	ldr	r1, [sp, #4]
 8005346:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800534a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800534e:	4259      	negs	r1, r3
 8005350:	4159      	adcs	r1, r3
 8005352:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005356:	e7eb      	b.n	8005330 <__swhatbuf_r+0x24>

08005358 <__smakebuf_r>:
 8005358:	898b      	ldrh	r3, [r1, #12]
 800535a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800535c:	079d      	lsls	r5, r3, #30
 800535e:	4606      	mov	r6, r0
 8005360:	460c      	mov	r4, r1
 8005362:	d507      	bpl.n	8005374 <__smakebuf_r+0x1c>
 8005364:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	6123      	str	r3, [r4, #16]
 800536c:	2301      	movs	r3, #1
 800536e:	6163      	str	r3, [r4, #20]
 8005370:	b003      	add	sp, #12
 8005372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005374:	ab01      	add	r3, sp, #4
 8005376:	466a      	mov	r2, sp
 8005378:	f7ff ffc8 	bl	800530c <__swhatbuf_r>
 800537c:	9f00      	ldr	r7, [sp, #0]
 800537e:	4605      	mov	r5, r0
 8005380:	4639      	mov	r1, r7
 8005382:	4630      	mov	r0, r6
 8005384:	f7ff f8b6 	bl	80044f4 <_malloc_r>
 8005388:	b948      	cbnz	r0, 800539e <__smakebuf_r+0x46>
 800538a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800538e:	059a      	lsls	r2, r3, #22
 8005390:	d4ee      	bmi.n	8005370 <__smakebuf_r+0x18>
 8005392:	f023 0303 	bic.w	r3, r3, #3
 8005396:	f043 0302 	orr.w	r3, r3, #2
 800539a:	81a3      	strh	r3, [r4, #12]
 800539c:	e7e2      	b.n	8005364 <__smakebuf_r+0xc>
 800539e:	89a3      	ldrh	r3, [r4, #12]
 80053a0:	6020      	str	r0, [r4, #0]
 80053a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	9b01      	ldr	r3, [sp, #4]
 80053aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80053ae:	b15b      	cbz	r3, 80053c8 <__smakebuf_r+0x70>
 80053b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053b4:	4630      	mov	r0, r6
 80053b6:	f000 f837 	bl	8005428 <_isatty_r>
 80053ba:	b128      	cbz	r0, 80053c8 <__smakebuf_r+0x70>
 80053bc:	89a3      	ldrh	r3, [r4, #12]
 80053be:	f023 0303 	bic.w	r3, r3, #3
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	81a3      	strh	r3, [r4, #12]
 80053c8:	89a3      	ldrh	r3, [r4, #12]
 80053ca:	431d      	orrs	r5, r3
 80053cc:	81a5      	strh	r5, [r4, #12]
 80053ce:	e7cf      	b.n	8005370 <__smakebuf_r+0x18>

080053d0 <memmove>:
 80053d0:	4288      	cmp	r0, r1
 80053d2:	b510      	push	{r4, lr}
 80053d4:	eb01 0402 	add.w	r4, r1, r2
 80053d8:	d902      	bls.n	80053e0 <memmove+0x10>
 80053da:	4284      	cmp	r4, r0
 80053dc:	4623      	mov	r3, r4
 80053de:	d807      	bhi.n	80053f0 <memmove+0x20>
 80053e0:	1e43      	subs	r3, r0, #1
 80053e2:	42a1      	cmp	r1, r4
 80053e4:	d008      	beq.n	80053f8 <memmove+0x28>
 80053e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053ee:	e7f8      	b.n	80053e2 <memmove+0x12>
 80053f0:	4402      	add	r2, r0
 80053f2:	4601      	mov	r1, r0
 80053f4:	428a      	cmp	r2, r1
 80053f6:	d100      	bne.n	80053fa <memmove+0x2a>
 80053f8:	bd10      	pop	{r4, pc}
 80053fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005402:	e7f7      	b.n	80053f4 <memmove+0x24>

08005404 <_fstat_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4d07      	ldr	r5, [pc, #28]	@ (8005424 <_fstat_r+0x20>)
 8005408:	2300      	movs	r3, #0
 800540a:	4604      	mov	r4, r0
 800540c:	4608      	mov	r0, r1
 800540e:	4611      	mov	r1, r2
 8005410:	602b      	str	r3, [r5, #0]
 8005412:	f7fe fd0b 	bl	8003e2c <_fstat>
 8005416:	1c43      	adds	r3, r0, #1
 8005418:	d102      	bne.n	8005420 <_fstat_r+0x1c>
 800541a:	682b      	ldr	r3, [r5, #0]
 800541c:	b103      	cbz	r3, 8005420 <_fstat_r+0x1c>
 800541e:	6023      	str	r3, [r4, #0]
 8005420:	bd38      	pop	{r3, r4, r5, pc}
 8005422:	bf00      	nop
 8005424:	20000520 	.word	0x20000520

08005428 <_isatty_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	4d06      	ldr	r5, [pc, #24]	@ (8005444 <_isatty_r+0x1c>)
 800542c:	2300      	movs	r3, #0
 800542e:	4604      	mov	r4, r0
 8005430:	4608      	mov	r0, r1
 8005432:	602b      	str	r3, [r5, #0]
 8005434:	f7fe fd0a 	bl	8003e4c <_isatty>
 8005438:	1c43      	adds	r3, r0, #1
 800543a:	d102      	bne.n	8005442 <_isatty_r+0x1a>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	b103      	cbz	r3, 8005442 <_isatty_r+0x1a>
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	bd38      	pop	{r3, r4, r5, pc}
 8005444:	20000520 	.word	0x20000520

08005448 <memcpy>:
 8005448:	440a      	add	r2, r1
 800544a:	4291      	cmp	r1, r2
 800544c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005450:	d100      	bne.n	8005454 <memcpy+0xc>
 8005452:	4770      	bx	lr
 8005454:	b510      	push	{r4, lr}
 8005456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800545a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800545e:	4291      	cmp	r1, r2
 8005460:	d1f9      	bne.n	8005456 <memcpy+0xe>
 8005462:	bd10      	pop	{r4, pc}

08005464 <_realloc_r>:
 8005464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005468:	4680      	mov	r8, r0
 800546a:	4615      	mov	r5, r2
 800546c:	460c      	mov	r4, r1
 800546e:	b921      	cbnz	r1, 800547a <_realloc_r+0x16>
 8005470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005474:	4611      	mov	r1, r2
 8005476:	f7ff b83d 	b.w	80044f4 <_malloc_r>
 800547a:	b92a      	cbnz	r2, 8005488 <_realloc_r+0x24>
 800547c:	f7ff fb6a 	bl	8004b54 <_free_r>
 8005480:	2400      	movs	r4, #0
 8005482:	4620      	mov	r0, r4
 8005484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005488:	f000 f81a 	bl	80054c0 <_malloc_usable_size_r>
 800548c:	4285      	cmp	r5, r0
 800548e:	4606      	mov	r6, r0
 8005490:	d802      	bhi.n	8005498 <_realloc_r+0x34>
 8005492:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005496:	d8f4      	bhi.n	8005482 <_realloc_r+0x1e>
 8005498:	4629      	mov	r1, r5
 800549a:	4640      	mov	r0, r8
 800549c:	f7ff f82a 	bl	80044f4 <_malloc_r>
 80054a0:	4607      	mov	r7, r0
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d0ec      	beq.n	8005480 <_realloc_r+0x1c>
 80054a6:	42b5      	cmp	r5, r6
 80054a8:	462a      	mov	r2, r5
 80054aa:	4621      	mov	r1, r4
 80054ac:	bf28      	it	cs
 80054ae:	4632      	movcs	r2, r6
 80054b0:	f7ff ffca 	bl	8005448 <memcpy>
 80054b4:	4621      	mov	r1, r4
 80054b6:	4640      	mov	r0, r8
 80054b8:	f7ff fb4c 	bl	8004b54 <_free_r>
 80054bc:	463c      	mov	r4, r7
 80054be:	e7e0      	b.n	8005482 <_realloc_r+0x1e>

080054c0 <_malloc_usable_size_r>:
 80054c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054c4:	1f18      	subs	r0, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	bfbc      	itt	lt
 80054ca:	580b      	ldrlt	r3, [r1, r0]
 80054cc:	18c0      	addlt	r0, r0, r3
 80054ce:	4770      	bx	lr

080054d0 <sqrt>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	ed2d 8b02 	vpush	{d8}
 80054d6:	ec55 4b10 	vmov	r4, r5, d0
 80054da:	f000 fa6d 	bl	80059b8 <__ieee754_sqrt>
 80054de:	4622      	mov	r2, r4
 80054e0:	462b      	mov	r3, r5
 80054e2:	4620      	mov	r0, r4
 80054e4:	4629      	mov	r1, r5
 80054e6:	eeb0 8a40 	vmov.f32	s16, s0
 80054ea:	eef0 8a60 	vmov.f32	s17, s1
 80054ee:	f7fb fb1d 	bl	8000b2c <__aeabi_dcmpun>
 80054f2:	b990      	cbnz	r0, 800551a <sqrt+0x4a>
 80054f4:	2200      	movs	r2, #0
 80054f6:	2300      	movs	r3, #0
 80054f8:	4620      	mov	r0, r4
 80054fa:	4629      	mov	r1, r5
 80054fc:	f7fb faee 	bl	8000adc <__aeabi_dcmplt>
 8005500:	b158      	cbz	r0, 800551a <sqrt+0x4a>
 8005502:	f7ff faf9 	bl	8004af8 <__errno>
 8005506:	2321      	movs	r3, #33	@ 0x21
 8005508:	6003      	str	r3, [r0, #0]
 800550a:	2200      	movs	r2, #0
 800550c:	2300      	movs	r3, #0
 800550e:	4610      	mov	r0, r2
 8005510:	4619      	mov	r1, r3
 8005512:	f7fb f99b 	bl	800084c <__aeabi_ddiv>
 8005516:	ec41 0b18 	vmov	d8, r0, r1
 800551a:	eeb0 0a48 	vmov.f32	s0, s16
 800551e:	eef0 0a68 	vmov.f32	s1, s17
 8005522:	ecbd 8b02 	vpop	{d8}
 8005526:	bd38      	pop	{r3, r4, r5, pc}

08005528 <atan>:
 8005528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800552c:	ec55 4b10 	vmov	r4, r5, d0
 8005530:	4bbf      	ldr	r3, [pc, #764]	@ (8005830 <atan+0x308>)
 8005532:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8005536:	429e      	cmp	r6, r3
 8005538:	46ab      	mov	fp, r5
 800553a:	d918      	bls.n	800556e <atan+0x46>
 800553c:	4bbd      	ldr	r3, [pc, #756]	@ (8005834 <atan+0x30c>)
 800553e:	429e      	cmp	r6, r3
 8005540:	d801      	bhi.n	8005546 <atan+0x1e>
 8005542:	d109      	bne.n	8005558 <atan+0x30>
 8005544:	b144      	cbz	r4, 8005558 <atan+0x30>
 8005546:	4622      	mov	r2, r4
 8005548:	462b      	mov	r3, r5
 800554a:	4620      	mov	r0, r4
 800554c:	4629      	mov	r1, r5
 800554e:	f7fa fe9d 	bl	800028c <__adddf3>
 8005552:	4604      	mov	r4, r0
 8005554:	460d      	mov	r5, r1
 8005556:	e006      	b.n	8005566 <atan+0x3e>
 8005558:	f1bb 0f00 	cmp.w	fp, #0
 800555c:	f340 812b 	ble.w	80057b6 <atan+0x28e>
 8005560:	a597      	add	r5, pc, #604	@ (adr r5, 80057c0 <atan+0x298>)
 8005562:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005566:	ec45 4b10 	vmov	d0, r4, r5
 800556a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800556e:	4bb2      	ldr	r3, [pc, #712]	@ (8005838 <atan+0x310>)
 8005570:	429e      	cmp	r6, r3
 8005572:	d813      	bhi.n	800559c <atan+0x74>
 8005574:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8005578:	429e      	cmp	r6, r3
 800557a:	d80c      	bhi.n	8005596 <atan+0x6e>
 800557c:	a392      	add	r3, pc, #584	@ (adr r3, 80057c8 <atan+0x2a0>)
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	4620      	mov	r0, r4
 8005584:	4629      	mov	r1, r5
 8005586:	f7fa fe81 	bl	800028c <__adddf3>
 800558a:	4bac      	ldr	r3, [pc, #688]	@ (800583c <atan+0x314>)
 800558c:	2200      	movs	r2, #0
 800558e:	f7fb fac3 	bl	8000b18 <__aeabi_dcmpgt>
 8005592:	2800      	cmp	r0, #0
 8005594:	d1e7      	bne.n	8005566 <atan+0x3e>
 8005596:	f04f 3aff 	mov.w	sl, #4294967295
 800559a:	e029      	b.n	80055f0 <atan+0xc8>
 800559c:	f000 f9b0 	bl	8005900 <fabs>
 80055a0:	4ba7      	ldr	r3, [pc, #668]	@ (8005840 <atan+0x318>)
 80055a2:	429e      	cmp	r6, r3
 80055a4:	ec55 4b10 	vmov	r4, r5, d0
 80055a8:	f200 80bc 	bhi.w	8005724 <atan+0x1fc>
 80055ac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80055b0:	429e      	cmp	r6, r3
 80055b2:	f200 809e 	bhi.w	80056f2 <atan+0x1ca>
 80055b6:	4622      	mov	r2, r4
 80055b8:	462b      	mov	r3, r5
 80055ba:	4620      	mov	r0, r4
 80055bc:	4629      	mov	r1, r5
 80055be:	f7fa fe65 	bl	800028c <__adddf3>
 80055c2:	4b9e      	ldr	r3, [pc, #632]	@ (800583c <atan+0x314>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	f7fa fe5f 	bl	8000288 <__aeabi_dsub>
 80055ca:	2200      	movs	r2, #0
 80055cc:	4606      	mov	r6, r0
 80055ce:	460f      	mov	r7, r1
 80055d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80055d4:	4620      	mov	r0, r4
 80055d6:	4629      	mov	r1, r5
 80055d8:	f7fa fe58 	bl	800028c <__adddf3>
 80055dc:	4602      	mov	r2, r0
 80055de:	460b      	mov	r3, r1
 80055e0:	4630      	mov	r0, r6
 80055e2:	4639      	mov	r1, r7
 80055e4:	f7fb f932 	bl	800084c <__aeabi_ddiv>
 80055e8:	f04f 0a00 	mov.w	sl, #0
 80055ec:	4604      	mov	r4, r0
 80055ee:	460d      	mov	r5, r1
 80055f0:	4622      	mov	r2, r4
 80055f2:	462b      	mov	r3, r5
 80055f4:	4620      	mov	r0, r4
 80055f6:	4629      	mov	r1, r5
 80055f8:	f7fa fffe 	bl	80005f8 <__aeabi_dmul>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4680      	mov	r8, r0
 8005602:	4689      	mov	r9, r1
 8005604:	f7fa fff8 	bl	80005f8 <__aeabi_dmul>
 8005608:	a371      	add	r3, pc, #452	@ (adr r3, 80057d0 <atan+0x2a8>)
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	4606      	mov	r6, r0
 8005610:	460f      	mov	r7, r1
 8005612:	f7fa fff1 	bl	80005f8 <__aeabi_dmul>
 8005616:	a370      	add	r3, pc, #448	@ (adr r3, 80057d8 <atan+0x2b0>)
 8005618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561c:	f7fa fe36 	bl	800028c <__adddf3>
 8005620:	4632      	mov	r2, r6
 8005622:	463b      	mov	r3, r7
 8005624:	f7fa ffe8 	bl	80005f8 <__aeabi_dmul>
 8005628:	a36d      	add	r3, pc, #436	@ (adr r3, 80057e0 <atan+0x2b8>)
 800562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562e:	f7fa fe2d 	bl	800028c <__adddf3>
 8005632:	4632      	mov	r2, r6
 8005634:	463b      	mov	r3, r7
 8005636:	f7fa ffdf 	bl	80005f8 <__aeabi_dmul>
 800563a:	a36b      	add	r3, pc, #428	@ (adr r3, 80057e8 <atan+0x2c0>)
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f7fa fe24 	bl	800028c <__adddf3>
 8005644:	4632      	mov	r2, r6
 8005646:	463b      	mov	r3, r7
 8005648:	f7fa ffd6 	bl	80005f8 <__aeabi_dmul>
 800564c:	a368      	add	r3, pc, #416	@ (adr r3, 80057f0 <atan+0x2c8>)
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	f7fa fe1b 	bl	800028c <__adddf3>
 8005656:	4632      	mov	r2, r6
 8005658:	463b      	mov	r3, r7
 800565a:	f7fa ffcd 	bl	80005f8 <__aeabi_dmul>
 800565e:	a366      	add	r3, pc, #408	@ (adr r3, 80057f8 <atan+0x2d0>)
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	f7fa fe12 	bl	800028c <__adddf3>
 8005668:	4642      	mov	r2, r8
 800566a:	464b      	mov	r3, r9
 800566c:	f7fa ffc4 	bl	80005f8 <__aeabi_dmul>
 8005670:	a363      	add	r3, pc, #396	@ (adr r3, 8005800 <atan+0x2d8>)
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	4680      	mov	r8, r0
 8005678:	4689      	mov	r9, r1
 800567a:	4630      	mov	r0, r6
 800567c:	4639      	mov	r1, r7
 800567e:	f7fa ffbb 	bl	80005f8 <__aeabi_dmul>
 8005682:	a361      	add	r3, pc, #388	@ (adr r3, 8005808 <atan+0x2e0>)
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	f7fa fdfe 	bl	8000288 <__aeabi_dsub>
 800568c:	4632      	mov	r2, r6
 800568e:	463b      	mov	r3, r7
 8005690:	f7fa ffb2 	bl	80005f8 <__aeabi_dmul>
 8005694:	a35e      	add	r3, pc, #376	@ (adr r3, 8005810 <atan+0x2e8>)
 8005696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569a:	f7fa fdf5 	bl	8000288 <__aeabi_dsub>
 800569e:	4632      	mov	r2, r6
 80056a0:	463b      	mov	r3, r7
 80056a2:	f7fa ffa9 	bl	80005f8 <__aeabi_dmul>
 80056a6:	a35c      	add	r3, pc, #368	@ (adr r3, 8005818 <atan+0x2f0>)
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	f7fa fdec 	bl	8000288 <__aeabi_dsub>
 80056b0:	4632      	mov	r2, r6
 80056b2:	463b      	mov	r3, r7
 80056b4:	f7fa ffa0 	bl	80005f8 <__aeabi_dmul>
 80056b8:	a359      	add	r3, pc, #356	@ (adr r3, 8005820 <atan+0x2f8>)
 80056ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056be:	f7fa fde3 	bl	8000288 <__aeabi_dsub>
 80056c2:	4632      	mov	r2, r6
 80056c4:	463b      	mov	r3, r7
 80056c6:	f7fa ff97 	bl	80005f8 <__aeabi_dmul>
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	4640      	mov	r0, r8
 80056d0:	4649      	mov	r1, r9
 80056d2:	f7fa fddb 	bl	800028c <__adddf3>
 80056d6:	4622      	mov	r2, r4
 80056d8:	462b      	mov	r3, r5
 80056da:	f7fa ff8d 	bl	80005f8 <__aeabi_dmul>
 80056de:	f1ba 3fff 	cmp.w	sl, #4294967295
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	d148      	bne.n	800577a <atan+0x252>
 80056e8:	4620      	mov	r0, r4
 80056ea:	4629      	mov	r1, r5
 80056ec:	f7fa fdcc 	bl	8000288 <__aeabi_dsub>
 80056f0:	e72f      	b.n	8005552 <atan+0x2a>
 80056f2:	4b52      	ldr	r3, [pc, #328]	@ (800583c <atan+0x314>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	4620      	mov	r0, r4
 80056f8:	4629      	mov	r1, r5
 80056fa:	f7fa fdc5 	bl	8000288 <__aeabi_dsub>
 80056fe:	4b4f      	ldr	r3, [pc, #316]	@ (800583c <atan+0x314>)
 8005700:	4606      	mov	r6, r0
 8005702:	460f      	mov	r7, r1
 8005704:	2200      	movs	r2, #0
 8005706:	4620      	mov	r0, r4
 8005708:	4629      	mov	r1, r5
 800570a:	f7fa fdbf 	bl	800028c <__adddf3>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	4630      	mov	r0, r6
 8005714:	4639      	mov	r1, r7
 8005716:	f7fb f899 	bl	800084c <__aeabi_ddiv>
 800571a:	f04f 0a01 	mov.w	sl, #1
 800571e:	4604      	mov	r4, r0
 8005720:	460d      	mov	r5, r1
 8005722:	e765      	b.n	80055f0 <atan+0xc8>
 8005724:	4b47      	ldr	r3, [pc, #284]	@ (8005844 <atan+0x31c>)
 8005726:	429e      	cmp	r6, r3
 8005728:	d21c      	bcs.n	8005764 <atan+0x23c>
 800572a:	4b47      	ldr	r3, [pc, #284]	@ (8005848 <atan+0x320>)
 800572c:	2200      	movs	r2, #0
 800572e:	4620      	mov	r0, r4
 8005730:	4629      	mov	r1, r5
 8005732:	f7fa fda9 	bl	8000288 <__aeabi_dsub>
 8005736:	4b44      	ldr	r3, [pc, #272]	@ (8005848 <atan+0x320>)
 8005738:	4606      	mov	r6, r0
 800573a:	460f      	mov	r7, r1
 800573c:	2200      	movs	r2, #0
 800573e:	4620      	mov	r0, r4
 8005740:	4629      	mov	r1, r5
 8005742:	f7fa ff59 	bl	80005f8 <__aeabi_dmul>
 8005746:	4b3d      	ldr	r3, [pc, #244]	@ (800583c <atan+0x314>)
 8005748:	2200      	movs	r2, #0
 800574a:	f7fa fd9f 	bl	800028c <__adddf3>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4630      	mov	r0, r6
 8005754:	4639      	mov	r1, r7
 8005756:	f7fb f879 	bl	800084c <__aeabi_ddiv>
 800575a:	f04f 0a02 	mov.w	sl, #2
 800575e:	4604      	mov	r4, r0
 8005760:	460d      	mov	r5, r1
 8005762:	e745      	b.n	80055f0 <atan+0xc8>
 8005764:	4622      	mov	r2, r4
 8005766:	462b      	mov	r3, r5
 8005768:	4938      	ldr	r1, [pc, #224]	@ (800584c <atan+0x324>)
 800576a:	2000      	movs	r0, #0
 800576c:	f7fb f86e 	bl	800084c <__aeabi_ddiv>
 8005770:	f04f 0a03 	mov.w	sl, #3
 8005774:	4604      	mov	r4, r0
 8005776:	460d      	mov	r5, r1
 8005778:	e73a      	b.n	80055f0 <atan+0xc8>
 800577a:	4b35      	ldr	r3, [pc, #212]	@ (8005850 <atan+0x328>)
 800577c:	4e35      	ldr	r6, [pc, #212]	@ (8005854 <atan+0x32c>)
 800577e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	f7fa fd7f 	bl	8000288 <__aeabi_dsub>
 800578a:	4622      	mov	r2, r4
 800578c:	462b      	mov	r3, r5
 800578e:	f7fa fd7b 	bl	8000288 <__aeabi_dsub>
 8005792:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800579e:	f7fa fd73 	bl	8000288 <__aeabi_dsub>
 80057a2:	f1bb 0f00 	cmp.w	fp, #0
 80057a6:	4604      	mov	r4, r0
 80057a8:	460d      	mov	r5, r1
 80057aa:	f6bf aedc 	bge.w	8005566 <atan+0x3e>
 80057ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80057b2:	461d      	mov	r5, r3
 80057b4:	e6d7      	b.n	8005566 <atan+0x3e>
 80057b6:	a51c      	add	r5, pc, #112	@ (adr r5, 8005828 <atan+0x300>)
 80057b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80057bc:	e6d3      	b.n	8005566 <atan+0x3e>
 80057be:	bf00      	nop
 80057c0:	54442d18 	.word	0x54442d18
 80057c4:	3ff921fb 	.word	0x3ff921fb
 80057c8:	8800759c 	.word	0x8800759c
 80057cc:	7e37e43c 	.word	0x7e37e43c
 80057d0:	e322da11 	.word	0xe322da11
 80057d4:	3f90ad3a 	.word	0x3f90ad3a
 80057d8:	24760deb 	.word	0x24760deb
 80057dc:	3fa97b4b 	.word	0x3fa97b4b
 80057e0:	a0d03d51 	.word	0xa0d03d51
 80057e4:	3fb10d66 	.word	0x3fb10d66
 80057e8:	c54c206e 	.word	0xc54c206e
 80057ec:	3fb745cd 	.word	0x3fb745cd
 80057f0:	920083ff 	.word	0x920083ff
 80057f4:	3fc24924 	.word	0x3fc24924
 80057f8:	5555550d 	.word	0x5555550d
 80057fc:	3fd55555 	.word	0x3fd55555
 8005800:	2c6a6c2f 	.word	0x2c6a6c2f
 8005804:	bfa2b444 	.word	0xbfa2b444
 8005808:	52defd9a 	.word	0x52defd9a
 800580c:	3fadde2d 	.word	0x3fadde2d
 8005810:	af749a6d 	.word	0xaf749a6d
 8005814:	3fb3b0f2 	.word	0x3fb3b0f2
 8005818:	fe231671 	.word	0xfe231671
 800581c:	3fbc71c6 	.word	0x3fbc71c6
 8005820:	9998ebc4 	.word	0x9998ebc4
 8005824:	3fc99999 	.word	0x3fc99999
 8005828:	54442d18 	.word	0x54442d18
 800582c:	bff921fb 	.word	0xbff921fb
 8005830:	440fffff 	.word	0x440fffff
 8005834:	7ff00000 	.word	0x7ff00000
 8005838:	3fdbffff 	.word	0x3fdbffff
 800583c:	3ff00000 	.word	0x3ff00000
 8005840:	3ff2ffff 	.word	0x3ff2ffff
 8005844:	40038000 	.word	0x40038000
 8005848:	3ff80000 	.word	0x3ff80000
 800584c:	bff00000 	.word	0xbff00000
 8005850:	08006f68 	.word	0x08006f68
 8005854:	08006f88 	.word	0x08006f88

08005858 <cos>:
 8005858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800585a:	ec53 2b10 	vmov	r2, r3, d0
 800585e:	4826      	ldr	r0, [pc, #152]	@ (80058f8 <cos+0xa0>)
 8005860:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005864:	4281      	cmp	r1, r0
 8005866:	d806      	bhi.n	8005876 <cos+0x1e>
 8005868:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80058f0 <cos+0x98>
 800586c:	b005      	add	sp, #20
 800586e:	f85d eb04 	ldr.w	lr, [sp], #4
 8005872:	f000 b97d 	b.w	8005b70 <__kernel_cos>
 8005876:	4821      	ldr	r0, [pc, #132]	@ (80058fc <cos+0xa4>)
 8005878:	4281      	cmp	r1, r0
 800587a:	d908      	bls.n	800588e <cos+0x36>
 800587c:	4610      	mov	r0, r2
 800587e:	4619      	mov	r1, r3
 8005880:	f7fa fd02 	bl	8000288 <__aeabi_dsub>
 8005884:	ec41 0b10 	vmov	d0, r0, r1
 8005888:	b005      	add	sp, #20
 800588a:	f85d fb04 	ldr.w	pc, [sp], #4
 800588e:	4668      	mov	r0, sp
 8005890:	f000 faf2 	bl	8005e78 <__ieee754_rem_pio2>
 8005894:	f000 0003 	and.w	r0, r0, #3
 8005898:	2801      	cmp	r0, #1
 800589a:	d00b      	beq.n	80058b4 <cos+0x5c>
 800589c:	2802      	cmp	r0, #2
 800589e:	d015      	beq.n	80058cc <cos+0x74>
 80058a0:	b9d8      	cbnz	r0, 80058da <cos+0x82>
 80058a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80058a6:	ed9d 0b00 	vldr	d0, [sp]
 80058aa:	f000 f961 	bl	8005b70 <__kernel_cos>
 80058ae:	ec51 0b10 	vmov	r0, r1, d0
 80058b2:	e7e7      	b.n	8005884 <cos+0x2c>
 80058b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80058b8:	ed9d 0b00 	vldr	d0, [sp]
 80058bc:	f000 fa20 	bl	8005d00 <__kernel_sin>
 80058c0:	ec53 2b10 	vmov	r2, r3, d0
 80058c4:	4610      	mov	r0, r2
 80058c6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80058ca:	e7db      	b.n	8005884 <cos+0x2c>
 80058cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80058d0:	ed9d 0b00 	vldr	d0, [sp]
 80058d4:	f000 f94c 	bl	8005b70 <__kernel_cos>
 80058d8:	e7f2      	b.n	80058c0 <cos+0x68>
 80058da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80058de:	ed9d 0b00 	vldr	d0, [sp]
 80058e2:	2001      	movs	r0, #1
 80058e4:	f000 fa0c 	bl	8005d00 <__kernel_sin>
 80058e8:	e7e1      	b.n	80058ae <cos+0x56>
 80058ea:	bf00      	nop
 80058ec:	f3af 8000 	nop.w
	...
 80058f8:	3fe921fb 	.word	0x3fe921fb
 80058fc:	7fefffff 	.word	0x7fefffff

08005900 <fabs>:
 8005900:	ec51 0b10 	vmov	r0, r1, d0
 8005904:	4602      	mov	r2, r0
 8005906:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800590a:	ec43 2b10 	vmov	d0, r2, r3
 800590e:	4770      	bx	lr

08005910 <sin>:
 8005910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005912:	ec53 2b10 	vmov	r2, r3, d0
 8005916:	4826      	ldr	r0, [pc, #152]	@ (80059b0 <sin+0xa0>)
 8005918:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800591c:	4281      	cmp	r1, r0
 800591e:	d807      	bhi.n	8005930 <sin+0x20>
 8005920:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80059a8 <sin+0x98>
 8005924:	2000      	movs	r0, #0
 8005926:	b005      	add	sp, #20
 8005928:	f85d eb04 	ldr.w	lr, [sp], #4
 800592c:	f000 b9e8 	b.w	8005d00 <__kernel_sin>
 8005930:	4820      	ldr	r0, [pc, #128]	@ (80059b4 <sin+0xa4>)
 8005932:	4281      	cmp	r1, r0
 8005934:	d908      	bls.n	8005948 <sin+0x38>
 8005936:	4610      	mov	r0, r2
 8005938:	4619      	mov	r1, r3
 800593a:	f7fa fca5 	bl	8000288 <__aeabi_dsub>
 800593e:	ec41 0b10 	vmov	d0, r0, r1
 8005942:	b005      	add	sp, #20
 8005944:	f85d fb04 	ldr.w	pc, [sp], #4
 8005948:	4668      	mov	r0, sp
 800594a:	f000 fa95 	bl	8005e78 <__ieee754_rem_pio2>
 800594e:	f000 0003 	and.w	r0, r0, #3
 8005952:	2801      	cmp	r0, #1
 8005954:	d00c      	beq.n	8005970 <sin+0x60>
 8005956:	2802      	cmp	r0, #2
 8005958:	d011      	beq.n	800597e <sin+0x6e>
 800595a:	b9e8      	cbnz	r0, 8005998 <sin+0x88>
 800595c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005960:	ed9d 0b00 	vldr	d0, [sp]
 8005964:	2001      	movs	r0, #1
 8005966:	f000 f9cb 	bl	8005d00 <__kernel_sin>
 800596a:	ec51 0b10 	vmov	r0, r1, d0
 800596e:	e7e6      	b.n	800593e <sin+0x2e>
 8005970:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005974:	ed9d 0b00 	vldr	d0, [sp]
 8005978:	f000 f8fa 	bl	8005b70 <__kernel_cos>
 800597c:	e7f5      	b.n	800596a <sin+0x5a>
 800597e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005982:	ed9d 0b00 	vldr	d0, [sp]
 8005986:	2001      	movs	r0, #1
 8005988:	f000 f9ba 	bl	8005d00 <__kernel_sin>
 800598c:	ec53 2b10 	vmov	r2, r3, d0
 8005990:	4610      	mov	r0, r2
 8005992:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005996:	e7d2      	b.n	800593e <sin+0x2e>
 8005998:	ed9d 1b02 	vldr	d1, [sp, #8]
 800599c:	ed9d 0b00 	vldr	d0, [sp]
 80059a0:	f000 f8e6 	bl	8005b70 <__kernel_cos>
 80059a4:	e7f2      	b.n	800598c <sin+0x7c>
 80059a6:	bf00      	nop
	...
 80059b0:	3fe921fb 	.word	0x3fe921fb
 80059b4:	7fefffff 	.word	0x7fefffff

080059b8 <__ieee754_sqrt>:
 80059b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	4a68      	ldr	r2, [pc, #416]	@ (8005b60 <__ieee754_sqrt+0x1a8>)
 80059be:	ec55 4b10 	vmov	r4, r5, d0
 80059c2:	43aa      	bics	r2, r5
 80059c4:	462b      	mov	r3, r5
 80059c6:	4621      	mov	r1, r4
 80059c8:	d110      	bne.n	80059ec <__ieee754_sqrt+0x34>
 80059ca:	4622      	mov	r2, r4
 80059cc:	4620      	mov	r0, r4
 80059ce:	4629      	mov	r1, r5
 80059d0:	f7fa fe12 	bl	80005f8 <__aeabi_dmul>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4620      	mov	r0, r4
 80059da:	4629      	mov	r1, r5
 80059dc:	f7fa fc56 	bl	800028c <__adddf3>
 80059e0:	4604      	mov	r4, r0
 80059e2:	460d      	mov	r5, r1
 80059e4:	ec45 4b10 	vmov	d0, r4, r5
 80059e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ec:	2d00      	cmp	r5, #0
 80059ee:	dc0e      	bgt.n	8005a0e <__ieee754_sqrt+0x56>
 80059f0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80059f4:	4322      	orrs	r2, r4
 80059f6:	d0f5      	beq.n	80059e4 <__ieee754_sqrt+0x2c>
 80059f8:	b19d      	cbz	r5, 8005a22 <__ieee754_sqrt+0x6a>
 80059fa:	4622      	mov	r2, r4
 80059fc:	4620      	mov	r0, r4
 80059fe:	4629      	mov	r1, r5
 8005a00:	f7fa fc42 	bl	8000288 <__aeabi_dsub>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	f7fa ff20 	bl	800084c <__aeabi_ddiv>
 8005a0c:	e7e8      	b.n	80059e0 <__ieee754_sqrt+0x28>
 8005a0e:	152a      	asrs	r2, r5, #20
 8005a10:	d115      	bne.n	8005a3e <__ieee754_sqrt+0x86>
 8005a12:	2000      	movs	r0, #0
 8005a14:	e009      	b.n	8005a2a <__ieee754_sqrt+0x72>
 8005a16:	0acb      	lsrs	r3, r1, #11
 8005a18:	3a15      	subs	r2, #21
 8005a1a:	0549      	lsls	r1, r1, #21
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0fa      	beq.n	8005a16 <__ieee754_sqrt+0x5e>
 8005a20:	e7f7      	b.n	8005a12 <__ieee754_sqrt+0x5a>
 8005a22:	462a      	mov	r2, r5
 8005a24:	e7fa      	b.n	8005a1c <__ieee754_sqrt+0x64>
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	3001      	adds	r0, #1
 8005a2a:	02dc      	lsls	r4, r3, #11
 8005a2c:	d5fb      	bpl.n	8005a26 <__ieee754_sqrt+0x6e>
 8005a2e:	1e44      	subs	r4, r0, #1
 8005a30:	1b12      	subs	r2, r2, r4
 8005a32:	f1c0 0420 	rsb	r4, r0, #32
 8005a36:	fa21 f404 	lsr.w	r4, r1, r4
 8005a3a:	4323      	orrs	r3, r4
 8005a3c:	4081      	lsls	r1, r0
 8005a3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a42:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8005a46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a4a:	07d2      	lsls	r2, r2, #31
 8005a4c:	bf5c      	itt	pl
 8005a4e:	005b      	lslpl	r3, r3, #1
 8005a50:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8005a54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a58:	bf58      	it	pl
 8005a5a:	0049      	lslpl	r1, r1, #1
 8005a5c:	2600      	movs	r6, #0
 8005a5e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8005a62:	106d      	asrs	r5, r5, #1
 8005a64:	0049      	lsls	r1, r1, #1
 8005a66:	2016      	movs	r0, #22
 8005a68:	4632      	mov	r2, r6
 8005a6a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005a6e:	1917      	adds	r7, r2, r4
 8005a70:	429f      	cmp	r7, r3
 8005a72:	bfde      	ittt	le
 8005a74:	193a      	addle	r2, r7, r4
 8005a76:	1bdb      	suble	r3, r3, r7
 8005a78:	1936      	addle	r6, r6, r4
 8005a7a:	0fcf      	lsrs	r7, r1, #31
 8005a7c:	3801      	subs	r0, #1
 8005a7e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8005a82:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005a86:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005a8a:	d1f0      	bne.n	8005a6e <__ieee754_sqrt+0xb6>
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	2720      	movs	r7, #32
 8005a90:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005a94:	429a      	cmp	r2, r3
 8005a96:	eb00 0e0c 	add.w	lr, r0, ip
 8005a9a:	db02      	blt.n	8005aa2 <__ieee754_sqrt+0xea>
 8005a9c:	d113      	bne.n	8005ac6 <__ieee754_sqrt+0x10e>
 8005a9e:	458e      	cmp	lr, r1
 8005aa0:	d811      	bhi.n	8005ac6 <__ieee754_sqrt+0x10e>
 8005aa2:	f1be 0f00 	cmp.w	lr, #0
 8005aa6:	eb0e 000c 	add.w	r0, lr, ip
 8005aaa:	da42      	bge.n	8005b32 <__ieee754_sqrt+0x17a>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	db40      	blt.n	8005b32 <__ieee754_sqrt+0x17a>
 8005ab0:	f102 0801 	add.w	r8, r2, #1
 8005ab4:	1a9b      	subs	r3, r3, r2
 8005ab6:	458e      	cmp	lr, r1
 8005ab8:	bf88      	it	hi
 8005aba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005abe:	eba1 010e 	sub.w	r1, r1, lr
 8005ac2:	4464      	add	r4, ip
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005aca:	3f01      	subs	r7, #1
 8005acc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005ad0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005ad4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005ad8:	d1dc      	bne.n	8005a94 <__ieee754_sqrt+0xdc>
 8005ada:	4319      	orrs	r1, r3
 8005adc:	d01b      	beq.n	8005b16 <__ieee754_sqrt+0x15e>
 8005ade:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8005b64 <__ieee754_sqrt+0x1ac>
 8005ae2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8005b68 <__ieee754_sqrt+0x1b0>
 8005ae6:	e9da 0100 	ldrd	r0, r1, [sl]
 8005aea:	e9db 2300 	ldrd	r2, r3, [fp]
 8005aee:	f7fa fbcb 	bl	8000288 <__aeabi_dsub>
 8005af2:	e9da 8900 	ldrd	r8, r9, [sl]
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	4640      	mov	r0, r8
 8005afc:	4649      	mov	r1, r9
 8005afe:	f7fa fff7 	bl	8000af0 <__aeabi_dcmple>
 8005b02:	b140      	cbz	r0, 8005b16 <__ieee754_sqrt+0x15e>
 8005b04:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005b08:	e9da 0100 	ldrd	r0, r1, [sl]
 8005b0c:	e9db 2300 	ldrd	r2, r3, [fp]
 8005b10:	d111      	bne.n	8005b36 <__ieee754_sqrt+0x17e>
 8005b12:	3601      	adds	r6, #1
 8005b14:	463c      	mov	r4, r7
 8005b16:	1072      	asrs	r2, r6, #1
 8005b18:	0863      	lsrs	r3, r4, #1
 8005b1a:	07f1      	lsls	r1, r6, #31
 8005b1c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005b20:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005b24:	bf48      	it	mi
 8005b26:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005b2a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8005b2e:	4618      	mov	r0, r3
 8005b30:	e756      	b.n	80059e0 <__ieee754_sqrt+0x28>
 8005b32:	4690      	mov	r8, r2
 8005b34:	e7be      	b.n	8005ab4 <__ieee754_sqrt+0xfc>
 8005b36:	f7fa fba9 	bl	800028c <__adddf3>
 8005b3a:	e9da 8900 	ldrd	r8, r9, [sl]
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	4640      	mov	r0, r8
 8005b44:	4649      	mov	r1, r9
 8005b46:	f7fa ffc9 	bl	8000adc <__aeabi_dcmplt>
 8005b4a:	b120      	cbz	r0, 8005b56 <__ieee754_sqrt+0x19e>
 8005b4c:	1ca0      	adds	r0, r4, #2
 8005b4e:	bf08      	it	eq
 8005b50:	3601      	addeq	r6, #1
 8005b52:	3402      	adds	r4, #2
 8005b54:	e7df      	b.n	8005b16 <__ieee754_sqrt+0x15e>
 8005b56:	1c63      	adds	r3, r4, #1
 8005b58:	f023 0401 	bic.w	r4, r3, #1
 8005b5c:	e7db      	b.n	8005b16 <__ieee754_sqrt+0x15e>
 8005b5e:	bf00      	nop
 8005b60:	7ff00000 	.word	0x7ff00000
 8005b64:	20000078 	.word	0x20000078
 8005b68:	20000070 	.word	0x20000070
 8005b6c:	00000000 	.word	0x00000000

08005b70 <__kernel_cos>:
 8005b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b74:	ec57 6b10 	vmov	r6, r7, d0
 8005b78:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005b7c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8005b80:	ed8d 1b00 	vstr	d1, [sp]
 8005b84:	d206      	bcs.n	8005b94 <__kernel_cos+0x24>
 8005b86:	4630      	mov	r0, r6
 8005b88:	4639      	mov	r1, r7
 8005b8a:	f7fa ffe5 	bl	8000b58 <__aeabi_d2iz>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	f000 8088 	beq.w	8005ca4 <__kernel_cos+0x134>
 8005b94:	4632      	mov	r2, r6
 8005b96:	463b      	mov	r3, r7
 8005b98:	4630      	mov	r0, r6
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	f7fa fd2c 	bl	80005f8 <__aeabi_dmul>
 8005ba0:	4b51      	ldr	r3, [pc, #324]	@ (8005ce8 <__kernel_cos+0x178>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	460d      	mov	r5, r1
 8005ba8:	f7fa fd26 	bl	80005f8 <__aeabi_dmul>
 8005bac:	a340      	add	r3, pc, #256	@ (adr r3, 8005cb0 <__kernel_cos+0x140>)
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	4682      	mov	sl, r0
 8005bb4:	468b      	mov	fp, r1
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	4629      	mov	r1, r5
 8005bba:	f7fa fd1d 	bl	80005f8 <__aeabi_dmul>
 8005bbe:	a33e      	add	r3, pc, #248	@ (adr r3, 8005cb8 <__kernel_cos+0x148>)
 8005bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc4:	f7fa fb62 	bl	800028c <__adddf3>
 8005bc8:	4622      	mov	r2, r4
 8005bca:	462b      	mov	r3, r5
 8005bcc:	f7fa fd14 	bl	80005f8 <__aeabi_dmul>
 8005bd0:	a33b      	add	r3, pc, #236	@ (adr r3, 8005cc0 <__kernel_cos+0x150>)
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	f7fa fb57 	bl	8000288 <__aeabi_dsub>
 8005bda:	4622      	mov	r2, r4
 8005bdc:	462b      	mov	r3, r5
 8005bde:	f7fa fd0b 	bl	80005f8 <__aeabi_dmul>
 8005be2:	a339      	add	r3, pc, #228	@ (adr r3, 8005cc8 <__kernel_cos+0x158>)
 8005be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be8:	f7fa fb50 	bl	800028c <__adddf3>
 8005bec:	4622      	mov	r2, r4
 8005bee:	462b      	mov	r3, r5
 8005bf0:	f7fa fd02 	bl	80005f8 <__aeabi_dmul>
 8005bf4:	a336      	add	r3, pc, #216	@ (adr r3, 8005cd0 <__kernel_cos+0x160>)
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	f7fa fb45 	bl	8000288 <__aeabi_dsub>
 8005bfe:	4622      	mov	r2, r4
 8005c00:	462b      	mov	r3, r5
 8005c02:	f7fa fcf9 	bl	80005f8 <__aeabi_dmul>
 8005c06:	a334      	add	r3, pc, #208	@ (adr r3, 8005cd8 <__kernel_cos+0x168>)
 8005c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c0c:	f7fa fb3e 	bl	800028c <__adddf3>
 8005c10:	4622      	mov	r2, r4
 8005c12:	462b      	mov	r3, r5
 8005c14:	f7fa fcf0 	bl	80005f8 <__aeabi_dmul>
 8005c18:	4622      	mov	r2, r4
 8005c1a:	462b      	mov	r3, r5
 8005c1c:	f7fa fcec 	bl	80005f8 <__aeabi_dmul>
 8005c20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c24:	4604      	mov	r4, r0
 8005c26:	460d      	mov	r5, r1
 8005c28:	4630      	mov	r0, r6
 8005c2a:	4639      	mov	r1, r7
 8005c2c:	f7fa fce4 	bl	80005f8 <__aeabi_dmul>
 8005c30:	460b      	mov	r3, r1
 8005c32:	4602      	mov	r2, r0
 8005c34:	4629      	mov	r1, r5
 8005c36:	4620      	mov	r0, r4
 8005c38:	f7fa fb26 	bl	8000288 <__aeabi_dsub>
 8005c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8005cec <__kernel_cos+0x17c>)
 8005c3e:	4598      	cmp	r8, r3
 8005c40:	4606      	mov	r6, r0
 8005c42:	460f      	mov	r7, r1
 8005c44:	d810      	bhi.n	8005c68 <__kernel_cos+0xf8>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4650      	mov	r0, sl
 8005c4c:	4659      	mov	r1, fp
 8005c4e:	f7fa fb1b 	bl	8000288 <__aeabi_dsub>
 8005c52:	460b      	mov	r3, r1
 8005c54:	4926      	ldr	r1, [pc, #152]	@ (8005cf0 <__kernel_cos+0x180>)
 8005c56:	4602      	mov	r2, r0
 8005c58:	2000      	movs	r0, #0
 8005c5a:	f7fa fb15 	bl	8000288 <__aeabi_dsub>
 8005c5e:	ec41 0b10 	vmov	d0, r0, r1
 8005c62:	b003      	add	sp, #12
 8005c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c68:	4b22      	ldr	r3, [pc, #136]	@ (8005cf4 <__kernel_cos+0x184>)
 8005c6a:	4921      	ldr	r1, [pc, #132]	@ (8005cf0 <__kernel_cos+0x180>)
 8005c6c:	4598      	cmp	r8, r3
 8005c6e:	bf8c      	ite	hi
 8005c70:	4d21      	ldrhi	r5, [pc, #132]	@ (8005cf8 <__kernel_cos+0x188>)
 8005c72:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8005c76:	2400      	movs	r4, #0
 8005c78:	4622      	mov	r2, r4
 8005c7a:	462b      	mov	r3, r5
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	f7fa fb03 	bl	8000288 <__aeabi_dsub>
 8005c82:	4622      	mov	r2, r4
 8005c84:	4680      	mov	r8, r0
 8005c86:	4689      	mov	r9, r1
 8005c88:	462b      	mov	r3, r5
 8005c8a:	4650      	mov	r0, sl
 8005c8c:	4659      	mov	r1, fp
 8005c8e:	f7fa fafb 	bl	8000288 <__aeabi_dsub>
 8005c92:	4632      	mov	r2, r6
 8005c94:	463b      	mov	r3, r7
 8005c96:	f7fa faf7 	bl	8000288 <__aeabi_dsub>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	4649      	mov	r1, r9
 8005ca2:	e7da      	b.n	8005c5a <__kernel_cos+0xea>
 8005ca4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005ce0 <__kernel_cos+0x170>
 8005ca8:	e7db      	b.n	8005c62 <__kernel_cos+0xf2>
 8005caa:	bf00      	nop
 8005cac:	f3af 8000 	nop.w
 8005cb0:	be8838d4 	.word	0xbe8838d4
 8005cb4:	bda8fae9 	.word	0xbda8fae9
 8005cb8:	bdb4b1c4 	.word	0xbdb4b1c4
 8005cbc:	3e21ee9e 	.word	0x3e21ee9e
 8005cc0:	809c52ad 	.word	0x809c52ad
 8005cc4:	3e927e4f 	.word	0x3e927e4f
 8005cc8:	19cb1590 	.word	0x19cb1590
 8005ccc:	3efa01a0 	.word	0x3efa01a0
 8005cd0:	16c15177 	.word	0x16c15177
 8005cd4:	3f56c16c 	.word	0x3f56c16c
 8005cd8:	5555554c 	.word	0x5555554c
 8005cdc:	3fa55555 	.word	0x3fa55555
 8005ce0:	00000000 	.word	0x00000000
 8005ce4:	3ff00000 	.word	0x3ff00000
 8005ce8:	3fe00000 	.word	0x3fe00000
 8005cec:	3fd33332 	.word	0x3fd33332
 8005cf0:	3ff00000 	.word	0x3ff00000
 8005cf4:	3fe90000 	.word	0x3fe90000
 8005cf8:	3fd20000 	.word	0x3fd20000
 8005cfc:	00000000 	.word	0x00000000

08005d00 <__kernel_sin>:
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	ec55 4b10 	vmov	r4, r5, d0
 8005d08:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005d0c:	b085      	sub	sp, #20
 8005d0e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005d12:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005d16:	4680      	mov	r8, r0
 8005d18:	d205      	bcs.n	8005d26 <__kernel_sin+0x26>
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	4629      	mov	r1, r5
 8005d1e:	f7fa ff1b 	bl	8000b58 <__aeabi_d2iz>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d052      	beq.n	8005dcc <__kernel_sin+0xcc>
 8005d26:	4622      	mov	r2, r4
 8005d28:	462b      	mov	r3, r5
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	f7fa fc63 	bl	80005f8 <__aeabi_dmul>
 8005d32:	4682      	mov	sl, r0
 8005d34:	468b      	mov	fp, r1
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	f7fa fc5b 	bl	80005f8 <__aeabi_dmul>
 8005d42:	a342      	add	r3, pc, #264	@ (adr r3, 8005e4c <__kernel_sin+0x14c>)
 8005d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d48:	e9cd 0100 	strd	r0, r1, [sp]
 8005d4c:	4650      	mov	r0, sl
 8005d4e:	4659      	mov	r1, fp
 8005d50:	f7fa fc52 	bl	80005f8 <__aeabi_dmul>
 8005d54:	a33f      	add	r3, pc, #252	@ (adr r3, 8005e54 <__kernel_sin+0x154>)
 8005d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5a:	f7fa fa95 	bl	8000288 <__aeabi_dsub>
 8005d5e:	4652      	mov	r2, sl
 8005d60:	465b      	mov	r3, fp
 8005d62:	f7fa fc49 	bl	80005f8 <__aeabi_dmul>
 8005d66:	a33d      	add	r3, pc, #244	@ (adr r3, 8005e5c <__kernel_sin+0x15c>)
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f7fa fa8e 	bl	800028c <__adddf3>
 8005d70:	4652      	mov	r2, sl
 8005d72:	465b      	mov	r3, fp
 8005d74:	f7fa fc40 	bl	80005f8 <__aeabi_dmul>
 8005d78:	a33a      	add	r3, pc, #232	@ (adr r3, 8005e64 <__kernel_sin+0x164>)
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	f7fa fa83 	bl	8000288 <__aeabi_dsub>
 8005d82:	4652      	mov	r2, sl
 8005d84:	465b      	mov	r3, fp
 8005d86:	f7fa fc37 	bl	80005f8 <__aeabi_dmul>
 8005d8a:	a338      	add	r3, pc, #224	@ (adr r3, 8005e6c <__kernel_sin+0x16c>)
 8005d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d90:	f7fa fa7c 	bl	800028c <__adddf3>
 8005d94:	4606      	mov	r6, r0
 8005d96:	460f      	mov	r7, r1
 8005d98:	f1b8 0f00 	cmp.w	r8, #0
 8005d9c:	d11b      	bne.n	8005dd6 <__kernel_sin+0xd6>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4650      	mov	r0, sl
 8005da4:	4659      	mov	r1, fp
 8005da6:	f7fa fc27 	bl	80005f8 <__aeabi_dmul>
 8005daa:	a325      	add	r3, pc, #148	@ (adr r3, 8005e40 <__kernel_sin+0x140>)
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f7fa fa6a 	bl	8000288 <__aeabi_dsub>
 8005db4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005db8:	f7fa fc1e 	bl	80005f8 <__aeabi_dmul>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	f7fa fa62 	bl	800028c <__adddf3>
 8005dc8:	4604      	mov	r4, r0
 8005dca:	460d      	mov	r5, r1
 8005dcc:	ec45 4b10 	vmov	d0, r4, r5
 8005dd0:	b005      	add	sp, #20
 8005dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dda:	4b1b      	ldr	r3, [pc, #108]	@ (8005e48 <__kernel_sin+0x148>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f7fa fc0b 	bl	80005f8 <__aeabi_dmul>
 8005de2:	4632      	mov	r2, r6
 8005de4:	4680      	mov	r8, r0
 8005de6:	4689      	mov	r9, r1
 8005de8:	463b      	mov	r3, r7
 8005dea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005dee:	f7fa fc03 	bl	80005f8 <__aeabi_dmul>
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4640      	mov	r0, r8
 8005df8:	4649      	mov	r1, r9
 8005dfa:	f7fa fa45 	bl	8000288 <__aeabi_dsub>
 8005dfe:	4652      	mov	r2, sl
 8005e00:	465b      	mov	r3, fp
 8005e02:	f7fa fbf9 	bl	80005f8 <__aeabi_dmul>
 8005e06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e0a:	f7fa fa3d 	bl	8000288 <__aeabi_dsub>
 8005e0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005e40 <__kernel_sin+0x140>)
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	4606      	mov	r6, r0
 8005e16:	460f      	mov	r7, r1
 8005e18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e1c:	f7fa fbec 	bl	80005f8 <__aeabi_dmul>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4630      	mov	r0, r6
 8005e26:	4639      	mov	r1, r7
 8005e28:	f7fa fa30 	bl	800028c <__adddf3>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4620      	mov	r0, r4
 8005e32:	4629      	mov	r1, r5
 8005e34:	f7fa fa28 	bl	8000288 <__aeabi_dsub>
 8005e38:	e7c6      	b.n	8005dc8 <__kernel_sin+0xc8>
 8005e3a:	bf00      	nop
 8005e3c:	f3af 8000 	nop.w
 8005e40:	55555549 	.word	0x55555549
 8005e44:	3fc55555 	.word	0x3fc55555
 8005e48:	3fe00000 	.word	0x3fe00000
 8005e4c:	5acfd57c 	.word	0x5acfd57c
 8005e50:	3de5d93a 	.word	0x3de5d93a
 8005e54:	8a2b9ceb 	.word	0x8a2b9ceb
 8005e58:	3e5ae5e6 	.word	0x3e5ae5e6
 8005e5c:	57b1fe7d 	.word	0x57b1fe7d
 8005e60:	3ec71de3 	.word	0x3ec71de3
 8005e64:	19c161d5 	.word	0x19c161d5
 8005e68:	3f2a01a0 	.word	0x3f2a01a0
 8005e6c:	1110f8a6 	.word	0x1110f8a6
 8005e70:	3f811111 	.word	0x3f811111
 8005e74:	00000000 	.word	0x00000000

08005e78 <__ieee754_rem_pio2>:
 8005e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7c:	ec57 6b10 	vmov	r6, r7, d0
 8005e80:	4bc5      	ldr	r3, [pc, #788]	@ (8006198 <__ieee754_rem_pio2+0x320>)
 8005e82:	b08d      	sub	sp, #52	@ 0x34
 8005e84:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005e88:	4598      	cmp	r8, r3
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	9704      	str	r7, [sp, #16]
 8005e8e:	d807      	bhi.n	8005ea0 <__ieee754_rem_pio2+0x28>
 8005e90:	2200      	movs	r2, #0
 8005e92:	2300      	movs	r3, #0
 8005e94:	ed80 0b00 	vstr	d0, [r0]
 8005e98:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005e9c:	2500      	movs	r5, #0
 8005e9e:	e028      	b.n	8005ef2 <__ieee754_rem_pio2+0x7a>
 8005ea0:	4bbe      	ldr	r3, [pc, #760]	@ (800619c <__ieee754_rem_pio2+0x324>)
 8005ea2:	4598      	cmp	r8, r3
 8005ea4:	d878      	bhi.n	8005f98 <__ieee754_rem_pio2+0x120>
 8005ea6:	9b04      	ldr	r3, [sp, #16]
 8005ea8:	4dbd      	ldr	r5, [pc, #756]	@ (80061a0 <__ieee754_rem_pio2+0x328>)
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	4630      	mov	r0, r6
 8005eae:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006160 <__ieee754_rem_pio2+0x2e8>)
 8005eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb4:	4639      	mov	r1, r7
 8005eb6:	dd38      	ble.n	8005f2a <__ieee754_rem_pio2+0xb2>
 8005eb8:	f7fa f9e6 	bl	8000288 <__aeabi_dsub>
 8005ebc:	45a8      	cmp	r8, r5
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	460f      	mov	r7, r1
 8005ec2:	d01a      	beq.n	8005efa <__ieee754_rem_pio2+0x82>
 8005ec4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006168 <__ieee754_rem_pio2+0x2f0>)
 8005ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eca:	f7fa f9dd 	bl	8000288 <__aeabi_dsub>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4680      	mov	r8, r0
 8005ed4:	4689      	mov	r9, r1
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	4639      	mov	r1, r7
 8005eda:	f7fa f9d5 	bl	8000288 <__aeabi_dsub>
 8005ede:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006168 <__ieee754_rem_pio2+0x2f0>)
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	f7fa f9d0 	bl	8000288 <__aeabi_dsub>
 8005ee8:	e9c4 8900 	strd	r8, r9, [r4]
 8005eec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005ef0:	2501      	movs	r5, #1
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	b00d      	add	sp, #52	@ 0x34
 8005ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efa:	a39d      	add	r3, pc, #628	@ (adr r3, 8006170 <__ieee754_rem_pio2+0x2f8>)
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f7fa f9c2 	bl	8000288 <__aeabi_dsub>
 8005f04:	a39c      	add	r3, pc, #624	@ (adr r3, 8006178 <__ieee754_rem_pio2+0x300>)
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	4606      	mov	r6, r0
 8005f0c:	460f      	mov	r7, r1
 8005f0e:	f7fa f9bb 	bl	8000288 <__aeabi_dsub>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4680      	mov	r8, r0
 8005f18:	4689      	mov	r9, r1
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	4639      	mov	r1, r7
 8005f1e:	f7fa f9b3 	bl	8000288 <__aeabi_dsub>
 8005f22:	a395      	add	r3, pc, #596	@ (adr r3, 8006178 <__ieee754_rem_pio2+0x300>)
 8005f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f28:	e7dc      	b.n	8005ee4 <__ieee754_rem_pio2+0x6c>
 8005f2a:	f7fa f9af 	bl	800028c <__adddf3>
 8005f2e:	45a8      	cmp	r8, r5
 8005f30:	4606      	mov	r6, r0
 8005f32:	460f      	mov	r7, r1
 8005f34:	d018      	beq.n	8005f68 <__ieee754_rem_pio2+0xf0>
 8005f36:	a38c      	add	r3, pc, #560	@ (adr r3, 8006168 <__ieee754_rem_pio2+0x2f0>)
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	f7fa f9a6 	bl	800028c <__adddf3>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	4680      	mov	r8, r0
 8005f46:	4689      	mov	r9, r1
 8005f48:	4630      	mov	r0, r6
 8005f4a:	4639      	mov	r1, r7
 8005f4c:	f7fa f99c 	bl	8000288 <__aeabi_dsub>
 8005f50:	a385      	add	r3, pc, #532	@ (adr r3, 8006168 <__ieee754_rem_pio2+0x2f0>)
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	f7fa f999 	bl	800028c <__adddf3>
 8005f5a:	f04f 35ff 	mov.w	r5, #4294967295
 8005f5e:	e9c4 8900 	strd	r8, r9, [r4]
 8005f62:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005f66:	e7c4      	b.n	8005ef2 <__ieee754_rem_pio2+0x7a>
 8005f68:	a381      	add	r3, pc, #516	@ (adr r3, 8006170 <__ieee754_rem_pio2+0x2f8>)
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	f7fa f98d 	bl	800028c <__adddf3>
 8005f72:	a381      	add	r3, pc, #516	@ (adr r3, 8006178 <__ieee754_rem_pio2+0x300>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	4606      	mov	r6, r0
 8005f7a:	460f      	mov	r7, r1
 8005f7c:	f7fa f986 	bl	800028c <__adddf3>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4680      	mov	r8, r0
 8005f86:	4689      	mov	r9, r1
 8005f88:	4630      	mov	r0, r6
 8005f8a:	4639      	mov	r1, r7
 8005f8c:	f7fa f97c 	bl	8000288 <__aeabi_dsub>
 8005f90:	a379      	add	r3, pc, #484	@ (adr r3, 8006178 <__ieee754_rem_pio2+0x300>)
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	e7de      	b.n	8005f56 <__ieee754_rem_pio2+0xde>
 8005f98:	4b82      	ldr	r3, [pc, #520]	@ (80061a4 <__ieee754_rem_pio2+0x32c>)
 8005f9a:	4598      	cmp	r8, r3
 8005f9c:	f200 80d1 	bhi.w	8006142 <__ieee754_rem_pio2+0x2ca>
 8005fa0:	f7ff fcae 	bl	8005900 <fabs>
 8005fa4:	ec57 6b10 	vmov	r6, r7, d0
 8005fa8:	a375      	add	r3, pc, #468	@ (adr r3, 8006180 <__ieee754_rem_pio2+0x308>)
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	4630      	mov	r0, r6
 8005fb0:	4639      	mov	r1, r7
 8005fb2:	f7fa fb21 	bl	80005f8 <__aeabi_dmul>
 8005fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80061a8 <__ieee754_rem_pio2+0x330>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f7fa f967 	bl	800028c <__adddf3>
 8005fbe:	f7fa fdcb 	bl	8000b58 <__aeabi_d2iz>
 8005fc2:	4605      	mov	r5, r0
 8005fc4:	f7fa faae 	bl	8000524 <__aeabi_i2d>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005fd0:	a363      	add	r3, pc, #396	@ (adr r3, 8006160 <__ieee754_rem_pio2+0x2e8>)
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f7fa fb0f 	bl	80005f8 <__aeabi_dmul>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4630      	mov	r0, r6
 8005fe0:	4639      	mov	r1, r7
 8005fe2:	f7fa f951 	bl	8000288 <__aeabi_dsub>
 8005fe6:	a360      	add	r3, pc, #384	@ (adr r3, 8006168 <__ieee754_rem_pio2+0x2f0>)
 8005fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fec:	4682      	mov	sl, r0
 8005fee:	468b      	mov	fp, r1
 8005ff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ff4:	f7fa fb00 	bl	80005f8 <__aeabi_dmul>
 8005ff8:	2d1f      	cmp	r5, #31
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	460f      	mov	r7, r1
 8005ffe:	dc0c      	bgt.n	800601a <__ieee754_rem_pio2+0x1a2>
 8006000:	4b6a      	ldr	r3, [pc, #424]	@ (80061ac <__ieee754_rem_pio2+0x334>)
 8006002:	1e6a      	subs	r2, r5, #1
 8006004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006008:	4543      	cmp	r3, r8
 800600a:	d006      	beq.n	800601a <__ieee754_rem_pio2+0x1a2>
 800600c:	4632      	mov	r2, r6
 800600e:	463b      	mov	r3, r7
 8006010:	4650      	mov	r0, sl
 8006012:	4659      	mov	r1, fp
 8006014:	f7fa f938 	bl	8000288 <__aeabi_dsub>
 8006018:	e00e      	b.n	8006038 <__ieee754_rem_pio2+0x1c0>
 800601a:	463b      	mov	r3, r7
 800601c:	4632      	mov	r2, r6
 800601e:	4650      	mov	r0, sl
 8006020:	4659      	mov	r1, fp
 8006022:	f7fa f931 	bl	8000288 <__aeabi_dsub>
 8006026:	ea4f 5328 	mov.w	r3, r8, asr #20
 800602a:	9305      	str	r3, [sp, #20]
 800602c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006030:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006034:	2b10      	cmp	r3, #16
 8006036:	dc02      	bgt.n	800603e <__ieee754_rem_pio2+0x1c6>
 8006038:	e9c4 0100 	strd	r0, r1, [r4]
 800603c:	e039      	b.n	80060b2 <__ieee754_rem_pio2+0x23a>
 800603e:	a34c      	add	r3, pc, #304	@ (adr r3, 8006170 <__ieee754_rem_pio2+0x2f8>)
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006048:	f7fa fad6 	bl	80005f8 <__aeabi_dmul>
 800604c:	4606      	mov	r6, r0
 800604e:	460f      	mov	r7, r1
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4650      	mov	r0, sl
 8006056:	4659      	mov	r1, fp
 8006058:	f7fa f916 	bl	8000288 <__aeabi_dsub>
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4680      	mov	r8, r0
 8006062:	4689      	mov	r9, r1
 8006064:	4650      	mov	r0, sl
 8006066:	4659      	mov	r1, fp
 8006068:	f7fa f90e 	bl	8000288 <__aeabi_dsub>
 800606c:	4632      	mov	r2, r6
 800606e:	463b      	mov	r3, r7
 8006070:	f7fa f90a 	bl	8000288 <__aeabi_dsub>
 8006074:	a340      	add	r3, pc, #256	@ (adr r3, 8006178 <__ieee754_rem_pio2+0x300>)
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	4606      	mov	r6, r0
 800607c:	460f      	mov	r7, r1
 800607e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006082:	f7fa fab9 	bl	80005f8 <__aeabi_dmul>
 8006086:	4632      	mov	r2, r6
 8006088:	463b      	mov	r3, r7
 800608a:	f7fa f8fd 	bl	8000288 <__aeabi_dsub>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4606      	mov	r6, r0
 8006094:	460f      	mov	r7, r1
 8006096:	4640      	mov	r0, r8
 8006098:	4649      	mov	r1, r9
 800609a:	f7fa f8f5 	bl	8000288 <__aeabi_dsub>
 800609e:	9a05      	ldr	r2, [sp, #20]
 80060a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b31      	cmp	r3, #49	@ 0x31
 80060a8:	dc20      	bgt.n	80060ec <__ieee754_rem_pio2+0x274>
 80060aa:	e9c4 0100 	strd	r0, r1, [r4]
 80060ae:	46c2      	mov	sl, r8
 80060b0:	46cb      	mov	fp, r9
 80060b2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80060b6:	4650      	mov	r0, sl
 80060b8:	4642      	mov	r2, r8
 80060ba:	464b      	mov	r3, r9
 80060bc:	4659      	mov	r1, fp
 80060be:	f7fa f8e3 	bl	8000288 <__aeabi_dsub>
 80060c2:	463b      	mov	r3, r7
 80060c4:	4632      	mov	r2, r6
 80060c6:	f7fa f8df 	bl	8000288 <__aeabi_dsub>
 80060ca:	9b04      	ldr	r3, [sp, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80060d2:	f6bf af0e 	bge.w	8005ef2 <__ieee754_rem_pio2+0x7a>
 80060d6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80060da:	6063      	str	r3, [r4, #4]
 80060dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80060e0:	f8c4 8000 	str.w	r8, [r4]
 80060e4:	60a0      	str	r0, [r4, #8]
 80060e6:	60e3      	str	r3, [r4, #12]
 80060e8:	426d      	negs	r5, r5
 80060ea:	e702      	b.n	8005ef2 <__ieee754_rem_pio2+0x7a>
 80060ec:	a326      	add	r3, pc, #152	@ (adr r3, 8006188 <__ieee754_rem_pio2+0x310>)
 80060ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060f6:	f7fa fa7f 	bl	80005f8 <__aeabi_dmul>
 80060fa:	4606      	mov	r6, r0
 80060fc:	460f      	mov	r7, r1
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4640      	mov	r0, r8
 8006104:	4649      	mov	r1, r9
 8006106:	f7fa f8bf 	bl	8000288 <__aeabi_dsub>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4682      	mov	sl, r0
 8006110:	468b      	mov	fp, r1
 8006112:	4640      	mov	r0, r8
 8006114:	4649      	mov	r1, r9
 8006116:	f7fa f8b7 	bl	8000288 <__aeabi_dsub>
 800611a:	4632      	mov	r2, r6
 800611c:	463b      	mov	r3, r7
 800611e:	f7fa f8b3 	bl	8000288 <__aeabi_dsub>
 8006122:	a31b      	add	r3, pc, #108	@ (adr r3, 8006190 <__ieee754_rem_pio2+0x318>)
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	4606      	mov	r6, r0
 800612a:	460f      	mov	r7, r1
 800612c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006130:	f7fa fa62 	bl	80005f8 <__aeabi_dmul>
 8006134:	4632      	mov	r2, r6
 8006136:	463b      	mov	r3, r7
 8006138:	f7fa f8a6 	bl	8000288 <__aeabi_dsub>
 800613c:	4606      	mov	r6, r0
 800613e:	460f      	mov	r7, r1
 8006140:	e764      	b.n	800600c <__ieee754_rem_pio2+0x194>
 8006142:	4b1b      	ldr	r3, [pc, #108]	@ (80061b0 <__ieee754_rem_pio2+0x338>)
 8006144:	4598      	cmp	r8, r3
 8006146:	d935      	bls.n	80061b4 <__ieee754_rem_pio2+0x33c>
 8006148:	4632      	mov	r2, r6
 800614a:	463b      	mov	r3, r7
 800614c:	4630      	mov	r0, r6
 800614e:	4639      	mov	r1, r7
 8006150:	f7fa f89a 	bl	8000288 <__aeabi_dsub>
 8006154:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006158:	e9c4 0100 	strd	r0, r1, [r4]
 800615c:	e69e      	b.n	8005e9c <__ieee754_rem_pio2+0x24>
 800615e:	bf00      	nop
 8006160:	54400000 	.word	0x54400000
 8006164:	3ff921fb 	.word	0x3ff921fb
 8006168:	1a626331 	.word	0x1a626331
 800616c:	3dd0b461 	.word	0x3dd0b461
 8006170:	1a600000 	.word	0x1a600000
 8006174:	3dd0b461 	.word	0x3dd0b461
 8006178:	2e037073 	.word	0x2e037073
 800617c:	3ba3198a 	.word	0x3ba3198a
 8006180:	6dc9c883 	.word	0x6dc9c883
 8006184:	3fe45f30 	.word	0x3fe45f30
 8006188:	2e000000 	.word	0x2e000000
 800618c:	3ba3198a 	.word	0x3ba3198a
 8006190:	252049c1 	.word	0x252049c1
 8006194:	397b839a 	.word	0x397b839a
 8006198:	3fe921fb 	.word	0x3fe921fb
 800619c:	4002d97b 	.word	0x4002d97b
 80061a0:	3ff921fb 	.word	0x3ff921fb
 80061a4:	413921fb 	.word	0x413921fb
 80061a8:	3fe00000 	.word	0x3fe00000
 80061ac:	08006fa8 	.word	0x08006fa8
 80061b0:	7fefffff 	.word	0x7fefffff
 80061b4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80061b8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80061bc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80061c0:	4630      	mov	r0, r6
 80061c2:	460f      	mov	r7, r1
 80061c4:	f7fa fcc8 	bl	8000b58 <__aeabi_d2iz>
 80061c8:	f7fa f9ac 	bl	8000524 <__aeabi_i2d>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4630      	mov	r0, r6
 80061d2:	4639      	mov	r1, r7
 80061d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80061d8:	f7fa f856 	bl	8000288 <__aeabi_dsub>
 80061dc:	4b22      	ldr	r3, [pc, #136]	@ (8006268 <__ieee754_rem_pio2+0x3f0>)
 80061de:	2200      	movs	r2, #0
 80061e0:	f7fa fa0a 	bl	80005f8 <__aeabi_dmul>
 80061e4:	460f      	mov	r7, r1
 80061e6:	4606      	mov	r6, r0
 80061e8:	f7fa fcb6 	bl	8000b58 <__aeabi_d2iz>
 80061ec:	f7fa f99a 	bl	8000524 <__aeabi_i2d>
 80061f0:	4602      	mov	r2, r0
 80061f2:	460b      	mov	r3, r1
 80061f4:	4630      	mov	r0, r6
 80061f6:	4639      	mov	r1, r7
 80061f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80061fc:	f7fa f844 	bl	8000288 <__aeabi_dsub>
 8006200:	4b19      	ldr	r3, [pc, #100]	@ (8006268 <__ieee754_rem_pio2+0x3f0>)
 8006202:	2200      	movs	r2, #0
 8006204:	f7fa f9f8 	bl	80005f8 <__aeabi_dmul>
 8006208:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800620c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006210:	f04f 0803 	mov.w	r8, #3
 8006214:	2600      	movs	r6, #0
 8006216:	2700      	movs	r7, #0
 8006218:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800621c:	4632      	mov	r2, r6
 800621e:	463b      	mov	r3, r7
 8006220:	46c2      	mov	sl, r8
 8006222:	f108 38ff 	add.w	r8, r8, #4294967295
 8006226:	f7fa fc4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800622a:	2800      	cmp	r0, #0
 800622c:	d1f4      	bne.n	8006218 <__ieee754_rem_pio2+0x3a0>
 800622e:	4b0f      	ldr	r3, [pc, #60]	@ (800626c <__ieee754_rem_pio2+0x3f4>)
 8006230:	9301      	str	r3, [sp, #4]
 8006232:	2302      	movs	r3, #2
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	462a      	mov	r2, r5
 8006238:	4653      	mov	r3, sl
 800623a:	4621      	mov	r1, r4
 800623c:	a806      	add	r0, sp, #24
 800623e:	f000 f817 	bl	8006270 <__kernel_rem_pio2>
 8006242:	9b04      	ldr	r3, [sp, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	4605      	mov	r5, r0
 8006248:	f6bf ae53 	bge.w	8005ef2 <__ieee754_rem_pio2+0x7a>
 800624c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006250:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006254:	e9c4 2300 	strd	r2, r3, [r4]
 8006258:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800625c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006260:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006264:	e740      	b.n	80060e8 <__ieee754_rem_pio2+0x270>
 8006266:	bf00      	nop
 8006268:	41700000 	.word	0x41700000
 800626c:	08007028 	.word	0x08007028

08006270 <__kernel_rem_pio2>:
 8006270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006274:	ed2d 8b02 	vpush	{d8}
 8006278:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800627c:	f112 0f14 	cmn.w	r2, #20
 8006280:	9306      	str	r3, [sp, #24]
 8006282:	9104      	str	r1, [sp, #16]
 8006284:	4bbe      	ldr	r3, [pc, #760]	@ (8006580 <__kernel_rem_pio2+0x310>)
 8006286:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006288:	9008      	str	r0, [sp, #32]
 800628a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	9b06      	ldr	r3, [sp, #24]
 8006292:	f103 33ff 	add.w	r3, r3, #4294967295
 8006296:	bfa8      	it	ge
 8006298:	1ed4      	subge	r4, r2, #3
 800629a:	9305      	str	r3, [sp, #20]
 800629c:	bfb2      	itee	lt
 800629e:	2400      	movlt	r4, #0
 80062a0:	2318      	movge	r3, #24
 80062a2:	fb94 f4f3 	sdivge	r4, r4, r3
 80062a6:	f06f 0317 	mvn.w	r3, #23
 80062aa:	fb04 3303 	mla	r3, r4, r3, r3
 80062ae:	eb03 0b02 	add.w	fp, r3, r2
 80062b2:	9b00      	ldr	r3, [sp, #0]
 80062b4:	9a05      	ldr	r2, [sp, #20]
 80062b6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006570 <__kernel_rem_pio2+0x300>
 80062ba:	eb03 0802 	add.w	r8, r3, r2
 80062be:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80062c0:	1aa7      	subs	r7, r4, r2
 80062c2:	ae20      	add	r6, sp, #128	@ 0x80
 80062c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80062c8:	2500      	movs	r5, #0
 80062ca:	4545      	cmp	r5, r8
 80062cc:	dd13      	ble.n	80062f6 <__kernel_rem_pio2+0x86>
 80062ce:	9b06      	ldr	r3, [sp, #24]
 80062d0:	aa20      	add	r2, sp, #128	@ 0x80
 80062d2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80062d6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80062da:	f04f 0800 	mov.w	r8, #0
 80062de:	9b00      	ldr	r3, [sp, #0]
 80062e0:	4598      	cmp	r8, r3
 80062e2:	dc31      	bgt.n	8006348 <__kernel_rem_pio2+0xd8>
 80062e4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006570 <__kernel_rem_pio2+0x300>
 80062e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80062f0:	462f      	mov	r7, r5
 80062f2:	2600      	movs	r6, #0
 80062f4:	e01b      	b.n	800632e <__kernel_rem_pio2+0xbe>
 80062f6:	42ef      	cmn	r7, r5
 80062f8:	d407      	bmi.n	800630a <__kernel_rem_pio2+0x9a>
 80062fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80062fe:	f7fa f911 	bl	8000524 <__aeabi_i2d>
 8006302:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006306:	3501      	adds	r5, #1
 8006308:	e7df      	b.n	80062ca <__kernel_rem_pio2+0x5a>
 800630a:	ec51 0b18 	vmov	r0, r1, d8
 800630e:	e7f8      	b.n	8006302 <__kernel_rem_pio2+0x92>
 8006310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006314:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006318:	f7fa f96e 	bl	80005f8 <__aeabi_dmul>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006324:	f7f9 ffb2 	bl	800028c <__adddf3>
 8006328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800632c:	3601      	adds	r6, #1
 800632e:	9b05      	ldr	r3, [sp, #20]
 8006330:	429e      	cmp	r6, r3
 8006332:	f1a7 0708 	sub.w	r7, r7, #8
 8006336:	ddeb      	ble.n	8006310 <__kernel_rem_pio2+0xa0>
 8006338:	ed9d 7b02 	vldr	d7, [sp, #8]
 800633c:	f108 0801 	add.w	r8, r8, #1
 8006340:	ecaa 7b02 	vstmia	sl!, {d7}
 8006344:	3508      	adds	r5, #8
 8006346:	e7ca      	b.n	80062de <__kernel_rem_pio2+0x6e>
 8006348:	9b00      	ldr	r3, [sp, #0]
 800634a:	f8dd 8000 	ldr.w	r8, [sp]
 800634e:	aa0c      	add	r2, sp, #48	@ 0x30
 8006350:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006354:	930a      	str	r3, [sp, #40]	@ 0x28
 8006356:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006358:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800635c:	9309      	str	r3, [sp, #36]	@ 0x24
 800635e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8006362:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006364:	ab98      	add	r3, sp, #608	@ 0x260
 8006366:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800636a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800636e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006372:	ac0c      	add	r4, sp, #48	@ 0x30
 8006374:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006376:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800637a:	46a1      	mov	r9, r4
 800637c:	46c2      	mov	sl, r8
 800637e:	f1ba 0f00 	cmp.w	sl, #0
 8006382:	f1a5 0508 	sub.w	r5, r5, #8
 8006386:	dc77      	bgt.n	8006478 <__kernel_rem_pio2+0x208>
 8006388:	4658      	mov	r0, fp
 800638a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800638e:	f000 fac7 	bl	8006920 <scalbn>
 8006392:	ec57 6b10 	vmov	r6, r7, d0
 8006396:	2200      	movs	r2, #0
 8006398:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800639c:	4630      	mov	r0, r6
 800639e:	4639      	mov	r1, r7
 80063a0:	f7fa f92a 	bl	80005f8 <__aeabi_dmul>
 80063a4:	ec41 0b10 	vmov	d0, r0, r1
 80063a8:	f000 fb3a 	bl	8006a20 <floor>
 80063ac:	4b75      	ldr	r3, [pc, #468]	@ (8006584 <__kernel_rem_pio2+0x314>)
 80063ae:	ec51 0b10 	vmov	r0, r1, d0
 80063b2:	2200      	movs	r2, #0
 80063b4:	f7fa f920 	bl	80005f8 <__aeabi_dmul>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	4630      	mov	r0, r6
 80063be:	4639      	mov	r1, r7
 80063c0:	f7f9 ff62 	bl	8000288 <__aeabi_dsub>
 80063c4:	460f      	mov	r7, r1
 80063c6:	4606      	mov	r6, r0
 80063c8:	f7fa fbc6 	bl	8000b58 <__aeabi_d2iz>
 80063cc:	9002      	str	r0, [sp, #8]
 80063ce:	f7fa f8a9 	bl	8000524 <__aeabi_i2d>
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	4630      	mov	r0, r6
 80063d8:	4639      	mov	r1, r7
 80063da:	f7f9 ff55 	bl	8000288 <__aeabi_dsub>
 80063de:	f1bb 0f00 	cmp.w	fp, #0
 80063e2:	4606      	mov	r6, r0
 80063e4:	460f      	mov	r7, r1
 80063e6:	dd6c      	ble.n	80064c2 <__kernel_rem_pio2+0x252>
 80063e8:	f108 31ff 	add.w	r1, r8, #4294967295
 80063ec:	ab0c      	add	r3, sp, #48	@ 0x30
 80063ee:	9d02      	ldr	r5, [sp, #8]
 80063f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80063f4:	f1cb 0018 	rsb	r0, fp, #24
 80063f8:	fa43 f200 	asr.w	r2, r3, r0
 80063fc:	4415      	add	r5, r2
 80063fe:	4082      	lsls	r2, r0
 8006400:	1a9b      	subs	r3, r3, r2
 8006402:	aa0c      	add	r2, sp, #48	@ 0x30
 8006404:	9502      	str	r5, [sp, #8]
 8006406:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800640a:	f1cb 0217 	rsb	r2, fp, #23
 800640e:	fa43 f902 	asr.w	r9, r3, r2
 8006412:	f1b9 0f00 	cmp.w	r9, #0
 8006416:	dd64      	ble.n	80064e2 <__kernel_rem_pio2+0x272>
 8006418:	9b02      	ldr	r3, [sp, #8]
 800641a:	2200      	movs	r2, #0
 800641c:	3301      	adds	r3, #1
 800641e:	9302      	str	r3, [sp, #8]
 8006420:	4615      	mov	r5, r2
 8006422:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006426:	4590      	cmp	r8, r2
 8006428:	f300 80b8 	bgt.w	800659c <__kernel_rem_pio2+0x32c>
 800642c:	f1bb 0f00 	cmp.w	fp, #0
 8006430:	dd07      	ble.n	8006442 <__kernel_rem_pio2+0x1d2>
 8006432:	f1bb 0f01 	cmp.w	fp, #1
 8006436:	f000 80bf 	beq.w	80065b8 <__kernel_rem_pio2+0x348>
 800643a:	f1bb 0f02 	cmp.w	fp, #2
 800643e:	f000 80c6 	beq.w	80065ce <__kernel_rem_pio2+0x35e>
 8006442:	f1b9 0f02 	cmp.w	r9, #2
 8006446:	d14c      	bne.n	80064e2 <__kernel_rem_pio2+0x272>
 8006448:	4632      	mov	r2, r6
 800644a:	463b      	mov	r3, r7
 800644c:	494e      	ldr	r1, [pc, #312]	@ (8006588 <__kernel_rem_pio2+0x318>)
 800644e:	2000      	movs	r0, #0
 8006450:	f7f9 ff1a 	bl	8000288 <__aeabi_dsub>
 8006454:	4606      	mov	r6, r0
 8006456:	460f      	mov	r7, r1
 8006458:	2d00      	cmp	r5, #0
 800645a:	d042      	beq.n	80064e2 <__kernel_rem_pio2+0x272>
 800645c:	4658      	mov	r0, fp
 800645e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006578 <__kernel_rem_pio2+0x308>
 8006462:	f000 fa5d 	bl	8006920 <scalbn>
 8006466:	4630      	mov	r0, r6
 8006468:	4639      	mov	r1, r7
 800646a:	ec53 2b10 	vmov	r2, r3, d0
 800646e:	f7f9 ff0b 	bl	8000288 <__aeabi_dsub>
 8006472:	4606      	mov	r6, r0
 8006474:	460f      	mov	r7, r1
 8006476:	e034      	b.n	80064e2 <__kernel_rem_pio2+0x272>
 8006478:	4b44      	ldr	r3, [pc, #272]	@ (800658c <__kernel_rem_pio2+0x31c>)
 800647a:	2200      	movs	r2, #0
 800647c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006480:	f7fa f8ba 	bl	80005f8 <__aeabi_dmul>
 8006484:	f7fa fb68 	bl	8000b58 <__aeabi_d2iz>
 8006488:	f7fa f84c 	bl	8000524 <__aeabi_i2d>
 800648c:	4b40      	ldr	r3, [pc, #256]	@ (8006590 <__kernel_rem_pio2+0x320>)
 800648e:	2200      	movs	r2, #0
 8006490:	4606      	mov	r6, r0
 8006492:	460f      	mov	r7, r1
 8006494:	f7fa f8b0 	bl	80005f8 <__aeabi_dmul>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064a0:	f7f9 fef2 	bl	8000288 <__aeabi_dsub>
 80064a4:	f7fa fb58 	bl	8000b58 <__aeabi_d2iz>
 80064a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064ac:	f849 0b04 	str.w	r0, [r9], #4
 80064b0:	4639      	mov	r1, r7
 80064b2:	4630      	mov	r0, r6
 80064b4:	f7f9 feea 	bl	800028c <__adddf3>
 80064b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064c0:	e75d      	b.n	800637e <__kernel_rem_pio2+0x10e>
 80064c2:	d107      	bne.n	80064d4 <__kernel_rem_pio2+0x264>
 80064c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80064c8:	aa0c      	add	r2, sp, #48	@ 0x30
 80064ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ce:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80064d2:	e79e      	b.n	8006412 <__kernel_rem_pio2+0x1a2>
 80064d4:	4b2f      	ldr	r3, [pc, #188]	@ (8006594 <__kernel_rem_pio2+0x324>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	f7fa fb14 	bl	8000b04 <__aeabi_dcmpge>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d143      	bne.n	8006568 <__kernel_rem_pio2+0x2f8>
 80064e0:	4681      	mov	r9, r0
 80064e2:	2200      	movs	r2, #0
 80064e4:	2300      	movs	r3, #0
 80064e6:	4630      	mov	r0, r6
 80064e8:	4639      	mov	r1, r7
 80064ea:	f7fa faed 	bl	8000ac8 <__aeabi_dcmpeq>
 80064ee:	2800      	cmp	r0, #0
 80064f0:	f000 80bf 	beq.w	8006672 <__kernel_rem_pio2+0x402>
 80064f4:	f108 33ff 	add.w	r3, r8, #4294967295
 80064f8:	2200      	movs	r2, #0
 80064fa:	9900      	ldr	r1, [sp, #0]
 80064fc:	428b      	cmp	r3, r1
 80064fe:	da6e      	bge.n	80065de <__kernel_rem_pio2+0x36e>
 8006500:	2a00      	cmp	r2, #0
 8006502:	f000 8089 	beq.w	8006618 <__kernel_rem_pio2+0x3a8>
 8006506:	f108 38ff 	add.w	r8, r8, #4294967295
 800650a:	ab0c      	add	r3, sp, #48	@ 0x30
 800650c:	f1ab 0b18 	sub.w	fp, fp, #24
 8006510:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d0f6      	beq.n	8006506 <__kernel_rem_pio2+0x296>
 8006518:	4658      	mov	r0, fp
 800651a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006578 <__kernel_rem_pio2+0x308>
 800651e:	f000 f9ff 	bl	8006920 <scalbn>
 8006522:	f108 0301 	add.w	r3, r8, #1
 8006526:	00da      	lsls	r2, r3, #3
 8006528:	9205      	str	r2, [sp, #20]
 800652a:	ec55 4b10 	vmov	r4, r5, d0
 800652e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006530:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800658c <__kernel_rem_pio2+0x31c>
 8006534:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006538:	4646      	mov	r6, r8
 800653a:	f04f 0a00 	mov.w	sl, #0
 800653e:	2e00      	cmp	r6, #0
 8006540:	f280 80cf 	bge.w	80066e2 <__kernel_rem_pio2+0x472>
 8006544:	4644      	mov	r4, r8
 8006546:	2c00      	cmp	r4, #0
 8006548:	f2c0 80fd 	blt.w	8006746 <__kernel_rem_pio2+0x4d6>
 800654c:	4b12      	ldr	r3, [pc, #72]	@ (8006598 <__kernel_rem_pio2+0x328>)
 800654e:	461f      	mov	r7, r3
 8006550:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006552:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006556:	9306      	str	r3, [sp, #24]
 8006558:	f04f 0a00 	mov.w	sl, #0
 800655c:	f04f 0b00 	mov.w	fp, #0
 8006560:	2600      	movs	r6, #0
 8006562:	eba8 0504 	sub.w	r5, r8, r4
 8006566:	e0e2      	b.n	800672e <__kernel_rem_pio2+0x4be>
 8006568:	f04f 0902 	mov.w	r9, #2
 800656c:	e754      	b.n	8006418 <__kernel_rem_pio2+0x1a8>
 800656e:	bf00      	nop
	...
 800657c:	3ff00000 	.word	0x3ff00000
 8006580:	08007170 	.word	0x08007170
 8006584:	40200000 	.word	0x40200000
 8006588:	3ff00000 	.word	0x3ff00000
 800658c:	3e700000 	.word	0x3e700000
 8006590:	41700000 	.word	0x41700000
 8006594:	3fe00000 	.word	0x3fe00000
 8006598:	08007130 	.word	0x08007130
 800659c:	f854 3b04 	ldr.w	r3, [r4], #4
 80065a0:	b945      	cbnz	r5, 80065b4 <__kernel_rem_pio2+0x344>
 80065a2:	b123      	cbz	r3, 80065ae <__kernel_rem_pio2+0x33e>
 80065a4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80065a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80065ac:	2301      	movs	r3, #1
 80065ae:	3201      	adds	r2, #1
 80065b0:	461d      	mov	r5, r3
 80065b2:	e738      	b.n	8006426 <__kernel_rem_pio2+0x1b6>
 80065b4:	1acb      	subs	r3, r1, r3
 80065b6:	e7f7      	b.n	80065a8 <__kernel_rem_pio2+0x338>
 80065b8:	f108 32ff 	add.w	r2, r8, #4294967295
 80065bc:	ab0c      	add	r3, sp, #48	@ 0x30
 80065be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80065c6:	a90c      	add	r1, sp, #48	@ 0x30
 80065c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80065cc:	e739      	b.n	8006442 <__kernel_rem_pio2+0x1d2>
 80065ce:	f108 32ff 	add.w	r2, r8, #4294967295
 80065d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80065d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80065dc:	e7f3      	b.n	80065c6 <__kernel_rem_pio2+0x356>
 80065de:	a90c      	add	r1, sp, #48	@ 0x30
 80065e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	430a      	orrs	r2, r1
 80065e8:	e787      	b.n	80064fa <__kernel_rem_pio2+0x28a>
 80065ea:	3401      	adds	r4, #1
 80065ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80065f0:	2a00      	cmp	r2, #0
 80065f2:	d0fa      	beq.n	80065ea <__kernel_rem_pio2+0x37a>
 80065f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065f6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80065fa:	eb0d 0503 	add.w	r5, sp, r3
 80065fe:	9b06      	ldr	r3, [sp, #24]
 8006600:	aa20      	add	r2, sp, #128	@ 0x80
 8006602:	4443      	add	r3, r8
 8006604:	f108 0701 	add.w	r7, r8, #1
 8006608:	3d98      	subs	r5, #152	@ 0x98
 800660a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800660e:	4444      	add	r4, r8
 8006610:	42bc      	cmp	r4, r7
 8006612:	da04      	bge.n	800661e <__kernel_rem_pio2+0x3ae>
 8006614:	46a0      	mov	r8, r4
 8006616:	e6a2      	b.n	800635e <__kernel_rem_pio2+0xee>
 8006618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800661a:	2401      	movs	r4, #1
 800661c:	e7e6      	b.n	80065ec <__kernel_rem_pio2+0x37c>
 800661e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006620:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006624:	f7f9 ff7e 	bl	8000524 <__aeabi_i2d>
 8006628:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80068f0 <__kernel_rem_pio2+0x680>
 800662c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006630:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006634:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006638:	46b2      	mov	sl, r6
 800663a:	f04f 0800 	mov.w	r8, #0
 800663e:	9b05      	ldr	r3, [sp, #20]
 8006640:	4598      	cmp	r8, r3
 8006642:	dd05      	ble.n	8006650 <__kernel_rem_pio2+0x3e0>
 8006644:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006648:	3701      	adds	r7, #1
 800664a:	eca5 7b02 	vstmia	r5!, {d7}
 800664e:	e7df      	b.n	8006610 <__kernel_rem_pio2+0x3a0>
 8006650:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006654:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006658:	f7f9 ffce 	bl	80005f8 <__aeabi_dmul>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006664:	f7f9 fe12 	bl	800028c <__adddf3>
 8006668:	f108 0801 	add.w	r8, r8, #1
 800666c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006670:	e7e5      	b.n	800663e <__kernel_rem_pio2+0x3ce>
 8006672:	f1cb 0000 	rsb	r0, fp, #0
 8006676:	ec47 6b10 	vmov	d0, r6, r7
 800667a:	f000 f951 	bl	8006920 <scalbn>
 800667e:	ec55 4b10 	vmov	r4, r5, d0
 8006682:	4b9d      	ldr	r3, [pc, #628]	@ (80068f8 <__kernel_rem_pio2+0x688>)
 8006684:	2200      	movs	r2, #0
 8006686:	4620      	mov	r0, r4
 8006688:	4629      	mov	r1, r5
 800668a:	f7fa fa3b 	bl	8000b04 <__aeabi_dcmpge>
 800668e:	b300      	cbz	r0, 80066d2 <__kernel_rem_pio2+0x462>
 8006690:	4b9a      	ldr	r3, [pc, #616]	@ (80068fc <__kernel_rem_pio2+0x68c>)
 8006692:	2200      	movs	r2, #0
 8006694:	4620      	mov	r0, r4
 8006696:	4629      	mov	r1, r5
 8006698:	f7f9 ffae 	bl	80005f8 <__aeabi_dmul>
 800669c:	f7fa fa5c 	bl	8000b58 <__aeabi_d2iz>
 80066a0:	4606      	mov	r6, r0
 80066a2:	f7f9 ff3f 	bl	8000524 <__aeabi_i2d>
 80066a6:	4b94      	ldr	r3, [pc, #592]	@ (80068f8 <__kernel_rem_pio2+0x688>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	f7f9 ffa5 	bl	80005f8 <__aeabi_dmul>
 80066ae:	460b      	mov	r3, r1
 80066b0:	4602      	mov	r2, r0
 80066b2:	4629      	mov	r1, r5
 80066b4:	4620      	mov	r0, r4
 80066b6:	f7f9 fde7 	bl	8000288 <__aeabi_dsub>
 80066ba:	f7fa fa4d 	bl	8000b58 <__aeabi_d2iz>
 80066be:	ab0c      	add	r3, sp, #48	@ 0x30
 80066c0:	f10b 0b18 	add.w	fp, fp, #24
 80066c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80066c8:	f108 0801 	add.w	r8, r8, #1
 80066cc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80066d0:	e722      	b.n	8006518 <__kernel_rem_pio2+0x2a8>
 80066d2:	4620      	mov	r0, r4
 80066d4:	4629      	mov	r1, r5
 80066d6:	f7fa fa3f 	bl	8000b58 <__aeabi_d2iz>
 80066da:	ab0c      	add	r3, sp, #48	@ 0x30
 80066dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80066e0:	e71a      	b.n	8006518 <__kernel_rem_pio2+0x2a8>
 80066e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80066e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80066e8:	f7f9 ff1c 	bl	8000524 <__aeabi_i2d>
 80066ec:	4622      	mov	r2, r4
 80066ee:	462b      	mov	r3, r5
 80066f0:	f7f9 ff82 	bl	80005f8 <__aeabi_dmul>
 80066f4:	4652      	mov	r2, sl
 80066f6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80066fa:	465b      	mov	r3, fp
 80066fc:	4620      	mov	r0, r4
 80066fe:	4629      	mov	r1, r5
 8006700:	f7f9 ff7a 	bl	80005f8 <__aeabi_dmul>
 8006704:	3e01      	subs	r6, #1
 8006706:	4604      	mov	r4, r0
 8006708:	460d      	mov	r5, r1
 800670a:	e718      	b.n	800653e <__kernel_rem_pio2+0x2ce>
 800670c:	9906      	ldr	r1, [sp, #24]
 800670e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8006712:	9106      	str	r1, [sp, #24]
 8006714:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006718:	f7f9 ff6e 	bl	80005f8 <__aeabi_dmul>
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	4650      	mov	r0, sl
 8006722:	4659      	mov	r1, fp
 8006724:	f7f9 fdb2 	bl	800028c <__adddf3>
 8006728:	3601      	adds	r6, #1
 800672a:	4682      	mov	sl, r0
 800672c:	468b      	mov	fp, r1
 800672e:	9b00      	ldr	r3, [sp, #0]
 8006730:	429e      	cmp	r6, r3
 8006732:	dc01      	bgt.n	8006738 <__kernel_rem_pio2+0x4c8>
 8006734:	42b5      	cmp	r5, r6
 8006736:	dae9      	bge.n	800670c <__kernel_rem_pio2+0x49c>
 8006738:	ab48      	add	r3, sp, #288	@ 0x120
 800673a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800673e:	e9c5 ab00 	strd	sl, fp, [r5]
 8006742:	3c01      	subs	r4, #1
 8006744:	e6ff      	b.n	8006546 <__kernel_rem_pio2+0x2d6>
 8006746:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006748:	2b02      	cmp	r3, #2
 800674a:	dc0b      	bgt.n	8006764 <__kernel_rem_pio2+0x4f4>
 800674c:	2b00      	cmp	r3, #0
 800674e:	dc39      	bgt.n	80067c4 <__kernel_rem_pio2+0x554>
 8006750:	d05d      	beq.n	800680e <__kernel_rem_pio2+0x59e>
 8006752:	9b02      	ldr	r3, [sp, #8]
 8006754:	f003 0007 	and.w	r0, r3, #7
 8006758:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800675c:	ecbd 8b02 	vpop	{d8}
 8006760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006764:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006766:	2b03      	cmp	r3, #3
 8006768:	d1f3      	bne.n	8006752 <__kernel_rem_pio2+0x4e2>
 800676a:	9b05      	ldr	r3, [sp, #20]
 800676c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006770:	eb0d 0403 	add.w	r4, sp, r3
 8006774:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006778:	4625      	mov	r5, r4
 800677a:	46c2      	mov	sl, r8
 800677c:	f1ba 0f00 	cmp.w	sl, #0
 8006780:	f1a5 0508 	sub.w	r5, r5, #8
 8006784:	dc6b      	bgt.n	800685e <__kernel_rem_pio2+0x5ee>
 8006786:	4645      	mov	r5, r8
 8006788:	2d01      	cmp	r5, #1
 800678a:	f1a4 0408 	sub.w	r4, r4, #8
 800678e:	f300 8087 	bgt.w	80068a0 <__kernel_rem_pio2+0x630>
 8006792:	9c05      	ldr	r4, [sp, #20]
 8006794:	ab48      	add	r3, sp, #288	@ 0x120
 8006796:	441c      	add	r4, r3
 8006798:	2000      	movs	r0, #0
 800679a:	2100      	movs	r1, #0
 800679c:	f1b8 0f01 	cmp.w	r8, #1
 80067a0:	f300 809c 	bgt.w	80068dc <__kernel_rem_pio2+0x66c>
 80067a4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80067a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80067ac:	f1b9 0f00 	cmp.w	r9, #0
 80067b0:	f040 80a6 	bne.w	8006900 <__kernel_rem_pio2+0x690>
 80067b4:	9b04      	ldr	r3, [sp, #16]
 80067b6:	e9c3 7800 	strd	r7, r8, [r3]
 80067ba:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80067be:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80067c2:	e7c6      	b.n	8006752 <__kernel_rem_pio2+0x4e2>
 80067c4:	9d05      	ldr	r5, [sp, #20]
 80067c6:	ab48      	add	r3, sp, #288	@ 0x120
 80067c8:	441d      	add	r5, r3
 80067ca:	4644      	mov	r4, r8
 80067cc:	2000      	movs	r0, #0
 80067ce:	2100      	movs	r1, #0
 80067d0:	2c00      	cmp	r4, #0
 80067d2:	da35      	bge.n	8006840 <__kernel_rem_pio2+0x5d0>
 80067d4:	f1b9 0f00 	cmp.w	r9, #0
 80067d8:	d038      	beq.n	800684c <__kernel_rem_pio2+0x5dc>
 80067da:	4602      	mov	r2, r0
 80067dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80067e0:	9c04      	ldr	r4, [sp, #16]
 80067e2:	e9c4 2300 	strd	r2, r3, [r4]
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80067ee:	f7f9 fd4b 	bl	8000288 <__aeabi_dsub>
 80067f2:	ad4a      	add	r5, sp, #296	@ 0x128
 80067f4:	2401      	movs	r4, #1
 80067f6:	45a0      	cmp	r8, r4
 80067f8:	da2b      	bge.n	8006852 <__kernel_rem_pio2+0x5e2>
 80067fa:	f1b9 0f00 	cmp.w	r9, #0
 80067fe:	d002      	beq.n	8006806 <__kernel_rem_pio2+0x596>
 8006800:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006804:	4619      	mov	r1, r3
 8006806:	9b04      	ldr	r3, [sp, #16]
 8006808:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800680c:	e7a1      	b.n	8006752 <__kernel_rem_pio2+0x4e2>
 800680e:	9c05      	ldr	r4, [sp, #20]
 8006810:	ab48      	add	r3, sp, #288	@ 0x120
 8006812:	441c      	add	r4, r3
 8006814:	2000      	movs	r0, #0
 8006816:	2100      	movs	r1, #0
 8006818:	f1b8 0f00 	cmp.w	r8, #0
 800681c:	da09      	bge.n	8006832 <__kernel_rem_pio2+0x5c2>
 800681e:	f1b9 0f00 	cmp.w	r9, #0
 8006822:	d002      	beq.n	800682a <__kernel_rem_pio2+0x5ba>
 8006824:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006828:	4619      	mov	r1, r3
 800682a:	9b04      	ldr	r3, [sp, #16]
 800682c:	e9c3 0100 	strd	r0, r1, [r3]
 8006830:	e78f      	b.n	8006752 <__kernel_rem_pio2+0x4e2>
 8006832:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006836:	f7f9 fd29 	bl	800028c <__adddf3>
 800683a:	f108 38ff 	add.w	r8, r8, #4294967295
 800683e:	e7eb      	b.n	8006818 <__kernel_rem_pio2+0x5a8>
 8006840:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006844:	f7f9 fd22 	bl	800028c <__adddf3>
 8006848:	3c01      	subs	r4, #1
 800684a:	e7c1      	b.n	80067d0 <__kernel_rem_pio2+0x560>
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	e7c6      	b.n	80067e0 <__kernel_rem_pio2+0x570>
 8006852:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006856:	f7f9 fd19 	bl	800028c <__adddf3>
 800685a:	3401      	adds	r4, #1
 800685c:	e7cb      	b.n	80067f6 <__kernel_rem_pio2+0x586>
 800685e:	ed95 7b00 	vldr	d7, [r5]
 8006862:	ed8d 7b00 	vstr	d7, [sp]
 8006866:	ed95 7b02 	vldr	d7, [r5, #8]
 800686a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800686e:	ec53 2b17 	vmov	r2, r3, d7
 8006872:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006876:	f7f9 fd09 	bl	800028c <__adddf3>
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	4606      	mov	r6, r0
 8006880:	460f      	mov	r7, r1
 8006882:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006886:	f7f9 fcff 	bl	8000288 <__aeabi_dsub>
 800688a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800688e:	f7f9 fcfd 	bl	800028c <__adddf3>
 8006892:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006896:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800689a:	e9c5 6700 	strd	r6, r7, [r5]
 800689e:	e76d      	b.n	800677c <__kernel_rem_pio2+0x50c>
 80068a0:	ed94 7b00 	vldr	d7, [r4]
 80068a4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80068a8:	ec51 0b17 	vmov	r0, r1, d7
 80068ac:	4652      	mov	r2, sl
 80068ae:	465b      	mov	r3, fp
 80068b0:	ed8d 7b00 	vstr	d7, [sp]
 80068b4:	f7f9 fcea 	bl	800028c <__adddf3>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4606      	mov	r6, r0
 80068be:	460f      	mov	r7, r1
 80068c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068c4:	f7f9 fce0 	bl	8000288 <__aeabi_dsub>
 80068c8:	4652      	mov	r2, sl
 80068ca:	465b      	mov	r3, fp
 80068cc:	f7f9 fcde 	bl	800028c <__adddf3>
 80068d0:	3d01      	subs	r5, #1
 80068d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80068d6:	e9c4 6700 	strd	r6, r7, [r4]
 80068da:	e755      	b.n	8006788 <__kernel_rem_pio2+0x518>
 80068dc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80068e0:	f7f9 fcd4 	bl	800028c <__adddf3>
 80068e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80068e8:	e758      	b.n	800679c <__kernel_rem_pio2+0x52c>
 80068ea:	bf00      	nop
 80068ec:	f3af 8000 	nop.w
	...
 80068f8:	41700000 	.word	0x41700000
 80068fc:	3e700000 	.word	0x3e700000
 8006900:	9b04      	ldr	r3, [sp, #16]
 8006902:	9a04      	ldr	r2, [sp, #16]
 8006904:	601f      	str	r7, [r3, #0]
 8006906:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800690a:	605c      	str	r4, [r3, #4]
 800690c:	609d      	str	r5, [r3, #8]
 800690e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006912:	60d3      	str	r3, [r2, #12]
 8006914:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006918:	6110      	str	r0, [r2, #16]
 800691a:	6153      	str	r3, [r2, #20]
 800691c:	e719      	b.n	8006752 <__kernel_rem_pio2+0x4e2>
 800691e:	bf00      	nop

08006920 <scalbn>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	ec55 4b10 	vmov	r4, r5, d0
 8006926:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800692a:	4606      	mov	r6, r0
 800692c:	462b      	mov	r3, r5
 800692e:	b991      	cbnz	r1, 8006956 <scalbn+0x36>
 8006930:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006934:	4323      	orrs	r3, r4
 8006936:	d03d      	beq.n	80069b4 <scalbn+0x94>
 8006938:	4b35      	ldr	r3, [pc, #212]	@ (8006a10 <scalbn+0xf0>)
 800693a:	4620      	mov	r0, r4
 800693c:	4629      	mov	r1, r5
 800693e:	2200      	movs	r2, #0
 8006940:	f7f9 fe5a 	bl	80005f8 <__aeabi_dmul>
 8006944:	4b33      	ldr	r3, [pc, #204]	@ (8006a14 <scalbn+0xf4>)
 8006946:	429e      	cmp	r6, r3
 8006948:	4604      	mov	r4, r0
 800694a:	460d      	mov	r5, r1
 800694c:	da0f      	bge.n	800696e <scalbn+0x4e>
 800694e:	a328      	add	r3, pc, #160	@ (adr r3, 80069f0 <scalbn+0xd0>)
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	e01e      	b.n	8006994 <scalbn+0x74>
 8006956:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800695a:	4291      	cmp	r1, r2
 800695c:	d10b      	bne.n	8006976 <scalbn+0x56>
 800695e:	4622      	mov	r2, r4
 8006960:	4620      	mov	r0, r4
 8006962:	4629      	mov	r1, r5
 8006964:	f7f9 fc92 	bl	800028c <__adddf3>
 8006968:	4604      	mov	r4, r0
 800696a:	460d      	mov	r5, r1
 800696c:	e022      	b.n	80069b4 <scalbn+0x94>
 800696e:	460b      	mov	r3, r1
 8006970:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006974:	3936      	subs	r1, #54	@ 0x36
 8006976:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800697a:	4296      	cmp	r6, r2
 800697c:	dd0d      	ble.n	800699a <scalbn+0x7a>
 800697e:	2d00      	cmp	r5, #0
 8006980:	a11d      	add	r1, pc, #116	@ (adr r1, 80069f8 <scalbn+0xd8>)
 8006982:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006986:	da02      	bge.n	800698e <scalbn+0x6e>
 8006988:	a11d      	add	r1, pc, #116	@ (adr r1, 8006a00 <scalbn+0xe0>)
 800698a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800698e:	a31a      	add	r3, pc, #104	@ (adr r3, 80069f8 <scalbn+0xd8>)
 8006990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006994:	f7f9 fe30 	bl	80005f8 <__aeabi_dmul>
 8006998:	e7e6      	b.n	8006968 <scalbn+0x48>
 800699a:	1872      	adds	r2, r6, r1
 800699c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80069a0:	428a      	cmp	r2, r1
 80069a2:	dcec      	bgt.n	800697e <scalbn+0x5e>
 80069a4:	2a00      	cmp	r2, #0
 80069a6:	dd08      	ble.n	80069ba <scalbn+0x9a>
 80069a8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80069ac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80069b0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80069b4:	ec45 4b10 	vmov	d0, r4, r5
 80069b8:	bd70      	pop	{r4, r5, r6, pc}
 80069ba:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80069be:	da08      	bge.n	80069d2 <scalbn+0xb2>
 80069c0:	2d00      	cmp	r5, #0
 80069c2:	a10b      	add	r1, pc, #44	@ (adr r1, 80069f0 <scalbn+0xd0>)
 80069c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069c8:	dac1      	bge.n	800694e <scalbn+0x2e>
 80069ca:	a10f      	add	r1, pc, #60	@ (adr r1, 8006a08 <scalbn+0xe8>)
 80069cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069d0:	e7bd      	b.n	800694e <scalbn+0x2e>
 80069d2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80069d6:	3236      	adds	r2, #54	@ 0x36
 80069d8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80069dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80069e0:	4620      	mov	r0, r4
 80069e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006a18 <scalbn+0xf8>)
 80069e4:	4629      	mov	r1, r5
 80069e6:	2200      	movs	r2, #0
 80069e8:	e7d4      	b.n	8006994 <scalbn+0x74>
 80069ea:	bf00      	nop
 80069ec:	f3af 8000 	nop.w
 80069f0:	c2f8f359 	.word	0xc2f8f359
 80069f4:	01a56e1f 	.word	0x01a56e1f
 80069f8:	8800759c 	.word	0x8800759c
 80069fc:	7e37e43c 	.word	0x7e37e43c
 8006a00:	8800759c 	.word	0x8800759c
 8006a04:	fe37e43c 	.word	0xfe37e43c
 8006a08:	c2f8f359 	.word	0xc2f8f359
 8006a0c:	81a56e1f 	.word	0x81a56e1f
 8006a10:	43500000 	.word	0x43500000
 8006a14:	ffff3cb0 	.word	0xffff3cb0
 8006a18:	3c900000 	.word	0x3c900000
 8006a1c:	00000000 	.word	0x00000000

08006a20 <floor>:
 8006a20:	ec51 0b10 	vmov	r0, r1, d0
 8006a24:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006a30:	2e13      	cmp	r6, #19
 8006a32:	460c      	mov	r4, r1
 8006a34:	4605      	mov	r5, r0
 8006a36:	4680      	mov	r8, r0
 8006a38:	dc34      	bgt.n	8006aa4 <floor+0x84>
 8006a3a:	2e00      	cmp	r6, #0
 8006a3c:	da17      	bge.n	8006a6e <floor+0x4e>
 8006a3e:	a332      	add	r3, pc, #200	@ (adr r3, 8006b08 <floor+0xe8>)
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	f7f9 fc22 	bl	800028c <__adddf3>
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f7fa f864 	bl	8000b18 <__aeabi_dcmpgt>
 8006a50:	b150      	cbz	r0, 8006a68 <floor+0x48>
 8006a52:	2c00      	cmp	r4, #0
 8006a54:	da55      	bge.n	8006b02 <floor+0xe2>
 8006a56:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006a5a:	432c      	orrs	r4, r5
 8006a5c:	2500      	movs	r5, #0
 8006a5e:	42ac      	cmp	r4, r5
 8006a60:	4c2b      	ldr	r4, [pc, #172]	@ (8006b10 <floor+0xf0>)
 8006a62:	bf08      	it	eq
 8006a64:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8006a68:	4621      	mov	r1, r4
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	e023      	b.n	8006ab6 <floor+0x96>
 8006a6e:	4f29      	ldr	r7, [pc, #164]	@ (8006b14 <floor+0xf4>)
 8006a70:	4137      	asrs	r7, r6
 8006a72:	ea01 0307 	and.w	r3, r1, r7
 8006a76:	4303      	orrs	r3, r0
 8006a78:	d01d      	beq.n	8006ab6 <floor+0x96>
 8006a7a:	a323      	add	r3, pc, #140	@ (adr r3, 8006b08 <floor+0xe8>)
 8006a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a80:	f7f9 fc04 	bl	800028c <__adddf3>
 8006a84:	2200      	movs	r2, #0
 8006a86:	2300      	movs	r3, #0
 8006a88:	f7fa f846 	bl	8000b18 <__aeabi_dcmpgt>
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d0eb      	beq.n	8006a68 <floor+0x48>
 8006a90:	2c00      	cmp	r4, #0
 8006a92:	bfbe      	ittt	lt
 8006a94:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006a98:	4133      	asrlt	r3, r6
 8006a9a:	18e4      	addlt	r4, r4, r3
 8006a9c:	ea24 0407 	bic.w	r4, r4, r7
 8006aa0:	2500      	movs	r5, #0
 8006aa2:	e7e1      	b.n	8006a68 <floor+0x48>
 8006aa4:	2e33      	cmp	r6, #51	@ 0x33
 8006aa6:	dd0a      	ble.n	8006abe <floor+0x9e>
 8006aa8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006aac:	d103      	bne.n	8006ab6 <floor+0x96>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	f7f9 fbeb 	bl	800028c <__adddf3>
 8006ab6:	ec41 0b10 	vmov	d0, r0, r1
 8006aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006abe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006ac2:	f04f 37ff 	mov.w	r7, #4294967295
 8006ac6:	40df      	lsrs	r7, r3
 8006ac8:	4207      	tst	r7, r0
 8006aca:	d0f4      	beq.n	8006ab6 <floor+0x96>
 8006acc:	a30e      	add	r3, pc, #56	@ (adr r3, 8006b08 <floor+0xe8>)
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	f7f9 fbdb 	bl	800028c <__adddf3>
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2300      	movs	r3, #0
 8006ada:	f7fa f81d 	bl	8000b18 <__aeabi_dcmpgt>
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d0c2      	beq.n	8006a68 <floor+0x48>
 8006ae2:	2c00      	cmp	r4, #0
 8006ae4:	da0a      	bge.n	8006afc <floor+0xdc>
 8006ae6:	2e14      	cmp	r6, #20
 8006ae8:	d101      	bne.n	8006aee <floor+0xce>
 8006aea:	3401      	adds	r4, #1
 8006aec:	e006      	b.n	8006afc <floor+0xdc>
 8006aee:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006af2:	2301      	movs	r3, #1
 8006af4:	40b3      	lsls	r3, r6
 8006af6:	441d      	add	r5, r3
 8006af8:	4545      	cmp	r5, r8
 8006afa:	d3f6      	bcc.n	8006aea <floor+0xca>
 8006afc:	ea25 0507 	bic.w	r5, r5, r7
 8006b00:	e7b2      	b.n	8006a68 <floor+0x48>
 8006b02:	2500      	movs	r5, #0
 8006b04:	462c      	mov	r4, r5
 8006b06:	e7af      	b.n	8006a68 <floor+0x48>
 8006b08:	8800759c 	.word	0x8800759c
 8006b0c:	7e37e43c 	.word	0x7e37e43c
 8006b10:	bff00000 	.word	0xbff00000
 8006b14:	000fffff 	.word	0x000fffff

08006b18 <_init>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	bf00      	nop
 8006b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1e:	bc08      	pop	{r3}
 8006b20:	469e      	mov	lr, r3
 8006b22:	4770      	bx	lr

08006b24 <_fini>:
 8006b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b26:	bf00      	nop
 8006b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b2a:	bc08      	pop	{r3}
 8006b2c:	469e      	mov	lr, r3
 8006b2e:	4770      	bx	lr
